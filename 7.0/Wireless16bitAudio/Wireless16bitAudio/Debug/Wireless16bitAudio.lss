
Wireless16bitAudio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  00002d40  00002dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006c3  00800212  00800212  00002de6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002de6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006e0  00000000  00000000  00002e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000097cb  00000000  00000000  00003538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f5d  00000000  00000000  0000cd03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009674  00000000  00000000  00010c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015e4  00000000  00000000  0001a2d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001cbc3  00000000  00000000  0001b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000558e  00000000  00000000  0003847b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c0  00000000  00000000  0003da09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009553  00000000  00000000  0003e0c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__vector_1>
       8:	b6 c0       	rjmp	.+364    	; 0x176 <__bad_interrupt>
       a:	00 00       	nop
       c:	b4 c0       	rjmp	.+360    	; 0x176 <__bad_interrupt>
       e:	00 00       	nop
      10:	b2 c0       	rjmp	.+356    	; 0x176 <__bad_interrupt>
      12:	00 00       	nop
      14:	b0 c0       	rjmp	.+352    	; 0x176 <__bad_interrupt>
      16:	00 00       	nop
      18:	ae c0       	rjmp	.+348    	; 0x176 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ac c0       	rjmp	.+344    	; 0x176 <__bad_interrupt>
      1e:	00 00       	nop
      20:	aa c0       	rjmp	.+340    	; 0x176 <__bad_interrupt>
      22:	00 00       	nop
      24:	a8 c0       	rjmp	.+336    	; 0x176 <__bad_interrupt>
      26:	00 00       	nop
      28:	a6 c0       	rjmp	.+332    	; 0x176 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a4 c0       	rjmp	.+328    	; 0x176 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a2 c0       	rjmp	.+324    	; 0x176 <__bad_interrupt>
      32:	00 00       	nop
      34:	a0 c0       	rjmp	.+320    	; 0x176 <__bad_interrupt>
      36:	00 00       	nop
      38:	9e c0       	rjmp	.+316    	; 0x176 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9c c0       	rjmp	.+312    	; 0x176 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9a c0       	rjmp	.+308    	; 0x176 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <__vector_17>
      48:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__vector_18>
      4c:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__vector_19>
      50:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__vector_20>
      54:	90 c0       	rjmp	.+288    	; 0x176 <__bad_interrupt>
      56:	00 00       	nop
      58:	8e c0       	rjmp	.+284    	; 0x176 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8c c0       	rjmp	.+280    	; 0x176 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8a c0       	rjmp	.+276    	; 0x176 <__bad_interrupt>
      62:	00 00       	nop
      64:	88 c0       	rjmp	.+272    	; 0x176 <__bad_interrupt>
      66:	00 00       	nop
      68:	86 c0       	rjmp	.+268    	; 0x176 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	84 c0       	rjmp	.+264    	; 0x176 <__bad_interrupt>
      6e:	00 00       	nop
      70:	82 c0       	rjmp	.+260    	; 0x176 <__bad_interrupt>
      72:	00 00       	nop
      74:	80 c0       	rjmp	.+256    	; 0x176 <__bad_interrupt>
      76:	00 00       	nop
      78:	7e c0       	rjmp	.+252    	; 0x176 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7c c0       	rjmp	.+248    	; 0x176 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__vector_32>
      84:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__vector_33>
      88:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__vector_34>
      8c:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__vector_35>
      90:	7c c3       	rjmp	.+1784   	; 0x78a <__vector_36>
      92:	00 00       	nop
      94:	70 c0       	rjmp	.+224    	; 0x176 <__bad_interrupt>
      96:	00 00       	nop
      98:	6e c0       	rjmp	.+220    	; 0x176 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6c c0       	rjmp	.+216    	; 0x176 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6a c0       	rjmp	.+212    	; 0x176 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	68 c0       	rjmp	.+208    	; 0x176 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__vector_42>
      ac:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__vector_43>
      b0:	0c 94 8d 10 	jmp	0x211a	; 0x211a <__vector_44>
      b4:	0c 94 06 10 	jmp	0x200c	; 0x200c <__vector_45>
      b8:	5e c0       	rjmp	.+188    	; 0x176 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <__vector_47>
      c0:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__vector_48>
      c4:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__vector_49>
      c8:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__vector_50>
      cc:	54 c0       	rjmp	.+168    	; 0x176 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	52 c0       	rjmp	.+164    	; 0x176 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	50 c0       	rjmp	.+160    	; 0x176 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4e c0       	rjmp	.+156    	; 0x176 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4c c0       	rjmp	.+152    	; 0x176 <__bad_interrupt>
      de:	00 00       	nop
      e0:	4a c0       	rjmp	.+148    	; 0x176 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	48 c0       	rjmp	.+144    	; 0x176 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	46 c0       	rjmp	.+140    	; 0x176 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	44 c0       	rjmp	.+136    	; 0x176 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	42 c0       	rjmp	.+132    	; 0x176 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	40 c0       	rjmp	.+128    	; 0x176 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3e c0       	rjmp	.+124    	; 0x176 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3c c0       	rjmp	.+120    	; 0x176 <__bad_interrupt>
      fe:	00 00       	nop
     100:	3a c0       	rjmp	.+116    	; 0x176 <__bad_interrupt>
     102:	00 00       	nop
     104:	38 c0       	rjmp	.+112    	; 0x176 <__bad_interrupt>
     106:	00 00       	nop
     108:	36 c0       	rjmp	.+108    	; 0x176 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	34 c0       	rjmp	.+104    	; 0x176 <__bad_interrupt>
     10e:	00 00       	nop
     110:	32 c0       	rjmp	.+100    	; 0x176 <__bad_interrupt>
     112:	00 00       	nop
     114:	30 c0       	rjmp	.+96     	; 0x176 <__bad_interrupt>
     116:	00 00       	nop
     118:	2e c0       	rjmp	.+92     	; 0x176 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2c c0       	rjmp	.+88     	; 0x176 <__bad_interrupt>
     11e:	00 00       	nop
     120:	2a c0       	rjmp	.+84     	; 0x176 <__bad_interrupt>
     122:	00 00       	nop
     124:	28 c0       	rjmp	.+80     	; 0x176 <__bad_interrupt>
     126:	00 00       	nop
     128:	26 c0       	rjmp	.+76     	; 0x176 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	24 c0       	rjmp	.+72     	; 0x176 <__bad_interrupt>
     12e:	00 00       	nop
     130:	22 c0       	rjmp	.+68     	; 0x176 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e0 e4       	ldi	r30, 0x40	; 64
     14c:	fd e2       	ldi	r31, 0x2D	; 45
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a2 31       	cpi	r26, 0x12	; 18
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	28 e0       	ldi	r18, 0x08	; 8
     160:	a2 e1       	ldi	r26, 0x12	; 18
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a5 3d       	cpi	r26, 0xD5	; 213
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	0e 94 38 13 	call	0x2670	; 0x2670 <main>
     172:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <_exit>

00000176 <__bad_interrupt>:
     176:	44 cf       	rjmp	.-376    	; 0x0 <__vectors>

00000178 <common_tc_read_count>:
     178:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <tmr_read_count>
     17c:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <timer_mul_var>
     180:	22 23       	and	r18, r18
     182:	d9 f0       	breq	.+54     	; 0x1ba <common_tc_read_count+0x42>
     184:	40 91 ca 08 	lds	r20, 0x08CA	; 0x8008ca <timer_multiplier>
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <timer_mul_var>
     18e:	64 2f       	mov	r22, r20
     190:	73 2f       	mov	r23, r19
     192:	0e 94 43 14 	call	0x2886	; 0x2886 <__udivmodhi4>
     196:	fb 01       	movw	r30, r22
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	9f ef       	ldi	r25, 0xFF	; 255
     19c:	64 2f       	mov	r22, r20
     19e:	73 2f       	mov	r23, r19
     1a0:	0e 94 43 14 	call	0x2886	; 0x2886 <__udivmodhi4>
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	62 9f       	mul	r22, r18
     1a8:	c0 01       	movw	r24, r0
     1aa:	63 9f       	mul	r22, r19
     1ac:	90 0d       	add	r25, r0
     1ae:	72 9f       	mul	r23, r18
     1b0:	90 0d       	add	r25, r0
     1b2:	11 24       	eor	r1, r1
     1b4:	8e 0f       	add	r24, r30
     1b6:	9f 1f       	adc	r25, r31
     1b8:	08 95       	ret
     1ba:	60 91 ca 08 	lds	r22, 0x08CA	; 0x8008ca <timer_multiplier>
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	0e 94 43 14 	call	0x2886	; 0x2886 <__udivmodhi4>
     1c4:	cb 01       	movw	r24, r22
     1c6:	08 95       	ret

000001c8 <common_tc_compare_stop>:
     1c8:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <tmr_disable_cc_interrupt>
     1cc:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <save_cpu_interrupt>
     1d0:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
     1d4:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <__data_end+0x1>
     1d8:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end+0x2>
     1dc:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x3>
     1e0:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <compare_value+0x1>
     1e4:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <compare_value>
     1e8:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <restore_cpu_interrupt>

000001ec <common_tc_overflow_stop>:
     1ec:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <tmr_disable_ovf_interrupt>
     1f0:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <timer_mul_var>
     1f4:	08 95       	ret

000001f6 <common_tc_stop>:
     1f6:	e8 df       	rcall	.-48     	; 0x1c8 <common_tc_compare_stop>
     1f8:	f9 df       	rcall	.-14     	; 0x1ec <common_tc_overflow_stop>
     1fa:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <tmr_stop>

000001fe <common_tc_delay>:
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	ec 01       	movw	r28, r24
     208:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <tmr_read_count>
     20c:	8c 01       	movw	r16, r24
     20e:	be 01       	movw	r22, r28
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	20 91 ca 08 	lds	r18, 0x08CA	; 0x8008ca <timer_multiplier>
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	0e 94 34 14 	call	0x2868	; 0x2868 <__mulsi3>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	a8 01       	movw	r20, r16
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	48 0f       	add	r20, r24
     22e:	59 1f       	adc	r21, r25
     230:	6a 1f       	adc	r22, r26
     232:	7b 1f       	adc	r23, r27
     234:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <__data_end>
     238:	50 93 13 02 	sts	0x0213, r21	; 0x800213 <__data_end+0x1>
     23c:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <__data_end+0x2>
     240:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <__data_end+0x3>
     244:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <__data_end>
     248:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <__data_end+0x1>
     24c:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end+0x2>
     250:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x3>
     254:	ab 01       	movw	r20, r22
     256:	66 27       	eor	r22, r22
     258:	77 27       	eor	r23, r23
     25a:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <__data_end>
     25e:	50 93 13 02 	sts	0x0213, r21	; 0x800213 <__data_end+0x1>
     262:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <__data_end+0x2>
     266:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <__data_end+0x3>
     26a:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <__data_end>
     26e:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <__data_end+0x1>
     272:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end+0x2>
     276:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x3>
     27a:	41 15       	cp	r20, r1
     27c:	51 05       	cpc	r21, r1
     27e:	61 05       	cpc	r22, r1
     280:	71 05       	cpc	r23, r1
     282:	91 f0       	breq	.+36     	; 0x2a8 <common_tc_delay+0xaa>
     284:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <__data_end>
     288:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <__data_end+0x1>
     28c:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end+0x2>
     290:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x3>
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	08 0f       	add	r16, r24
     298:	19 1f       	adc	r17, r25
     29a:	10 93 18 02 	sts	0x0218, r17	; 0x800218 <compare_value+0x1>
     29e:	00 93 17 02 	sts	0x0217, r16	; 0x800217 <compare_value>
     2a2:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <tmr_disable_cc_interrupt>
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <common_tc_delay+0xba>
     2a8:	08 0f       	add	r16, r24
     2aa:	19 1f       	adc	r17, r25
     2ac:	10 93 18 02 	sts	0x0218, r17	; 0x800218 <compare_value+0x1>
     2b0:	00 93 17 02 	sts	0x0217, r16	; 0x800217 <compare_value>
     2b4:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <tmr_enable_cc_interrupt>
     2b8:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <compare_value>
     2bc:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <compare_value+0x1>
     2c0:	84 36       	cpi	r24, 0x64	; 100
     2c2:	91 05       	cpc	r25, r1
     2c4:	30 f4       	brcc	.+12     	; 0x2d2 <common_tc_delay+0xd4>
     2c6:	8c 59       	subi	r24, 0x9C	; 156
     2c8:	9f 4f       	sbci	r25, 0xFF	; 255
     2ca:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <compare_value+0x1>
     2ce:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <compare_value>
     2d2:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <compare_value>
     2d6:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <compare_value+0x1>
     2da:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <tmr_write_cmpreg>
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	08 95       	ret

000002e8 <common_tc_init>:
     2e8:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <timer_mul_var>
     2ec:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <tmr_init>
     2f0:	80 93 ca 08 	sts	0x08CA, r24	; 0x8008ca <timer_multiplier>
     2f4:	08 95       	ret

000002f6 <tmr_ovf_callback>:
     2f6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     2fa:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
     2fe:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <__data_end+0x2>
     302:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <__data_end+0x3>
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	a1 05       	cpc	r26, r1
     30a:	b1 05       	cpc	r27, r1
     30c:	c9 f0       	breq	.+50     	; 0x340 <tmr_ovf_callback+0x4a>
     30e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     312:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
     316:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <__data_end+0x2>
     31a:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <__data_end+0x3>
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	a1 09       	sbc	r26, r1
     322:	b1 09       	sbc	r27, r1
     324:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
     328:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x1>
     32c:	a0 93 14 02 	sts	0x0214, r26	; 0x800214 <__data_end+0x2>
     330:	b0 93 15 02 	sts	0x0215, r27	; 0x800215 <__data_end+0x3>
     334:	00 97       	sbiw	r24, 0x00	; 0
     336:	a1 05       	cpc	r26, r1
     338:	b1 05       	cpc	r27, r1
     33a:	11 f4       	brne	.+4      	; 0x340 <tmr_ovf_callback+0x4a>
     33c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <tmr_enable_cc_interrupt>
     340:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <timer_mul_var>
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <timer_mul_var>
     34a:	90 91 ca 08 	lds	r25, 0x08CA	; 0x8008ca <timer_multiplier>
     34e:	89 17       	cp	r24, r25
     350:	48 f0       	brcs	.+18     	; 0x364 <tmr_ovf_callback+0x6e>
     352:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <timer_mul_var>
     356:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <common_tc_ovf_callback>
     35a:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <common_tc_ovf_callback+0x1>
     35e:	30 97       	sbiw	r30, 0x00	; 0
     360:	09 f0       	breq	.+2      	; 0x364 <tmr_ovf_callback+0x6e>
     362:	19 95       	eicall
     364:	08 95       	ret

00000366 <tmr_cca_callback>:
     366:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <tmr_disable_cc_interrupt>
     36a:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <common_tc_cca_callback>
     36e:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <common_tc_cca_callback+0x1>
     372:	30 97       	sbiw	r30, 0x00	; 0
     374:	09 f0       	breq	.+2      	; 0x378 <tmr_cca_callback+0x12>
     376:	19 95       	eicall
     378:	08 95       	ret

0000037a <set_common_tc_overflow_callback>:
     37a:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <common_tc_ovf_callback+0x1>
     37e:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <common_tc_ovf_callback>
     382:	08 95       	ret

00000384 <set_common_tc_expiry_callback>:
     384:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <common_tc_cca_callback+0x1>
     388:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <common_tc_cca_callback>
     38c:	08 95       	ret

0000038e <init_SPI_mstr>:


/* Initiate SPI module */
void init_SPI_mstr(void){

	sysclk_enable_module( POWER_RED_REG0, PRSPI_bm );
     38e:	64 e0       	ldi	r22, 0x04	; 4
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	2d d0       	rcall	.+90     	; 0x3ee <sysclk_enable_module>
	
	/* Set MOSI and SCK output, all others input */
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK);
     394:	84 b1       	in	r24, 0x04	; 4
     396:	86 60       	ori	r24, 0x06	; 6
     398:	84 b9       	out	0x04, r24	; 4
	/*	No end of tx irq, enable SPI, Master, set clock rate fck/2, dord MSB first, */
	SPCR |= ((0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|
     39a:	8c b5       	in	r24, 0x2c	; 44
     39c:	80 65       	ori	r24, 0x50	; 80
     39e:	8c bd       	out	0x2c, r24	; 44
	(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0));  // SPI enable, Master, f/2 with TxRx OSC
	SPSR |= (0<<SPI2X); //double speed enabled
     3a0:	8d b5       	in	r24, 0x2d	; 45
     3a2:	8d bd       	out	0x2d, r24	; 45
	DDRD = (1<<DDD5);//SS outputs
     3a4:	80 e2       	ldi	r24, 0x20	; 32
     3a6:	8a b9       	out	0x0a, r24	; 10
	
	PORTD |= (1<<SS2); //Put Slave Select high
     3a8:	5d 9a       	sbi	0x0b, 5	; 11
     3aa:	08 95       	ret

000003ac <SPI_Transmit_no_IRQ>:
	
}

uint8_t SPI_Transmit_no_IRQ(uint8_t Data)
{	
	SPDR = Data;
     3ac:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){};
     3ae:	0d b4       	in	r0, 0x2d	; 45
     3b0:	07 fe       	sbrs	r0, 7
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <SPI_Transmit_no_IRQ+0x2>
	return SPDR;
     3b4:	8e b5       	in	r24, 0x2e	; 46
}
     3b6:	08 95       	ret

000003b8 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	1f 92       	push	r1
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     3c2:	8f ef       	ldi	r24, 0xFF	; 255
     3c4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     3c8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3cc:	8f b7       	in	r24, 0x3f	; 63
     3ce:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     3d0:	f8 94       	cli
	return flags;
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     3d4:	5f 93       	push	r21
     3d6:	50 e8       	ldi	r21, 0x80	; 128
     3d8:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     3dc:	50 e0       	ldi	r21, 0x00	; 0
     3de:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     3e2:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3e4:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     3e6:	0f 90       	pop	r0
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	1f 92       	push	r1
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3f8:	9f b7       	in	r25, 0x3f	; 63
     3fa:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     3fc:	f8 94       	cli
	return flags;
     3fe:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     400:	82 30       	cpi	r24, 0x02	; 2
     402:	40 f4       	brcc	.+16     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		*(reg + port)  &= ~id;
     404:	e8 2f       	mov	r30, r24
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	ec 59       	subi	r30, 0x9C	; 156
     40a:	ff 4f       	sbci	r31, 0xFF	; 255
     40c:	60 95       	com	r22
     40e:	80 81       	ld	r24, Z
     410:	68 23       	and	r22, r24
     412:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     414:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     416:	0f 90       	pop	r0
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret

0000041e <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	1f 92       	push	r1
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     428:	9f b7       	in	r25, 0x3f	; 63
     42a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     42c:	f8 94       	cli
	return flags;
     42e:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     430:	82 30       	cpi	r24, 0x02	; 2
     432:	38 f4       	brcc	.+14     	; 0x442 <sysclk_disable_module+0x24>
		*(reg + port) |= id;
     434:	e8 2f       	mov	r30, r24
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	ec 59       	subi	r30, 0x9C	; 156
     43a:	ff 4f       	sbci	r31, 0xFF	; 255
     43c:	80 81       	ld	r24, Z
     43e:	68 2b       	or	r22, r24
     440:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     442:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     444:	0f 90       	pop	r0
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
     44c:	ef 92       	push	r14
     44e:	ff 92       	push	r15
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	7c 01       	movw	r14, r24
     45a:	8b 01       	movw	r16, r22
     45c:	ea 01       	movw	r28, r20
	while (len) {
     45e:	20 97       	sbiw	r28, 0x00	; 0
     460:	39 f0       	breq	.+14     	; 0x470 <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     462:	f8 01       	movw	r30, r16
     464:	61 91       	ld	r22, Z+
     466:	8f 01       	movw	r16, r30
     468:	c7 01       	movw	r24, r14
     46a:	54 d0       	rcall	.+168    	; 0x514 <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
     46c:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
     46e:	c9 f7       	brne	.-14     	; 0x462 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	ff 90       	pop	r15
     47c:	ef 90       	pop	r14
     47e:	08 95       	ret

00000480 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	7c 01       	movw	r14, r24
     48e:	8b 01       	movw	r16, r22
     490:	ea 01       	movw	r28, r20
	while (len) {
     492:	20 97       	sbiw	r28, 0x00	; 0
     494:	39 f0       	breq	.+14     	; 0x4a4 <usart_serial_read_packet+0x24>
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
     496:	c7 01       	movw	r24, r14
     498:	44 d0       	rcall	.+136    	; 0x522 <usart_getchar>
     49a:	f8 01       	movw	r30, r16
     49c:	81 93       	st	Z+, r24
     49e:	8f 01       	movw	r16, r30
		usart_serial_getchar(usart, data);
		len--;
     4a0:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
     4a2:	c9 f7       	brne	.-14     	; 0x496 <usart_serial_read_packet+0x16>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	08 95       	ret

000004b4 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	1f 92       	push	r1
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     4be:	80 91 9b 08 	lds	r24, 0x089B	; 0x80089b <stdio_base>
     4c2:	90 91 9c 08 	lds	r25, 0x089C	; 0x80089c <stdio_base+0x1>
     4c6:	e0 91 97 08 	lds	r30, 0x0897	; 0x800897 <ptr_get>
     4ca:	f0 91 98 08 	lds	r31, 0x0898	; 0x800898 <ptr_get+0x1>
     4ce:	be 01       	movw	r22, r28
     4d0:	6f 5f       	subi	r22, 0xFF	; 255
     4d2:	7f 4f       	sbci	r23, 0xFF	; 255
     4d4:	19 95       	eicall
	return c;
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
}
     4d8:	08 2e       	mov	r0, r24
     4da:	00 0c       	add	r0, r0
     4dc:	99 0b       	sbc	r25, r25
     4de:	0f 90       	pop	r0
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     4e6:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     4e8:	80 91 9b 08 	lds	r24, 0x089B	; 0x80089b <stdio_base>
     4ec:	90 91 9c 08 	lds	r25, 0x089C	; 0x80089c <stdio_base+0x1>
     4f0:	e0 91 99 08 	lds	r30, 0x0899	; 0x800899 <ptr_put>
     4f4:	f0 91 9a 08 	lds	r31, 0x089A	; 0x80089a <ptr_put+0x1>
     4f8:	19 95       	eicall
     4fa:	99 23       	and	r25, r25
     4fc:	1c f0       	brlt	.+6      	; 0x504 <_write+0x1e>
		return -1;
	}
	return 1;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     508:	08 95       	ret

0000050a <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     50a:	2c 9a       	sbi	0x05, 4	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     50c:	24 9a       	sbi	0x04, 4	; 4
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     50e:	6c 98       	cbi	0x0d, 4	; 13
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     510:	74 9a       	sbi	0x0e, 4	; 14
     512:	08 95       	ret

00000514 <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
     514:	fc 01       	movw	r30, r24
     516:	90 81       	ld	r25, Z
     518:	95 ff       	sbrs	r25, 5
     51a:	fd cf       	rjmp	.-6      	; 0x516 <usart_putchar+0x2>
     51c:	66 83       	std	Z+6, r22	; 0x06
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	08 95       	ret

00000522 <usart_getchar>:
     522:	fc 01       	movw	r30, r24
     524:	90 81       	ld	r25, Z
     526:	99 23       	and	r25, r25
     528:	ec f7       	brge	.-6      	; 0x524 <usart_getchar+0x2>
     52a:	86 81       	ldd	r24, Z+6	; 0x06
     52c:	08 95       	ret

0000052e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     52e:	8f 92       	push	r8
     530:	9f 92       	push	r9
     532:	af 92       	push	r10
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	ec 01       	movw	r28, r24
     548:	6a 01       	movw	r12, r20
     54a:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     54c:	c9 01       	movw	r24, r18
     54e:	b8 01       	movw	r22, r16
     550:	68 94       	set
     552:	12 f8       	bld	r1, 2
     554:	96 95       	lsr	r25
     556:	87 95       	ror	r24
     558:	77 95       	ror	r23
     55a:	67 95       	ror	r22
     55c:	16 94       	lsr	r1
     55e:	d1 f7       	brne	.-12     	; 0x554 <usart_set_baudrate+0x26>
	/*if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
		min_rate /= 2;
	}*/

	if( baud <= max_rate && baud > max_rate/2 ){
     560:	6c 15       	cp	r22, r12
     562:	7d 05       	cpc	r23, r13
     564:	8e 05       	cpc	r24, r14
     566:	9f 05       	cpc	r25, r15
     568:	78 f1       	brcs	.+94     	; 0x5c8 <usart_set_baudrate+0x9a>
     56a:	48 01       	movw	r8, r16
     56c:	59 01       	movw	r10, r18
     56e:	68 94       	set
     570:	13 f8       	bld	r1, 3
     572:	b6 94       	lsr	r11
     574:	a7 94       	ror	r10
     576:	97 94       	ror	r9
     578:	87 94       	ror	r8
     57a:	16 94       	lsr	r1
     57c:	d1 f7       	brne	.-12     	; 0x572 <usart_set_baudrate+0x44>
     57e:	8c 14       	cp	r8, r12
     580:	9d 04       	cpc	r9, r13
     582:	ae 04       	cpc	r10, r14
     584:	bf 04       	cpc	r11, r15
     586:	20 f5       	brcc	.+72     	; 0x5d0 <usart_set_baudrate+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_double_baud_enable(USART_t *usart)
{
	usart->UCSRnA |=  USART_U2X_bm;
     588:	e8 81       	ld	r30, Y
     58a:	e2 60       	ori	r30, 0x02	; 2
     58c:	e8 83       	st	Y, r30
     58e:	20 c0       	rjmp	.+64     	; 0x5d0 <usart_set_baudrate+0xa2>
	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     590:	28 81       	ld	r18, Y
     592:	21 ff       	sbrs	r18, 1
     594:	0a c0       	rjmp	.+20     	; 0x5aa <usart_set_baudrate+0x7c>
		//baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     596:	a7 01       	movw	r20, r14
     598:	96 01       	movw	r18, r12
     59a:	0e 94 57 14 	call	0x28ae	; 0x28ae <__udivmodsi4>
     59e:	da 01       	movw	r26, r20
     5a0:	c9 01       	movw	r24, r18
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	a1 09       	sbc	r26, r1
     5a6:	b1 09       	sbc	r27, r1
     5a8:	0b c0       	rjmp	.+22     	; 0x5c0 <usart_set_baudrate+0x92>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     5aa:	c5 01       	movw	r24, r10
     5ac:	b4 01       	movw	r22, r8
     5ae:	a7 01       	movw	r20, r14
     5b0:	96 01       	movw	r18, r12
     5b2:	0e 94 57 14 	call	0x28ae	; 0x28ae <__udivmodsi4>
     5b6:	da 01       	movw	r26, r20
     5b8:	c9 01       	movw	r24, r18
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	a1 09       	sbc	r26, r1
     5be:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     5c0:	9d 83       	std	Y+5, r25	; 0x05
     5c2:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	13 c0       	rjmp	.+38     	; 0x5ee <usart_set_baudrate+0xc0>
	if( baud <= max_rate && baud > max_rate/2 ){
		usart_double_baud_enable(usart);
	}
    
	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	11 c0       	rjmp	.+34     	; 0x5ee <usart_set_baudrate+0xc0>
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	0f c0       	rjmp	.+30     	; 0x5ee <usart_set_baudrate+0xc0>

	if( baud <= max_rate && baud > max_rate/2 ){
		usart_double_baud_enable(usart);
	}
    
	if ((baud > max_rate) || (baud < min_rate)) {
     5d0:	0f 2e       	mov	r0, r31
     5d2:	f3 e1       	ldi	r31, 0x13	; 19
     5d4:	36 95       	lsr	r19
     5d6:	27 95       	ror	r18
     5d8:	17 95       	ror	r17
     5da:	07 95       	ror	r16
     5dc:	fa 95       	dec	r31
     5de:	d1 f7       	brne	.-12     	; 0x5d4 <usart_set_baudrate+0xa6>
     5e0:	f0 2d       	mov	r31, r0
     5e2:	c0 16       	cp	r12, r16
     5e4:	d1 06       	cpc	r13, r17
     5e6:	e2 06       	cpc	r14, r18
     5e8:	f3 06       	cpc	r15, r19
     5ea:	90 f6       	brcc	.-92     	; 0x590 <usart_set_baudrate+0x62>
     5ec:	ef cf       	rjmp	.-34     	; 0x5cc <usart_set_baudrate+0x9e>
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	bf 90       	pop	r11
     600:	af 90       	pop	r10
     602:	9f 90       	pop	r9
     604:	8f 90       	pop	r8
     606:	08 95       	ret

00000608 <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	ec 01       	movw	r28, r24
     612:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTA0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     614:	80 3c       	cpi	r24, 0xC0	; 192
     616:	91 05       	cpc	r25, r1
     618:	21 f4       	brne	.+8      	; 0x622 <usart_init_rs232+0x1a>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     61a:	62 e0       	ldi	r22, 0x02	; 2
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	e7 de       	rcall	.-562    	; 0x3ee <sysclk_enable_module>
     620:	06 c0       	rjmp	.+12     	; 0x62e <usart_init_rs232+0x26>
	}
#endif
#ifdef USARTA1
	if ((uintptr_t)usart == (uintptr_t)&UCSR1A) {
     622:	88 3c       	cpi	r24, 0xC8	; 200
     624:	91 05       	cpc	r25, r1
     626:	19 f4       	brne	.+6      	; 0x62e <usart_init_rs232+0x26>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	e0 de       	rcall	.-576    	; 0x3ee <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	8f 73       	andi	r24, 0x3F	; 63
     632:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     634:	f8 01       	movw	r30, r16
     636:	26 81       	ldd	r18, Z+6	; 0x06
     638:	35 81       	ldd	r19, Z+5	; 0x05
     63a:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	48 2f       	mov	r20, r24
     640:	43 70       	andi	r20, 0x03	; 3
     642:	44 0f       	add	r20, r20
     644:	99 7f       	andi	r25, 0xF9	; 249
     646:	94 2b       	or	r25, r20
     648:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     64a:	99 81       	ldd	r25, Y+1	; 0x01
     64c:	84 70       	andi	r24, 0x04	; 4
     64e:	88 0f       	add	r24, r24
     650:	88 0f       	add	r24, r24
     652:	9b 7f       	andi	r25, 0xFB	; 251
     654:	89 2b       	or	r24, r25
     656:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     658:	8a 81       	ldd	r24, Y+2	; 0x02
     65a:	8f 7c       	andi	r24, 0xCF	; 207
     65c:	83 2b       	or	r24, r19
     65e:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	97 7f       	andi	r25, 0xF7	; 247
     664:	82 2f       	mov	r24, r18
     666:	88 0f       	add	r24, r24
     668:	88 0f       	add	r24, r24
     66a:	88 0f       	add	r24, r24
     66c:	89 2b       	or	r24, r25
     66e:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     670:	40 81       	ld	r20, Z
     672:	51 81       	ldd	r21, Z+1	; 0x01
     674:	62 81       	ldd	r22, Z+2	; 0x02
     676:	73 81       	ldd	r23, Z+3	; 0x03
     678:	00 e0       	ldi	r16, 0x00	; 0
     67a:	14 e2       	ldi	r17, 0x24	; 36
     67c:	24 ef       	ldi	r18, 0xF4	; 244
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	ce 01       	movw	r24, r28
     682:	55 df       	rcall	.-342    	; 0x52e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     684:	99 81       	ldd	r25, Y+1	; 0x01
     686:	98 60       	ori	r25, 0x08	; 8
     688:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     68a:	99 81       	ldd	r25, Y+1	; 0x01
     68c:	90 61       	ori	r25, 0x10	; 16
     68e:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	08 95       	ret

0000069a <usart_serial_getchar>:
	if (back >= 1) {
		return c;
	} else {
		return (-1);
	}
}
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	eb 01       	movw	r28, r22
     6a0:	40 df       	rcall	.-384    	; 0x522 <usart_getchar>
     6a2:	88 83       	st	Y, r24
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	08 95       	ret

000006aa <usart_serial_putchar>:
     6aa:	34 cf       	rjmp	.-408    	; 0x514 <usart_putchar>
     6ac:	08 95       	ret

000006ae <sio2host_init>:
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	27 97       	sbiw	r28, 0x07	; 7
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	08 ec       	ldi	r16, 0xC8	; 200
     6c8:	10 e0       	ldi	r17, 0x00	; 0
     6ca:	10 93 9c 08 	sts	0x089C, r17	; 0x80089c <stdio_base+0x1>
     6ce:	00 93 9b 08 	sts	0x089B, r16	; 0x80089b <stdio_base>
     6d2:	85 e5       	ldi	r24, 0x55	; 85
     6d4:	93 e0       	ldi	r25, 0x03	; 3
     6d6:	90 93 9a 08 	sts	0x089A, r25	; 0x80089a <ptr_put+0x1>
     6da:	80 93 99 08 	sts	0x0899, r24	; 0x800899 <ptr_put>
     6de:	8d e4       	ldi	r24, 0x4D	; 77
     6e0:	93 e0       	ldi	r25, 0x03	; 3
     6e2:	90 93 98 08 	sts	0x0898, r25	; 0x800898 <ptr_get+0x1>
     6e6:	80 93 97 08 	sts	0x0897, r24	; 0x800897 <ptr_get>
     6ea:	ea e0       	ldi	r30, 0x0A	; 10
     6ec:	f2 e0       	ldi	r31, 0x02	; 2
     6ee:	84 81       	ldd	r24, Z+4	; 0x04
     6f0:	8d 83       	std	Y+5, r24	; 0x05
     6f2:	85 81       	ldd	r24, Z+5	; 0x05
     6f4:	8e 83       	std	Y+6, r24	; 0x06
     6f6:	86 81       	ldd	r24, Z+6	; 0x06
     6f8:	8f 83       	std	Y+7, r24	; 0x07
     6fa:	80 81       	ld	r24, Z
     6fc:	91 81       	ldd	r25, Z+1	; 0x01
     6fe:	a2 81       	ldd	r26, Z+2	; 0x02
     700:	b3 81       	ldd	r27, Z+3	; 0x03
     702:	89 83       	std	Y+1, r24	; 0x01
     704:	9a 83       	std	Y+2, r25	; 0x02
     706:	ab 83       	std	Y+3, r26	; 0x03
     708:	bc 83       	std	Y+4, r27	; 0x04
     70a:	be 01       	movw	r22, r28
     70c:	6f 5f       	subi	r22, 0xFF	; 255
     70e:	7f 4f       	sbci	r23, 0xFF	; 255
     710:	88 ec       	ldi	r24, 0xC8	; 200
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	79 df       	rcall	.-270    	; 0x608 <usart_init_rs232>
     716:	6a e5       	ldi	r22, 0x5A	; 90
     718:	72 e0       	ldi	r23, 0x02	; 2
     71a:	83 e7       	ldi	r24, 0x73	; 115
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <fdevopen>
     722:	f8 01       	movw	r30, r16
     724:	81 81       	ldd	r24, Z+1	; 0x01
     726:	80 68       	ori	r24, 0x80	; 128
     728:	81 83       	std	Z+1, r24	; 0x01
     72a:	27 96       	adiw	r28, 0x07	; 7
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <sio2host_tx>:
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	8c 01       	movw	r16, r24
     74c:	f6 2e       	mov	r15, r22
     74e:	c6 2f       	mov	r28, r22
     750:	d0 e0       	ldi	r29, 0x00	; 0
     752:	ae 01       	movw	r20, r28
     754:	b8 01       	movw	r22, r16
     756:	88 ec       	ldi	r24, 0xC8	; 200
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	78 de       	rcall	.-784    	; 0x44c <usart_serial_write_packet>
     75c:	81 11       	cpse	r24, r1
     75e:	f9 cf       	rjmp	.-14     	; 0x752 <sio2host_tx+0x12>
     760:	8f 2d       	mov	r24, r15
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	08 95       	ret

0000076e <sio2host_putchar>:
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	1f 92       	push	r1
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	89 83       	std	Y+1, r24	; 0x01
     77a:	61 e0       	ldi	r22, 0x01	; 1
     77c:	ce 01       	movw	r24, r28
     77e:	01 96       	adiw	r24, 0x01	; 1
     780:	df df       	rcall	.-66     	; 0x740 <sio2host_tx>
     782:	0f 90       	pop	r0
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <__vector_36>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
     78a:	1f 92       	push	r1
     78c:	0f 92       	push	r0
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	0f 92       	push	r0
     792:	11 24       	eor	r1, r1
     794:	0b b6       	in	r0, 0x3b	; 59
     796:	0f 92       	push	r0
     798:	2f 93       	push	r18
     79a:	3f 93       	push	r19
     79c:	4f 93       	push	r20
     79e:	5f 93       	push	r21
     7a0:	6f 93       	push	r22
     7a2:	7f 93       	push	r23
     7a4:	8f 93       	push	r24
     7a6:	9f 93       	push	r25
     7a8:	af 93       	push	r26
     7aa:	bf 93       	push	r27
     7ac:	ef 93       	push	r30
     7ae:	ff 93       	push	r31
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	1f 92       	push	r1
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
     7ba:	41 e0       	ldi	r20, 0x01	; 1
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	be 01       	movw	r22, r28
     7c0:	6f 5f       	subi	r22, 0xFF	; 255
     7c2:	7f 4f       	sbci	r23, 0xFF	; 255
     7c4:	88 ec       	ldi	r24, 0xC8	; 200
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	5b de       	rcall	.-842    	; 0x480 <usart_serial_read_packet>
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     7ca:	f8 94       	cli

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
     7cc:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <serial_rx_buf_tail>
     7d0:	e8 2f       	mov	r30, r24
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	e2 5e       	subi	r30, 0xE2	; 226
     7d6:	fd 4f       	sbci	r31, 0xFD	; 253
     7d8:	99 81       	ldd	r25, Y+1	; 0x01
     7da:	90 83       	st	Z, r25

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
     7dc:	8b 39       	cpi	r24, 0x9B	; 155
     7de:	19 f4       	brne	.+6      	; 0x7e6 <__vector_36+0x5c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
     7e0:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <serial_rx_buf_tail>
     7e4:	03 c0       	rjmp	.+6      	; 0x7ec <__vector_36+0x62>
	} else {
		serial_rx_buf_tail++;
     7e6:	8f 5f       	subi	r24, 0xFF	; 255
     7e8:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <serial_rx_buf_tail>
	}

	cpu_irq_enable();
     7ec:	78 94       	sei
}
     7ee:	0f 90       	pop	r0
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	ff 91       	pop	r31
     7f6:	ef 91       	pop	r30
     7f8:	bf 91       	pop	r27
     7fa:	af 91       	pop	r26
     7fc:	9f 91       	pop	r25
     7fe:	8f 91       	pop	r24
     800:	7f 91       	pop	r23
     802:	6f 91       	pop	r22
     804:	5f 91       	pop	r21
     806:	4f 91       	pop	r20
     808:	3f 91       	pop	r19
     80a:	2f 91       	pop	r18
     80c:	0f 90       	pop	r0
     80e:	0b be       	out	0x3b, r0	; 59
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	1f 90       	pop	r1
     818:	18 95       	reti

0000081a <NWK_Init>:

		cl += 25;
	}

	return 255;
}
     81a:	ed e9       	ldi	r30, 0x9D	; 157
     81c:	f8 e0       	ldi	r31, 0x08	; 8
     81e:	14 82       	std	Z+4, r1	; 0x04
     820:	15 82       	std	Z+5, r1	; 0x05
     822:	11 82       	std	Z+1, r1	; 0x01
     824:	10 82       	st	Z, r1
     826:	17 a2       	std	Z+39, r1	; 0x27
     828:	16 a2       	std	Z+38, r1	; 0x26
     82a:	e3 ea       	ldi	r30, 0xA3	; 163
     82c:	f8 e0       	ldi	r31, 0x08	; 8
     82e:	83 ec       	ldi	r24, 0xC3	; 195
     830:	98 e0       	ldi	r25, 0x08	; 8
     832:	11 92       	st	Z+, r1
     834:	11 92       	st	Z+, r1
     836:	e8 17       	cp	r30, r24
     838:	f9 07       	cpc	r31, r25
     83a:	d9 f7       	brne	.-10     	; 0x832 <NWK_Init+0x18>
     83c:	3c d6       	rcall	.+3192   	; 0x14b6 <nwkTxInit>
     83e:	59 d3       	rcall	.+1714   	; 0xef2 <nwkRxInit>
     840:	0d d1       	rcall	.+538    	; 0xa5c <nwkFrameInit>
     842:	40 d0       	rcall	.+128    	; 0x8c4 <nwkDataReqInit>
     844:	8b c1       	rjmp	.+790    	; 0xb5c <nwkRouteInit>
     846:	08 95       	ret

00000848 <NWK_SetAddr>:
     848:	90 93 9e 08 	sts	0x089E, r25	; 0x80089e <nwkIb+0x1>
     84c:	80 93 9d 08 	sts	0x089D, r24	; 0x80089d <nwkIb>
     850:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <PHY_SetShortAddr>
     854:	08 95       	ret

00000856 <NWK_SetPanId>:
     856:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <nwkIb+0x3>
     85a:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <nwkIb+0x2>
     85e:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <PHY_SetPanId>
     862:	08 95       	ret

00000864 <NWK_OpenEndpoint>:
     864:	e8 2f       	mov	r30, r24
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	ee 0f       	add	r30, r30
     86a:	ff 1f       	adc	r31, r31
     86c:	ed 55       	subi	r30, 0x5D	; 93
     86e:	f7 4f       	sbci	r31, 0xF7	; 247
     870:	71 83       	std	Z+1, r23	; 0x01
     872:	60 83       	st	Z, r22
     874:	08 95       	ret

00000876 <NWK_TaskHandler>:
/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
	nwkRxTaskHandler();
     876:	85 d3       	rcall	.+1802   	; 0xf82 <nwkRxTaskHandler>
	nwkTxTaskHandler();
     878:	1d d7       	rcall	.+3642   	; 0x16b4 <nwkTxTaskHandler>
	nwkDataReqTaskHandler();
     87a:	4d c0       	rjmp	.+154    	; 0x916 <nwkDataReqTaskHandler>
     87c:	08 95       	ret

0000087e <nwkDataReqTxConf>:
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     87e:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <nwkDataReqQueue>
     882:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <nwkDataReqQueue+0x1>
     886:	30 97       	sbiw	r30, 0x00	; 0
     888:	d9 f0       	breq	.+54     	; 0x8c0 <nwkDataReqTxConf+0x42>
		if (req->frame == frame) {
     88a:	22 81       	ldd	r18, Z+2	; 0x02
     88c:	33 81       	ldd	r19, Z+3	; 0x03
     88e:	82 17       	cp	r24, r18
     890:	93 07       	cpc	r25, r19
     892:	89 f4       	brne	.+34     	; 0x8b6 <nwkDataReqTxConf+0x38>
     894:	05 c0       	rjmp	.+10     	; 0x8a0 <nwkDataReqTxConf+0x22>
     896:	22 81       	ldd	r18, Z+2	; 0x02
     898:	33 81       	ldd	r19, Z+3	; 0x03
     89a:	28 17       	cp	r18, r24
     89c:	39 07       	cpc	r19, r25
     89e:	59 f4       	brne	.+22     	; 0x8b6 <nwkDataReqTxConf+0x38>
			req->status = frame->tx.status;
     8a0:	dc 01       	movw	r26, r24
     8a2:	ad 57       	subi	r26, 0x7D	; 125
     8a4:	bf 4f       	sbci	r27, 0xFF	; 255
     8a6:	2c 91       	ld	r18, X
     8a8:	27 87       	std	Z+15, r18	; 0x0f
			req->control = frame->tx.control;
     8aa:	13 96       	adiw	r26, 0x03	; 3
     8ac:	2c 91       	ld	r18, X
     8ae:	20 8b       	std	Z+16, r18	; 0x10
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
     8b0:	22 e0       	ldi	r18, 0x02	; 2
     8b2:	24 83       	std	Z+4, r18	; 0x04
			break;
     8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <nwkDataReqTxConf+0x42>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     8b6:	01 90       	ld	r0, Z+
     8b8:	f0 81       	ld	r31, Z
     8ba:	e0 2d       	mov	r30, r0
     8bc:	30 97       	sbiw	r30, 0x00	; 0
     8be:	59 f7       	brne	.-42     	; 0x896 <nwkDataReqTxConf+0x18>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
     8c0:	0a c1       	rjmp	.+532    	; 0xad6 <nwkFrameFree>
     8c2:	08 95       	ret

000008c4 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
     8c4:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <nwkDataReqQueue+0x1>
     8c8:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <nwkDataReqQueue>
     8cc:	08 95       	ret

000008ce <NWK_DataReq>:
/*************************************************************************//**
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     8ce:	fc 01       	movw	r30, r24
	req->state = NWK_DATA_REQ_STATE_INITIAL;
     8d0:	14 82       	std	Z+4, r1	; 0x04
	req->status = NWK_SUCCESS_STATUS;
     8d2:	17 86       	std	Z+15, r1	; 0x0f
	req->frame = NULL;
     8d4:	13 82       	std	Z+3, r1	; 0x03
     8d6:	12 82       	std	Z+2, r1	; 0x02

	nwkIb.lock++;
     8d8:	ad e9       	ldi	r26, 0x9D	; 157
     8da:	b8 e0       	ldi	r27, 0x08	; 8
     8dc:	96 96       	adiw	r26, 0x26	; 38
     8de:	8d 91       	ld	r24, X+
     8e0:	9c 91       	ld	r25, X
     8e2:	97 97       	sbiw	r26, 0x27	; 39
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	97 96       	adiw	r26, 0x27	; 39
     8e8:	9c 93       	st	X, r25
     8ea:	8e 93       	st	-X, r24
     8ec:	96 97       	sbiw	r26, 0x26	; 38

	if (NULL == nwkDataReqQueue) {
     8ee:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <nwkDataReqQueue>
     8f2:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <nwkDataReqQueue+0x1>
     8f6:	00 97       	sbiw	r24, 0x00	; 0
     8f8:	39 f4       	brne	.+14     	; 0x908 <NWK_DataReq+0x3a>
		req->next = NULL;
     8fa:	11 82       	std	Z+1, r1	; 0x01
     8fc:	10 82       	st	Z, r1
		nwkDataReqQueue = req;
     8fe:	f0 93 bb 02 	sts	0x02BB, r31	; 0x8002bb <nwkDataReqQueue+0x1>
     902:	e0 93 ba 02 	sts	0x02BA, r30	; 0x8002ba <nwkDataReqQueue>
     906:	08 95       	ret
	} else {
		req->next = nwkDataReqQueue;
     908:	91 83       	std	Z+1, r25	; 0x01
     90a:	80 83       	st	Z, r24
		nwkDataReqQueue = req;
     90c:	f0 93 bb 02 	sts	0x02BB, r31	; 0x8002bb <nwkDataReqQueue+0x1>
     910:	e0 93 ba 02 	sts	0x02BA, r30	; 0x8002ba <nwkDataReqQueue>
     914:	08 95       	ret

00000916 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     91e:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <nwkDataReqQueue>
     922:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <nwkDataReqQueue+0x1>
     926:	30 97       	sbiw	r30, 0x00	; 0
     928:	09 f4       	brne	.+2      	; 0x92c <nwkDataReqTaskHandler+0x16>
     92a:	93 c0       	rjmp	.+294    	; 0xa52 <nwkDataReqTaskHandler+0x13c>
     92c:	ef 01       	movw	r28, r30
		switch (req->state) {
     92e:	8c 81       	ldd	r24, Y+4	; 0x04
     930:	88 23       	and	r24, r24
     932:	21 f0       	breq	.+8      	; 0x93c <nwkDataReqTaskHandler+0x26>
     934:	82 30       	cpi	r24, 0x02	; 2
     936:	09 f4       	brne	.+2      	; 0x93a <nwkDataReqTaskHandler+0x24>
     938:	66 c0       	rjmp	.+204    	; 0xa06 <nwkDataReqTaskHandler+0xf0>
     93a:	85 c0       	rjmp	.+266    	; 0xa46 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
     93c:	96 d0       	rcall	.+300    	; 0xa6a <nwkFrameAlloc>
     93e:	8c 01       	movw	r16, r24
     940:	00 97       	sbiw	r24, 0x00	; 0
     942:	21 f4       	brne	.+8      	; 0x94c <nwkDataReqTaskHandler+0x36>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	8c 83       	std	Y+4, r24	; 0x04
		req->status = NWK_OUT_OF_MEMORY_STATUS;
     948:	8f 87       	std	Y+15, r24	; 0x0f
     94a:	83 c0       	rjmp	.+262    	; 0xa52 <nwkDataReqTaskHandler+0x13c>
		return;
	}

	req->frame = frame;
     94c:	9b 83       	std	Y+3, r25	; 0x03
     94e:	8a 83       	std	Y+2, r24	; 0x02
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	8c 83       	std	Y+4, r24	; 0x04

	frame->tx.confirm = nwkDataReqTxConf;
     954:	f8 01       	movw	r30, r16
     956:	e9 57       	subi	r30, 0x79	; 121
     958:	ff 4f       	sbci	r31, 0xFF	; 255
     95a:	8f e3       	ldi	r24, 0x3F	; 63
     95c:	94 e0       	ldi	r25, 0x04	; 4
     95e:	91 83       	std	Z+1, r25	; 0x01
     960:	80 83       	st	Z, r24
	frame->tx.control = req->options &
     962:	31 97       	sbiw	r30, 0x01	; 1
     964:	89 85       	ldd	r24, Y+9	; 0x09
     966:	82 fb       	bst	r24, 2
     968:	88 27       	eor	r24, r24
     96a:	80 f9       	bld	r24, 0
     96c:	80 83       	st	Z, r24
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
     96e:	99 85       	ldd	r25, Y+9	; 0x09
     970:	d8 01       	movw	r26, r16
     972:	1b 96       	adiw	r26, 0x0b	; 11
     974:	8c 91       	ld	r24, X
     976:	1b 97       	sbiw	r26, 0x0b	; 11
     978:	90 fb       	bst	r25, 0
     97a:	80 f9       	bld	r24, 0
     97c:	1b 96       	adiw	r26, 0x0b	; 11
     97e:	8c 93       	st	X, r24
     980:	1b 97       	sbiw	r26, 0x0b	; 11
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
     982:	99 85       	ldd	r25, Y+9	; 0x09
     984:	93 fb       	bst	r25, 3
     986:	99 27       	eor	r25, r25
     988:	90 f9       	bld	r25, 0
     98a:	90 fb       	bst	r25, 0
     98c:	82 f9       	bld	r24, 2
     98e:	1b 96       	adiw	r26, 0x0b	; 11
     990:	8c 93       	st	X, r24
     992:	1b 97       	sbiw	r26, 0x0b	; 11
		frame->payload += sizeof(NwkFrameMulticastHeader_t);
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}
#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     994:	ed e9       	ldi	r30, 0x9D	; 157
     996:	f8 e0       	ldi	r31, 0x08	; 8
     998:	84 81       	ldd	r24, Z+4	; 0x04
     99a:	8f 5f       	subi	r24, 0xFF	; 255
     99c:	84 83       	std	Z+4, r24	; 0x04
     99e:	1c 96       	adiw	r26, 0x0c	; 12
     9a0:	8c 93       	st	X, r24
     9a2:	1c 97       	sbiw	r26, 0x0c	; 12
	frame->header.nwkSrcAddr = nwkIb.addr;
     9a4:	80 81       	ld	r24, Z
     9a6:	91 81       	ldd	r25, Z+1	; 0x01
     9a8:	1e 96       	adiw	r26, 0x0e	; 14
     9aa:	9c 93       	st	X, r25
     9ac:	8e 93       	st	-X, r24
     9ae:	1d 97       	sbiw	r26, 0x0d	; 13
	frame->header.nwkDstAddr = req->dstAddr;
     9b0:	8d 81       	ldd	r24, Y+5	; 0x05
     9b2:	9e 81       	ldd	r25, Y+6	; 0x06
     9b4:	50 96       	adiw	r26, 0x10	; 16
     9b6:	9c 93       	st	X, r25
     9b8:	8e 93       	st	-X, r24
     9ba:	1f 97       	sbiw	r26, 0x0f	; 15
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
     9bc:	88 85       	ldd	r24, Y+8	; 0x08
     9be:	98 2f       	mov	r25, r24
     9c0:	9f 70       	andi	r25, 0x0F	; 15
     9c2:	51 96       	adiw	r26, 0x11	; 17
     9c4:	8c 91       	ld	r24, X
     9c6:	51 97       	sbiw	r26, 0x11	; 17
     9c8:	80 7f       	andi	r24, 0xF0	; 240
     9ca:	89 2b       	or	r24, r25
     9cc:	51 96       	adiw	r26, 0x11	; 17
     9ce:	8c 93       	st	X, r24
     9d0:	51 97       	sbiw	r26, 0x11	; 17
	frame->header.nwkDstEndpoint = req->dstEndpoint;
     9d2:	9f 81       	ldd	r25, Y+7	; 0x07
     9d4:	92 95       	swap	r25
     9d6:	90 7f       	andi	r25, 0xF0	; 240
     9d8:	8f 70       	andi	r24, 0x0F	; 15
     9da:	89 2b       	or	r24, r25
     9dc:	51 96       	adiw	r26, 0x11	; 17
     9de:	8c 93       	st	X, r24

	memcpy(frame->payload, req->data, req->size);
     9e0:	f8 01       	movw	r30, r16
     9e2:	ef 57       	subi	r30, 0x7F	; 127
     9e4:	ff 4f       	sbci	r31, 0xFF	; 255
     9e6:	4c 85       	ldd	r20, Y+12	; 0x0c
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	6a 85       	ldd	r22, Y+10	; 0x0a
     9ec:	7b 85       	ldd	r23, Y+11	; 0x0b
     9ee:	80 81       	ld	r24, Z
     9f0:	91 81       	ldd	r25, Z+1	; 0x01
     9f2:	0e 94 e7 14 	call	0x29ce	; 0x29ce <memcpy>
	frame->size += req->size;
     9f6:	f8 01       	movw	r30, r16
     9f8:	91 81       	ldd	r25, Z+1	; 0x01
     9fa:	8c 85       	ldd	r24, Y+12	; 0x0c
     9fc:	89 0f       	add	r24, r25
     9fe:	81 83       	std	Z+1, r24	; 0x01

	nwkTxFrame(frame);
     a00:	c8 01       	movw	r24, r16
     a02:	7c d5       	rcall	.+2808   	; 0x14fc <nwkTxFrame>
     a04:	26 c0       	rjmp	.+76     	; 0xa52 <nwkDataReqTaskHandler+0x13c>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
     a06:	ec 17       	cp	r30, r28
     a08:	fd 07       	cpc	r31, r29
     a0a:	41 f4       	brne	.+16     	; 0xa1c <nwkDataReqTaskHandler+0x106>
		nwkDataReqQueue = nwkDataReqQueue->next;
     a0c:	80 81       	ld	r24, Z
     a0e:	91 81       	ldd	r25, Z+1	; 0x01
     a10:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <nwkDataReqQueue+0x1>
     a14:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <nwkDataReqQueue>
     a18:	0a c0       	rjmp	.+20     	; 0xa2e <nwkDataReqTaskHandler+0x118>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
			prev = prev->next;
     a1a:	fc 01       	movw	r30, r24
{
	if (nwkDataReqQueue == req) {
		nwkDataReqQueue = nwkDataReqQueue->next;
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
     a1c:	80 81       	ld	r24, Z
     a1e:	91 81       	ldd	r25, Z+1	; 0x01
     a20:	8c 17       	cp	r24, r28
     a22:	9d 07       	cpc	r25, r29
     a24:	d1 f7       	brne	.-12     	; 0xa1a <nwkDataReqTaskHandler+0x104>
			prev = prev->next;
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
     a26:	88 81       	ld	r24, Y
     a28:	99 81       	ldd	r25, Y+1	; 0x01
     a2a:	91 83       	std	Z+1, r25	; 0x01
     a2c:	80 83       	st	Z, r24
	}

	nwkIb.lock--;
     a2e:	ed e9       	ldi	r30, 0x9D	; 157
     a30:	f8 e0       	ldi	r31, 0x08	; 8
     a32:	86 a1       	ldd	r24, Z+38	; 0x26
     a34:	97 a1       	ldd	r25, Z+39	; 0x27
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	97 a3       	std	Z+39, r25	; 0x27
     a3a:	86 a3       	std	Z+38, r24	; 0x26
	req->confirm(req);
     a3c:	ed 85       	ldd	r30, Y+13	; 0x0d
     a3e:	fe 85       	ldd	r31, Y+14	; 0x0e
     a40:	ce 01       	movw	r24, r28
     a42:	19 95       	eicall
     a44:	06 c0       	rjmp	.+12     	; 0xa52 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     a46:	09 90       	ld	r0, Y+
     a48:	d8 81       	ld	r29, Y
     a4a:	c0 2d       	mov	r28, r0
     a4c:	20 97       	sbiw	r28, 0x00	; 0
     a4e:	09 f0       	breq	.+2      	; 0xa52 <nwkDataReqTaskHandler+0x13c>
     a50:	6e cf       	rjmp	.-292    	; 0x92e <nwkDataReqTaskHandler+0x18>

		default:
			break;
		}
	}
}
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	08 95       	ret

00000a5c <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     a5c:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <nwkFrameFrames>
     a60:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <nwkFrameFrames+0x89>
     a64:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <nwkFrameFrames+0x112>
     a68:	08 95       	ret

00000a6a <nwkFrameAlloc>:
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
     a6a:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <nwkFrameFrames>
     a6e:	88 23       	and	r24, r24
     a70:	71 f0       	breq	.+28     	; 0xa8e <nwkFrameAlloc+0x24>
     a72:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <nwkFrameFrames+0x89>
     a76:	88 23       	and	r24, r24
     a78:	39 f0       	breq	.+14     	; 0xa88 <nwkFrameAlloc+0x1e>
     a7a:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <nwkFrameFrames+0x112>
     a7e:	81 11       	cpse	r24, r1
     a80:	27 c0       	rjmp	.+78     	; 0xad0 <nwkFrameAlloc+0x66>
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <nwkFrameAlloc+0x28>
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <nwkFrameAlloc+0x28>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     a92:	49 e8       	ldi	r20, 0x89	; 137
     a94:	48 9f       	mul	r20, r24
     a96:	90 01       	movw	r18, r0
     a98:	49 9f       	mul	r20, r25
     a9a:	30 0d       	add	r19, r0
     a9c:	11 24       	eor	r1, r1
     a9e:	c9 01       	movw	r24, r18
     aa0:	84 54       	subi	r24, 0x44	; 68
     aa2:	9d 4f       	sbci	r25, 0xFD	; 253
     aa4:	fc 01       	movw	r30, r24
     aa6:	11 92       	st	Z+, r1
     aa8:	4a 95       	dec	r20
     aaa:	e9 f7       	brne	.-6      	; 0xaa6 <nwkFrameAlloc+0x3c>
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     aac:	40 e1       	ldi	r20, 0x10	; 16
     aae:	fc 01       	movw	r30, r24
     ab0:	41 83       	std	Z+1, r20	; 0x01
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
     ab2:	ef 57       	subi	r30, 0x7F	; 127
     ab4:	ff 4f       	sbci	r31, 0xFF	; 255
     ab6:	22 53       	subi	r18, 0x32	; 50
     ab8:	3d 4f       	sbci	r19, 0xFD	; 253
     aba:	31 83       	std	Z+1, r19	; 0x01
     abc:	20 83       	st	Z, r18
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
     abe:	ed e9       	ldi	r30, 0x9D	; 157
     ac0:	f8 e0       	ldi	r31, 0x08	; 8
     ac2:	26 a1       	ldd	r18, Z+38	; 0x26
     ac4:	37 a1       	ldd	r19, Z+39	; 0x27
     ac6:	2f 5f       	subi	r18, 0xFF	; 255
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	37 a3       	std	Z+39, r19	; 0x27
     acc:	26 a3       	std	Z+38, r18	; 0x26
			return &nwkFrameFrames[i];
     ace:	08 95       	ret
		}
	}
	return NULL;
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
}
     ad4:	08 95       	ret

00000ad6 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
     ad6:	fc 01       	movw	r30, r24
     ad8:	10 82       	st	Z, r1
	nwkIb.lock--;
     ada:	ed e9       	ldi	r30, 0x9D	; 157
     adc:	f8 e0       	ldi	r31, 0x08	; 8
     ade:	86 a1       	ldd	r24, Z+38	; 0x26
     ae0:	97 a1       	ldd	r25, Z+39	; 0x27
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	97 a3       	std	Z+39, r25	; 0x27
     ae6:	86 a3       	std	Z+38, r24	; 0x26
     ae8:	08 95       	ret

00000aea <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
     aea:	00 97       	sbiw	r24, 0x00	; 0
     aec:	41 f0       	breq	.+16     	; 0xafe <nwkFrameNext+0x14>
		frame = nwkFrameFrames;
	} else {
		frame++;
     aee:	fc 01       	movw	r30, r24
     af0:	e7 57       	subi	r30, 0x77	; 119
     af2:	ff 4f       	sbci	r31, 0xFF	; 255
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     af4:	84 e0       	ldi	r24, 0x04	; 4
     af6:	e7 35       	cpi	r30, 0x57	; 87
     af8:	f8 07       	cpc	r31, r24
     afa:	18 f0       	brcs	.+6      	; 0xb02 <nwkFrameNext+0x18>
     afc:	12 c0       	rjmp	.+36     	; 0xb22 <nwkFrameNext+0x38>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
     afe:	ec eb       	ldi	r30, 0xBC	; 188
     b00:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
     b02:	80 81       	ld	r24, Z
     b04:	88 23       	and	r24, r24
     b06:	21 f0       	breq	.+8      	; 0xb10 <nwkFrameNext+0x26>
     b08:	0f c0       	rjmp	.+30     	; 0xb28 <nwkFrameNext+0x3e>
     b0a:	80 81       	ld	r24, Z
     b0c:	81 11       	cpse	r24, r1
     b0e:	0f c0       	rjmp	.+30     	; 0xb2e <nwkFrameNext+0x44>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     b10:	e7 57       	subi	r30, 0x77	; 119
     b12:	ff 4f       	sbci	r31, 0xFF	; 255
     b14:	84 e0       	ldi	r24, 0x04	; 4
     b16:	e7 35       	cpi	r30, 0x57	; 87
     b18:	f8 07       	cpc	r31, r24
     b1a:	b8 f3       	brcs	.-18     	; 0xb0a <nwkFrameNext+0x20>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	08 95       	ret
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	08 95       	ret
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
     b28:	8e 2f       	mov	r24, r30
     b2a:	9f 2f       	mov	r25, r31
     b2c:	08 95       	ret
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     b2e:	8e 2f       	mov	r24, r30
     b30:	9f 2f       	mov	r25, r31
			return frame;
		}
	}

	return NULL;
}
     b32:	08 95       	ret

00000b34 <nwkFrameCommandInit>:
/*************************************************************************//**
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     b34:	fc 01       	movw	r30, r24
	frame->tx.status = NWK_SUCCESS_STATUS;
     b36:	dc 01       	movw	r26, r24
     b38:	ad 57       	subi	r26, 0x7D	; 125
     b3a:	bf 4f       	sbci	r27, 0xFF	; 255
     b3c:	1c 92       	st	X, r1
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     b3e:	ad e9       	ldi	r26, 0x9D	; 157
     b40:	b8 e0       	ldi	r27, 0x08	; 8
     b42:	14 96       	adiw	r26, 0x04	; 4
     b44:	9c 91       	ld	r25, X
     b46:	14 97       	sbiw	r26, 0x04	; 4
     b48:	9f 5f       	subi	r25, 0xFF	; 255
     b4a:	14 96       	adiw	r26, 0x04	; 4
     b4c:	9c 93       	st	X, r25
     b4e:	14 97       	sbiw	r26, 0x04	; 4
     b50:	94 87       	std	Z+12, r25	; 0x0c
	frame->header.nwkSrcAddr = nwkIb.addr;
     b52:	8d 91       	ld	r24, X+
     b54:	9c 91       	ld	r25, X
     b56:	96 87       	std	Z+14, r25	; 0x0e
     b58:	85 87       	std	Z+13, r24	; 0x0d
     b5a:	08 95       	ret

00000b5c <nwkRouteInit>:
	entry->nextHopAddr = nextHop;
	entry->multicast = multicast;
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
	entry->lqi = lqi;
}
     b5c:	a8 e5       	ldi	r26, 0x58	; 88
     b5e:	b4 e0       	ldi	r27, 0x04	; 4
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	4f ef       	ldi	r20, 0xFF	; 255
     b66:	5f ef       	ldi	r21, 0xFF	; 255
     b68:	11 96       	adiw	r26, 0x01	; 1
     b6a:	5c 93       	st	X, r21
     b6c:	4e 93       	st	-X, r20
     b6e:	fc 01       	movw	r30, r24
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	e8 1b       	sub	r30, r24
     b7e:	f9 0b       	sbc	r31, r25
     b80:	e9 5a       	subi	r30, 0xA9	; 169
     b82:	fb 4f       	sbci	r31, 0xFB	; 251
     b84:	20 81       	ld	r18, Z
     b86:	2e 7f       	andi	r18, 0xFE	; 254
     b88:	20 83       	st	Z, r18
     b8a:	14 96       	adiw	r26, 0x04	; 4
     b8c:	1c 92       	st	X, r1
     b8e:	14 97       	sbiw	r26, 0x04	; 4
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	17 96       	adiw	r26, 0x07	; 7
     b94:	84 36       	cpi	r24, 0x64	; 100
     b96:	91 05       	cpc	r25, r1
     b98:	39 f7       	brne	.-50     	; 0xb68 <nwkRouteInit+0xc>
     b9a:	08 95       	ret

00000b9c <NWK_RouteFindEntry>:
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	e8 e5       	ldi	r30, 0x58	; 88
     ba6:	f4 e0       	ldi	r31, 0x04	; 4
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	06 2f       	mov	r16, r22
     bae:	10 e0       	ldi	r17, 0x00	; 0
     bb0:	40 81       	ld	r20, Z
     bb2:	51 81       	ldd	r21, Z+1	; 0x01
     bb4:	48 17       	cp	r20, r24
     bb6:	59 07       	cpc	r21, r25
     bb8:	b1 f4       	brne	.+44     	; 0xbe6 <NWK_RouteFindEntry+0x4a>
     bba:	d9 01       	movw	r26, r18
     bbc:	aa 0f       	add	r26, r26
     bbe:	bb 1f       	adc	r27, r27
     bc0:	aa 0f       	add	r26, r26
     bc2:	bb 1f       	adc	r27, r27
     bc4:	aa 0f       	add	r26, r26
     bc6:	bb 1f       	adc	r27, r27
     bc8:	a2 1b       	sub	r26, r18
     bca:	b3 0b       	sbc	r27, r19
     bcc:	a9 5a       	subi	r26, 0xA9	; 169
     bce:	bb 4f       	sbci	r27, 0xFB	; 251
     bd0:	4c 91       	ld	r20, X
     bd2:	46 95       	lsr	r20
     bd4:	41 70       	andi	r20, 0x01	; 1
     bd6:	c4 2f       	mov	r28, r20
     bd8:	40 e0       	ldi	r20, 0x00	; 0
     bda:	d4 2f       	mov	r29, r20
     bdc:	c0 17       	cp	r28, r16
     bde:	d1 07       	cpc	r29, r17
     be0:	11 f4       	brne	.+4      	; 0xbe6 <NWK_RouteFindEntry+0x4a>
     be2:	cd 01       	movw	r24, r26
     be4:	08 c0       	rjmp	.+16     	; 0xbf6 <NWK_RouteFindEntry+0x5a>
     be6:	2f 5f       	subi	r18, 0xFF	; 255
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
     bea:	37 96       	adiw	r30, 0x07	; 7
     bec:	24 36       	cpi	r18, 0x64	; 100
     bee:	31 05       	cpc	r19, r1
     bf0:	f9 f6       	brne	.-66     	; 0xbb0 <NWK_RouteFindEntry+0x14>
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <NWK_RouteNewEntry>:
     c00:	a0 e0       	ldi	r26, 0x00	; 0
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e7 e5       	ldi	r30, 0x57	; 87
     c06:	f4 e0       	ldi	r31, 0x04	; 4
     c08:	80 81       	ld	r24, Z
     c0a:	80 fd       	sbrc	r24, 0
     c0c:	0d c0       	rjmp	.+26     	; 0xc28 <NWK_RouteNewEntry+0x28>
     c0e:	85 81       	ldd	r24, Z+5	; 0x05
     c10:	88 23       	and	r24, r24
     c12:	81 f0       	breq	.+32     	; 0xc34 <NWK_RouteNewEntry+0x34>
     c14:	10 97       	sbiw	r26, 0x00	; 0
     c16:	39 f0       	breq	.+14     	; 0xc26 <NWK_RouteNewEntry+0x26>
     c18:	15 96       	adiw	r26, 0x05	; 5
     c1a:	9c 91       	ld	r25, X
     c1c:	15 97       	sbiw	r26, 0x05	; 5
     c1e:	89 17       	cp	r24, r25
     c20:	18 f4       	brcc	.+6      	; 0xc28 <NWK_RouteNewEntry+0x28>
     c22:	df 01       	movw	r26, r30
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <NWK_RouteNewEntry+0x28>
     c26:	df 01       	movw	r26, r30
     c28:	37 96       	adiw	r30, 0x07	; 7
     c2a:	87 e0       	ldi	r24, 0x07	; 7
     c2c:	e3 31       	cpi	r30, 0x13	; 19
     c2e:	f8 07       	cpc	r31, r24
     c30:	59 f7       	brne	.-42     	; 0xc08 <NWK_RouteNewEntry+0x8>
     c32:	fd 01       	movw	r30, r26
     c34:	80 81       	ld	r24, Z
     c36:	8d 70       	andi	r24, 0x0D	; 13
     c38:	80 63       	ori	r24, 0x30	; 48
     c3a:	80 83       	st	Z, r24
     c3c:	80 e8       	ldi	r24, 0x80	; 128
     c3e:	85 83       	std	Z+5, r24	; 0x05
     c40:	cf 01       	movw	r24, r30
     c42:	08 95       	ret

00000c44 <NWK_RouteFreeEntry>:
     c44:	fc 01       	movw	r30, r24
     c46:	80 81       	ld	r24, Z
     c48:	80 fd       	sbrc	r24, 0
     c4a:	05 c0       	rjmp	.+10     	; 0xc56 <NWK_RouteFreeEntry+0x12>
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	9f ef       	ldi	r25, 0xFF	; 255
     c50:	92 83       	std	Z+2, r25	; 0x02
     c52:	81 83       	std	Z+1, r24	; 0x01
     c54:	15 82       	std	Z+5, r1	; 0x05
     c56:	08 95       	ret

00000c58 <NWK_RouteNextHop>:
     c58:	a1 df       	rcall	.-190    	; 0xb9c <NWK_RouteFindEntry>
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	21 f0       	breq	.+8      	; 0xc66 <NWK_RouteNextHop+0xe>
     c5e:	fc 01       	movw	r30, r24
     c60:	83 81       	ldd	r24, Z+3	; 0x03
     c62:	94 81       	ldd	r25, Z+4	; 0x04
     c64:	08 95       	ret
     c66:	8f ef       	ldi	r24, 0xFF	; 255
     c68:	9f ef       	ldi	r25, 0xFF	; 255
     c6a:	08 95       	ret

00000c6c <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
     c6c:	97 df       	rcall	.-210    	; 0xb9c <NWK_RouteFindEntry>
	if (entry) {
     c6e:	00 97       	sbiw	r24, 0x00	; 0
		NWK_RouteFreeEntry(entry);
     c70:	09 f0       	breq	.+2      	; 0xc74 <nwkRouteRemove+0x8>
     c72:	e8 cf       	rjmp	.-48     	; 0xc44 <NWK_RouteFreeEntry>
     c74:	08 95       	ret

00000c76 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     c80:	01 85       	ldd	r16, Z+9	; 0x09
     c82:	12 85       	ldd	r17, Z+10	; 0x0a
     c84:	11 23       	and	r17, r17
     c86:	2c f4       	brge	.+10     	; 0xc92 <nwkRouteFrameReceived+0x1c>
     c88:	85 85       	ldd	r24, Z+13	; 0x0d
     c8a:	96 85       	ldd	r25, Z+14	; 0x0e
     c8c:	08 17       	cp	r16, r24
     c8e:	19 07       	cpc	r17, r25
     c90:	e1 f5       	brne	.+120    	; 0xd0a <nwkRouteFrameReceived+0x94>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
     c92:	85 81       	ldd	r24, Z+5	; 0x05
     c94:	96 81       	ldd	r25, Z+6	; 0x06
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	c1 f1       	breq	.+112    	; 0xd0a <nwkRouteFrameReceived+0x94>
     c9a:	ef 01       	movw	r28, r30
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	85 85       	ldd	r24, Z+13	; 0x0d
     ca0:	96 85       	ldd	r25, Z+14	; 0x0e
     ca2:	7c df       	rcall	.-264    	; 0xb9c <NWK_RouteFindEntry>
     ca4:	fc 01       	movw	r30, r24

	if (entry) {
     ca6:	89 2b       	or	r24, r25
     ca8:	a1 f0       	breq	.+40     	; 0xcd2 <nwkRouteFrameReceived+0x5c>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     caa:	8f 81       	ldd	r24, Y+7	; 0x07
     cac:	98 85       	ldd	r25, Y+8	; 0x08
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	f9 f4       	brne	.+62     	; 0xcf0 <nwkRouteFrameReceived+0x7a>
     cb2:	20 91 9d 08 	lds	r18, 0x089D	; 0x80089d <nwkIb>
     cb6:	30 91 9e 08 	lds	r19, 0x089E	; 0x80089e <nwkIb+0x1>
     cba:	8f 85       	ldd	r24, Y+15	; 0x0f
     cbc:	98 89       	ldd	r25, Y+16	; 0x10
     cbe:	28 17       	cp	r18, r24
     cc0:	39 07       	cpc	r19, r25
     cc2:	b1 f4       	brne	.+44     	; 0xcf0 <nwkRouteFrameReceived+0x7a>
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
				entry->lqi) || discovery) {
			entry->nextHopAddr = header->macSrcAddr;
     cc4:	14 83       	std	Z+4, r17	; 0x04
     cc6:	03 83       	std	Z+3, r16	; 0x03
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
     cc8:	80 81       	ld	r24, Z
     cca:	8f 70       	andi	r24, 0x0F	; 15
     ccc:	80 63       	ori	r24, 0x30	; 48
     cce:	80 83       	st	Z, r24
		}
	} else {
		entry = NWK_RouteNewEntry();
     cd0:	0a c0       	rjmp	.+20     	; 0xce6 <nwkRouteFrameReceived+0x70>
     cd2:	96 df       	rcall	.-212    	; 0xc00 <NWK_RouteNewEntry>
     cd4:	fc 01       	movw	r30, r24

		entry->dstAddr = header->nwkSrcAddr;
     cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cda:	92 83       	std	Z+2, r25	; 0x02
     cdc:	81 83       	std	Z+1, r24	; 0x01
		entry->nextHopAddr = header->macSrcAddr;
     cde:	89 85       	ldd	r24, Y+9	; 0x09
     ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce2:	94 83       	std	Z+4, r25	; 0x04
     ce4:	83 83       	std	Z+3, r24	; 0x03
	}

	entry->lqi = frame->rx.lqi;
     ce6:	cd 57       	subi	r28, 0x7D	; 125
     ce8:	df 4f       	sbci	r29, 0xFF	; 255
     cea:	88 81       	ld	r24, Y
     cec:	86 83       	std	Z+6, r24	; 0x06
     cee:	0d c0       	rjmp	.+26     	; 0xd0a <nwkRouteFrameReceived+0x94>

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
     cf0:	83 81       	ldd	r24, Z+3	; 0x03
     cf2:	94 81       	ldd	r25, Z+4	; 0x04
     cf4:	08 17       	cp	r16, r24
     cf6:	19 07       	cpc	r17, r25
     cf8:	b1 f3       	breq	.-20     	; 0xce6 <nwkRouteFrameReceived+0x70>
     cfa:	96 81       	ldd	r25, Z+6	; 0x06
     cfc:	de 01       	movw	r26, r28
     cfe:	ad 57       	subi	r26, 0x7D	; 125
     d00:	bf 4f       	sbci	r27, 0xFF	; 255
     d02:	8c 91       	ld	r24, X
     d04:	98 17       	cp	r25, r24
     d06:	f0 f2       	brcs	.-68     	; 0xcc4 <nwkRouteFrameReceived+0x4e>
     d08:	ee cf       	rjmp	.-36     	; 0xce6 <nwkRouteFrameReceived+0x70>

	entry->lqi = frame->rx.lqi;
#else
	(void)frame;
#endif
}
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret

00000d14 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	fc 01       	movw	r30, r24
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
     d1a:	87 85       	ldd	r24, Z+15	; 0x0f
     d1c:	90 89       	ldd	r25, Z+16	; 0x10
     d1e:	8f 3f       	cpi	r24, 0xFF	; 255
     d20:	2f ef       	ldi	r18, 0xFF	; 255
     d22:	92 07       	cpc	r25, r18
     d24:	d9 f1       	breq	.+118    	; 0xd9c <nwkRouteFrameSent+0x88>
     d26:	ef 01       	movw	r28, r30
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
     d28:	63 85       	ldd	r22, Z+11	; 0x0b
     d2a:	63 fb       	bst	r22, 3
     d2c:	66 27       	eor	r22, r22
     d2e:	60 f9       	bld	r22, 0

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
     d30:	35 df       	rcall	.-406    	; 0xb9c <NWK_RouteFindEntry>
     d32:	dc 01       	movw	r26, r24
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
     d34:	89 2b       	or	r24, r25
     d36:	91 f1       	breq	.+100    	; 0xd9c <nwkRouteFrameSent+0x88>
     d38:	8c 91       	ld	r24, X
     d3a:	80 fd       	sbrc	r24, 0
     d3c:	2f c0       	rjmp	.+94     	; 0xd9c <nwkRouteFrameSent+0x88>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
     d3e:	fe 01       	movw	r30, r28
     d40:	ed 57       	subi	r30, 0x7D	; 125
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	80 81       	ld	r24, Z
     d46:	81 11       	cpse	r24, r1
     d48:	19 c0       	rjmp	.+50     	; 0xd7c <nwkRouteFrameSent+0x68>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
     d4a:	8c 91       	ld	r24, X
     d4c:	8f 70       	andi	r24, 0x0F	; 15
     d4e:	80 63       	ori	r24, 0x30	; 48
     d50:	8c 93       	st	X, r24

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
     d52:	15 96       	adiw	r26, 0x05	; 5
     d54:	8c 91       	ld	r24, X
     d56:	15 97       	sbiw	r26, 0x05	; 5
     d58:	8f 5f       	subi	r24, 0xFF	; 255
     d5a:	15 96       	adiw	r26, 0x05	; 5
     d5c:	8c 93       	st	X, r24
     d5e:	8f 3f       	cpi	r24, 0xFF	; 255
     d60:	e9 f4       	brne	.+58     	; 0xd9c <nwkRouteFrameSent+0x88>
     d62:	ec e5       	ldi	r30, 0x5C	; 92
     d64:	f4 e0       	ldi	r31, 0x04	; 4
     d66:	28 e1       	ldi	r18, 0x18	; 24
     d68:	37 e0       	ldi	r19, 0x07	; 7
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     d6a:	80 81       	ld	r24, Z
     d6c:	86 95       	lsr	r24
     d6e:	8f 5f       	subi	r24, 0xFF	; 255
     d70:	80 83       	st	Z, r24
     d72:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
     d74:	e2 17       	cp	r30, r18
     d76:	f3 07       	cpc	r31, r19
     d78:	c1 f7       	brne	.-16     	; 0xd6a <nwkRouteFrameSent+0x56>
     d7a:	10 c0       	rjmp	.+32     	; 0xd9c <nwkRouteFrameSent+0x88>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
     d7c:	9c 91       	ld	r25, X
     d7e:	89 2f       	mov	r24, r25
     d80:	82 95       	swap	r24
     d82:	8f 70       	andi	r24, 0x0F	; 15
     d84:	81 5f       	subi	r24, 0xF1	; 241
     d86:	8f 70       	andi	r24, 0x0F	; 15
     d88:	28 2f       	mov	r18, r24
     d8a:	22 95       	swap	r18
     d8c:	20 7f       	andi	r18, 0xF0	; 240
     d8e:	9f 70       	andi	r25, 0x0F	; 15
     d90:	92 2b       	or	r25, r18
     d92:	9c 93       	st	X, r25
     d94:	81 11       	cpse	r24, r1
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <nwkRouteFrameSent+0x88>
			NWK_RouteFreeEntry(entry);
     d98:	cd 01       	movw	r24, r26
     d9a:	54 df       	rcall	.-344    	; 0xc44 <NWK_RouteFreeEntry>
		}
	}
}
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	fc 01       	movw	r30, r24
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
     da8:	87 85       	ldd	r24, Z+15	; 0x0f
     daa:	90 89       	ldd	r25, Z+16	; 0x10
     dac:	8f 3f       	cpi	r24, 0xFF	; 255
     dae:	2f ef       	ldi	r18, 0xFF	; 255
     db0:	92 07       	cpc	r25, r18
     db2:	29 f4       	brne	.+10     	; 0xdbe <nwkRoutePrepareTx+0x1c>
		header->macDstAddr = NWK_BROADCAST_ADDR;
     db4:	8f ef       	ldi	r24, 0xFF	; 255
     db6:	9f ef       	ldi	r25, 0xFF	; 255
     db8:	90 87       	std	Z+8, r25	; 0x08
     dba:	87 83       	std	Z+7, r24	; 0x07
     dbc:	0e c0       	rjmp	.+28     	; 0xdda <nwkRoutePrepareTx+0x38>
	} else if (header->nwkFcf.linkLocal) {
     dbe:	23 85       	ldd	r18, Z+11	; 0x0b
     dc0:	22 ff       	sbrs	r18, 2
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
     dc4:	90 87       	std	Z+8, r25	; 0x08
     dc6:	87 83       	std	Z+7, r24	; 0x07
     dc8:	08 c0       	rjmp	.+16     	; 0xdda <nwkRoutePrepareTx+0x38>
     dca:	ef 01       	movw	r28, r30
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
     dcc:	63 85       	ldd	r22, Z+11	; 0x0b
     dce:	63 fb       	bst	r22, 3
     dd0:	66 27       	eor	r22, r22
     dd2:	60 f9       	bld	r22, 0
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
     dd4:	41 df       	rcall	.-382    	; 0xc58 <NWK_RouteNextHop>
     dd6:	98 87       	std	Y+8, r25	; 0x08
     dd8:	8f 83       	std	Y+7, r24	; 0x07
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
			nwkRouteDiscoveryRequest(frame);
		}
  #endif
	}
}
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     de0:	af 92       	push	r10
     de2:	bf 92       	push	r11
     de4:	cf 92       	push	r12
     de6:	df 92       	push	r13
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	ec 01       	movw	r28, r24
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
     df4:	1b 85       	ldd	r17, Y+11	; 0x0b
     df6:	13 fb       	bst	r17, 3
     df8:	11 27       	eor	r17, r17
     dfa:	10 f9       	bld	r17, 0
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
     dfc:	cf 84       	ldd	r12, Y+15	; 0x0f
     dfe:	d8 88       	ldd	r13, Y+16	; 0x10
     e00:	61 2f       	mov	r22, r17
     e02:	c6 01       	movw	r24, r12
     e04:	29 df       	rcall	.-430    	; 0xc58 <NWK_RouteNextHop>
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	59 f0       	breq	.+22     	; 0xe20 <nwkRouteFrame+0x40>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
     e0a:	fe 01       	movw	r30, r28
     e0c:	e9 57       	subi	r30, 0x79	; 121
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	11 82       	std	Z+1, r1	; 0x01
     e12:	10 82       	st	Z, r1
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
     e14:	31 97       	sbiw	r30, 0x01	; 1
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	80 83       	st	Z, r24
		nwkTxFrame(frame);
     e1a:	ce 01       	movw	r24, r28
     e1c:	6f d3       	rcall	.+1758   	; 0x14fc <nwkTxFrame>
     e1e:	22 c0       	rjmp	.+68     	; 0xe64 <nwkRouteFrame+0x84>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
     e20:	ad 84       	ldd	r10, Y+13	; 0x0d
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
     e22:	be 84       	ldd	r11, Y+14	; 0x0e
     e24:	22 de       	rcall	.-956    	; 0xa6a <nwkFrameAlloc>
     e26:	7c 01       	movw	r14, r24
     e28:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}

	nwkFrameCommandInit(frame);
     e2a:	d1 f0       	breq	.+52     	; 0xe60 <nwkRouteFrame+0x80>
     e2c:	83 de       	rcall	.-762    	; 0xb34 <nwkFrameCommandInit>

	frame->size += sizeof(NwkCommandRouteError_t);
     e2e:	f7 01       	movw	r30, r14
     e30:	81 81       	ldd	r24, Z+1	; 0x01
     e32:	8a 5f       	subi	r24, 0xFA	; 250
     e34:	81 83       	std	Z+1, r24	; 0x01
	frame->tx.confirm = NULL;
     e36:	e9 57       	subi	r30, 0x79	; 121
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	11 82       	std	Z+1, r1	; 0x01
     e3c:	10 82       	st	Z, r1

	frame->header.nwkDstAddr = src;
     e3e:	f7 01       	movw	r30, r14
     e40:	b0 8a       	std	Z+16, r11	; 0x10
     e42:	a7 86       	std	Z+15, r10	; 0x0f

	command = (NwkCommandRouteError_t *)frame->payload;
     e44:	ef 57       	subi	r30, 0x7F	; 127
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	01 90       	ld	r0, Z+
     e4a:	f0 81       	ld	r31, Z
     e4c:	e0 2d       	mov	r30, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 83       	st	Z, r24
	command->srcAddr = src;
     e52:	b2 82       	std	Z+2, r11	; 0x02
     e54:	a1 82       	std	Z+1, r10	; 0x01
	command->dstAddr = dst;
     e56:	d4 82       	std	Z+4, r13	; 0x04
	command->multicast = multicast;

	nwkTxFrame(frame);
     e58:	c3 82       	std	Z+3, r12	; 0x03
     e5a:	15 83       	std	Z+5, r17	; 0x05
     e5c:	c7 01       	movw	r24, r14
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
     e5e:	4e d3       	rcall	.+1692   	; 0x14fc <nwkTxFrame>
     e60:	ce 01       	movw	r24, r28
     e62:	39 de       	rcall	.-910    	; 0xad6 <nwkFrameFree>
	}
}
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	ff 90       	pop	r15
     e6c:	ef 90       	pop	r14
     e6e:	df 90       	pop	r13
     e70:	cf 90       	pop	r12
     e72:	bf 90       	pop	r11
     e74:	af 90       	pop	r10
     e76:	08 95       	ret

00000e78 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
     e78:	fc 01       	movw	r30, r24
     e7a:	21 85       	ldd	r18, Z+9	; 0x09
     e7c:	26 30       	cpi	r18, 0x06	; 6
     e7e:	49 f4       	brne	.+18     	; 0xe92 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     e80:	07 80       	ldd	r0, Z+7	; 0x07
     e82:	f0 85       	ldd	r31, Z+8	; 0x08
     e84:	e0 2d       	mov	r30, r0

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
     e86:	65 81       	ldd	r22, Z+5	; 0x05
     e88:	83 81       	ldd	r24, Z+3	; 0x03
     e8a:	94 81       	ldd	r25, Z+4	; 0x04
     e8c:	ef de       	rcall	.-546    	; 0xc6c <nwkRouteRemove>

	return true;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
     e92:	80 e0       	ldi	r24, 0x00	; 0
	}

	nwkRouteRemove(command->dstAddr, command->multicast);

	return true;
}
     e94:	08 95       	ret

00000e96 <nwkRxSeriveDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
	nwkRxAckControl = control;
     e96:	dc 01       	movw	r26, r24
     e98:	19 96       	adiw	r26, 0x09	; 9
     e9a:	2c 91       	ld	r18, X
     e9c:	19 97       	sbiw	r26, 0x09	; 9
     e9e:	22 23       	and	r18, r18
     ea0:	71 f0       	breq	.+28     	; 0xebe <nwkRxSeriveDataInd+0x28>
     ea2:	17 96       	adiw	r26, 0x07	; 7
     ea4:	ed 91       	ld	r30, X+
     ea6:	fc 91       	ld	r31, X
     ea8:	18 97       	sbiw	r26, 0x08	; 8
     eaa:	20 81       	ld	r18, Z
     eac:	22 23       	and	r18, r18
     eae:	19 f0       	breq	.+6      	; 0xeb6 <nwkRxSeriveDataInd+0x20>
     eb0:	21 30       	cpi	r18, 0x01	; 1
     eb2:	19 f0       	breq	.+6      	; 0xeba <nwkRxSeriveDataInd+0x24>
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <nwkRxSeriveDataInd+0x2c>
     eb6:	b6 c3       	rjmp	.+1900   	; 0x1624 <nwkTxAckReceived>
     eb8:	08 95       	ret
     eba:	de cf       	rjmp	.-68     	; 0xe78 <nwkRouteErrorReceived>
     ebc:	08 95       	ret
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	08 95       	ret
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	08 95       	ret

00000ec6 <nwkRxDuplicateRejectionTimerHandler>:
     ec6:	bc 01       	movw	r22, r24
     ec8:	e5 e2       	ldi	r30, 0x25	; 37
     eca:	f7 e0       	ldi	r31, 0x07	; 7
     ecc:	27 e5       	ldi	r18, 0x57	; 87
     ece:	37 e0       	ldi	r19, 0x07	; 7
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	51 e0       	ldi	r21, 0x01	; 1
     ed4:	90 81       	ld	r25, Z
     ed6:	99 23       	and	r25, r25
     ed8:	19 f0       	breq	.+6      	; 0xee0 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     eda:	91 50       	subi	r25, 0x01	; 1
     edc:	90 83       	st	Z, r25
     ede:	45 2f       	mov	r20, r21
     ee0:	35 96       	adiw	r30, 0x05	; 5
     ee2:	e2 17       	cp	r30, r18
     ee4:	f3 07       	cpc	r31, r19
     ee6:	b1 f7       	brne	.-20     	; 0xed4 <nwkRxDuplicateRejectionTimerHandler+0xe>
     ee8:	44 23       	and	r20, r20
     eea:	11 f0       	breq	.+4      	; 0xef0 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     eec:	cb 01       	movw	r24, r22
     eee:	50 c6       	rjmp	.+3232   	; 0x1b90 <SYS_TimerStart>
     ef0:	08 95       	ret

00000ef2 <nwkRxInit>:
     ef2:	e5 e2       	ldi	r30, 0x25	; 37
     ef4:	f7 e0       	ldi	r31, 0x07	; 7
     ef6:	87 e5       	ldi	r24, 0x57	; 87
     ef8:	97 e0       	ldi	r25, 0x07	; 7
     efa:	10 82       	st	Z, r1
     efc:	35 96       	adiw	r30, 0x05	; 5
     efe:	e8 17       	cp	r30, r24
     f00:	f9 07       	cpc	r31, r25
     f02:	d9 f7       	brne	.-10     	; 0xefa <nwkRxInit+0x8>
     f04:	e3 e1       	ldi	r30, 0x13	; 19
     f06:	f7 e0       	ldi	r31, 0x07	; 7
     f08:	84 e6       	ldi	r24, 0x64	; 100
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	86 83       	std	Z+6, r24	; 0x06
     f12:	97 83       	std	Z+7, r25	; 0x07
     f14:	a0 87       	std	Z+8, r26	; 0x08
     f16:	b1 87       	std	Z+9, r27	; 0x09
     f18:	12 86       	std	Z+10, r1	; 0x0a
     f1a:	83 e6       	ldi	r24, 0x63	; 99
     f1c:	97 e0       	ldi	r25, 0x07	; 7
     f1e:	94 87       	std	Z+12, r25	; 0x0c
     f20:	83 87       	std	Z+11, r24	; 0x0b
     f22:	6b e4       	ldi	r22, 0x4B	; 75
     f24:	77 e0       	ldi	r23, 0x07	; 7
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	9d cc       	rjmp	.-1734   	; 0x864 <NWK_OpenEndpoint>
     f2a:	08 95       	ret

00000f2c <PHY_DataInd>:
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	dc 01       	movw	r26, r24
     f32:	ed 91       	ld	r30, X+
     f34:	fc 91       	ld	r31, X
     f36:	11 97       	sbiw	r26, 0x01	; 1
     f38:	21 81       	ldd	r18, Z+1	; 0x01
     f3a:	28 38       	cpi	r18, 0x88	; 136
     f3c:	f9 f4       	brne	.+62     	; 0xf7c <PHY_DataInd+0x50>
     f3e:	20 81       	ld	r18, Z
     f40:	2f 7d       	andi	r18, 0xDF	; 223
     f42:	21 34       	cpi	r18, 0x41	; 65
     f44:	d9 f4       	brne	.+54     	; 0xf7c <PHY_DataInd+0x50>
     f46:	12 96       	adiw	r26, 0x02	; 2
     f48:	2c 91       	ld	r18, X
     f4a:	20 31       	cpi	r18, 0x10	; 16
     f4c:	b8 f0       	brcs	.+46     	; 0xf7c <PHY_DataInd+0x50>
     f4e:	ec 01       	movw	r28, r24
     f50:	8c dd       	rcall	.-1256   	; 0xa6a <nwkFrameAlloc>
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	99 f0       	breq	.+38     	; 0xf7c <PHY_DataInd+0x50>
     f56:	20 e2       	ldi	r18, 0x20	; 32
     f58:	fc 01       	movw	r30, r24
     f5a:	20 83       	st	Z, r18
     f5c:	2a 81       	ldd	r18, Y+2	; 0x02
     f5e:	21 83       	std	Z+1, r18	; 0x01
     f60:	2b 81       	ldd	r18, Y+3	; 0x03
     f62:	ed 57       	subi	r30, 0x7D	; 125
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	20 83       	st	Z, r18
     f68:	2c 81       	ldd	r18, Y+4	; 0x04
     f6a:	31 96       	adiw	r30, 0x01	; 1
     f6c:	20 83       	st	Z, r18
     f6e:	4a 81       	ldd	r20, Y+2	; 0x02
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	68 81       	ld	r22, Y
     f74:	79 81       	ldd	r23, Y+1	; 0x01
     f76:	02 96       	adiw	r24, 0x02	; 2
     f78:	0e 94 e7 14 	call	0x29ce	; 0x29ce <memcpy>
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     f82:	2f 92       	push	r2
     f84:	3f 92       	push	r3
     f86:	4f 92       	push	r4
     f88:	5f 92       	push	r5
     f8a:	6f 92       	push	r6
     f8c:	7f 92       	push	r7
     f8e:	8f 92       	push	r8
     f90:	9f 92       	push	r9
     f92:	af 92       	push	r10
     f94:	bf 92       	push	r11
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	2c 97       	sbiw	r28, 0x0c	; 12
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
	NwkFrame_t *frame = NULL;
     fb6:	00 e0       	ldi	r16, 0x00	; 0
     fb8:	10 e0       	ldi	r17, 0x00	; 0

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
     fba:	0f 2e       	mov	r0, r31
     fbc:	f4 e2       	ldi	r31, 0x24	; 36
     fbe:	bf 2e       	mov	r11, r31
     fc0:	f0 2d       	mov	r31, r0

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
     fc2:	0f 2e       	mov	r0, r31
     fc4:	fd e9       	ldi	r31, 0x9D	; 157
     fc6:	ef 2e       	mov	r14, r31
     fc8:	f8 e0       	ldi	r31, 0x08	; 8
     fca:	ff 2e       	mov	r15, r31
     fcc:	f0 2d       	mov	r31, r0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
     fce:	55 24       	eor	r5, r5
     fd0:	53 94       	inc	r5
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
     fd2:	68 94       	set
     fd4:	aa 24       	eor	r10, r10
     fd6:	a4 f8       	bld	r10, 4
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
     fd8:	68 94       	set
     fda:	77 24       	eor	r7, r7
     fdc:	73 f8       	bld	r7, 3
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
     fde:	68 94       	set
     fe0:	66 24       	eor	r6, r6
     fe2:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     fe4:	31 2c       	mov	r3, r1
     fe6:	21 2c       	mov	r2, r1
	}

	freeEntry->src = header->nwkSrcAddr;
	freeEntry->seq = header->nwkSeq;
	freeEntry->mask = 1;
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     fe8:	0f 2e       	mov	r0, r31
     fea:	ff e1       	ldi	r31, 0x1F	; 31
     fec:	4f 2e       	mov	r4, r31
     fee:	f0 2d       	mov	r31, r0
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
     ff0:	cc 24       	eor	r12, r12
     ff2:	c3 94       	inc	r12
     ff4:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
     ff6:	da c1       	rjmp	.+948    	; 0x13ac <nwkRxTaskHandler+0x42a>
		switch (frame->state) {
     ff8:	d8 01       	movw	r26, r16
     ffa:	8c 91       	ld	r24, X
     ffc:	82 32       	cpi	r24, 0x22	; 34
     ffe:	09 f4       	brne	.+2      	; 0x1002 <nwkRxTaskHandler+0x80>
    1000:	05 c1       	rjmp	.+522    	; 0x120c <nwkRxTaskHandler+0x28a>
    1002:	18 f4       	brcc	.+6      	; 0x100a <nwkRxTaskHandler+0x88>
    1004:	80 32       	cpi	r24, 0x20	; 32
    1006:	41 f0       	breq	.+16     	; 0x1018 <nwkRxTaskHandler+0x96>
    1008:	d1 c1       	rjmp	.+930    	; 0x13ac <nwkRxTaskHandler+0x42a>
    100a:	83 32       	cpi	r24, 0x23	; 35
    100c:	09 f4       	brne	.+2      	; 0x1010 <nwkRxTaskHandler+0x8e>
    100e:	c9 c1       	rjmp	.+914    	; 0x13a2 <nwkRxTaskHandler+0x420>
    1010:	84 32       	cpi	r24, 0x24	; 36
    1012:	09 f4       	brne	.+2      	; 0x1016 <nwkRxTaskHandler+0x94>
    1014:	c9 c1       	rjmp	.+914    	; 0x13a8 <nwkRxTaskHandler+0x426>
    1016:	ca c1       	rjmp	.+916    	; 0x13ac <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    1018:	f8 01       	movw	r30, r16
    101a:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
	if (header->nwkFcf.security) {
    101c:	83 85       	ldd	r24, Z+11	; 0x0b
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    101e:	98 2f       	mov	r25, r24
    1020:	9a 70       	andi	r25, 0x0A	; 10
    1022:	09 f0       	breq	.+2      	; 0x1026 <nwkRxTaskHandler+0xa4>
    1024:	c3 c1       	rjmp	.+902    	; 0x13ac <nwkRxTaskHandler+0x42a>
		return;
	}
#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    1026:	25 81       	ldd	r18, Z+5	; 0x05
    1028:	36 81       	ldd	r19, Z+6	; 0x06
    102a:	2f 3f       	cpi	r18, 0xFF	; 255
    102c:	3f 4f       	sbci	r19, 0xFF	; 255
    102e:	91 f4       	brne	.+36     	; 0x1054 <nwkRxTaskHandler+0xd2>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    1030:	d8 01       	movw	r26, r16
    1032:	1f 96       	adiw	r26, 0x0f	; 15
    1034:	8d 91       	ld	r24, X+
    1036:	9c 91       	ld	r25, X
    1038:	50 97       	sbiw	r26, 0x10	; 16
    103a:	f7 01       	movw	r30, r14
    103c:	20 81       	ld	r18, Z
    103e:	31 81       	ldd	r19, Z+1	; 0x01
    1040:	28 17       	cp	r18, r24
    1042:	39 07       	cpc	r19, r25
    1044:	19 f0       	breq	.+6      	; 0x104c <nwkRxTaskHandler+0xca>
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	09 f0       	breq	.+2      	; 0x104c <nwkRxTaskHandler+0xca>
    104a:	b0 c1       	rjmp	.+864    	; 0x13ac <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
				frame->state = NWK_RX_STATE_DECRYPT;
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    104c:	e2 e2       	ldi	r30, 0x22	; 34
    104e:	d8 01       	movw	r26, r16
    1050:	ec 93       	st	X, r30
    1052:	ac c1       	rjmp	.+856    	; 0x13ac <nwkRxTaskHandler+0x42a>
	if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi)) {
		return;
	}
#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    1054:	d8 01       	movw	r26, r16
    1056:	1f 96       	adiw	r26, 0x0f	; 15
    1058:	2d 91       	ld	r18, X+
    105a:	3c 91       	ld	r19, X
    105c:	50 97       	sbiw	r26, 0x10	; 16
    105e:	2f 3f       	cpi	r18, 0xFF	; 255
    1060:	3f 4f       	sbci	r19, 0xFF	; 255
    1062:	11 f4       	brne	.+4      	; 0x1068 <nwkRxTaskHandler+0xe6>
    1064:	80 fd       	sbrc	r24, 0
    1066:	a2 c1       	rjmp	.+836    	; 0x13ac <nwkRxTaskHandler+0x42a>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    1068:	f7 01       	movw	r30, r14
    106a:	20 81       	ld	r18, Z
    106c:	31 81       	ldd	r19, Z+1	; 0x01
    106e:	d8 01       	movw	r26, r16
    1070:	1d 96       	adiw	r26, 0x0d	; 13
    1072:	8d 91       	ld	r24, X+
    1074:	9c 91       	ld	r25, X
    1076:	1e 97       	sbiw	r26, 0x0e	; 14
    1078:	28 17       	cp	r18, r24
    107a:	39 07       	cpc	r19, r25
    107c:	09 f4       	brne	.+2      	; 0x1080 <nwkRxTaskHandler+0xfe>
    107e:	96 c1       	rjmp	.+812    	; 0x13ac <nwkRxTaskHandler+0x42a>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    1080:	c8 01       	movw	r24, r16
    1082:	f9 dd       	rcall	.-1038   	; 0xc76 <nwkRouteFrameReceived>
    1084:	e1 e2       	ldi	r30, 0x21	; 33
    1086:	f7 e0       	ldi	r31, 0x07	; 7
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    108c:	83 2c       	mov	r8, r3
    108e:	92 2c       	mov	r9, r2

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    1090:	9c 01       	movw	r18, r24

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    1092:	44 81       	ldd	r20, Z+4	; 0x04
    1094:	44 23       	and	r20, r20
    1096:	09 f4       	brne	.+2      	; 0x109a <nwkRxTaskHandler+0x118>
    1098:	74 c0       	rjmp	.+232    	; 0x1182 <nwkRxTaskHandler+0x200>
    109a:	d8 01       	movw	r26, r16
    109c:	1d 96       	adiw	r26, 0x0d	; 13
    109e:	6d 91       	ld	r22, X+
    10a0:	7c 91       	ld	r23, X
    10a2:	1e 97       	sbiw	r26, 0x0e	; 14
    10a4:	40 81       	ld	r20, Z
    10a6:	51 81       	ldd	r21, Z+1	; 0x01
    10a8:	64 17       	cp	r22, r20
    10aa:	75 07       	cpc	r23, r21
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <nwkRxTaskHandler+0x12e>
    10ae:	6a c0       	rjmp	.+212    	; 0x1184 <nwkRxTaskHandler+0x202>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    10b0:	1c 96       	adiw	r26, 0x0c	; 12
    10b2:	8c 91       	ld	r24, X
    10b4:	1c 97       	sbiw	r26, 0x0c	; 12
    10b6:	f9 01       	movw	r30, r18
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	e2 0f       	add	r30, r18
    10c2:	f3 1f       	adc	r31, r19
    10c4:	ef 5d       	subi	r30, 0xDF	; 223
    10c6:	f8 4f       	sbci	r31, 0xF8	; 248
    10c8:	92 81       	ldd	r25, Z+2	; 0x02
    10ca:	98 1b       	sub	r25, r24

			if (diff < 8) {
    10cc:	98 30       	cpi	r25, 0x08	; 8
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <nwkRxTaskHandler+0x150>
    10d0:	3e c0       	rjmp	.+124    	; 0x114e <nwkRxTaskHandler+0x1cc>
				if (entry->mask & (1 << diff)) {
    10d2:	f9 01       	movw	r30, r18
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	e2 0f       	add	r30, r18
    10de:	f3 1f       	adc	r31, r19
    10e0:	ef 5d       	subi	r30, 0xDF	; 223
    10e2:	f8 4f       	sbci	r31, 0xF8	; 248
    10e4:	83 81       	ldd	r24, Z+3	; 0x03
    10e6:	48 2f       	mov	r20, r24
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	09 2e       	mov	r0, r25
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <nwkRxTaskHandler+0x170>
    10ee:	55 95       	asr	r21
    10f0:	47 95       	ror	r20
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <nwkRxTaskHandler+0x16c>
    10f6:	40 ff       	sbrs	r20, 0
    10f8:	17 c0       	rjmp	.+46     	; 0x1128 <nwkRxTaskHandler+0x1a6>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    10fa:	f7 01       	movw	r30, r14
    10fc:	20 81       	ld	r18, Z
    10fe:	31 81       	ldd	r19, Z+1	; 0x01
    1100:	17 96       	adiw	r26, 0x07	; 7
    1102:	8d 91       	ld	r24, X+
    1104:	9c 91       	ld	r25, X
    1106:	18 97       	sbiw	r26, 0x08	; 8
    1108:	28 17       	cp	r18, r24
    110a:	39 07       	cpc	r19, r25
    110c:	09 f0       	breq	.+2      	; 0x1110 <nwkRxTaskHandler+0x18e>
    110e:	4e c1       	rjmp	.+668    	; 0x13ac <nwkRxTaskHandler+0x42a>
						nwkRouteRemove(
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    1110:	1b 96       	adiw	r26, 0x0b	; 11
    1112:	6c 91       	ld	r22, X
    1114:	1b 97       	sbiw	r26, 0x0b	; 11
    1116:	63 fb       	bst	r22, 3
    1118:	66 27       	eor	r22, r22
    111a:	60 f9       	bld	r22, 0

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    111c:	1f 96       	adiw	r26, 0x0f	; 15
    111e:	8d 91       	ld	r24, X+
    1120:	9c 91       	ld	r25, X
    1122:	50 97       	sbiw	r26, 0x10	; 16
    1124:	a3 dd       	rcall	.-1210   	; 0xc6c <nwkRouteRemove>
    1126:	42 c1       	rjmp	.+644    	; 0x13ac <nwkRxTaskHandler+0x42a>
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    1128:	f9 01       	movw	r30, r18
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	ee 0f       	add	r30, r30
    1130:	ff 1f       	adc	r31, r31
    1132:	2e 0f       	add	r18, r30
    1134:	3f 1f       	adc	r19, r31
    1136:	f9 01       	movw	r30, r18
    1138:	ef 5d       	subi	r30, 0xDF	; 223
    113a:	f8 4f       	sbci	r31, 0xF8	; 248
    113c:	96 01       	movw	r18, r12
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <nwkRxTaskHandler+0x1c2>
    1140:	22 0f       	add	r18, r18
    1142:	33 1f       	adc	r19, r19
    1144:	9a 95       	dec	r25
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <nwkRxTaskHandler+0x1be>
    1148:	82 2b       	or	r24, r18
    114a:	83 83       	std	Z+3, r24	; 0x03
    114c:	36 c1       	rjmp	.+620    	; 0x13ba <nwkRxTaskHandler+0x438>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    114e:	f9 01       	movw	r30, r18
    1150:	ee 0f       	add	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	2e 0f       	add	r18, r30
    115a:	3f 1f       	adc	r19, r31
    115c:	f9 01       	movw	r30, r18
    115e:	ef 5d       	subi	r30, 0xDF	; 223
    1160:	f8 4f       	sbci	r31, 0xF8	; 248
    1162:	82 83       	std	Z+2, r24	; 0x02
				entry->mask = (entry->mask << shift) | 1;
    1164:	83 81       	ldd	r24, Z+3	; 0x03
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	91 95       	neg	r25
    116c:	a9 01       	movw	r20, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <nwkRxTaskHandler+0x1f2>
    1170:	44 0f       	add	r20, r20
    1172:	55 1f       	adc	r21, r21
    1174:	9a 95       	dec	r25
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <nwkRxTaskHandler+0x1ee>
    1178:	ca 01       	movw	r24, r20
    117a:	81 60       	ori	r24, 0x01	; 1
    117c:	83 83       	std	Z+3, r24	; 0x03
				entry->ttl = DUPLICATE_REJECTION_TTL;
    117e:	44 82       	std	Z+4, r4	; 0x04
    1180:	1c c1       	rjmp	.+568    	; 0x13ba <nwkRxTaskHandler+0x438>
				return false;
			}
		}

		if (0 == entry->ttl) {
			freeEntry = entry;
    1182:	4f 01       	movw	r8, r30
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    1188:	8a 30       	cpi	r24, 0x0A	; 10
    118a:	91 05       	cpc	r25, r1
    118c:	09 f0       	breq	.+2      	; 0x1190 <nwkRxTaskHandler+0x20e>
    118e:	80 cf       	rjmp	.-256    	; 0x1090 <nwkRxTaskHandler+0x10e>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    1190:	81 14       	cp	r8, r1
    1192:	91 04       	cpc	r9, r1
    1194:	09 f4       	brne	.+2      	; 0x1198 <nwkRxTaskHandler+0x216>
    1196:	0a c1       	rjmp	.+532    	; 0x13ac <nwkRxTaskHandler+0x42a>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    1198:	d8 01       	movw	r26, r16
    119a:	1d 96       	adiw	r26, 0x0d	; 13
    119c:	8d 91       	ld	r24, X+
    119e:	9c 91       	ld	r25, X
    11a0:	1e 97       	sbiw	r26, 0x0e	; 14
    11a2:	f4 01       	movw	r30, r8
    11a4:	91 83       	std	Z+1, r25	; 0x01
    11a6:	80 83       	st	Z, r24
	freeEntry->seq = header->nwkSeq;
    11a8:	1c 96       	adiw	r26, 0x0c	; 12
    11aa:	8c 91       	ld	r24, X
    11ac:	82 83       	std	Z+2, r24	; 0x02
	freeEntry->mask = 1;
    11ae:	53 82       	std	Z+3, r5	; 0x03
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    11b0:	44 82       	std	Z+4, r4	; 0x04

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    11b2:	83 e1       	ldi	r24, 0x13	; 19
    11b4:	97 e0       	ldi	r25, 0x07	; 7
    11b6:	ec d4       	rcall	.+2520   	; 0x1b90 <SYS_TimerStart>
    11b8:	00 c1       	rjmp	.+512    	; 0x13ba <nwkRxTaskHandler+0x438>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    11ba:	d7 01       	movw	r26, r14
    11bc:	2d 91       	ld	r18, X+
    11be:	3c 91       	ld	r19, X
				header->nwkDstAddr &&
    11c0:	f8 01       	movw	r30, r16
    11c2:	87 85       	ldd	r24, Z+15	; 0x0f
    11c4:	90 89       	ldd	r25, Z+16	; 0x10
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    11c6:	28 17       	cp	r18, r24
    11c8:	39 07       	cpc	r19, r25
    11ca:	81 f0       	breq	.+32     	; 0x11ec <nwkRxTaskHandler+0x26a>
				header->nwkDstAddr &&
    11cc:	43 85       	ldd	r20, Z+11	; 0x0b
    11ce:	42 fd       	sbrc	r20, 2
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    11d0:	0b c0       	rjmp	.+22     	; 0x11e8 <nwkRxTaskHandler+0x266>
    11d2:	c8 01       	movw	r24, r16
    11d4:	e2 d1       	rcall	.+964    	; 0x159a <nwkTxBroadcastFrame>
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    11d6:	d7 01       	movw	r26, r14
    11d8:	2d 91       	ld	r18, X+
    11da:	3c 91       	ld	r19, X
    11dc:	f8 01       	movw	r30, r16
    11de:	87 85       	ldd	r24, Z+15	; 0x0f
    11e0:	90 89       	ldd	r25, Z+16	; 0x10
    11e2:	28 17       	cp	r18, r24
    11e4:	39 07       	cpc	r19, r25
    11e6:	11 f0       	breq	.+4      	; 0x11ec <nwkRxTaskHandler+0x26a>
    11e8:	01 96       	adiw	r24, 0x01	; 1
    11ea:	21 f4       	brne	.+8      	; 0x11f4 <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
				frame->state = NWK_RX_STATE_DECRYPT;
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    11ec:	e2 e2       	ldi	r30, 0x22	; 34
    11ee:	d8 01       	movw	r26, r16
    11f0:	ec 93       	st	X, r30
    11f2:	dc c0       	rjmp	.+440    	; 0x13ac <nwkRxTaskHandler+0x42a>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    11f4:	d8 01       	movw	r26, r16
    11f6:	17 96       	adiw	r26, 0x07	; 7
    11f8:	8d 91       	ld	r24, X+
    11fa:	9c 91       	ld	r25, X
    11fc:	18 97       	sbiw	r26, 0x08	; 8
    11fe:	82 17       	cp	r24, r18
    1200:	93 07       	cpc	r25, r19
    1202:	09 f0       	breq	.+2      	; 0x1206 <nwkRxTaskHandler+0x284>
    1204:	d3 c0       	rjmp	.+422    	; 0x13ac <nwkRxTaskHandler+0x42a>
			frame->state = NWK_RX_STATE_ROUTE;
    1206:	e3 e2       	ldi	r30, 0x23	; 35
    1208:	ec 93       	st	X, r30
    120a:	d0 c0       	rjmp	.+416    	; 0x13ac <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    120c:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    1210:	d8 01       	movw	r26, r16
    1212:	51 96       	adiw	r26, 0x11	; 17
    1214:	8c 91       	ld	r24, X
    1216:	51 97       	sbiw	r26, 0x11	; 17
    1218:	82 95       	swap	r24
    121a:	8f 70       	andi	r24, 0x0F	; 15
    121c:	e8 2f       	mov	r30, r24
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	ed 55       	subi	r30, 0x5D	; 93
    1226:	f7 4f       	sbci	r31, 0xF7	; 247
    1228:	01 90       	ld	r0, Z+
    122a:	f0 81       	ld	r31, Z
    122c:	e0 2d       	mov	r30, r0
    122e:	30 97       	sbiw	r30, 0x00	; 0
    1230:	09 f4       	brne	.+2      	; 0x1234 <nwkRxTaskHandler+0x2b2>
    1232:	60 c0       	rjmp	.+192    	; 0x12f4 <nwkRxTaskHandler+0x372>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    1234:	1d 96       	adiw	r26, 0x0d	; 13
    1236:	2d 91       	ld	r18, X+
    1238:	3c 91       	ld	r19, X
    123a:	1e 97       	sbiw	r26, 0x0e	; 14
    123c:	3a 83       	std	Y+2, r19	; 0x02
    123e:	29 83       	std	Y+1, r18	; 0x01
	ind.dstAddr = header->nwkDstAddr;
    1240:	1f 96       	adiw	r26, 0x0f	; 15
    1242:	4d 91       	ld	r20, X+
    1244:	5c 91       	ld	r21, X
    1246:	50 97       	sbiw	r26, 0x10	; 16
    1248:	5c 83       	std	Y+4, r21	; 0x04
    124a:	4b 83       	std	Y+3, r20	; 0x03
	ind.srcEndpoint = header->nwkSrcEndpoint;
    124c:	51 96       	adiw	r26, 0x11	; 17
    124e:	9c 91       	ld	r25, X
    1250:	51 97       	sbiw	r26, 0x11	; 17
    1252:	9f 70       	andi	r25, 0x0F	; 15
    1254:	9d 83       	std	Y+5, r25	; 0x05
	ind.dstEndpoint = header->nwkDstEndpoint;
    1256:	8e 83       	std	Y+6, r24	; 0x06
	ind.data = frame->payload;
    1258:	af 57       	subi	r26, 0x7F	; 127
    125a:	bf 4f       	sbci	r27, 0xFF	; 255
    125c:	8d 91       	ld	r24, X+
    125e:	9c 91       	ld	r25, X
    1260:	99 87       	std	Y+9, r25	; 0x09
    1262:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    1264:	b8 01       	movw	r22, r16
    1266:	6e 5f       	subi	r22, 0xFE	; 254
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
	ind.size = nwkFramePayloadSize(frame);
    126a:	86 1b       	sub	r24, r22
    126c:	97 0b       	sbc	r25, r23
    126e:	d8 01       	movw	r26, r16
    1270:	11 96       	adiw	r26, 0x01	; 1
    1272:	9c 91       	ld	r25, X
    1274:	11 97       	sbiw	r26, 0x01	; 1
    1276:	98 1b       	sub	r25, r24
    1278:	9a 87       	std	Y+10, r25	; 0x0a
	ind.lqi = frame->rx.lqi;
    127a:	ad 57       	subi	r26, 0x7D	; 125
    127c:	bf 4f       	sbci	r27, 0xFF	; 255
    127e:	8c 91       	ld	r24, X
    1280:	8b 87       	std	Y+11, r24	; 0x0b
	ind.rssi = frame->rx.rssi;
    1282:	11 96       	adiw	r26, 0x01	; 1
    1284:	8c 91       	ld	r24, X
    1286:	8c 87       	std	Y+12, r24	; 0x0c

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1288:	d8 01       	movw	r26, r16
    128a:	1b 96       	adiw	r26, 0x0b	; 11
    128c:	9c 91       	ld	r25, X
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    128e:	69 2f       	mov	r22, r25
    1290:	63 70       	andi	r22, 0x03	; 3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1292:	92 fd       	sbrc	r25, 2
    1294:	02 c0       	rjmp	.+4      	; 0x129a <nwkRxTaskHandler+0x318>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	01 c0       	rjmp	.+2      	; 0x129c <nwkRxTaskHandler+0x31a>
    129a:	80 e2       	ldi	r24, 0x20	; 32
    129c:	86 2b       	or	r24, r22
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    129e:	93 fd       	sbrc	r25, 3
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <nwkRxTaskHandler+0x324>
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <nwkRxTaskHandler+0x326>
    12a6:	90 e4       	ldi	r25, 0x40	; 64
    12a8:	89 2b       	or	r24, r25
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    12aa:	4f 3f       	cpi	r20, 0xFF	; 255
    12ac:	5f 4f       	sbci	r21, 0xFF	; 255
    12ae:	11 f0       	breq	.+4      	; 0x12b4 <nwkRxTaskHandler+0x332>
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <nwkRxTaskHandler+0x334>
    12b4:	96 2d       	mov	r25, r6
    12b6:	89 2b       	or	r24, r25
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    12b8:	d8 01       	movw	r26, r16
    12ba:	19 96       	adiw	r26, 0x09	; 9
    12bc:	4d 91       	ld	r20, X+
    12be:	5c 91       	ld	r21, X
    12c0:	1a 97       	sbiw	r26, 0x0a	; 10
    12c2:	24 17       	cp	r18, r20
    12c4:	35 07       	cpc	r19, r21
    12c6:	11 f0       	breq	.+4      	; 0x12cc <nwkRxTaskHandler+0x34a>
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <nwkRxTaskHandler+0x34c>
    12cc:	97 2d       	mov	r25, r7
    12ce:	89 2b       	or	r24, r25
    12d0:	8f 83       	std	Y+7, r24	; 0x07
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    12d2:	d8 01       	movw	r26, r16
    12d4:	15 96       	adiw	r26, 0x05	; 5
    12d6:	2d 91       	ld	r18, X+
    12d8:	3c 91       	ld	r19, X
    12da:	16 97       	sbiw	r26, 0x06	; 6
    12dc:	2f 3f       	cpi	r18, 0xFF	; 255
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	11 f0       	breq	.+4      	; 0x12e6 <nwkRxTaskHandler+0x364>
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <nwkRxTaskHandler+0x366>
    12e6:	9a 2d       	mov	r25, r10
    12e8:	89 2b       	or	r24, r25
    12ea:	8f 83       	std	Y+7, r24	; 0x07
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    12ec:	ce 01       	movw	r24, r28
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	19 95       	eicall
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <nwkRxTaskHandler+0x374>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    12f4:	80 e0       	ldi	r24, 0x00	; 0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    12f6:	f8 01       	movw	r30, r16
    12f8:	93 85       	ldd	r25, Z+11	; 0x0b
    12fa:	90 ff       	sbrs	r25, 0
		ack = false;
    12fc:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    12fe:	d8 01       	movw	r26, r16
    1300:	17 96       	adiw	r26, 0x07	; 7
    1302:	2d 91       	ld	r18, X+
    1304:	3c 91       	ld	r19, X
    1306:	18 97       	sbiw	r26, 0x08	; 8
    1308:	2f 3f       	cpi	r18, 0xFF	; 255
    130a:	3f 4f       	sbci	r19, 0xFF	; 255
    130c:	69 f4       	brne	.+26     	; 0x1328 <nwkRxTaskHandler+0x3a6>
    130e:	f7 01       	movw	r30, r14
    1310:	40 81       	ld	r20, Z
    1312:	51 81       	ldd	r21, Z+1	; 0x01
    1314:	d8 01       	movw	r26, r16
    1316:	1f 96       	adiw	r26, 0x0f	; 15
    1318:	2d 91       	ld	r18, X+
    131a:	3c 91       	ld	r19, X
    131c:	50 97       	sbiw	r26, 0x10	; 16
    131e:	42 17       	cp	r20, r18
    1320:	53 07       	cpc	r21, r19
    1322:	11 f4       	brne	.+4      	; 0x1328 <nwkRxTaskHandler+0x3a6>
			nwkIb.addr == frame->header.nwkDstAddr &&
    1324:	93 ff       	sbrs	r25, 3
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    1326:	85 2d       	mov	r24, r5
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    1328:	f8 01       	movw	r30, r16
    132a:	25 81       	ldd	r18, Z+5	; 0x05
    132c:	36 81       	ldd	r19, Z+6	; 0x06
    132e:	2f 3f       	cpi	r18, 0xFF	; 255
    1330:	3f 4f       	sbci	r19, 0xFF	; 255
    1332:	a1 f1       	breq	.+104    	; 0x139c <nwkRxTaskHandler+0x41a>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    1334:	d7 01       	movw	r26, r14
    1336:	2d 91       	ld	r18, X+
    1338:	3c 91       	ld	r19, X
    133a:	2f 3f       	cpi	r18, 0xFF	; 255
    133c:	3f 4f       	sbci	r19, 0xFF	; 255
		ack = false;
	}

	if (ack) {
    133e:	71 f1       	breq	.+92     	; 0x139c <nwkRxTaskHandler+0x41a>
    1340:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    1342:	61 f1       	breq	.+88     	; 0x139c <nwkRxTaskHandler+0x41a>
    1344:	92 db       	rcall	.-2268   	; 0xa6a <nwkFrameAlloc>
    1346:	4c 01       	movw	r8, r24
    1348:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}

	nwkFrameCommandInit(ack);
    134a:	41 f1       	breq	.+80     	; 0x139c <nwkRxTaskHandler+0x41a>
    134c:	f3 db       	rcall	.-2074   	; 0xb34 <nwkFrameCommandInit>

	ack->size += sizeof(NwkCommandAck_t);
    134e:	f4 01       	movw	r30, r8
    1350:	81 81       	ldd	r24, Z+1	; 0x01
    1352:	8d 5f       	subi	r24, 0xFD	; 253
    1354:	81 83       	std	Z+1, r24	; 0x01
	ack->tx.confirm = NULL;
    1356:	e9 57       	subi	r30, 0x79	; 121
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	11 82       	std	Z+1, r1	; 0x01
    135c:	10 82       	st	Z, r1

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    135e:	d8 01       	movw	r26, r16
    1360:	1b 96       	adiw	r26, 0x0b	; 11
    1362:	8c 91       	ld	r24, X
    1364:	1b 97       	sbiw	r26, 0x0b	; 11
    1366:	86 95       	lsr	r24
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	f4 01       	movw	r30, r8
    136c:	93 85       	ldd	r25, Z+11	; 0x0b
    136e:	80 fb       	bst	r24, 0
    1370:	91 f9       	bld	r25, 1
    1372:	93 87       	std	Z+11, r25	; 0x0b
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1374:	1d 96       	adiw	r26, 0x0d	; 13
    1376:	8d 91       	ld	r24, X+
    1378:	9c 91       	ld	r25, X
    137a:	1e 97       	sbiw	r26, 0x0e	; 14
    137c:	90 8b       	std	Z+16, r25	; 0x10
    137e:	87 87       	std	Z+15, r24	; 0x0f

	command = (NwkCommandAck_t *)ack->payload;
    1380:	ef 57       	subi	r30, 0x7F	; 127
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	01 90       	ld	r0, Z+
    1386:	f0 81       	ld	r31, Z
    1388:	e0 2d       	mov	r30, r0
	command->id = NWK_COMMAND_ACK;
    138a:	10 82       	st	Z, r1
	command->control = nwkRxAckControl;
    138c:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <nwkRxAckControl>
	command->seq = frame->header.nwkSeq;
    1390:	82 83       	std	Z+2, r24	; 0x02
    1392:	1c 96       	adiw	r26, 0x0c	; 12
    1394:	8c 91       	ld	r24, X

	nwkTxFrame(ack);
    1396:	81 83       	std	Z+1, r24	; 0x01
    1398:	c4 01       	movw	r24, r8

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    139a:	b0 d0       	rcall	.+352    	; 0x14fc <nwkTxFrame>
    139c:	d8 01       	movw	r26, r16
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    139e:	bc 92       	st	X, r11
    13a0:	05 c0       	rjmp	.+10     	; 0x13ac <nwkRxTaskHandler+0x42a>
    13a2:	c8 01       	movw	r24, r16
		}
		break;
    13a4:	1d dd       	rcall	.-1478   	; 0xde0 <nwkRouteFrame>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <nwkRxTaskHandler+0x42a>
    13a8:	c8 01       	movw	r24, r16
    13aa:	95 db       	rcall	.-2262   	; 0xad6 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    13ac:	c8 01       	movw	r24, r16
    13ae:	9d db       	rcall	.-2246   	; 0xaea <nwkFrameNext>
    13b0:	8c 01       	movw	r16, r24
    13b2:	89 2b       	or	r24, r25
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <nwkRxTaskHandler+0x436>
    13b6:	20 ce       	rjmp	.-960    	; 0xff8 <nwkRxTaskHandler+0x76>
    13b8:	07 c0       	rjmp	.+14     	; 0x13c8 <nwkRxTaskHandler+0x446>
    13ba:	f8 01       	movw	r30, r16
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    13bc:	87 81       	ldd	r24, Z+7	; 0x07
    13be:	90 85       	ldd	r25, Z+8	; 0x08
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <nwkRxTaskHandler+0x444>
    13c4:	08 cf       	rjmp	.-496    	; 0x11d6 <nwkRxTaskHandler+0x254>
    13c6:	f9 ce       	rjmp	.-526    	; 0x11ba <nwkRxTaskHandler+0x238>
    13c8:	2c 96       	adiw	r28, 0x0c	; 12
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	ff 90       	pop	r15
    13de:	ef 90       	pop	r14
    13e0:	df 90       	pop	r13
    13e2:	cf 90       	pop	r12
    13e4:	bf 90       	pop	r11
    13e6:	af 90       	pop	r10
    13e8:	9f 90       	pop	r9
    13ea:	8f 90       	pop	r8
    13ec:	7f 90       	pop	r7
    13ee:	6f 90       	pop	r6
    13f0:	5f 90       	pop	r5
    13f2:	4f 90       	pop	r4
    13f4:	3f 90       	pop	r3
    13f6:	2f 90       	pop	r2
    13f8:	08 95       	ret

000013fa <nwkTxDelayTimerHandler>:
    13fa:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
	frame->tx.status = status;
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	7c 01       	movw	r14, r24
    1406:	10 e0       	ldi	r17, 0x00	; 0
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	01 e0       	ldi	r16, 0x01	; 1
    140e:	c3 e1       	ldi	r28, 0x13	; 19
    1410:	13 c0       	rjmp	.+38     	; 0x1438 <nwkTxDelayTimerHandler+0x3e>
    1412:	fc 01       	movw	r30, r24
    1414:	20 81       	ld	r18, Z
    1416:	21 31       	cpi	r18, 0x11	; 17
    1418:	79 f4       	brne	.+30     	; 0x1438 <nwkTxDelayTimerHandler+0x3e>
    141a:	ec 57       	subi	r30, 0x7C	; 124
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	20 81       	ld	r18, Z
    1420:	31 81       	ldd	r19, Z+1	; 0x01
    1422:	21 50       	subi	r18, 0x01	; 1
    1424:	31 09       	sbc	r19, r1
    1426:	31 83       	std	Z+1, r19	; 0x01
    1428:	20 83       	st	Z, r18
    142a:	23 2b       	or	r18, r19
    142c:	21 f4       	brne	.+8      	; 0x1436 <nwkTxDelayTimerHandler+0x3c>
    142e:	fc 01       	movw	r30, r24
    1430:	c0 83       	st	Z, r28
    1432:	10 2f       	mov	r17, r16
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <nwkTxDelayTimerHandler+0x3e>
    1436:	10 2f       	mov	r17, r16
    1438:	58 db       	rcall	.-2384   	; 0xaea <nwkFrameNext>
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	51 f7       	brne	.-44     	; 0x1412 <nwkTxDelayTimerHandler+0x18>
    143e:	11 23       	and	r17, r17
    1440:	11 f0       	breq	.+4      	; 0x1446 <nwkTxDelayTimerHandler+0x4c>
    1442:	c7 01       	movw	r24, r14
    1444:	a5 d3       	rcall	.+1866   	; 0x1b90 <SYS_TimerStart>
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	08 95       	ret

00001452 <nwkTxAckWaitTimerHandler>:
    1452:	ef 92       	push	r14
    1454:	ff 92       	push	r15
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	7c 01       	movw	r14, r24
    1460:	10 e0       	ldi	r17, 0x00	; 0
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	01 e0       	ldi	r16, 0x01	; 1
    1468:	d7 e1       	ldi	r29, 0x17	; 23
    146a:	c0 e1       	ldi	r28, 0x10	; 16
    146c:	16 c0       	rjmp	.+44     	; 0x149a <nwkTxAckWaitTimerHandler+0x48>
    146e:	fc 01       	movw	r30, r24
    1470:	20 81       	ld	r18, Z
    1472:	26 31       	cpi	r18, 0x16	; 22
    1474:	91 f4       	brne	.+36     	; 0x149a <nwkTxAckWaitTimerHandler+0x48>
    1476:	ec 57       	subi	r30, 0x7C	; 124
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	20 81       	ld	r18, Z
    147c:	31 81       	ldd	r19, Z+1	; 0x01
    147e:	21 50       	subi	r18, 0x01	; 1
    1480:	31 09       	sbc	r19, r1
    1482:	31 83       	std	Z+1, r19	; 0x01
    1484:	20 83       	st	Z, r18
    1486:	23 2b       	or	r18, r19
    1488:	39 f4       	brne	.+14     	; 0x1498 <nwkTxAckWaitTimerHandler+0x46>
    148a:	fc 01       	movw	r30, r24
    148c:	d0 83       	st	Z, r29
    148e:	ed 57       	subi	r30, 0x7D	; 125
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	c0 83       	st	Z, r28
    1494:	10 2f       	mov	r17, r16
    1496:	01 c0       	rjmp	.+2      	; 0x149a <nwkTxAckWaitTimerHandler+0x48>
    1498:	10 2f       	mov	r17, r16
    149a:	27 db       	rcall	.-2482   	; 0xaea <nwkFrameNext>
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	39 f7       	brne	.-50     	; 0x146e <nwkTxAckWaitTimerHandler+0x1c>
    14a0:	11 23       	and	r17, r17
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <nwkTxAckWaitTimerHandler+0x56>
    14a4:	c7 01       	movw	r24, r14
    14a6:	74 d3       	rcall	.+1768   	; 0x1b90 <SYS_TimerStart>
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	ff 90       	pop	r15
    14b2:	ef 90       	pop	r14
    14b4:	08 95       	ret

000014b6 <nwkTxInit>:
    14b6:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <nwkTxPhyActiveFrame+0x1>
    14ba:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <nwkTxPhyActiveFrame>
    14be:	e0 e6       	ldi	r30, 0x60	; 96
    14c0:	f7 e0       	ldi	r31, 0x07	; 7
    14c2:	82 e3       	ldi	r24, 0x32	; 50
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a0 e0       	ldi	r26, 0x00	; 0
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	86 83       	std	Z+6, r24	; 0x06
    14cc:	97 83       	std	Z+7, r25	; 0x07
    14ce:	a0 87       	std	Z+8, r26	; 0x08
    14d0:	b1 87       	std	Z+9, r27	; 0x09
    14d2:	12 86       	std	Z+10, r1	; 0x0a
    14d4:	89 e2       	ldi	r24, 0x29	; 41
    14d6:	9a e0       	ldi	r25, 0x0A	; 10
    14d8:	94 87       	std	Z+12, r25	; 0x0c
    14da:	83 87       	std	Z+11, r24	; 0x0b
    14dc:	e3 e5       	ldi	r30, 0x53	; 83
    14de:	f7 e0       	ldi	r31, 0x07	; 7
    14e0:	8a e0       	ldi	r24, 0x0A	; 10
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a0 e0       	ldi	r26, 0x00	; 0
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	86 83       	std	Z+6, r24	; 0x06
    14ea:	97 83       	std	Z+7, r25	; 0x07
    14ec:	a0 87       	std	Z+8, r26	; 0x08
    14ee:	b1 87       	std	Z+9, r27	; 0x09
    14f0:	12 86       	std	Z+10, r1	; 0x0a
    14f2:	8d ef       	ldi	r24, 0xFD	; 253
    14f4:	99 e0       	ldi	r25, 0x09	; 9
    14f6:	94 87       	std	Z+12, r25	; 0x0c
    14f8:	83 87       	std	Z+11, r24	; 0x0b
    14fa:	08 95       	ret

000014fc <nwkTxFrame>:
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	ec 01       	movw	r28, r24
    1502:	fc 01       	movw	r30, r24
    1504:	ea 57       	subi	r30, 0x7A	; 122
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	80 81       	ld	r24, Z
    150a:	81 ff       	sbrs	r24, 1
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <nwkTxFrame+0x18>
    150e:	92 e1       	ldi	r25, 0x12	; 18
    1510:	98 83       	st	Y, r25
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <nwkTxFrame+0x1c>
    1514:	92 e1       	ldi	r25, 0x12	; 18
    1516:	98 83       	st	Y, r25
    1518:	fe 01       	movw	r30, r28
    151a:	ed 57       	subi	r30, 0x7D	; 125
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	10 82       	st	Z, r1
    1520:	80 ff       	sbrs	r24, 0
    1522:	05 c0       	rjmp	.+10     	; 0x152e <nwkTxFrame+0x32>
    1524:	2f ef       	ldi	r18, 0xFF	; 255
    1526:	3f ef       	ldi	r19, 0xFF	; 255
    1528:	3e 83       	std	Y+6, r19	; 0x06
    152a:	2d 83       	std	Y+5, r18	; 0x05
    152c:	06 c0       	rjmp	.+12     	; 0x153a <nwkTxFrame+0x3e>
    152e:	20 91 9f 08 	lds	r18, 0x089F	; 0x80089f <nwkIb+0x2>
    1532:	30 91 a0 08 	lds	r19, 0x08A0	; 0x8008a0 <nwkIb+0x3>
    1536:	3e 83       	std	Y+6, r19	; 0x06
    1538:	2d 83       	std	Y+5, r18	; 0x05
    153a:	85 70       	andi	r24, 0x05	; 5
    153c:	19 f4       	brne	.+6      	; 0x1544 <nwkTxFrame+0x48>
    153e:	ce 01       	movw	r24, r28
    1540:	30 dc       	rcall	.-1952   	; 0xda2 <nwkRoutePrepareTx>
    1542:	04 c0       	rjmp	.+8      	; 0x154c <nwkTxFrame+0x50>
    1544:	8f 85       	ldd	r24, Y+15	; 0x0f
    1546:	98 89       	ldd	r25, Y+16	; 0x10
    1548:	98 87       	std	Y+8, r25	; 0x08
    154a:	8f 83       	std	Y+7, r24	; 0x07
    154c:	ed e9       	ldi	r30, 0x9D	; 157
    154e:	f8 e0       	ldi	r31, 0x08	; 8
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	9a 87       	std	Y+10, r25	; 0x0a
    1556:	89 87       	std	Y+9, r24	; 0x09
    1558:	85 81       	ldd	r24, Z+5	; 0x05
    155a:	8f 5f       	subi	r24, 0xFF	; 255
    155c:	85 83       	std	Z+5, r24	; 0x05
    155e:	8c 83       	std	Y+4, r24	; 0x04
    1560:	8f 81       	ldd	r24, Y+7	; 0x07
    1562:	98 85       	ldd	r25, Y+8	; 0x08
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	71 f4       	brne	.+28     	; 0x1584 <nwkTxFrame+0x88>
    1568:	81 e4       	ldi	r24, 0x41	; 65
    156a:	98 e8       	ldi	r25, 0x88	; 136
    156c:	9b 83       	std	Y+3, r25	; 0x03
    156e:	8a 83       	std	Y+2, r24	; 0x02
    1570:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <rand>
    1574:	cc 57       	subi	r28, 0x7C	; 124
    1576:	df 4f       	sbci	r29, 0xFF	; 255
    1578:	87 70       	andi	r24, 0x07	; 7
    157a:	99 27       	eor	r25, r25
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	99 83       	std	Y+1, r25	; 0x01
    1580:	88 83       	st	Y, r24
    1582:	08 c0       	rjmp	.+16     	; 0x1594 <nwkTxFrame+0x98>
    1584:	81 e6       	ldi	r24, 0x61	; 97
    1586:	98 e8       	ldi	r25, 0x88	; 136
    1588:	9b 83       	std	Y+3, r25	; 0x03
    158a:	8a 83       	std	Y+2, r24	; 0x02
    158c:	cc 57       	subi	r28, 0x7C	; 124
    158e:	df 4f       	sbci	r29, 0xFF	; 255
    1590:	19 82       	std	Y+1, r1	; 0x01
    1592:	18 82       	st	Y, r1
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <nwkTxBroadcastFrame>:
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	8c 01       	movw	r16, r24
    15a4:	62 da       	rcall	.-2876   	; 0xa6a <nwkFrameAlloc>
    15a6:	ec 01       	movw	r28, r24
    15a8:	89 2b       	or	r24, r25
    15aa:	b9 f1       	breq	.+110    	; 0x161a <nwkTxBroadcastFrame+0x80>
    15ac:	82 e1       	ldi	r24, 0x12	; 18
    15ae:	88 83       	st	Y, r24
    15b0:	f8 01       	movw	r30, r16
    15b2:	81 81       	ldd	r24, Z+1	; 0x01
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	fe 01       	movw	r30, r28
    15b8:	ed 57       	subi	r30, 0x7D	; 125
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	10 82       	st	Z, r1
    15be:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <rand>
    15c2:	fe 01       	movw	r30, r28
    15c4:	ec 57       	subi	r30, 0x7C	; 124
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	87 70       	andi	r24, 0x07	; 7
    15ca:	99 27       	eor	r25, r25
    15cc:	01 96       	adiw	r24, 0x01	; 1
    15ce:	91 83       	std	Z+1, r25	; 0x01
    15d0:	80 83       	st	Z, r24
    15d2:	33 96       	adiw	r30, 0x03	; 3
    15d4:	11 82       	std	Z+1, r1	; 0x01
    15d6:	10 82       	st	Z, r1
    15d8:	f8 01       	movw	r30, r16
    15da:	41 81       	ldd	r20, Z+1	; 0x01
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	b8 01       	movw	r22, r16
    15e0:	6e 5f       	subi	r22, 0xFE	; 254
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	ce 01       	movw	r24, r28
    15e6:	02 96       	adiw	r24, 0x02	; 2
    15e8:	0e 94 e7 14 	call	0x29ce	; 0x29ce <memcpy>
    15ec:	81 e4       	ldi	r24, 0x41	; 65
    15ee:	98 e8       	ldi	r25, 0x88	; 136
    15f0:	9b 83       	std	Y+3, r25	; 0x03
    15f2:	8a 83       	std	Y+2, r24	; 0x02
    15f4:	8f ef       	ldi	r24, 0xFF	; 255
    15f6:	9f ef       	ldi	r25, 0xFF	; 255
    15f8:	98 87       	std	Y+8, r25	; 0x08
    15fa:	8f 83       	std	Y+7, r24	; 0x07
    15fc:	f8 01       	movw	r30, r16
    15fe:	85 81       	ldd	r24, Z+5	; 0x05
    1600:	96 81       	ldd	r25, Z+6	; 0x06
    1602:	9e 83       	std	Y+6, r25	; 0x06
    1604:	8d 83       	std	Y+5, r24	; 0x05
    1606:	ed e9       	ldi	r30, 0x9D	; 157
    1608:	f8 e0       	ldi	r31, 0x08	; 8
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	9a 87       	std	Y+10, r25	; 0x0a
    1610:	89 87       	std	Y+9, r24	; 0x09
    1612:	85 81       	ldd	r24, Z+5	; 0x05
    1614:	8f 5f       	subi	r24, 0xFF	; 255
    1616:	85 83       	std	Z+5, r24	; 0x05
    1618:	8c 83       	std	Y+4, r24	; 0x04
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	08 95       	ret

00001624 <nwkTxAckReceived>:
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	fc 01       	movw	r30, r24
    162a:	21 85       	ldd	r18, Z+9	; 0x09
    162c:	23 30       	cpi	r18, 0x03	; 3
    162e:	d9 f4       	brne	.+54     	; 0x1666 <nwkTxAckReceived+0x42>
    1630:	10 c0       	rjmp	.+32     	; 0x1652 <nwkTxAckReceived+0x2e>
    1632:	fc 01       	movw	r30, r24
    1634:	20 81       	ld	r18, Z
    1636:	26 31       	cpi	r18, 0x16	; 22
    1638:	89 f4       	brne	.+34     	; 0x165c <nwkTxAckReceived+0x38>
    163a:	34 85       	ldd	r19, Z+12	; 0x0c
    163c:	29 81       	ldd	r18, Y+1	; 0x01
    163e:	32 13       	cpse	r19, r18
    1640:	0d c0       	rjmp	.+26     	; 0x165c <nwkTxAckReceived+0x38>
    1642:	27 e1       	ldi	r18, 0x17	; 23
    1644:	20 83       	st	Z, r18
    1646:	2a 81       	ldd	r18, Y+2	; 0x02
    1648:	ea 57       	subi	r30, 0x7A	; 122
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	20 83       	st	Z, r18
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	0b c0       	rjmp	.+22     	; 0x1668 <nwkTxAckReceived+0x44>
    1652:	fc 01       	movw	r30, r24
    1654:	c7 81       	ldd	r28, Z+7	; 0x07
    1656:	d0 85       	ldd	r29, Z+8	; 0x08
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	46 da       	rcall	.-2932   	; 0xaea <nwkFrameNext>
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	41 f7       	brne	.-48     	; 0x1632 <nwkTxAckReceived+0xe>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <nwkTxAckReceived+0x44>
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    166e:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <nwkTxPhyActiveFrame>
    1672:	f0 91 6e 07 	lds	r31, 0x076E	; 0x80076e <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	21 f0       	breq	.+8      	; 0x1682 <PHY_DataConf+0x14>
    167a:	48 f0       	brcs	.+18     	; 0x168e <PHY_DataConf+0x20>
    167c:	82 30       	cpi	r24, 0x02	; 2
    167e:	19 f0       	breq	.+6      	; 0x1686 <PHY_DataConf+0x18>
    1680:	04 c0       	rjmp	.+8      	; 0x168a <PHY_DataConf+0x1c>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1682:	80 e2       	ldi	r24, 0x20	; 32
    1684:	05 c0       	rjmp	.+10     	; 0x1690 <PHY_DataConf+0x22>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    1686:	81 e2       	ldi	r24, 0x21	; 33
    1688:	03 c0       	rjmp	.+6      	; 0x1690 <PHY_DataConf+0x22>

	default:
		return NWK_ERROR_STATUS;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	01 c0       	rjmp	.+2      	; 0x1690 <PHY_DataConf+0x22>
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    168e:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1690:	df 01       	movw	r26, r30
    1692:	ad 57       	subi	r26, 0x7D	; 125
    1694:	bf 4f       	sbci	r27, 0xFF	; 255
    1696:	8c 93       	st	X, r24
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1698:	85 e1       	ldi	r24, 0x15	; 21
    169a:	80 83       	st	Z, r24
	nwkTxPhyActiveFrame = NULL;
    169c:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <nwkTxPhyActiveFrame+0x1>
    16a0:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <nwkTxPhyActiveFrame>
	nwkIb.lock--;
    16a4:	ed e9       	ldi	r30, 0x9D	; 157
    16a6:	f8 e0       	ldi	r31, 0x08	; 8
    16a8:	86 a1       	ldd	r24, Z+38	; 0x26
    16aa:	97 a1       	ldd	r25, Z+39	; 0x27
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	97 a3       	std	Z+39, r25	; 0x27
    16b0:	86 a3       	std	Z+38, r24	; 0x26
    16b2:	08 95       	ret

000016b4 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    16b4:	9f 92       	push	r9
    16b6:	af 92       	push	r10
    16b8:	bf 92       	push	r11
    16ba:	cf 92       	push	r12
    16bc:	df 92       	push	r13
    16be:	ef 92       	push	r14
    16c0:	ff 92       	push	r15
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
	NwkFrame_t *frame = NULL;
    16ca:	c0 e0       	ldi	r28, 0x00	; 0
    16cc:	d0 e0       	ldi	r29, 0x00	; 0

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
				nwkTxPhyActiveFrame = frame;
				frame->state = NWK_TX_STATE_WAIT_CONF;
    16ce:	0f 2e       	mov	r0, r31
    16d0:	f4 e1       	ldi	r31, 0x14	; 20
    16d2:	af 2e       	mov	r10, r31
    16d4:	f0 2d       	mov	r31, r0
				PHY_DataReq(&(frame->size));
				nwkIb.lock++;
    16d6:	0d e9       	ldi	r16, 0x9D	; 157
    16d8:	18 e0       	ldi	r17, 0x08	; 8
					SYS_TimerStart(&nwkTxAckWaitTimer);
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    16da:	0f 2e       	mov	r0, r31
    16dc:	f7 e1       	ldi	r31, 0x17	; 23
    16de:	df 2e       	mov	r13, r31
    16e0:	f0 2d       	mov	r31, r0
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    16e2:	0f 2e       	mov	r0, r31
    16e4:	f6 e1       	ldi	r31, 0x16	; 22
    16e6:	9f 2e       	mov	r9, r31
    16e8:	f0 2d       	mov	r31, r0
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    16ea:	0f 2e       	mov	r0, r31
    16ec:	f5 e1       	ldi	r31, 0x15	; 21
    16ee:	ef 2e       	mov	r14, r31
    16f0:	f1 2c       	mov	r15, r1
    16f2:	f0 2d       	mov	r31, r0
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
				SYS_TimerStart(&nwkTxDelayTimer);
			} else {
				frame->state = NWK_TX_STATE_SEND;
    16f4:	0f 2e       	mov	r0, r31
    16f6:	f3 e1       	ldi	r31, 0x13	; 19
    16f8:	cf 2e       	mov	r12, r31
    16fa:	f0 2d       	mov	r31, r0
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    16fc:	0f 2e       	mov	r0, r31
    16fe:	f1 e1       	ldi	r31, 0x11	; 17
    1700:	bf 2e       	mov	r11, r31
    1702:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1704:	5f c0       	rjmp	.+190    	; 0x17c4 <nwkTxTaskHandler+0x110>
		switch (frame->state) {
    1706:	88 81       	ld	r24, Y
    1708:	83 31       	cpi	r24, 0x13	; 19
    170a:	c1 f0       	breq	.+48     	; 0x173c <nwkTxTaskHandler+0x88>
    170c:	18 f4       	brcc	.+6      	; 0x1714 <nwkTxTaskHandler+0x60>
    170e:	82 31       	cpi	r24, 0x12	; 18
    1710:	39 f0       	breq	.+14     	; 0x1720 <nwkTxTaskHandler+0x6c>
    1712:	58 c0       	rjmp	.+176    	; 0x17c4 <nwkTxTaskHandler+0x110>
    1714:	85 31       	cpi	r24, 0x15	; 21
    1716:	41 f1       	breq	.+80     	; 0x1768 <nwkTxTaskHandler+0xb4>
    1718:	87 31       	cpi	r24, 0x17	; 23
    171a:	09 f4       	brne	.+2      	; 0x171e <nwkTxTaskHandler+0x6a>
    171c:	44 c0       	rjmp	.+136    	; 0x17a6 <nwkTxTaskHandler+0xf2>
    171e:	52 c0       	rjmp	.+164    	; 0x17c4 <nwkTxTaskHandler+0x110>
		break;
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    1720:	fe 01       	movw	r30, r28
    1722:	ec 57       	subi	r30, 0x7C	; 124
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	80 81       	ld	r24, Z
    1728:	91 81       	ldd	r25, Z+1	; 0x01
    172a:	89 2b       	or	r24, r25
    172c:	29 f0       	breq	.+10     	; 0x1738 <nwkTxTaskHandler+0x84>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    172e:	b8 82       	st	Y, r11
				SYS_TimerStart(&nwkTxDelayTimer);
    1730:	83 e5       	ldi	r24, 0x53	; 83
    1732:	97 e0       	ldi	r25, 0x07	; 7
    1734:	2d d2       	rcall	.+1114   	; 0x1b90 <SYS_TimerStart>
    1736:	46 c0       	rjmp	.+140    	; 0x17c4 <nwkTxTaskHandler+0x110>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    1738:	c8 82       	st	Y, r12
    173a:	44 c0       	rjmp	.+136    	; 0x17c4 <nwkTxTaskHandler+0x110>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    173c:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <nwkTxPhyActiveFrame>
    1740:	90 91 6e 07 	lds	r25, 0x076E	; 0x80076e <nwkTxPhyActiveFrame+0x1>
    1744:	89 2b       	or	r24, r25
    1746:	09 f0       	breq	.+2      	; 0x174a <nwkTxTaskHandler+0x96>
    1748:	3d c0       	rjmp	.+122    	; 0x17c4 <nwkTxTaskHandler+0x110>
				nwkTxPhyActiveFrame = frame;
    174a:	d0 93 6e 07 	sts	0x076E, r29	; 0x80076e <nwkTxPhyActiveFrame+0x1>
    174e:	c0 93 6d 07 	sts	0x076D, r28	; 0x80076d <nwkTxPhyActiveFrame>
				frame->state = NWK_TX_STATE_WAIT_CONF;
    1752:	fe 01       	movw	r30, r28
    1754:	a1 92       	st	Z+, r10
				PHY_DataReq(&(frame->size));
    1756:	cf 01       	movw	r24, r30
    1758:	d4 d0       	rcall	.+424    	; 0x1902 <PHY_DataReq>
				nwkIb.lock++;
    175a:	f8 01       	movw	r30, r16
    175c:	86 a1       	ldd	r24, Z+38	; 0x26
    175e:	97 a1       	ldd	r25, Z+39	; 0x27
    1760:	01 96       	adiw	r24, 0x01	; 1
    1762:	97 a3       	std	Z+39, r25	; 0x27
    1764:	86 a3       	std	Z+38, r24	; 0x26
    1766:	2e c0       	rjmp	.+92     	; 0x17c4 <nwkTxTaskHandler+0x110>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    1768:	fe 01       	movw	r30, r28
    176a:	ed 57       	subi	r30, 0x7D	; 125
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	80 81       	ld	r24, Z
    1770:	81 11       	cpse	r24, r1
    1772:	17 c0       	rjmp	.+46     	; 0x17a2 <nwkTxTaskHandler+0xee>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    1774:	2d 85       	ldd	r18, Y+13	; 0x0d
    1776:	3e 85       	ldd	r19, Y+14	; 0x0e
    1778:	f8 01       	movw	r30, r16
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	28 17       	cp	r18, r24
    1780:	39 07       	cpc	r19, r25
    1782:	69 f4       	brne	.+26     	; 0x179e <nwkTxTaskHandler+0xea>
    1784:	8b 85       	ldd	r24, Y+11	; 0x0b
    1786:	80 ff       	sbrs	r24, 0
    1788:	0a c0       	rjmp	.+20     	; 0x179e <nwkTxTaskHandler+0xea>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    178a:	98 82       	st	Y, r9
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    178c:	fe 01       	movw	r30, r28
    178e:	ec 57       	subi	r30, 0x7C	; 124
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	f1 82       	std	Z+1, r15	; 0x01
    1794:	e0 82       	st	Z, r14
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    1796:	80 e6       	ldi	r24, 0x60	; 96
    1798:	97 e0       	ldi	r25, 0x07	; 7
    179a:	fa d1       	rcall	.+1012   	; 0x1b90 <SYS_TimerStart>
    179c:	13 c0       	rjmp	.+38     	; 0x17c4 <nwkTxTaskHandler+0x110>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    179e:	d8 82       	st	Y, r13
    17a0:	11 c0       	rjmp	.+34     	; 0x17c4 <nwkTxTaskHandler+0x110>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    17a2:	d8 82       	st	Y, r13
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <nwkTxTaskHandler+0x110>
    17a6:	ce 01       	movw	r24, r28
    17a8:	b5 da       	rcall	.-2710   	; 0xd14 <nwkRouteFrameSent>
#endif
			if (NULL == frame->tx.confirm) {
    17aa:	fe 01       	movw	r30, r28
    17ac:	e9 57       	subi	r30, 0x79	; 121
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	01 90       	ld	r0, Z+
    17b2:	f0 81       	ld	r31, Z
    17b4:	e0 2d       	mov	r30, r0
    17b6:	30 97       	sbiw	r30, 0x00	; 0
				nwkFrameFree(frame);
    17b8:	19 f4       	brne	.+6      	; 0x17c0 <nwkTxTaskHandler+0x10c>
    17ba:	ce 01       	movw	r24, r28
    17bc:	8c d9       	rcall	.-3304   	; 0xad6 <nwkFrameFree>
			} else {
				frame->tx.confirm(frame);
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <nwkTxTaskHandler+0x110>
    17c0:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    17c2:	19 95       	eicall
    17c4:	ce 01       	movw	r24, r28
    17c6:	91 d9       	rcall	.-3294   	; 0xaea <nwkFrameNext>
    17c8:	ec 01       	movw	r28, r24
    17ca:	89 2b       	or	r24, r25
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <nwkTxTaskHandler+0x11c>
    17ce:	9b cf       	rjmp	.-202    	; 0x1706 <nwkTxTaskHandler+0x52>

		default:
			break;
		}
	}
}
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	df 90       	pop	r13
    17de:	cf 90       	pop	r12
    17e0:	bf 90       	pop	r11
    17e2:	af 90       	pop	r10
    17e4:	9f 90       	pop	r9
    17e6:	08 95       	ret

000017e8 <phySetChannel>:
	IEEE_ADDR_2_REG = *ptr_to_reg++;
	IEEE_ADDR_3_REG = *ptr_to_reg++;
	IEEE_ADDR_4_REG = *ptr_to_reg++;
	IEEE_ADDR_5_REG = *ptr_to_reg++;
	IEEE_ADDR_6_REG = *ptr_to_reg++;
	IEEE_ADDR_7_REG = *ptr_to_reg;
    17e8:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <phyBand>
    17ec:	98 2f       	mov	r25, r24
    17ee:	9f 70       	andi	r25, 0x0F	; 15
    17f0:	e4 e5       	ldi	r30, 0x54	; 84
    17f2:	f1 e0       	ldi	r31, 0x01	; 1
    17f4:	80 81       	ld	r24, Z
    17f6:	80 7f       	andi	r24, 0xF0	; 240
    17f8:	89 2b       	or	r24, r25
    17fa:	80 83       	st	Z, r24
    17fc:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <phyBand>
    1800:	88 23       	and	r24, r24
    1802:	29 f0       	breq	.+10     	; 0x180e <phySetChannel+0x26>
    1804:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <phyChannel>
    1808:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
    180c:	08 95       	ret
    180e:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <phyChannel>
    1812:	98 2f       	mov	r25, r24
    1814:	9f 71       	andi	r25, 0x1F	; 31
    1816:	e8 e4       	ldi	r30, 0x48	; 72
    1818:	f1 e0       	ldi	r31, 0x01	; 1
    181a:	80 81       	ld	r24, Z
    181c:	80 7e       	andi	r24, 0xE0	; 224
    181e:	89 2b       	or	r24, r25
    1820:	80 83       	st	Z, r24
    1822:	08 95       	ret

00001824 <phyTrxSetState>:
    1824:	a2 e4       	ldi	r26, 0x42	; 66
    1826:	b1 e0       	ldi	r27, 0x01	; 1
    1828:	23 e0       	ldi	r18, 0x03	; 3
    182a:	e1 e4       	ldi	r30, 0x41	; 65
    182c:	f1 e0       	ldi	r31, 0x01	; 1
    182e:	2c 93       	st	X, r18
    1830:	90 81       	ld	r25, Z
    1832:	9f 71       	andi	r25, 0x1F	; 31
    1834:	98 30       	cpi	r25, 0x08	; 8
    1836:	d9 f7       	brne	.-10     	; 0x182e <phyTrxSetState+0xa>
    1838:	a2 e4       	ldi	r26, 0x42	; 66
    183a:	b1 e0       	ldi	r27, 0x01	; 1
    183c:	e1 e4       	ldi	r30, 0x41	; 65
    183e:	f1 e0       	ldi	r31, 0x01	; 1
    1840:	8c 93       	st	X, r24
    1842:	90 81       	ld	r25, Z
    1844:	9f 71       	andi	r25, 0x1F	; 31
    1846:	89 13       	cpse	r24, r25
    1848:	fb cf       	rjmp	.-10     	; 0x1840 <phyTrxSetState+0x1c>
    184a:	08 95       	ret

0000184c <phySetRxState>:
    184c:	88 e0       	ldi	r24, 0x08	; 8
    184e:	ea df       	rcall	.-44     	; 0x1824 <phyTrxSetState>
    1850:	8f ef       	ldi	r24, 0xFF	; 255
    1852:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1856:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <phyRxState>
    185a:	88 23       	and	r24, r24
    185c:	11 f0       	breq	.+4      	; 0x1862 <phySetRxState+0x16>
    185e:	86 e1       	ldi	r24, 0x16	; 22
    1860:	e1 cf       	rjmp	.-62     	; 0x1824 <phyTrxSetState>
    1862:	08 95       	ret

00001864 <PHY_Init>:
    1864:	60 e4       	ldi	r22, 0x40	; 64
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sysclk_enable_module>
    186c:	e9 e3       	ldi	r30, 0x39	; 57
    186e:	f1 e0       	ldi	r31, 0x01	; 1
    1870:	80 81       	ld	r24, Z
    1872:	81 60       	ori	r24, 0x01	; 1
    1874:	80 83       	st	Z, r24
    1876:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <phyRxState>
    187a:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <phyBand>
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <phyState>
    1884:	88 e0       	ldi	r24, 0x08	; 8
    1886:	ce df       	rcall	.-100    	; 0x1824 <phyTrxSetState>
    1888:	8b ee       	ldi	r24, 0xEB	; 235
    188a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x700156>
    188e:	ec e4       	ldi	r30, 0x4C	; 76
    1890:	f1 e0       	ldi	r31, 0x01	; 1
    1892:	80 81       	ld	r24, Z
    1894:	80 68       	ori	r24, 0x80	; 128
    1896:	80 83       	st	Z, r24
    1898:	80 81       	ld	r24, Z
    189a:	83 60       	ori	r24, 0x03	; 3
    189c:	80 83       	st	Z, r24
    189e:	08 95       	ret

000018a0 <PHY_SetRxState>:
    18a0:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <phyRxState>
    18a4:	d3 cf       	rjmp	.-90     	; 0x184c <phySetRxState>
    18a6:	08 95       	ret

000018a8 <PHY_SetChannel>:
    18a8:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <phyChannel>
    18ac:	9d cf       	rjmp	.-198    	; 0x17e8 <phySetChannel>
    18ae:	08 95       	ret

000018b0 <PHY_SetPanId>:
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	1f 92       	push	r1
    18b6:	1f 92       	push	r1
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x700162>
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x700163>
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	08 95       	ret

000018d4 <PHY_SetShortAddr>:
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	1f 92       	push	r1
    18da:	1f 92       	push	r1
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	9a 83       	std	Y+2, r25	; 0x02
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x700160>
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x700161>
    18ee:	99 81       	ldd	r25, Y+1	; 0x01
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	89 0f       	add	r24, r25
    18f4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x70016d>
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	08 95       	ret

00001902 <PHY_DataReq>:
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	ec 01       	movw	r28, r24
    1908:	89 e1       	ldi	r24, 0x19	; 25
    190a:	8c df       	rcall	.-232    	; 0x1824 <phyTrxSetState>
    190c:	8f ef       	ldi	r24, 0xFF	; 255
    190e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1912:	88 81       	ld	r24, Y
    1914:	8e 5f       	subi	r24, 0xFE	; 254
    1916:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
    191a:	88 81       	ld	r24, Y
    191c:	88 23       	and	r24, r24
    191e:	81 f0       	breq	.+32     	; 0x1940 <PHY_DataReq+0x3e>
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	82 2f       	mov	r24, r18
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	fc 01       	movw	r30, r24
    1928:	ef 57       	subi	r30, 0x7F	; 127
    192a:	fe 4f       	sbci	r31, 0xFE	; 254
    192c:	de 01       	movw	r26, r28
    192e:	a8 0f       	add	r26, r24
    1930:	b9 1f       	adc	r27, r25
    1932:	11 96       	adiw	r26, 0x01	; 1
    1934:	8c 91       	ld	r24, X
    1936:	80 83       	st	Z, r24
    1938:	2f 5f       	subi	r18, 0xFF	; 255
    193a:	88 81       	ld	r24, Y
    193c:	28 17       	cp	r18, r24
    193e:	88 f3       	brcs	.-30     	; 0x1922 <PHY_DataReq+0x20>
    1940:	83 e0       	ldi	r24, 0x03	; 3
    1942:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <phyState>
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	08 95       	ret

00001952 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	00 d0       	rcall	.+0      	; 0x195a <PHY_TaskHandler+0x8>
    195a:	1f 92       	push	r1
    195c:	1f 92       	push	r1
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
	if (PHY_STATE_SLEEP == phyState) {
    1962:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <phyState>
    1966:	82 30       	cpi	r24, 0x02	; 2
    1968:	09 f4       	brne	.+2      	; 0x196c <PHY_TaskHandler+0x1a>
    196a:	65 c0       	rjmp	.+202    	; 0x1a36 <PHY_TaskHandler+0xe4>
		return;
	}

	if (IRQ_STATUS_REG_s.rxEnd) {
    196c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1970:	83 ff       	sbrs	r24, 3
    1972:	3e c0       	rjmp	.+124    	; 0x19f0 <PHY_TaskHandler+0x9e>
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;
    1974:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x70017b>

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    1978:	6a 2f       	mov	r22, r26
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	ab 01       	movw	r20, r22
    197e:	4f 5f       	subi	r20, 0xFF	; 255
    1980:	5f 4f       	sbci	r21, 0xFF	; 255
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	20 e0       	ldi	r18, 0x00	; 0
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1988:	fc 01       	movw	r30, r24
    198a:	e0 58       	subi	r30, 0x80	; 128
    198c:	fe 4f       	sbci	r31, 0xFE	; 254
    198e:	30 81       	ld	r19, Z
    1990:	fc 01       	movw	r30, r24
    1992:	ee 58       	subi	r30, 0x8E	; 142
    1994:	f8 4f       	sbci	r31, 0xF8	; 248
    1996:	30 83       	st	Z, r19

	if (IRQ_STATUS_REG_s.rxEnd) {
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    1998:	2f 5f       	subi	r18, 0xFF	; 255
    199a:	82 2f       	mov	r24, r18
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	84 17       	cp	r24, r20
    19a0:	95 07       	cpc	r25, r21
    19a2:	94 f3       	brlt	.-28     	; 0x1988 <PHY_TaskHandler+0x36>
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
		}

		ind.data = phyRxBuffer;
    19a4:	82 e7       	ldi	r24, 0x72	; 114
    19a6:	97 e0       	ldi	r25, 0x07	; 7
    19a8:	9a 83       	std	Y+2, r25	; 0x02
    19aa:	89 83       	std	Y+1, r24	; 0x01
		ind.size = size - PHY_CRC_SIZE;
    19ac:	a2 50       	subi	r26, 0x02	; 2
    19ae:	ab 83       	std	Y+3, r26	; 0x03
		ind.lqi  = phyRxBuffer[size];
    19b0:	fb 01       	movw	r30, r22
    19b2:	ee 58       	subi	r30, 0x8E	; 142
    19b4:	f8 4f       	sbci	r31, 0xF8	; 248
    19b6:	80 81       	ld	r24, Z
    19b8:	8c 83       	std	Y+4, r24	; 0x04
		ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    19ba:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    19be:	8a 55       	subi	r24, 0x5A	; 90
    19c0:	8d 83       	std	Y+5, r24	; 0x05
		PHY_DataInd(&ind);
    19c2:	ce 01       	movw	r24, r28
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	b2 da       	rcall	.-2716   	; 0xf2c <PHY_DataInd>

		while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus) {
    19c8:	e1 e4       	ldi	r30, 0x41	; 65
    19ca:	f1 e0       	ldi	r31, 0x01	; 1
    19cc:	80 81       	ld	r24, Z
    19ce:	8f 71       	andi	r24, 0x1F	; 31
    19d0:	86 31       	cpi	r24, 0x16	; 22
    19d2:	e1 f7       	brne	.-8      	; 0x19cc <PHY_TaskHandler+0x7a>
		}

		IRQ_STATUS_REG_s.rxEnd = 1;
    19d4:	ef e4       	ldi	r30, 0x4F	; 79
    19d6:	f1 e0       	ldi	r31, 0x01	; 1
    19d8:	80 81       	ld	r24, Z
    19da:	88 60       	ori	r24, 0x08	; 8
    19dc:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 0;
    19de:	ec e4       	ldi	r30, 0x4C	; 76
    19e0:	f1 e0       	ldi	r31, 0x01	; 1
    19e2:	80 81       	ld	r24, Z
    19e4:	8f 77       	andi	r24, 0x7F	; 127
    19e6:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 1;
    19e8:	80 81       	ld	r24, Z
    19ea:	80 68       	ori	r24, 0x80	; 128
    19ec:	80 83       	st	Z, r24
    19ee:	23 c0       	rjmp	.+70     	; 0x1a36 <PHY_TaskHandler+0xe4>
	} else if (IRQ_STATUS_REG_s.txEnd) {
    19f0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    19f4:	86 ff       	sbrs	r24, 6
    19f6:	1f c0       	rjmp	.+62     	; 0x1a36 <PHY_TaskHandler+0xe4>
		if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus) {
    19f8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    19fc:	8f 71       	andi	r24, 0x1F	; 31
    19fe:	89 31       	cpi	r24, 0x19	; 25
    1a00:	a9 f4       	brne	.+42     	; 0x1a2c <PHY_TaskHandler+0xda>
			uint8_t status = TRX_STATE_REG_s.tracStatus;
    1a02:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1a06:	12 95       	swap	r17
    1a08:	16 95       	lsr	r17
    1a0a:	17 70       	andi	r17, 0x07	; 7

			if (TRAC_STATUS_SUCCESS == status) {
    1a0c:	49 f0       	breq	.+18     	; 0x1a20 <PHY_TaskHandler+0xce>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    1a0e:	13 30       	cpi	r17, 0x03	; 3
    1a10:	21 f0       	breq	.+8      	; 0x1a1a <PHY_TaskHandler+0xc8>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
    1a12:	15 30       	cpi	r17, 0x05	; 5
    1a14:	21 f0       	breq	.+8      	; 0x1a1e <PHY_TaskHandler+0xcc>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
    1a16:	13 e0       	ldi	r17, 0x03	; 3
    1a18:	03 c0       	rjmp	.+6      	; 0x1a20 <PHY_TaskHandler+0xce>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1a1a:	11 e0       	ldi	r17, 0x01	; 1
    1a1c:	01 c0       	rjmp	.+2      	; 0x1a20 <PHY_TaskHandler+0xce>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    1a1e:	12 e0       	ldi	r17, 0x02	; 2
    1a20:	15 df       	rcall	.-470    	; 0x184c <phySetRxState>
			phyState = PHY_STATE_IDLE;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <phyState>

			PHY_DataConf(status);
    1a28:	81 2f       	mov	r24, r17
    1a2a:	21 de       	rcall	.-958    	; 0x166e <PHY_DataConf>
		}

		IRQ_STATUS_REG_s.txEnd = 1;
    1a2c:	ef e4       	ldi	r30, 0x4F	; 79
    1a2e:	f1 e0       	ldi	r31, 0x01	; 1
    1a30:	80 81       	ld	r24, Z
    1a32:	80 64       	ori	r24, 0x40	; 64
    1a34:	80 83       	st	Z, r24
	}
}
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	08 95       	ret

00001a48 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
	SYS_TimerInit();
    1a48:	78 d0       	rcall	.+240    	; 0x1b3a <SYS_TimerInit>
#if SYS_SECURITY_MODE == 0
	sal_init();
    1a4a:	76 d5       	rcall	.+2796   	; 0x2538 <sal_init>
#endif
	PHY_Init();
    1a4c:	0b df       	rcall	.-490    	; 0x1864 <PHY_Init>
    1a4e:	0c 94 0d 04 	jmp	0x81a	; 0x81a <NWK_Init>
	NWK_Init();
    1a52:	08 95       	ret

00001a54 <SYS_TaskHandler>:
    1a54:	7e df       	rcall	.-260    	; 0x1952 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
	PHY_TaskHandler();
	NWK_TaskHandler();
    1a56:	0e 94 3b 04 	call	0x876	; 0x876 <NWK_TaskHandler>
	SYS_TimerTaskHandler();
    1a5a:	a5 c0       	rjmp	.+330    	; 0x1ba6 <SYS_TimerTaskHandler>
    1a5c:	08 95       	ret

00001a5e <placeTimer>:
			break;
		}

		prev = t;
	}
}
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	ec 01       	movw	r28, r24
    1a68:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <timers>
    1a6c:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <timers+0x1>
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <placeTimer+0x18>
    1a74:	45 c0       	rjmp	.+138    	; 0x1b00 <placeTimer+0xa2>
    1a76:	4e 81       	ldd	r20, Y+6	; 0x06
    1a78:	5f 81       	ldd	r21, Y+7	; 0x07
    1a7a:	68 85       	ldd	r22, Y+8	; 0x08
    1a7c:	79 85       	ldd	r23, Y+9	; 0x09
    1a7e:	fc 01       	movw	r30, r24
    1a80:	02 81       	ldd	r16, Z+2	; 0x02
    1a82:	13 81       	ldd	r17, Z+3	; 0x03
    1a84:	24 81       	ldd	r18, Z+4	; 0x04
    1a86:	35 81       	ldd	r19, Z+5	; 0x05
    1a88:	40 17       	cp	r20, r16
    1a8a:	51 07       	cpc	r21, r17
    1a8c:	62 07       	cpc	r22, r18
    1a8e:	73 07       	cpc	r23, r19
    1a90:	60 f0       	brcs	.+24     	; 0x1aaa <placeTimer+0x4c>
    1a92:	dc 01       	movw	r26, r24
    1a94:	17 c0       	rjmp	.+46     	; 0x1ac4 <placeTimer+0x66>
    1a96:	02 81       	ldd	r16, Z+2	; 0x02
    1a98:	13 81       	ldd	r17, Z+3	; 0x03
    1a9a:	24 81       	ldd	r18, Z+4	; 0x04
    1a9c:	35 81       	ldd	r19, Z+5	; 0x05
    1a9e:	40 17       	cp	r20, r16
    1aa0:	51 07       	cpc	r21, r17
    1aa2:	62 07       	cpc	r22, r18
    1aa4:	73 07       	cpc	r23, r19
    1aa6:	68 f4       	brcc	.+26     	; 0x1ac2 <placeTimer+0x64>
    1aa8:	03 c0       	rjmp	.+6      	; 0x1ab0 <placeTimer+0x52>
    1aaa:	fc 01       	movw	r30, r24
    1aac:	a0 e0       	ldi	r26, 0x00	; 0
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	04 1b       	sub	r16, r20
    1ab2:	15 0b       	sbc	r17, r21
    1ab4:	26 0b       	sbc	r18, r22
    1ab6:	37 0b       	sbc	r19, r23
    1ab8:	02 83       	std	Z+2, r16	; 0x02
    1aba:	13 83       	std	Z+3, r17	; 0x03
    1abc:	24 83       	std	Z+4, r18	; 0x04
    1abe:	35 83       	std	Z+5, r19	; 0x05
    1ac0:	0a c0       	rjmp	.+20     	; 0x1ad6 <placeTimer+0x78>
    1ac2:	df 01       	movw	r26, r30
    1ac4:	40 1b       	sub	r20, r16
    1ac6:	51 0b       	sbc	r21, r17
    1ac8:	62 0b       	sbc	r22, r18
    1aca:	73 0b       	sbc	r23, r19
    1acc:	ed 91       	ld	r30, X+
    1ace:	fc 91       	ld	r31, X
    1ad0:	11 97       	sbiw	r26, 0x01	; 1
    1ad2:	30 97       	sbiw	r30, 0x00	; 0
    1ad4:	01 f7       	brne	.-64     	; 0x1a96 <placeTimer+0x38>
    1ad6:	4a 83       	std	Y+2, r20	; 0x02
    1ad8:	5b 83       	std	Y+3, r21	; 0x03
    1ada:	6c 83       	std	Y+4, r22	; 0x04
    1adc:	7d 83       	std	Y+5, r23	; 0x05
    1ade:	10 97       	sbiw	r26, 0x00	; 0
    1ae0:	41 f0       	breq	.+16     	; 0x1af2 <placeTimer+0x94>
    1ae2:	8d 91       	ld	r24, X+
    1ae4:	9c 91       	ld	r25, X
    1ae6:	11 97       	sbiw	r26, 0x01	; 1
    1ae8:	99 83       	std	Y+1, r25	; 0x01
    1aea:	88 83       	st	Y, r24
    1aec:	cd 93       	st	X+, r28
    1aee:	dc 93       	st	X, r29
    1af0:	15 c0       	rjmp	.+42     	; 0x1b1c <placeTimer+0xbe>
    1af2:	99 83       	std	Y+1, r25	; 0x01
    1af4:	88 83       	st	Y, r24
    1af6:	d0 93 f4 07 	sts	0x07F4, r29	; 0x8007f4 <timers+0x1>
    1afa:	c0 93 f3 07 	sts	0x07F3, r28	; 0x8007f3 <timers>
    1afe:	0e c0       	rjmp	.+28     	; 0x1b1c <placeTimer+0xbe>
    1b00:	19 82       	std	Y+1, r1	; 0x01
    1b02:	18 82       	st	Y, r1
    1b04:	8e 81       	ldd	r24, Y+6	; 0x06
    1b06:	9f 81       	ldd	r25, Y+7	; 0x07
    1b08:	a8 85       	ldd	r26, Y+8	; 0x08
    1b0a:	b9 85       	ldd	r27, Y+9	; 0x09
    1b0c:	8a 83       	std	Y+2, r24	; 0x02
    1b0e:	9b 83       	std	Y+3, r25	; 0x03
    1b10:	ac 83       	std	Y+4, r26	; 0x04
    1b12:	bd 83       	std	Y+5, r27	; 0x05
    1b14:	d0 93 f4 07 	sts	0x07F4, r29	; 0x8007f4 <timers+0x1>
    1b18:	c0 93 f3 07 	sts	0x07F3, r28	; 0x8007f3 <timers>
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	08 95       	ret

00001b26 <SYS_HwExpiry_Cb>:
    1b26:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <SysTimerIrqCount>
    1b2a:	8f 5f       	subi	r24, 0xFF	; 255
    1b2c:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <SysTimerIrqCount>
    1b30:	80 e1       	ldi	r24, 0x10	; 16
    1b32:	97 e2       	ldi	r25, 0x27	; 39
    1b34:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <common_tc_delay>
    1b38:	08 95       	ret

00001b3a <SYS_TimerInit>:
    1b3a:	10 92 c5 08 	sts	0x08C5, r1	; 0x8008c5 <SysTimerIrqCount>
    1b3e:	83 e9       	ldi	r24, 0x93	; 147
    1b40:	9d e0       	ldi	r25, 0x0D	; 13
    1b42:	0e 94 c2 01 	call	0x384	; 0x384 <set_common_tc_expiry_callback>
    1b46:	0e 94 74 01 	call	0x2e8	; 0x2e8 <common_tc_init>
    1b4a:	80 e1       	ldi	r24, 0x10	; 16
    1b4c:	97 e2       	ldi	r25, 0x27	; 39
    1b4e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <common_tc_delay>
    1b52:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <timers+0x1>
    1b56:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <timers>
    1b5a:	08 95       	ret

00001b5c <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1b5c:	e0 91 f3 07 	lds	r30, 0x07F3	; 0x8007f3 <timers>
    1b60:	f0 91 f4 07 	lds	r31, 0x07F4	; 0x8007f4 <timers+0x1>
    1b64:	30 97       	sbiw	r30, 0x00	; 0
    1b66:	71 f0       	breq	.+28     	; 0x1b84 <SYS_TimerStarted+0x28>
		if (t == timer) {
    1b68:	e8 17       	cp	r30, r24
    1b6a:	f9 07       	cpc	r31, r25
    1b6c:	21 f4       	brne	.+8      	; 0x1b76 <SYS_TimerStarted+0x1a>
    1b6e:	0c c0       	rjmp	.+24     	; 0x1b88 <SYS_TimerStarted+0x2c>
    1b70:	8e 17       	cp	r24, r30
    1b72:	9f 07       	cpc	r25, r31
    1b74:	59 f0       	breq	.+22     	; 0x1b8c <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1b76:	01 90       	ld	r0, Z+
    1b78:	f0 81       	ld	r31, Z
    1b7a:	e0 2d       	mov	r30, r0
    1b7c:	30 97       	sbiw	r30, 0x00	; 0
    1b7e:	c1 f7       	brne	.-16     	; 0x1b70 <SYS_TimerStarted+0x14>
		if (t == timer) {
			return true;
		}
	}
	return false;
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	08 95       	ret
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	08 95       	ret
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return false;
}
    1b8e:	08 95       	ret

00001b90 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	ec 01       	movw	r28, r24
	if (!SYS_TimerStarted(timer)) {
    1b96:	e2 df       	rcall	.-60     	; 0x1b5c <SYS_TimerStarted>
    1b98:	81 11       	cpse	r24, r1
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <SYS_TimerStart+0x10>
		placeTimer(timer);
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	5f df       	rcall	.-322    	; 0x1a5e <placeTimer>
	}
}
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	08 95       	ret

00001ba6 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	1f 92       	push	r1
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    1bbc:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <SysTimerIrqCount>
    1bc0:	88 23       	and	r24, r24
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <SYS_TimerTaskHandler+0x20>
    1bc4:	53 c0       	rjmp	.+166    	; 0x1c6c <SYS_TimerTaskHandler+0xc6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1bc6:	8f b7       	in	r24, 0x3f	; 63
    1bc8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1bca:	f8 94       	cli
	return flags;
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    1bce:	c0 90 c5 08 	lds	r12, 0x08C5	; 0x8008c5 <SysTimerIrqCount>
	SysTimerIrqCount = 0;
    1bd2:	10 92 c5 08 	sts	0x08C5, r1	; 0x8008c5 <SysTimerIrqCount>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1bd6:	8f bf       	out	0x3f, r24	; 63
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    1bd8:	d1 2c       	mov	r13, r1
    1bda:	e1 2c       	mov	r14, r1
    1bdc:	f1 2c       	mov	r15, r1
    1bde:	cc 0c       	add	r12, r12
    1be0:	dd 1c       	adc	r13, r13
    1be2:	ee 1c       	adc	r14, r14
    1be4:	ff 1c       	adc	r15, r15
    1be6:	d7 01       	movw	r26, r14
    1be8:	c6 01       	movw	r24, r12
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	aa 1f       	adc	r26, r26
    1bf0:	bb 1f       	adc	r27, r27
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	aa 1f       	adc	r26, r26
    1bf8:	bb 1f       	adc	r27, r27
    1bfa:	c8 0e       	add	r12, r24
    1bfc:	d9 1e       	adc	r13, r25
    1bfe:	ea 1e       	adc	r14, r26
    1c00:	fb 1e       	adc	r15, r27

	while (timers && (timers->timeout <= elapsed)) {
    1c02:	1b c0       	rjmp	.+54     	; 0x1c3a <SYS_TimerTaskHandler+0x94>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    1c04:	c8 1a       	sub	r12, r24
    1c06:	d9 0a       	sbc	r13, r25
    1c08:	ea 0a       	sbc	r14, r26
    1c0a:	fb 0a       	sbc	r15, r27
		timers = timers->next;
    1c0c:	d8 01       	movw	r26, r16
    1c0e:	8d 91       	ld	r24, X+
    1c10:	9c 91       	ld	r25, X
    1c12:	11 97       	sbiw	r26, 0x01	; 1
    1c14:	90 93 f4 07 	sts	0x07F4, r25	; 0x8007f4 <timers+0x1>
    1c18:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <timers>
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    1c1c:	1a 96       	adiw	r26, 0x0a	; 10
    1c1e:	8c 91       	ld	r24, X
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	11 f4       	brne	.+4      	; 0x1c28 <SYS_TimerTaskHandler+0x82>
			placeTimer(timer);
    1c24:	c8 01       	movw	r24, r16
    1c26:	1b df       	rcall	.-458    	; 0x1a5e <placeTimer>
		}

		if (timer->handler) {
    1c28:	d8 01       	movw	r26, r16
    1c2a:	1b 96       	adiw	r26, 0x0b	; 11
    1c2c:	ed 91       	ld	r30, X+
    1c2e:	fc 91       	ld	r31, X
    1c30:	1c 97       	sbiw	r26, 0x0c	; 12
    1c32:	30 97       	sbiw	r30, 0x00	; 0
    1c34:	11 f0       	breq	.+4      	; 0x1c3a <SYS_TimerTaskHandler+0x94>
			timer->handler(timer);
    1c36:	c8 01       	movw	r24, r16
    1c38:	19 95       	eicall
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    1c3a:	00 91 f3 07 	lds	r16, 0x07F3	; 0x8007f3 <timers>
    1c3e:	10 91 f4 07 	lds	r17, 0x07F4	; 0x8007f4 <timers+0x1>
    1c42:	01 15       	cp	r16, r1
    1c44:	11 05       	cpc	r17, r1
    1c46:	91 f0       	breq	.+36     	; 0x1c6c <SYS_TimerTaskHandler+0xc6>
    1c48:	f8 01       	movw	r30, r16
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	a4 81       	ldd	r26, Z+4	; 0x04
    1c50:	b5 81       	ldd	r27, Z+5	; 0x05
    1c52:	c8 16       	cp	r12, r24
    1c54:	d9 06       	cpc	r13, r25
    1c56:	ea 06       	cpc	r14, r26
    1c58:	fb 06       	cpc	r15, r27
    1c5a:	a0 f6       	brcc	.-88     	; 0x1c04 <SYS_TimerTaskHandler+0x5e>
			timer->handler(timer);
		}
	}

	if (timers) {
		timers->timeout -= elapsed;
    1c5c:	8c 19       	sub	r24, r12
    1c5e:	9d 09       	sbc	r25, r13
    1c60:	ae 09       	sbc	r26, r14
    1c62:	bf 09       	sbc	r27, r15
    1c64:	82 83       	std	Z+2, r24	; 0x02
    1c66:	93 83       	std	Z+3, r25	; 0x03
    1c68:	a4 83       	std	Z+4, r26	; 0x04
    1c6a:	b5 83       	std	Z+5, r27	; 0x05
	}
}
    1c6c:	0f 90       	pop	r0
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	1f 91       	pop	r17
    1c74:	0f 91       	pop	r16
    1c76:	ff 90       	pop	r15
    1c78:	ef 90       	pop	r14
    1c7a:	df 90       	pop	r13
    1c7c:	cf 90       	pop	r12
    1c7e:	08 95       	ret

00001c80 <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
    1c80:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <tmr_ovf_callback>
    1c84:	08 95       	ret

00001c86 <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
    1c86:	0c 94 b3 01 	jmp	0x366	; 0x366 <tmr_cca_callback>
    1c8a:	08 95       	ret

00001c8c <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
    1c8c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    1c90:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
    1c94:	08 95       	ret

00001c96 <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    1c96:	ef e6       	ldi	r30, 0x6F	; 111
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8d 7f       	andi	r24, 0xFD	; 253
    1c9e:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
    1ca0:	b1 9a       	sbi	0x16, 1	; 22
    1ca2:	08 95       	ret

00001ca4 <tmr_enable_cc_interrupt>:
    1ca4:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
    1ca6:	ef e6       	ldi	r30, 0x6F	; 111
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	82 60       	ori	r24, 0x02	; 2
    1cae:	80 83       	st	Z, r24
    1cb0:	08 95       	ret

00001cb2 <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    1cb2:	ef e6       	ldi	r30, 0x6F	; 111
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	81 60       	ori	r24, 0x01	; 1
    1cba:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
    1cbc:	b0 9a       	sbi	0x16, 0	; 22
    1cbe:	08 95       	ret

00001cc0 <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
    1cc0:	80 e8       	ldi	r24, 0x80	; 128
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	82 c3       	rjmp	.+1796   	; 0x23ca <tc_disable>
    1cc6:	08 95       	ret

00001cc8 <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
    1cc8:	e9 e8       	ldi	r30, 0x89	; 137
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	20 81       	ld	r18, Z
    1cce:	92 2b       	or	r25, r18
    1cd0:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
    1cd2:	e8 e8       	ldi	r30, 0x88	; 136
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	90 81       	ld	r25, Z
    1cd8:	89 2b       	or	r24, r25
    1cda:	80 83       	st	Z, r24
    1cdc:	08 95       	ret

00001cde <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	1f 92       	push	r1
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1ce8:	8f b7       	in	r24, 0x3f	; 63
    1cea:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1cec:	f8 94       	cli
	return flags;
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
    1cf0:	0f 90       	pop	r0
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	08 95       	ret

00001cf8 <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1cf8:	8f bf       	out	0x3f, r24	; 63
    1cfa:	08 95       	ret

00001cfc <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
    1d00:	80 e8       	ldi	r24, 0x80	; 128
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	eb d2       	rcall	.+1494   	; 0x22dc <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
    1d06:	60 e4       	ldi	r22, 0x40	; 64
    1d08:	7e e0       	ldi	r23, 0x0E	; 14
    1d0a:	80 e8       	ldi	r24, 0x80	; 128
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	d4 d3       	rcall	.+1960   	; 0x24b8 <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    1d10:	cf e6       	ldi	r28, 0x6F	; 111
    1d12:	d0 e0       	ldi	r29, 0x00	; 0
    1d14:	88 81       	ld	r24, Y
    1d16:	81 60       	ori	r24, 0x01	; 1
    1d18:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
    1d1a:	63 e4       	ldi	r22, 0x43	; 67
    1d1c:	7e e0       	ldi	r23, 0x0E	; 14
    1d1e:	80 e8       	ldi	r24, 0x80	; 128
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	ea d3       	rcall	.+2004   	; 0x24f8 <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    1d24:	88 81       	ld	r24, Y
    1d26:	8d 7f       	andi	r24, 0xFD	; 253
    1d28:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
    1d2a:	e1 e8       	ldi	r30, 0x81	; 129
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	81 60       	ori	r24, 0x01	; 1
    1d32:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
    1d34:	80 e1       	ldi	r24, 0x10	; 16
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	08 95       	ret

00001d3c <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
    1d3c:	1f 92       	push	r1
    1d3e:	0f 92       	push	r0
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	0f 92       	push	r0
    1d44:	11 24       	eor	r1, r1
    1d46:	0b b6       	in	r0, 0x3b	; 59
    1d48:	0f 92       	push	r0
    1d4a:	2f 93       	push	r18
    1d4c:	3f 93       	push	r19
    1d4e:	4f 93       	push	r20
    1d50:	5f 93       	push	r21
    1d52:	6f 93       	push	r22
    1d54:	7f 93       	push	r23
    1d56:	8f 93       	push	r24
    1d58:	9f 93       	push	r25
    1d5a:	af 93       	push	r26
    1d5c:	bf 93       	push	r27
    1d5e:	ef 93       	push	r30
    1d60:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
    1d62:	e0 91 13 08 	lds	r30, 0x0813	; 0x800813 <tc_tccr1_ovf_callback>
    1d66:	f0 91 14 08 	lds	r31, 0x0814	; 0x800814 <tc_tccr1_ovf_callback+0x1>
    1d6a:	30 97       	sbiw	r30, 0x00	; 0
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <__vector_20+0x34>
		tc_tccr1_ovf_callback();
    1d6e:	19 95       	eicall
	}
}
    1d70:	ff 91       	pop	r31
    1d72:	ef 91       	pop	r30
    1d74:	bf 91       	pop	r27
    1d76:	af 91       	pop	r26
    1d78:	9f 91       	pop	r25
    1d7a:	8f 91       	pop	r24
    1d7c:	7f 91       	pop	r23
    1d7e:	6f 91       	pop	r22
    1d80:	5f 91       	pop	r21
    1d82:	4f 91       	pop	r20
    1d84:	3f 91       	pop	r19
    1d86:	2f 91       	pop	r18
    1d88:	0f 90       	pop	r0
    1d8a:	0b be       	out	0x3b, r0	; 59
    1d8c:	0f 90       	pop	r0
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	0f 90       	pop	r0
    1d92:	1f 90       	pop	r1
    1d94:	18 95       	reti

00001d96 <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
    1d96:	1f 92       	push	r1
    1d98:	0f 92       	push	r0
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	0f 92       	push	r0
    1d9e:	11 24       	eor	r1, r1
    1da0:	0b b6       	in	r0, 0x3b	; 59
    1da2:	0f 92       	push	r0
    1da4:	2f 93       	push	r18
    1da6:	3f 93       	push	r19
    1da8:	4f 93       	push	r20
    1daa:	5f 93       	push	r21
    1dac:	6f 93       	push	r22
    1dae:	7f 93       	push	r23
    1db0:	8f 93       	push	r24
    1db2:	9f 93       	push	r25
    1db4:	af 93       	push	r26
    1db6:	bf 93       	push	r27
    1db8:	ef 93       	push	r30
    1dba:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
    1dbc:	e0 91 11 08 	lds	r30, 0x0811	; 0x800811 <tc_tccr1_compa_callback>
    1dc0:	f0 91 12 08 	lds	r31, 0x0812	; 0x800812 <tc_tccr1_compa_callback+0x1>
    1dc4:	30 97       	sbiw	r30, 0x00	; 0
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <__vector_17+0x34>
		tc_tccr1_compa_callback();
    1dc8:	19 95       	eicall
	}
}
    1dca:	ff 91       	pop	r31
    1dcc:	ef 91       	pop	r30
    1dce:	bf 91       	pop	r27
    1dd0:	af 91       	pop	r26
    1dd2:	9f 91       	pop	r25
    1dd4:	8f 91       	pop	r24
    1dd6:	7f 91       	pop	r23
    1dd8:	6f 91       	pop	r22
    1dda:	5f 91       	pop	r21
    1ddc:	4f 91       	pop	r20
    1dde:	3f 91       	pop	r19
    1de0:	2f 91       	pop	r18
    1de2:	0f 90       	pop	r0
    1de4:	0b be       	out	0x3b, r0	; 59
    1de6:	0f 90       	pop	r0
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	0f 90       	pop	r0
    1dec:	1f 90       	pop	r1
    1dee:	18 95       	reti

00001df0 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
    1df0:	1f 92       	push	r1
    1df2:	0f 92       	push	r0
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	0f 92       	push	r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	0b b6       	in	r0, 0x3b	; 59
    1dfc:	0f 92       	push	r0
    1dfe:	2f 93       	push	r18
    1e00:	3f 93       	push	r19
    1e02:	4f 93       	push	r20
    1e04:	5f 93       	push	r21
    1e06:	6f 93       	push	r22
    1e08:	7f 93       	push	r23
    1e0a:	8f 93       	push	r24
    1e0c:	9f 93       	push	r25
    1e0e:	af 93       	push	r26
    1e10:	bf 93       	push	r27
    1e12:	ef 93       	push	r30
    1e14:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
    1e16:	e0 91 0f 08 	lds	r30, 0x080F	; 0x80080f <tc_tccr1_compb_callback>
    1e1a:	f0 91 10 08 	lds	r31, 0x0810	; 0x800810 <tc_tccr1_compb_callback+0x1>
    1e1e:	30 97       	sbiw	r30, 0x00	; 0
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <__vector_18+0x34>
		tc_tccr1_compb_callback();
    1e22:	19 95       	eicall
	}
}
    1e24:	ff 91       	pop	r31
    1e26:	ef 91       	pop	r30
    1e28:	bf 91       	pop	r27
    1e2a:	af 91       	pop	r26
    1e2c:	9f 91       	pop	r25
    1e2e:	8f 91       	pop	r24
    1e30:	7f 91       	pop	r23
    1e32:	6f 91       	pop	r22
    1e34:	5f 91       	pop	r21
    1e36:	4f 91       	pop	r20
    1e38:	3f 91       	pop	r19
    1e3a:	2f 91       	pop	r18
    1e3c:	0f 90       	pop	r0
    1e3e:	0b be       	out	0x3b, r0	; 59
    1e40:	0f 90       	pop	r0
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	0f 90       	pop	r0
    1e46:	1f 90       	pop	r1
    1e48:	18 95       	reti

00001e4a <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
    1e4a:	1f 92       	push	r1
    1e4c:	0f 92       	push	r0
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	0f 92       	push	r0
    1e52:	11 24       	eor	r1, r1
    1e54:	0b b6       	in	r0, 0x3b	; 59
    1e56:	0f 92       	push	r0
    1e58:	2f 93       	push	r18
    1e5a:	3f 93       	push	r19
    1e5c:	4f 93       	push	r20
    1e5e:	5f 93       	push	r21
    1e60:	6f 93       	push	r22
    1e62:	7f 93       	push	r23
    1e64:	8f 93       	push	r24
    1e66:	9f 93       	push	r25
    1e68:	af 93       	push	r26
    1e6a:	bf 93       	push	r27
    1e6c:	ef 93       	push	r30
    1e6e:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
    1e70:	e0 91 0d 08 	lds	r30, 0x080D	; 0x80080d <tc_tccr1_compc_callback>
    1e74:	f0 91 0e 08 	lds	r31, 0x080E	; 0x80080e <tc_tccr1_compc_callback+0x1>
    1e78:	30 97       	sbiw	r30, 0x00	; 0
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <__vector_19+0x34>
		tc_tccr1_compc_callback();
    1e7c:	19 95       	eicall
	}
}
    1e7e:	ff 91       	pop	r31
    1e80:	ef 91       	pop	r30
    1e82:	bf 91       	pop	r27
    1e84:	af 91       	pop	r26
    1e86:	9f 91       	pop	r25
    1e88:	8f 91       	pop	r24
    1e8a:	7f 91       	pop	r23
    1e8c:	6f 91       	pop	r22
    1e8e:	5f 91       	pop	r21
    1e90:	4f 91       	pop	r20
    1e92:	3f 91       	pop	r19
    1e94:	2f 91       	pop	r18
    1e96:	0f 90       	pop	r0
    1e98:	0b be       	out	0x3b, r0	; 59
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	0f 90       	pop	r0
    1ea0:	1f 90       	pop	r1
    1ea2:	18 95       	reti

00001ea4 <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
    1ea4:	1f 92       	push	r1
    1ea6:	0f 92       	push	r0
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	0f 92       	push	r0
    1eac:	11 24       	eor	r1, r1
    1eae:	0b b6       	in	r0, 0x3b	; 59
    1eb0:	0f 92       	push	r0
    1eb2:	2f 93       	push	r18
    1eb4:	3f 93       	push	r19
    1eb6:	4f 93       	push	r20
    1eb8:	5f 93       	push	r21
    1eba:	6f 93       	push	r22
    1ebc:	7f 93       	push	r23
    1ebe:	8f 93       	push	r24
    1ec0:	9f 93       	push	r25
    1ec2:	af 93       	push	r26
    1ec4:	bf 93       	push	r27
    1ec6:	ef 93       	push	r30
    1ec8:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
    1eca:	e0 91 0b 08 	lds	r30, 0x080B	; 0x80080b <tc_tccr3_ovf_callback>
    1ece:	f0 91 0c 08 	lds	r31, 0x080C	; 0x80080c <tc_tccr3_ovf_callback+0x1>
    1ed2:	30 97       	sbiw	r30, 0x00	; 0
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <__vector_35+0x34>
		tc_tccr3_ovf_callback();
    1ed6:	19 95       	eicall
	}
}
    1ed8:	ff 91       	pop	r31
    1eda:	ef 91       	pop	r30
    1edc:	bf 91       	pop	r27
    1ede:	af 91       	pop	r26
    1ee0:	9f 91       	pop	r25
    1ee2:	8f 91       	pop	r24
    1ee4:	7f 91       	pop	r23
    1ee6:	6f 91       	pop	r22
    1ee8:	5f 91       	pop	r21
    1eea:	4f 91       	pop	r20
    1eec:	3f 91       	pop	r19
    1eee:	2f 91       	pop	r18
    1ef0:	0f 90       	pop	r0
    1ef2:	0b be       	out	0x3b, r0	; 59
    1ef4:	0f 90       	pop	r0
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	0f 90       	pop	r0
    1efa:	1f 90       	pop	r1
    1efc:	18 95       	reti

00001efe <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
    1efe:	1f 92       	push	r1
    1f00:	0f 92       	push	r0
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	0f 92       	push	r0
    1f06:	11 24       	eor	r1, r1
    1f08:	0b b6       	in	r0, 0x3b	; 59
    1f0a:	0f 92       	push	r0
    1f0c:	2f 93       	push	r18
    1f0e:	3f 93       	push	r19
    1f10:	4f 93       	push	r20
    1f12:	5f 93       	push	r21
    1f14:	6f 93       	push	r22
    1f16:	7f 93       	push	r23
    1f18:	8f 93       	push	r24
    1f1a:	9f 93       	push	r25
    1f1c:	af 93       	push	r26
    1f1e:	bf 93       	push	r27
    1f20:	ef 93       	push	r30
    1f22:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
    1f24:	e0 91 09 08 	lds	r30, 0x0809	; 0x800809 <tc_tccr3_compa_callback>
    1f28:	f0 91 0a 08 	lds	r31, 0x080A	; 0x80080a <tc_tccr3_compa_callback+0x1>
    1f2c:	30 97       	sbiw	r30, 0x00	; 0
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <__vector_32+0x34>
		tc_tccr3_compa_callback();
    1f30:	19 95       	eicall
	}
}
    1f32:	ff 91       	pop	r31
    1f34:	ef 91       	pop	r30
    1f36:	bf 91       	pop	r27
    1f38:	af 91       	pop	r26
    1f3a:	9f 91       	pop	r25
    1f3c:	8f 91       	pop	r24
    1f3e:	7f 91       	pop	r23
    1f40:	6f 91       	pop	r22
    1f42:	5f 91       	pop	r21
    1f44:	4f 91       	pop	r20
    1f46:	3f 91       	pop	r19
    1f48:	2f 91       	pop	r18
    1f4a:	0f 90       	pop	r0
    1f4c:	0b be       	out	0x3b, r0	; 59
    1f4e:	0f 90       	pop	r0
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	0f 90       	pop	r0
    1f54:	1f 90       	pop	r1
    1f56:	18 95       	reti

00001f58 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    1f58:	1f 92       	push	r1
    1f5a:	0f 92       	push	r0
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	0f 92       	push	r0
    1f60:	11 24       	eor	r1, r1
    1f62:	0b b6       	in	r0, 0x3b	; 59
    1f64:	0f 92       	push	r0
    1f66:	2f 93       	push	r18
    1f68:	3f 93       	push	r19
    1f6a:	4f 93       	push	r20
    1f6c:	5f 93       	push	r21
    1f6e:	6f 93       	push	r22
    1f70:	7f 93       	push	r23
    1f72:	8f 93       	push	r24
    1f74:	9f 93       	push	r25
    1f76:	af 93       	push	r26
    1f78:	bf 93       	push	r27
    1f7a:	ef 93       	push	r30
    1f7c:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
    1f7e:	e0 91 07 08 	lds	r30, 0x0807	; 0x800807 <tc_tccr3_compb_callback>
    1f82:	f0 91 08 08 	lds	r31, 0x0808	; 0x800808 <tc_tccr3_compb_callback+0x1>
    1f86:	30 97       	sbiw	r30, 0x00	; 0
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <__vector_33+0x34>
		tc_tccr3_compb_callback();
    1f8a:	19 95       	eicall
	}
}
    1f8c:	ff 91       	pop	r31
    1f8e:	ef 91       	pop	r30
    1f90:	bf 91       	pop	r27
    1f92:	af 91       	pop	r26
    1f94:	9f 91       	pop	r25
    1f96:	8f 91       	pop	r24
    1f98:	7f 91       	pop	r23
    1f9a:	6f 91       	pop	r22
    1f9c:	5f 91       	pop	r21
    1f9e:	4f 91       	pop	r20
    1fa0:	3f 91       	pop	r19
    1fa2:	2f 91       	pop	r18
    1fa4:	0f 90       	pop	r0
    1fa6:	0b be       	out	0x3b, r0	; 59
    1fa8:	0f 90       	pop	r0
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	0f 90       	pop	r0
    1fae:	1f 90       	pop	r1
    1fb0:	18 95       	reti

00001fb2 <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
    1fb2:	1f 92       	push	r1
    1fb4:	0f 92       	push	r0
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	0f 92       	push	r0
    1fba:	11 24       	eor	r1, r1
    1fbc:	0b b6       	in	r0, 0x3b	; 59
    1fbe:	0f 92       	push	r0
    1fc0:	2f 93       	push	r18
    1fc2:	3f 93       	push	r19
    1fc4:	4f 93       	push	r20
    1fc6:	5f 93       	push	r21
    1fc8:	6f 93       	push	r22
    1fca:	7f 93       	push	r23
    1fcc:	8f 93       	push	r24
    1fce:	9f 93       	push	r25
    1fd0:	af 93       	push	r26
    1fd2:	bf 93       	push	r27
    1fd4:	ef 93       	push	r30
    1fd6:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
    1fd8:	e0 91 05 08 	lds	r30, 0x0805	; 0x800805 <tc_tccr3_compc_callback>
    1fdc:	f0 91 06 08 	lds	r31, 0x0806	; 0x800806 <tc_tccr3_compc_callback+0x1>
    1fe0:	30 97       	sbiw	r30, 0x00	; 0
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <__vector_34+0x34>
		tc_tccr3_compc_callback();
    1fe4:	19 95       	eicall
	}
}
    1fe6:	ff 91       	pop	r31
    1fe8:	ef 91       	pop	r30
    1fea:	bf 91       	pop	r27
    1fec:	af 91       	pop	r26
    1fee:	9f 91       	pop	r25
    1ff0:	8f 91       	pop	r24
    1ff2:	7f 91       	pop	r23
    1ff4:	6f 91       	pop	r22
    1ff6:	5f 91       	pop	r21
    1ff8:	4f 91       	pop	r20
    1ffa:	3f 91       	pop	r19
    1ffc:	2f 91       	pop	r18
    1ffe:	0f 90       	pop	r0
    2000:	0b be       	out	0x3b, r0	; 59
    2002:	0f 90       	pop	r0
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	0f 90       	pop	r0
    2008:	1f 90       	pop	r1
    200a:	18 95       	reti

0000200c <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
    200c:	1f 92       	push	r1
    200e:	0f 92       	push	r0
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	0f 92       	push	r0
    2014:	11 24       	eor	r1, r1
    2016:	0b b6       	in	r0, 0x3b	; 59
    2018:	0f 92       	push	r0
    201a:	2f 93       	push	r18
    201c:	3f 93       	push	r19
    201e:	4f 93       	push	r20
    2020:	5f 93       	push	r21
    2022:	6f 93       	push	r22
    2024:	7f 93       	push	r23
    2026:	8f 93       	push	r24
    2028:	9f 93       	push	r25
    202a:	af 93       	push	r26
    202c:	bf 93       	push	r27
    202e:	ef 93       	push	r30
    2030:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
    2032:	e0 91 03 08 	lds	r30, 0x0803	; 0x800803 <tc_tccr4_ovf_callback>
    2036:	f0 91 04 08 	lds	r31, 0x0804	; 0x800804 <tc_tccr4_ovf_callback+0x1>
    203a:	30 97       	sbiw	r30, 0x00	; 0
    203c:	09 f0       	breq	.+2      	; 0x2040 <__vector_45+0x34>
		tc_tccr4_ovf_callback();
    203e:	19 95       	eicall
	}
}
    2040:	ff 91       	pop	r31
    2042:	ef 91       	pop	r30
    2044:	bf 91       	pop	r27
    2046:	af 91       	pop	r26
    2048:	9f 91       	pop	r25
    204a:	8f 91       	pop	r24
    204c:	7f 91       	pop	r23
    204e:	6f 91       	pop	r22
    2050:	5f 91       	pop	r21
    2052:	4f 91       	pop	r20
    2054:	3f 91       	pop	r19
    2056:	2f 91       	pop	r18
    2058:	0f 90       	pop	r0
    205a:	0b be       	out	0x3b, r0	; 59
    205c:	0f 90       	pop	r0
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	0f 90       	pop	r0
    2062:	1f 90       	pop	r1
    2064:	18 95       	reti

00002066 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    2066:	1f 92       	push	r1
    2068:	0f 92       	push	r0
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	0f 92       	push	r0
    206e:	11 24       	eor	r1, r1
    2070:	0b b6       	in	r0, 0x3b	; 59
    2072:	0f 92       	push	r0
    2074:	2f 93       	push	r18
    2076:	3f 93       	push	r19
    2078:	4f 93       	push	r20
    207a:	5f 93       	push	r21
    207c:	6f 93       	push	r22
    207e:	7f 93       	push	r23
    2080:	8f 93       	push	r24
    2082:	9f 93       	push	r25
    2084:	af 93       	push	r26
    2086:	bf 93       	push	r27
    2088:	ef 93       	push	r30
    208a:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
    208c:	e0 91 01 08 	lds	r30, 0x0801	; 0x800801 <tc_tccr4_compa_callback>
    2090:	f0 91 02 08 	lds	r31, 0x0802	; 0x800802 <tc_tccr4_compa_callback+0x1>
    2094:	30 97       	sbiw	r30, 0x00	; 0
    2096:	09 f0       	breq	.+2      	; 0x209a <__vector_42+0x34>
		tc_tccr4_compa_callback();
    2098:	19 95       	eicall
	}
}
    209a:	ff 91       	pop	r31
    209c:	ef 91       	pop	r30
    209e:	bf 91       	pop	r27
    20a0:	af 91       	pop	r26
    20a2:	9f 91       	pop	r25
    20a4:	8f 91       	pop	r24
    20a6:	7f 91       	pop	r23
    20a8:	6f 91       	pop	r22
    20aa:	5f 91       	pop	r21
    20ac:	4f 91       	pop	r20
    20ae:	3f 91       	pop	r19
    20b0:	2f 91       	pop	r18
    20b2:	0f 90       	pop	r0
    20b4:	0b be       	out	0x3b, r0	; 59
    20b6:	0f 90       	pop	r0
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	0f 90       	pop	r0
    20bc:	1f 90       	pop	r1
    20be:	18 95       	reti

000020c0 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
    20c0:	1f 92       	push	r1
    20c2:	0f 92       	push	r0
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	0f 92       	push	r0
    20c8:	11 24       	eor	r1, r1
    20ca:	0b b6       	in	r0, 0x3b	; 59
    20cc:	0f 92       	push	r0
    20ce:	2f 93       	push	r18
    20d0:	3f 93       	push	r19
    20d2:	4f 93       	push	r20
    20d4:	5f 93       	push	r21
    20d6:	6f 93       	push	r22
    20d8:	7f 93       	push	r23
    20da:	8f 93       	push	r24
    20dc:	9f 93       	push	r25
    20de:	af 93       	push	r26
    20e0:	bf 93       	push	r27
    20e2:	ef 93       	push	r30
    20e4:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
    20e6:	e0 91 ff 07 	lds	r30, 0x07FF	; 0x8007ff <tc_tccr4_compb_callback>
    20ea:	f0 91 00 08 	lds	r31, 0x0800	; 0x800800 <tc_tccr4_compb_callback+0x1>
    20ee:	30 97       	sbiw	r30, 0x00	; 0
    20f0:	09 f0       	breq	.+2      	; 0x20f4 <__vector_43+0x34>
		tc_tccr4_compb_callback();
    20f2:	19 95       	eicall
	}
}
    20f4:	ff 91       	pop	r31
    20f6:	ef 91       	pop	r30
    20f8:	bf 91       	pop	r27
    20fa:	af 91       	pop	r26
    20fc:	9f 91       	pop	r25
    20fe:	8f 91       	pop	r24
    2100:	7f 91       	pop	r23
    2102:	6f 91       	pop	r22
    2104:	5f 91       	pop	r21
    2106:	4f 91       	pop	r20
    2108:	3f 91       	pop	r19
    210a:	2f 91       	pop	r18
    210c:	0f 90       	pop	r0
    210e:	0b be       	out	0x3b, r0	; 59
    2110:	0f 90       	pop	r0
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	0f 90       	pop	r0
    2116:	1f 90       	pop	r1
    2118:	18 95       	reti

0000211a <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
    211a:	1f 92       	push	r1
    211c:	0f 92       	push	r0
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	0f 92       	push	r0
    2122:	11 24       	eor	r1, r1
    2124:	0b b6       	in	r0, 0x3b	; 59
    2126:	0f 92       	push	r0
    2128:	2f 93       	push	r18
    212a:	3f 93       	push	r19
    212c:	4f 93       	push	r20
    212e:	5f 93       	push	r21
    2130:	6f 93       	push	r22
    2132:	7f 93       	push	r23
    2134:	8f 93       	push	r24
    2136:	9f 93       	push	r25
    2138:	af 93       	push	r26
    213a:	bf 93       	push	r27
    213c:	ef 93       	push	r30
    213e:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
    2140:	e0 91 fd 07 	lds	r30, 0x07FD	; 0x8007fd <tc_tccr4_compc_callback>
    2144:	f0 91 fe 07 	lds	r31, 0x07FE	; 0x8007fe <tc_tccr4_compc_callback+0x1>
    2148:	30 97       	sbiw	r30, 0x00	; 0
    214a:	09 f0       	breq	.+2      	; 0x214e <__vector_44+0x34>
		tc_tccr4_compc_callback();
    214c:	19 95       	eicall
	}
}
    214e:	ff 91       	pop	r31
    2150:	ef 91       	pop	r30
    2152:	bf 91       	pop	r27
    2154:	af 91       	pop	r26
    2156:	9f 91       	pop	r25
    2158:	8f 91       	pop	r24
    215a:	7f 91       	pop	r23
    215c:	6f 91       	pop	r22
    215e:	5f 91       	pop	r21
    2160:	4f 91       	pop	r20
    2162:	3f 91       	pop	r19
    2164:	2f 91       	pop	r18
    2166:	0f 90       	pop	r0
    2168:	0b be       	out	0x3b, r0	; 59
    216a:	0f 90       	pop	r0
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	0f 90       	pop	r0
    2170:	1f 90       	pop	r1
    2172:	18 95       	reti

00002174 <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
    2174:	1f 92       	push	r1
    2176:	0f 92       	push	r0
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	0f 92       	push	r0
    217c:	11 24       	eor	r1, r1
    217e:	0b b6       	in	r0, 0x3b	; 59
    2180:	0f 92       	push	r0
    2182:	2f 93       	push	r18
    2184:	3f 93       	push	r19
    2186:	4f 93       	push	r20
    2188:	5f 93       	push	r21
    218a:	6f 93       	push	r22
    218c:	7f 93       	push	r23
    218e:	8f 93       	push	r24
    2190:	9f 93       	push	r25
    2192:	af 93       	push	r26
    2194:	bf 93       	push	r27
    2196:	ef 93       	push	r30
    2198:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
    219a:	e0 91 fb 07 	lds	r30, 0x07FB	; 0x8007fb <tc_tccr5_ovf_callback>
    219e:	f0 91 fc 07 	lds	r31, 0x07FC	; 0x8007fc <tc_tccr5_ovf_callback+0x1>
    21a2:	30 97       	sbiw	r30, 0x00	; 0
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <__vector_50+0x34>
		tc_tccr5_ovf_callback();
    21a6:	19 95       	eicall
	}
}
    21a8:	ff 91       	pop	r31
    21aa:	ef 91       	pop	r30
    21ac:	bf 91       	pop	r27
    21ae:	af 91       	pop	r26
    21b0:	9f 91       	pop	r25
    21b2:	8f 91       	pop	r24
    21b4:	7f 91       	pop	r23
    21b6:	6f 91       	pop	r22
    21b8:	5f 91       	pop	r21
    21ba:	4f 91       	pop	r20
    21bc:	3f 91       	pop	r19
    21be:	2f 91       	pop	r18
    21c0:	0f 90       	pop	r0
    21c2:	0b be       	out	0x3b, r0	; 59
    21c4:	0f 90       	pop	r0
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	0f 90       	pop	r0
    21ca:	1f 90       	pop	r1
    21cc:	18 95       	reti

000021ce <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
    21ce:	1f 92       	push	r1
    21d0:	0f 92       	push	r0
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	0f 92       	push	r0
    21d6:	11 24       	eor	r1, r1
    21d8:	0b b6       	in	r0, 0x3b	; 59
    21da:	0f 92       	push	r0
    21dc:	2f 93       	push	r18
    21de:	3f 93       	push	r19
    21e0:	4f 93       	push	r20
    21e2:	5f 93       	push	r21
    21e4:	6f 93       	push	r22
    21e6:	7f 93       	push	r23
    21e8:	8f 93       	push	r24
    21ea:	9f 93       	push	r25
    21ec:	af 93       	push	r26
    21ee:	bf 93       	push	r27
    21f0:	ef 93       	push	r30
    21f2:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
    21f4:	e0 91 f9 07 	lds	r30, 0x07F9	; 0x8007f9 <tc_tccr5_compa_callback>
    21f8:	f0 91 fa 07 	lds	r31, 0x07FA	; 0x8007fa <tc_tccr5_compa_callback+0x1>
    21fc:	30 97       	sbiw	r30, 0x00	; 0
    21fe:	09 f0       	breq	.+2      	; 0x2202 <__vector_47+0x34>
		tc_tccr5_compa_callback();
    2200:	19 95       	eicall
	}
}
    2202:	ff 91       	pop	r31
    2204:	ef 91       	pop	r30
    2206:	bf 91       	pop	r27
    2208:	af 91       	pop	r26
    220a:	9f 91       	pop	r25
    220c:	8f 91       	pop	r24
    220e:	7f 91       	pop	r23
    2210:	6f 91       	pop	r22
    2212:	5f 91       	pop	r21
    2214:	4f 91       	pop	r20
    2216:	3f 91       	pop	r19
    2218:	2f 91       	pop	r18
    221a:	0f 90       	pop	r0
    221c:	0b be       	out	0x3b, r0	; 59
    221e:	0f 90       	pop	r0
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	0f 90       	pop	r0
    2224:	1f 90       	pop	r1
    2226:	18 95       	reti

00002228 <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
    2228:	1f 92       	push	r1
    222a:	0f 92       	push	r0
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	0f 92       	push	r0
    2230:	11 24       	eor	r1, r1
    2232:	0b b6       	in	r0, 0x3b	; 59
    2234:	0f 92       	push	r0
    2236:	2f 93       	push	r18
    2238:	3f 93       	push	r19
    223a:	4f 93       	push	r20
    223c:	5f 93       	push	r21
    223e:	6f 93       	push	r22
    2240:	7f 93       	push	r23
    2242:	8f 93       	push	r24
    2244:	9f 93       	push	r25
    2246:	af 93       	push	r26
    2248:	bf 93       	push	r27
    224a:	ef 93       	push	r30
    224c:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
    224e:	e0 91 f7 07 	lds	r30, 0x07F7	; 0x8007f7 <tc_tccr5_compb_callback>
    2252:	f0 91 f8 07 	lds	r31, 0x07F8	; 0x8007f8 <tc_tccr5_compb_callback+0x1>
    2256:	30 97       	sbiw	r30, 0x00	; 0
    2258:	09 f0       	breq	.+2      	; 0x225c <__vector_48+0x34>
		tc_tccr5_compb_callback();
    225a:	19 95       	eicall
	}
}
    225c:	ff 91       	pop	r31
    225e:	ef 91       	pop	r30
    2260:	bf 91       	pop	r27
    2262:	af 91       	pop	r26
    2264:	9f 91       	pop	r25
    2266:	8f 91       	pop	r24
    2268:	7f 91       	pop	r23
    226a:	6f 91       	pop	r22
    226c:	5f 91       	pop	r21
    226e:	4f 91       	pop	r20
    2270:	3f 91       	pop	r19
    2272:	2f 91       	pop	r18
    2274:	0f 90       	pop	r0
    2276:	0b be       	out	0x3b, r0	; 59
    2278:	0f 90       	pop	r0
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	0f 90       	pop	r0
    227e:	1f 90       	pop	r1
    2280:	18 95       	reti

00002282 <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
    2282:	1f 92       	push	r1
    2284:	0f 92       	push	r0
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	0f 92       	push	r0
    228a:	11 24       	eor	r1, r1
    228c:	0b b6       	in	r0, 0x3b	; 59
    228e:	0f 92       	push	r0
    2290:	2f 93       	push	r18
    2292:	3f 93       	push	r19
    2294:	4f 93       	push	r20
    2296:	5f 93       	push	r21
    2298:	6f 93       	push	r22
    229a:	7f 93       	push	r23
    229c:	8f 93       	push	r24
    229e:	9f 93       	push	r25
    22a0:	af 93       	push	r26
    22a2:	bf 93       	push	r27
    22a4:	ef 93       	push	r30
    22a6:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
    22a8:	e0 91 f5 07 	lds	r30, 0x07F5	; 0x8007f5 <tc_tccr5_compc_callback>
    22ac:	f0 91 f6 07 	lds	r31, 0x07F6	; 0x8007f6 <tc_tccr5_compc_callback+0x1>
    22b0:	30 97       	sbiw	r30, 0x00	; 0
    22b2:	09 f0       	breq	.+2      	; 0x22b6 <__vector_49+0x34>
		tc_tccr5_compc_callback();
    22b4:	19 95       	eicall
	}
}
    22b6:	ff 91       	pop	r31
    22b8:	ef 91       	pop	r30
    22ba:	bf 91       	pop	r27
    22bc:	af 91       	pop	r26
    22be:	9f 91       	pop	r25
    22c0:	8f 91       	pop	r24
    22c2:	7f 91       	pop	r23
    22c4:	6f 91       	pop	r22
    22c6:	5f 91       	pop	r21
    22c8:	4f 91       	pop	r20
    22ca:	3f 91       	pop	r19
    22cc:	2f 91       	pop	r18
    22ce:	0f 90       	pop	r0
    22d0:	0b be       	out	0x3b, r0	; 59
    22d2:	0f 90       	pop	r0
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	0f 90       	pop	r0
    22d8:	1f 90       	pop	r1
    22da:	18 95       	reti

000022dc <tc_enable>:

void tc_enable(volatile void *tc)
{
    22dc:	1f 93       	push	r17
    22de:	cf 93       	push	r28
    22e0:	df 93       	push	r29
    22e2:	1f 92       	push	r1
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    22e8:	2f b7       	in	r18, 0x3f	; 63
    22ea:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    22ec:	f8 94       	cli
	return flags;
    22ee:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <tc_enable+0x1a>
    22f4:	64 c0       	rjmp	.+200    	; 0x23be <tc_enable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    22f6:	88 37       	cpi	r24, 0x78	; 120
    22f8:	91 05       	cpc	r25, r1
    22fa:	49 f4       	brne	.+18     	; 0x230e <tc_enable+0x32>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    22fc:	61 e0       	ldi	r22, 0x01	; 1
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    2304:	60 e1       	ldi	r22, 0x10	; 16
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sysclk_enable_module>
    230c:	58 c0       	rjmp	.+176    	; 0x23be <tc_enable+0xe2>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    230e:	80 3c       	cpi	r24, 0xC0	; 192
    2310:	91 05       	cpc	r25, r1
    2312:	29 f4       	brne	.+10     	; 0x231e <tc_enable+0x42>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    2314:	62 e0       	ldi	r22, 0x02	; 2
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sysclk_enable_module>
    231c:	50 c0       	rjmp	.+160    	; 0x23be <tc_enable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    231e:	8c 34       	cpi	r24, 0x4C	; 76
    2320:	91 05       	cpc	r25, r1
    2322:	29 f4       	brne	.+10     	; 0x232e <tc_enable+0x52>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    2324:	64 e0       	ldi	r22, 0x04	; 4
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sysclk_enable_module>
    232c:	48 c0       	rjmp	.+144    	; 0x23be <tc_enable+0xe2>
	}
#endif

	else if (module == &TCCR1A) {
    232e:	80 38       	cpi	r24, 0x80	; 128
    2330:	91 05       	cpc	r25, r1
    2332:	29 f4       	brne	.+10     	; 0x233e <tc_enable+0x62>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    2334:	68 e0       	ldi	r22, 0x08	; 8
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sysclk_enable_module>
    233c:	40 c0       	rjmp	.+128    	; 0x23be <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    233e:	84 34       	cpi	r24, 0x44	; 68
    2340:	91 05       	cpc	r25, r1
    2342:	29 f4       	brne	.+10     	; 0x234e <tc_enable+0x72>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    2344:	60 e2       	ldi	r22, 0x20	; 32
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sysclk_enable_module>
    234c:	38 c0       	rjmp	.+112    	; 0x23be <tc_enable+0xe2>
	} else if (module == &TCCR2A) {
    234e:	80 3b       	cpi	r24, 0xB0	; 176
    2350:	91 05       	cpc	r25, r1
    2352:	29 f4       	brne	.+10     	; 0x235e <tc_enable+0x82>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    2354:	60 e4       	ldi	r22, 0x40	; 64
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sysclk_enable_module>
    235c:	30 c0       	rjmp	.+96     	; 0x23be <tc_enable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    235e:	88 3b       	cpi	r24, 0xB8	; 184
    2360:	91 05       	cpc	r25, r1
    2362:	29 f4       	brne	.+10     	; 0x236e <tc_enable+0x92>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    2364:	60 e8       	ldi	r22, 0x80	; 128
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sysclk_enable_module>
    236c:	28 c0       	rjmp	.+80     	; 0x23be <tc_enable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    236e:	88 3c       	cpi	r24, 0xC8	; 200
    2370:	91 05       	cpc	r25, r1
    2372:	29 f4       	brne	.+10     	; 0x237e <tc_enable+0xa2>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    2374:	61 e0       	ldi	r22, 0x01	; 1
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sysclk_enable_module>
    237c:	20 c0       	rjmp	.+64     	; 0x23be <tc_enable+0xe2>
	} else if (module == &TCCR3A) {
    237e:	80 39       	cpi	r24, 0x90	; 144
    2380:	91 05       	cpc	r25, r1
    2382:	29 f4       	brne	.+10     	; 0x238e <tc_enable+0xb2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    2384:	68 e0       	ldi	r22, 0x08	; 8
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sysclk_enable_module>
    238c:	18 c0       	rjmp	.+48     	; 0x23be <tc_enable+0xe2>
	} else if (module == &TCCR4A) {
    238e:	80 3a       	cpi	r24, 0xA0	; 160
    2390:	91 05       	cpc	r25, r1
    2392:	29 f4       	brne	.+10     	; 0x239e <tc_enable+0xc2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    2394:	60 e1       	ldi	r22, 0x10	; 16
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sysclk_enable_module>
    239c:	10 c0       	rjmp	.+32     	; 0x23be <tc_enable+0xe2>
	} else if (module == &TCCR5A) {
    239e:	80 32       	cpi	r24, 0x20	; 32
    23a0:	21 e0       	ldi	r18, 0x01	; 1
    23a2:	92 07       	cpc	r25, r18
    23a4:	29 f4       	brne	.+10     	; 0x23b0 <tc_enable+0xd4>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    23a6:	60 e2       	ldi	r22, 0x20	; 32
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sysclk_enable_module>
    23ae:	07 c0       	rjmp	.+14     	; 0x23be <tc_enable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    23b0:	83 34       	cpi	r24, 0x43	; 67
    23b2:	91 40       	sbci	r25, 0x01	; 1
    23b4:	21 f4       	brne	.+8      	; 0x23be <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    23b6:	60 e4       	ldi	r22, 0x40	; 64
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    23be:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    23c0:	0f 90       	pop	r0
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	1f 91       	pop	r17
    23c8:	08 95       	ret

000023ca <tc_disable>:

void tc_disable(volatile void *tc)
{
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	1f 92       	push	r1
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    23d6:	2f b7       	in	r18, 0x3f	; 63
    23d8:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    23da:	f8 94       	cli
	return flags;
    23dc:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <tc_disable+0x1a>
    23e2:	64 c0       	rjmp	.+200    	; 0x24ac <tc_disable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    23e4:	88 37       	cpi	r24, 0x78	; 120
    23e6:	91 05       	cpc	r25, r1
    23e8:	49 f4       	brne	.+18     	; 0x23fc <tc_disable+0x32>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    23ea:	61 e0       	ldi	r22, 0x01	; 1
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	0e 94 0f 02 	call	0x41e	; 0x41e <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    23f2:	60 e1       	ldi	r22, 0x10	; 16
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	0e 94 0f 02 	call	0x41e	; 0x41e <sysclk_disable_module>
    23fa:	58 c0       	rjmp	.+176    	; 0x24ac <tc_disable+0xe2>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    23fc:	80 3c       	cpi	r24, 0xC0	; 192
    23fe:	91 05       	cpc	r25, r1
    2400:	29 f4       	brne	.+10     	; 0x240c <tc_disable+0x42>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    2402:	62 e0       	ldi	r22, 0x02	; 2
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	0e 94 0f 02 	call	0x41e	; 0x41e <sysclk_disable_module>
    240a:	50 c0       	rjmp	.+160    	; 0x24ac <tc_disable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    240c:	8c 34       	cpi	r24, 0x4C	; 76
    240e:	91 05       	cpc	r25, r1
    2410:	29 f4       	brne	.+10     	; 0x241c <tc_disable+0x52>
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    2412:	64 e0       	ldi	r22, 0x04	; 4
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	0e 94 0f 02 	call	0x41e	; 0x41e <sysclk_disable_module>
    241a:	48 c0       	rjmp	.+144    	; 0x24ac <tc_disable+0xe2>
	}
#endif
	else if (module == &TCCR1A) {
    241c:	80 38       	cpi	r24, 0x80	; 128
    241e:	91 05       	cpc	r25, r1
    2420:	29 f4       	brne	.+10     	; 0x242c <tc_disable+0x62>
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    2422:	68 e0       	ldi	r22, 0x08	; 8
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	0e 94 0f 02 	call	0x41e	; 0x41e <sysclk_disable_module>
    242a:	40 c0       	rjmp	.+128    	; 0x24ac <tc_disable+0xe2>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    242c:	84 34       	cpi	r24, 0x44	; 68
    242e:	91 05       	cpc	r25, r1
    2430:	29 f4       	brne	.+10     	; 0x243c <tc_disable+0x72>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    2432:	60 e2       	ldi	r22, 0x20	; 32
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	0e 94 0f 02 	call	0x41e	; 0x41e <sysclk_disable_module>
    243a:	38 c0       	rjmp	.+112    	; 0x24ac <tc_disable+0xe2>
	} else if (module == &TCCR2A) {
    243c:	80 3b       	cpi	r24, 0xB0	; 176
    243e:	91 05       	cpc	r25, r1
    2440:	29 f4       	brne	.+10     	; 0x244c <tc_disable+0x82>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    2442:	60 e4       	ldi	r22, 0x40	; 64
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	0e 94 0f 02 	call	0x41e	; 0x41e <sysclk_disable_module>
    244a:	30 c0       	rjmp	.+96     	; 0x24ac <tc_disable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    244c:	88 3b       	cpi	r24, 0xB8	; 184
    244e:	91 05       	cpc	r25, r1
    2450:	29 f4       	brne	.+10     	; 0x245c <tc_disable+0x92>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    2452:	60 e8       	ldi	r22, 0x80	; 128
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	0e 94 0f 02 	call	0x41e	; 0x41e <sysclk_disable_module>
    245a:	28 c0       	rjmp	.+80     	; 0x24ac <tc_disable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    245c:	88 3c       	cpi	r24, 0xC8	; 200
    245e:	91 05       	cpc	r25, r1
    2460:	29 f4       	brne	.+10     	; 0x246c <tc_disable+0xa2>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    2462:	61 e0       	ldi	r22, 0x01	; 1
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	0e 94 0f 02 	call	0x41e	; 0x41e <sysclk_disable_module>
    246a:	20 c0       	rjmp	.+64     	; 0x24ac <tc_disable+0xe2>
	} else if (module == &TCCR3A) {
    246c:	80 39       	cpi	r24, 0x90	; 144
    246e:	91 05       	cpc	r25, r1
    2470:	29 f4       	brne	.+10     	; 0x247c <tc_disable+0xb2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    2472:	68 e0       	ldi	r22, 0x08	; 8
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	0e 94 0f 02 	call	0x41e	; 0x41e <sysclk_disable_module>
    247a:	18 c0       	rjmp	.+48     	; 0x24ac <tc_disable+0xe2>
	} else if (module == &TCCR4A) {
    247c:	80 3a       	cpi	r24, 0xA0	; 160
    247e:	91 05       	cpc	r25, r1
    2480:	29 f4       	brne	.+10     	; 0x248c <tc_disable+0xc2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    2482:	60 e1       	ldi	r22, 0x10	; 16
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	0e 94 0f 02 	call	0x41e	; 0x41e <sysclk_disable_module>
    248a:	10 c0       	rjmp	.+32     	; 0x24ac <tc_disable+0xe2>
	} else if (module == &TCCR5A) {
    248c:	80 32       	cpi	r24, 0x20	; 32
    248e:	21 e0       	ldi	r18, 0x01	; 1
    2490:	92 07       	cpc	r25, r18
    2492:	29 f4       	brne	.+10     	; 0x249e <tc_disable+0xd4>
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    2494:	60 e2       	ldi	r22, 0x20	; 32
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	0e 94 0f 02 	call	0x41e	; 0x41e <sysclk_disable_module>
    249c:	07 c0       	rjmp	.+14     	; 0x24ac <tc_disable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    249e:	83 34       	cpi	r24, 0x43	; 67
    24a0:	91 40       	sbci	r25, 0x01	; 1
    24a2:	21 f4       	brne	.+8      	; 0x24ac <tc_disable+0xe2>
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    24a4:	60 e4       	ldi	r22, 0x40	; 64
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	0e 94 0f 02 	call	0x41e	; 0x41e <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    24ac:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    24ae:	0f 90       	pop	r0
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	08 95       	ret

000024b8 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    24b8:	80 38       	cpi	r24, 0x80	; 128
    24ba:	91 05       	cpc	r25, r1
    24bc:	29 f4       	brne	.+10     	; 0x24c8 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
    24be:	70 93 14 08 	sts	0x0814, r23	; 0x800814 <tc_tccr1_ovf_callback+0x1>
    24c2:	60 93 13 08 	sts	0x0813, r22	; 0x800813 <tc_tccr1_ovf_callback>
    24c6:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    24c8:	80 39       	cpi	r24, 0x90	; 144
    24ca:	91 05       	cpc	r25, r1
    24cc:	29 f4       	brne	.+10     	; 0x24d8 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
    24ce:	70 93 0c 08 	sts	0x080C, r23	; 0x80080c <tc_tccr3_ovf_callback+0x1>
    24d2:	60 93 0b 08 	sts	0x080B, r22	; 0x80080b <tc_tccr3_ovf_callback>
    24d6:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    24d8:	80 3a       	cpi	r24, 0xA0	; 160
    24da:	91 05       	cpc	r25, r1
    24dc:	29 f4       	brne	.+10     	; 0x24e8 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
    24de:	70 93 04 08 	sts	0x0804, r23	; 0x800804 <tc_tccr4_ovf_callback+0x1>
    24e2:	60 93 03 08 	sts	0x0803, r22	; 0x800803 <tc_tccr4_ovf_callback>
    24e6:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    24e8:	80 32       	cpi	r24, 0x20	; 32
    24ea:	91 40       	sbci	r25, 0x01	; 1
    24ec:	21 f4       	brne	.+8      	; 0x24f6 <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
    24ee:	70 93 fc 07 	sts	0x07FC, r23	; 0x8007fc <tc_tccr5_ovf_callback+0x1>
    24f2:	60 93 fb 07 	sts	0x07FB, r22	; 0x8007fb <tc_tccr5_ovf_callback>
    24f6:	08 95       	ret

000024f8 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    24f8:	80 38       	cpi	r24, 0x80	; 128
    24fa:	91 05       	cpc	r25, r1
    24fc:	29 f4       	brne	.+10     	; 0x2508 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
    24fe:	70 93 12 08 	sts	0x0812, r23	; 0x800812 <tc_tccr1_compa_callback+0x1>
    2502:	60 93 11 08 	sts	0x0811, r22	; 0x800811 <tc_tccr1_compa_callback>
    2506:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    2508:	80 39       	cpi	r24, 0x90	; 144
    250a:	91 05       	cpc	r25, r1
    250c:	29 f4       	brne	.+10     	; 0x2518 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
    250e:	70 93 0a 08 	sts	0x080A, r23	; 0x80080a <tc_tccr3_compa_callback+0x1>
    2512:	60 93 09 08 	sts	0x0809, r22	; 0x800809 <tc_tccr3_compa_callback>
    2516:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    2518:	80 3a       	cpi	r24, 0xA0	; 160
    251a:	91 05       	cpc	r25, r1
    251c:	29 f4       	brne	.+10     	; 0x2528 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
    251e:	70 93 02 08 	sts	0x0802, r23	; 0x800802 <tc_tccr4_compa_callback+0x1>
    2522:	60 93 01 08 	sts	0x0801, r22	; 0x800801 <tc_tccr4_compa_callback>
    2526:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    2528:	80 32       	cpi	r24, 0x20	; 32
    252a:	91 40       	sbci	r25, 0x01	; 1
    252c:	21 f4       	brne	.+8      	; 0x2536 <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
    252e:	70 93 fa 07 	sts	0x07FA, r23	; 0x8007fa <tc_tccr5_compa_callback+0x1>
    2532:	60 93 f9 07 	sts	0x07F9, r22	; 0x8007f9 <tc_tccr5_compa_callback>
    2536:	08 95       	ret

00002538 <sal_init>:
 * @brief Initialization of SAL.
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
    2538:	08 95       	ret

0000253a <appDataConf>:
		{
			spi_rx_buf_head++;
		}
	}
	return data_received;
}
    253a:	10 92 85 08 	sts	0x0885, r1	; 0x800885 <appDataReqBusy>
    253e:	08 95       	ret

00002540 <appDataInd>:
    2540:	0f 93       	push	r16
    2542:	1f 93       	push	r17
    2544:	cf 93       	push	r28
    2546:	dc 01       	movw	r26, r24
    2548:	19 96       	adiw	r26, 0x09	; 9
    254a:	2c 91       	ld	r18, X
    254c:	22 23       	and	r18, r18
    254e:	89 f0       	breq	.+34     	; 0x2572 <appDataInd+0x32>
    2550:	8c 01       	movw	r16, r24
    2552:	c0 e0       	ldi	r28, 0x00	; 0
    2554:	d8 01       	movw	r26, r16
    2556:	17 96       	adiw	r26, 0x07	; 7
    2558:	ed 91       	ld	r30, X+
    255a:	fc 91       	ld	r31, X
    255c:	18 97       	sbiw	r26, 0x08	; 8
    255e:	ec 0f       	add	r30, r28
    2560:	f1 1d       	adc	r31, r1
    2562:	80 81       	ld	r24, Z
    2564:	0e 94 b7 03 	call	0x76e	; 0x76e <sio2host_putchar>
    2568:	cf 5f       	subi	r28, 0xFF	; 255
    256a:	f8 01       	movw	r30, r16
    256c:	81 85       	ldd	r24, Z+9	; 0x09
    256e:	c8 17       	cp	r28, r24
    2570:	88 f3       	brcs	.-30     	; 0x2554 <appDataInd+0x14>
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	cf 91       	pop	r28
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	08 95       	ret

0000257c <config_Ziggys_ADC>:
    257c:	5d 98       	cbi	0x0b, 5	; 11
    257e:	86 e4       	ldi	r24, 0x46	; 70
    2580:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SPI_Transmit_no_IRQ>
    2584:	82 ef       	ldi	r24, 0xF2	; 242
    2586:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SPI_Transmit_no_IRQ>
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SPI_Transmit_no_IRQ>
    2590:	8b e8       	ldi	r24, 0x8B	; 139
    2592:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SPI_Transmit_no_IRQ>
    2596:	80 ec       	ldi	r24, 0xC0	; 192
    2598:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SPI_Transmit_no_IRQ>
    259c:	86 e0       	ldi	r24, 0x06	; 6
    259e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SPI_Transmit_no_IRQ>
    25a2:	5d 9a       	sbi	0x0b, 5	; 11
    25a4:	08 95       	ret

000025a6 <adc_start_conversions>:
    25a6:	5d 98       	cbi	0x0b, 5	; 11
    25a8:	88 e6       	ldi	r24, 0x68	; 104
    25aa:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SPI_Transmit_no_IRQ>
    25ae:	5d 9a       	sbi	0x0b, 5	; 11
    25b0:	08 95       	ret

000025b2 <config_ext_DR_irq>:
    25b2:	8a b1       	in	r24, 0x0a	; 10
    25b4:	8a b9       	out	0x0a, r24	; 10
    25b6:	e9 e6       	ldi	r30, 0x69	; 105
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	80 83       	st	Z, r24
    25be:	08 95       	ret

000025c0 <check_adc>:
    25c0:	cf 92       	push	r12
    25c2:	df 92       	push	r13
    25c4:	ef 92       	push	r14
    25c6:	ff 92       	push	r15
    25c8:	0f 93       	push	r16
    25ca:	1f 93       	push	r17
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <check_adc+0x12>
    25d2:	1f 92       	push	r1
    25d4:	1f 92       	push	r1
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	5d 98       	cbi	0x0b, 5	; 11
    25dc:	87 e4       	ldi	r24, 0x47	; 71
    25de:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SPI_Transmit_no_IRQ>
    25e2:	80 e4       	ldi	r24, 0x40	; 64
    25e4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SPI_Transmit_no_IRQ>
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	80 e4       	ldi	r24, 0x40	; 64
    25ec:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SPI_Transmit_no_IRQ>
    25f0:	8a 83       	std	Y+2, r24	; 0x02
    25f2:	80 e4       	ldi	r24, 0x40	; 64
    25f4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SPI_Transmit_no_IRQ>
    25f8:	8b 83       	std	Y+3, r24	; 0x03
    25fa:	80 e4       	ldi	r24, 0x40	; 64
    25fc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SPI_Transmit_no_IRQ>
    2600:	8c 83       	std	Y+4, r24	; 0x04
    2602:	80 e4       	ldi	r24, 0x40	; 64
    2604:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SPI_Transmit_no_IRQ>
    2608:	8d 83       	std	Y+5, r24	; 0x05
    260a:	5d 9a       	sbi	0x0b, 5	; 11
    260c:	ce 01       	movw	r24, r28
    260e:	01 96       	adiw	r24, 0x01	; 1
    2610:	7c 01       	movw	r14, r24
    2612:	6e 01       	movw	r12, r28
    2614:	96 e0       	ldi	r25, 0x06	; 6
    2616:	c9 0e       	add	r12, r25
    2618:	d1 1c       	adc	r13, r1
    261a:	00 e0       	ldi	r16, 0x00	; 0
    261c:	f7 01       	movw	r30, r14
    261e:	11 91       	ld	r17, Z+
    2620:	7f 01       	movw	r14, r30
    2622:	81 2f       	mov	r24, r17
    2624:	0e 94 b7 03 	call	0x76e	; 0x76e <sio2host_putchar>
    2628:	16 37       	cpi	r17, 0x76	; 118
    262a:	61 f0       	breq	.+24     	; 0x2644 <check_adc+0x84>
    262c:	28 f4       	brcc	.+10     	; 0x2638 <check_adc+0x78>
    262e:	11 23       	and	r17, r17
    2630:	49 f0       	breq	.+18     	; 0x2644 <check_adc+0x84>
    2632:	16 36       	cpi	r17, 0x66	; 102
    2634:	41 f4       	brne	.+16     	; 0x2646 <check_adc+0x86>
    2636:	06 c0       	rjmp	.+12     	; 0x2644 <check_adc+0x84>
    2638:	10 3c       	cpi	r17, 0xC0	; 192
    263a:	21 f0       	breq	.+8      	; 0x2644 <check_adc+0x84>
    263c:	12 3f       	cpi	r17, 0xF2	; 242
    263e:	11 f0       	breq	.+4      	; 0x2644 <check_adc+0x84>
    2640:	1b 38       	cpi	r17, 0x8B	; 139
    2642:	09 f4       	brne	.+2      	; 0x2646 <check_adc+0x86>
    2644:	0f 5f       	subi	r16, 0xFF	; 255
    2646:	05 30       	cpi	r16, 0x05	; 5
    2648:	09 f4       	brne	.+2      	; 0x264c <check_adc+0x8c>
    264a:	01 e0       	ldi	r16, 0x01	; 1
    264c:	ec 14       	cp	r14, r12
    264e:	fd 04       	cpc	r15, r13
    2650:	29 f7       	brne	.-54     	; 0x261c <check_adc+0x5c>
    2652:	80 2f       	mov	r24, r16
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	ff 90       	pop	r15
    2668:	ef 90       	pop	r14
    266a:	df 90       	pop	r13
    266c:	cf 90       	pop	r12
    266e:	08 95       	ret

00002670 <main>:
/*****************************************************************************
*****************************************************************************/
int main(void)
{
	irq_initialize_vectors();
	sysclk_init();
    2670:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <sysclk_init>
	board_init();
    2674:	0e 94 85 02 	call	0x50a	; 0x50a <board_init>
	SYS_Init();
    2678:	e7 d9       	rcall	.-3122   	; 0x1a48 <SYS_Init>
	sio2host_init();
    267a:	0e 94 57 03 	call	0x6ae	; 0x6ae <sio2host_init>
	cpu_irq_enable();
    267e:	78 94       	sei

/****************************************************************************
*****************************************************************************/
static void appInit(void)
{
	NWK_SetAddr(APP_ADDR);
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 24 04 	call	0x848	; 0x848 <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
    2688:	87 e6       	ldi	r24, 0x67	; 103
    268a:	95 e4       	ldi	r25, 0x45	; 69
    268c:	0e 94 2b 04 	call	0x856	; 0x856 <NWK_SetPanId>
	PHY_SetChannel(APP_CHANNEL);
    2690:	8f e0       	ldi	r24, 0x0F	; 15
    2692:	0a d9       	rcall	.-3564   	; 0x18a8 <PHY_SetChannel>
	PHY_SetRxState(true);
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	04 d9       	rcall	.-3576   	; 0x18a0 <PHY_SetRxState>
    2698:	60 ea       	ldi	r22, 0xA0	; 160

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    269a:	72 e1       	ldi	r23, 0x12	; 18
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	0e 94 32 04 	call	0x864	; 0x864 <NWK_OpenEndpoint>
	SYS_Init();
	sio2host_init();
	cpu_irq_enable();
	//LED_On(LED0);
	appInit();
	init_SPI_mstr();
    26a2:	0e 94 c7 01 	call	0x38e	; 0x38e <init_SPI_mstr>
	config_ext_DR_irq();
    26a6:	85 df       	rcall	.-246    	; 0x25b2 <config_ext_DR_irq>
	config_Ziggys_ADC();
    26a8:	69 df       	rcall	.-302    	; 0x257c <config_Ziggys_ADC>
    26aa:	8a df       	rcall	.-236    	; 0x25c0 <check_adc>
	check_adc();
    26ac:	e6 e8       	ldi	r30, 0x86	; 134
    26ae:	f8 e0       	ldi	r31, 0x08	; 8
	appDataReq.dstAddr = 1 - APP_ADDR;
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	96 83       	std	Z+6, r25	; 0x06
    26b6:	85 83       	std	Z+5, r24	; 0x05
    26b8:	87 83       	std	Z+7, r24	; 0x07
    26ba:	80 87       	std	Z+8, r24	; 0x08
	appDataReq.dstEndpoint = APP_ENDPOINT;
    26bc:	82 e0       	ldi	r24, 0x02	; 2
	appDataReq.srcEndpoint = APP_ENDPOINT;
    26be:	81 87       	std	Z+9, r24	; 0x09
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    26c0:	8c e6       	ldi	r24, 0x6C	; 108
    26c2:	84 87       	std	Z+12, r24	; 0x0c
	appDataReq.size = 108;
    26c4:	ef 01       	movw	r28, r30
    26c6:	0f 2e       	mov	r0, r31
				adc_start_conversions();
			}
		}
		if((buffer_complete==1)&&(!appDataReqBusy))
		{
			appDataReq.data = spi_rx_buf;
    26c8:	f8 e1       	ldi	r31, 0x18	; 24
    26ca:	ef 2e       	mov	r14, r31
    26cc:	f8 e0       	ldi	r31, 0x08	; 8
    26ce:	ff 2e       	mov	r15, r31
    26d0:	f0 2d       	mov	r31, r0
    26d2:	0d e9       	ldi	r16, 0x9D	; 157
    26d4:	12 e1       	ldi	r17, 0x12	; 18
			appDataReq.confirm = appDataConf;
    26d6:	dd 24       	eor	r13, r13
    26d8:	d3 94       	inc	r13
			NWK_DataReq(&appDataReq);
			appDataReqBusy = true;
    26da:	23 c0       	rjmp	.+70     	; 0x2722 <main+0xb2>
    26dc:	8c b1       	in	r24, 0x0c	; 12
    26de:	9d 2d       	mov	r25, r13
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 0;
	// Check if button is high or low for the moment
	uint8_t current_state = (~PINE & (1<<PORTE4)) != 0;
    26e0:	28 2f       	mov	r18, r24
    26e2:	20 71       	andi	r18, 0x10	; 16
    26e4:	84 fd       	sbrc	r24, 4
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <button_state.3300>
	if(current_state != button_state) {
    26ec:	98 17       	cp	r25, r24
    26ee:	a1 f0       	breq	.+40     	; 0x2718 <main+0xa8>
    26f0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <count.3299>
		// Button state is about to be changed, increase counter
		count++;
    26f4:	8f 5f       	subi	r24, 0xFF	; 255
    26f6:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <count.3299>
    26fa:	84 30       	cpi	r24, 0x04	; 4
    26fc:	90 f0       	brcs	.+36     	; 0x2722 <main+0xb2>
		if(count >= 4) {
    26fe:	90 93 16 08 	sts	0x0816, r25	; 0x800816 <button_state.3300>
			// The button have not bounced for four checks, change state
			button_state = current_state;
    2702:	21 11       	cpse	r18, r1
    2704:	02 c0       	rjmp	.+4      	; 0x270a <main+0x9a>
			// If the button was pressed (not released), tell main so
			if(current_state != 0) {
    2706:	d0 92 c9 08 	sts	0x08C9, r13	; 0x8008c9 <button_down>
				button_down = true;
    270a:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <count.3299>
			}
			count = 0;
    270e:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <button_down>
	while (1) {
		while(!(button_down))
		{
			//LED_On(LED0);
			debounce();
			if(button_down)
    2712:	81 11       	cpse	r24, r1
    2714:	04 c0       	rjmp	.+8      	; 0x271e <main+0xae>
    2716:	05 c0       	rjmp	.+10     	; 0x2722 <main+0xb2>
    2718:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <count.3299>
			count = 0;
		}
	}
	else{
		// Reset counter
		count = 0;
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <main+0xb2>
    271e:	e8 9a       	sbi	0x1d, 0	; 29
			//LED_On(LED0);
			debounce();
			if(button_down)
			{
				//button_down = 0;
				EIMSK |= (1<<INT0);//External interrupt 0 enabled
    2720:	42 df       	rcall	.-380    	; 0x25a6 <adc_start_conversions>
				adc_start_conversions();
    2722:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <button_down>
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
	appDataReq.size = 108;
	
		
	while (1) {
		while(!(button_down))
    2726:	88 23       	and	r24, r24
    2728:	c9 f2       	breq	.-78     	; 0x26dc <main+0x6c>
    272a:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <buffer_complete>
				//button_down = 0;
				EIMSK |= (1<<INT0);//External interrupt 0 enabled
				adc_start_conversions();
			}
		}
		if((buffer_complete==1)&&(!appDataReqBusy))
    272e:	81 30       	cpi	r24, 0x01	; 1
    2730:	79 f4       	brne	.+30     	; 0x2750 <main+0xe0>
    2732:	80 91 85 08 	lds	r24, 0x0885	; 0x800885 <appDataReqBusy>
    2736:	81 11       	cpse	r24, r1
    2738:	0b c0       	rjmp	.+22     	; 0x2750 <main+0xe0>
    273a:	fb 86       	std	Y+11, r15	; 0x0b
    273c:	ea 86       	std	Y+10, r14	; 0x0a
		{
			appDataReq.data = spi_rx_buf;
    273e:	1e 87       	std	Y+14, r17	; 0x0e
    2740:	0d 87       	std	Y+13, r16	; 0x0d
			appDataReq.confirm = appDataConf;
    2742:	ce 01       	movw	r24, r28
    2744:	0e 94 67 04 	call	0x8ce	; 0x8ce <NWK_DataReq>
			NWK_DataReq(&appDataReq);
    2748:	d0 92 85 08 	sts	0x0885, r13	; 0x800885 <appDataReqBusy>
			appDataReqBusy = true;
    274c:	10 92 84 08 	sts	0x0884, r1	; 0x800884 <buffer_complete>
			buffer_complete=0;
    2750:	f8 94       	cli
		}
		//LED_On(LED0);
	    cli();//External interrupt 0 enabled
    2752:	78 94       	sei
		//APP_TaskHandler();
		sei();
    2754:	7f d9       	rcall	.-3330   	; 0x1a54 <SYS_TaskHandler>
		SYS_TaskHandler();
    2756:	e5 cf       	rjmp	.-54     	; 0x2722 <main+0xb2>

00002758 <__vector_1>:
    2758:	1f 92       	push	r1
		
	}
    275a:	0f 92       	push	r0
}
/*****************************************************************************
	External interrupt handler for external ADC data ready event
*****************************************************************************/
ISR(INT0_vect)
{
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	0f 92       	push	r0
    2760:	11 24       	eor	r1, r1
    2762:	0b b6       	in	r0, 0x3b	; 59
    2764:	0f 92       	push	r0
    2766:	2f 93       	push	r18
    2768:	3f 93       	push	r19
    276a:	4f 93       	push	r20
    276c:	5f 93       	push	r21
    276e:	6f 93       	push	r22
    2770:	7f 93       	push	r23
    2772:	8f 93       	push	r24
    2774:	9f 93       	push	r25
    2776:	af 93       	push	r26
    2778:	bf 93       	push	r27
    277a:	ef 93       	push	r30
    277c:	ff 93       	push	r31
	/*START*/
	cpu_irq_disable();
    277e:	f8 94       	cli
	PORTD &= ~ ( 1 << SS2 );//1- Puts low SS to start SPI trans
    2780:	5d 98       	cbi	0x0b, 5	; 11
	SPDR = R_ADC_SAMPLES;//Shifts R_ADC_SMPL cmmnd
    2782:	81 e4       	ldi	r24, 0x41	; 65
    2784:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){};//waits till end of cmmnd cmpltly shifts
    2786:	0d b4       	in	r0, 0x2d	; 45
    2788:	07 fe       	sbrs	r0, 7
    278a:	fd cf       	rjmp	.-6      	; 0x2786 <__vector_1+0x2e>
	SPDR = DNT_CARE;//DNT_CARE cmmnd to receive Hbyte
    278c:	80 e4       	ldi	r24, 0x40	; 64
    278e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){};//waits till the Hbyte cmpltly shifts
    2790:	0d b4       	in	r0, 0x2d	; 45
    2792:	07 fe       	sbrs	r0, 7
    2794:	fd cf       	rjmp	.-6      	; 0x2790 <__vector_1+0x38>
	spi_rx_buf[spi_rx_buf_tail] = SPDR;//spi_rx_buf[spi_rx_buf_tail]=Hbyte
    2796:	8e b5       	in	r24, 0x2e	; 46
    2798:	e0 91 17 08 	lds	r30, 0x0817	; 0x800817 <spi_rx_buf_tail>
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	e8 5e       	subi	r30, 0xE8	; 232
    27a0:	f7 4f       	sbci	r31, 0xF7	; 247
    27a2:	80 83       	st	Z, r24
	SPDR = DNT_CARE;//DNT_CARE cmmnd to receive Lbyte
    27a4:	80 e4       	ldi	r24, 0x40	; 64
    27a6:	8e bd       	out	0x2e, r24	; 46
	spi_rx_buf_tail++;//In the mean time inc tail
    27a8:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <spi_rx_buf_tail>
    27ac:	8f 5f       	subi	r24, 0xFF	; 255
    27ae:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <spi_rx_buf_tail>
	while(!(SPSR & (1<<SPIF))){};//waits till the Lbyte cmpltly shifts
    27b2:	0d b4       	in	r0, 0x2d	; 45
    27b4:	07 fe       	sbrs	r0, 7
    27b6:	fd cf       	rjmp	.-6      	; 0x27b2 <__vector_1+0x5a>
	PORTD |= ( 1 << SS2 ); 
    27b8:	5d 9a       	sbi	0x0b, 5	; 11
	if (spi_rx_buf_tail == 109) 
    27ba:	e0 91 17 08 	lds	r30, 0x0817	; 0x800817 <spi_rx_buf_tail>
    27be:	ed 36       	cpi	r30, 0x6D	; 109
    27c0:	f1 f4       	brne	.+60     	; 0x27fe <__vector_1+0xa6>
	{
		spi_rx_buf_tail = 0x00;
    27c2:	10 92 17 08 	sts	0x0817, r1	; 0x800817 <spi_rx_buf_tail>
		if (!appDataReqBusy)
    27c6:	80 91 85 08 	lds	r24, 0x0885	; 0x800885 <appDataReqBusy>
    27ca:	81 11       	cpse	r24, r1
    27cc:	10 c0       	rjmp	.+32     	; 0x27ee <__vector_1+0x96>
		{
			appDataReq.data = spi_rx_buf;
    27ce:	e6 e8       	ldi	r30, 0x86	; 134
    27d0:	f8 e0       	ldi	r31, 0x08	; 8
    27d2:	88 e1       	ldi	r24, 0x18	; 24
    27d4:	98 e0       	ldi	r25, 0x08	; 8
    27d6:	93 87       	std	Z+11, r25	; 0x0b
    27d8:	82 87       	std	Z+10, r24	; 0x0a
			appDataReq.confirm = appDataConf;
    27da:	8d e9       	ldi	r24, 0x9D	; 157
    27dc:	92 e1       	ldi	r25, 0x12	; 18
    27de:	96 87       	std	Z+14, r25	; 0x0e
    27e0:	85 87       	std	Z+13, r24	; 0x0d
			NWK_DataReq(&appDataReq);
    27e2:	cf 01       	movw	r24, r30
    27e4:	0e 94 67 04 	call	0x8ce	; 0x8ce <NWK_DataReq>
			appDataReqBusy = true;
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	80 93 85 08 	sts	0x0885, r24	; 0x800885 <appDataReqBusy>
		}
		spi_rx_buf[spi_rx_buf_tail]=SPDR;	
    27ee:	8e b5       	in	r24, 0x2e	; 46
    27f0:	e0 91 17 08 	lds	r30, 0x0817	; 0x800817 <spi_rx_buf_tail>
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	e8 5e       	subi	r30, 0xE8	; 232
    27f8:	f7 4f       	sbci	r31, 0xF7	; 247
    27fa:	80 83       	st	Z, r24
    27fc:	21 c0       	rjmp	.+66     	; 0x2840 <__vector_1+0xe8>
	}
	else
	{
		spi_rx_buf[spi_rx_buf_tail++] = SPDR;//Read Low byte from ADC
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	8e 0f       	add	r24, r30
    2802:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <spi_rx_buf_tail>
    2806:	9e b5       	in	r25, 0x2e	; 46
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	e8 5e       	subi	r30, 0xE8	; 232
    280c:	f7 4f       	sbci	r31, 0xF7	; 247
    280e:	90 83       	st	Z, r25
		if (spi_rx_buf_tail == 109)
    2810:	8d 36       	cpi	r24, 0x6D	; 109
    2812:	b1 f4       	brne	.+44     	; 0x2840 <__vector_1+0xe8>
		{
			spi_rx_buf_tail = 0x00;
    2814:	10 92 17 08 	sts	0x0817, r1	; 0x800817 <spi_rx_buf_tail>
			if (!appDataReqBusy)
    2818:	80 91 85 08 	lds	r24, 0x0885	; 0x800885 <appDataReqBusy>
    281c:	81 11       	cpse	r24, r1
    281e:	10 c0       	rjmp	.+32     	; 0x2840 <__vector_1+0xe8>
			{
				appDataReq.data = spi_rx_buf;
    2820:	e6 e8       	ldi	r30, 0x86	; 134
    2822:	f8 e0       	ldi	r31, 0x08	; 8
    2824:	88 e1       	ldi	r24, 0x18	; 24
    2826:	98 e0       	ldi	r25, 0x08	; 8
    2828:	93 87       	std	Z+11, r25	; 0x0b
    282a:	82 87       	std	Z+10, r24	; 0x0a
				appDataReq.confirm = appDataConf;
    282c:	8d e9       	ldi	r24, 0x9D	; 157
    282e:	92 e1       	ldi	r25, 0x12	; 18
    2830:	96 87       	std	Z+14, r25	; 0x0e
    2832:	85 87       	std	Z+13, r24	; 0x0d
				NWK_DataReq(&appDataReq);
    2834:	cf 01       	movw	r24, r30
    2836:	0e 94 67 04 	call	0x8ce	; 0x8ce <NWK_DataReq>
				appDataReqBusy = true;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	80 93 85 08 	sts	0x0885, r24	; 0x800885 <appDataReqBusy>
	if(spi_rx_buf_tail==108)
	{
		buffer_complete=1;
		spi_rx_buf_tail = 0x00;
	}*/
	cpu_irq_enable();	
    2840:	78 94       	sei
    2842:	ff 91       	pop	r31
    2844:	ef 91       	pop	r30
    2846:	bf 91       	pop	r27
    2848:	af 91       	pop	r26
    284a:	9f 91       	pop	r25
    284c:	8f 91       	pop	r24
    284e:	7f 91       	pop	r23
    2850:	6f 91       	pop	r22
    2852:	5f 91       	pop	r21
    2854:	4f 91       	pop	r20
    2856:	3f 91       	pop	r19
    2858:	2f 91       	pop	r18
    285a:	0f 90       	pop	r0
    285c:	0b be       	out	0x3b, r0	; 59
    285e:	0f 90       	pop	r0
    2860:	0f be       	out	0x3f, r0	; 63
    2862:	0f 90       	pop	r0
    2864:	1f 90       	pop	r1
    2866:	18 95       	reti

00002868 <__mulsi3>:
    2868:	db 01       	movw	r26, r22
    286a:	8f 93       	push	r24
    286c:	9f 93       	push	r25
    286e:	41 d0       	rcall	.+130    	; 0x28f2 <__muluhisi3>
    2870:	bf 91       	pop	r27
    2872:	af 91       	pop	r26
    2874:	a2 9f       	mul	r26, r18
    2876:	80 0d       	add	r24, r0
    2878:	91 1d       	adc	r25, r1
    287a:	a3 9f       	mul	r26, r19
    287c:	90 0d       	add	r25, r0
    287e:	b2 9f       	mul	r27, r18
    2880:	90 0d       	add	r25, r0
    2882:	11 24       	eor	r1, r1
    2884:	08 95       	ret

00002886 <__udivmodhi4>:
    2886:	aa 1b       	sub	r26, r26
    2888:	bb 1b       	sub	r27, r27
    288a:	51 e1       	ldi	r21, 0x11	; 17
    288c:	07 c0       	rjmp	.+14     	; 0x289c <__udivmodhi4_ep>

0000288e <__udivmodhi4_loop>:
    288e:	aa 1f       	adc	r26, r26
    2890:	bb 1f       	adc	r27, r27
    2892:	a6 17       	cp	r26, r22
    2894:	b7 07       	cpc	r27, r23
    2896:	10 f0       	brcs	.+4      	; 0x289c <__udivmodhi4_ep>
    2898:	a6 1b       	sub	r26, r22
    289a:	b7 0b       	sbc	r27, r23

0000289c <__udivmodhi4_ep>:
    289c:	88 1f       	adc	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	5a 95       	dec	r21
    28a2:	a9 f7       	brne	.-22     	; 0x288e <__udivmodhi4_loop>
    28a4:	80 95       	com	r24
    28a6:	90 95       	com	r25
    28a8:	bc 01       	movw	r22, r24
    28aa:	cd 01       	movw	r24, r26
    28ac:	08 95       	ret

000028ae <__udivmodsi4>:
    28ae:	a1 e2       	ldi	r26, 0x21	; 33
    28b0:	1a 2e       	mov	r1, r26
    28b2:	aa 1b       	sub	r26, r26
    28b4:	bb 1b       	sub	r27, r27
    28b6:	fd 01       	movw	r30, r26
    28b8:	0d c0       	rjmp	.+26     	; 0x28d4 <__udivmodsi4_ep>

000028ba <__udivmodsi4_loop>:
    28ba:	aa 1f       	adc	r26, r26
    28bc:	bb 1f       	adc	r27, r27
    28be:	ee 1f       	adc	r30, r30
    28c0:	ff 1f       	adc	r31, r31
    28c2:	a2 17       	cp	r26, r18
    28c4:	b3 07       	cpc	r27, r19
    28c6:	e4 07       	cpc	r30, r20
    28c8:	f5 07       	cpc	r31, r21
    28ca:	20 f0       	brcs	.+8      	; 0x28d4 <__udivmodsi4_ep>
    28cc:	a2 1b       	sub	r26, r18
    28ce:	b3 0b       	sbc	r27, r19
    28d0:	e4 0b       	sbc	r30, r20
    28d2:	f5 0b       	sbc	r31, r21

000028d4 <__udivmodsi4_ep>:
    28d4:	66 1f       	adc	r22, r22
    28d6:	77 1f       	adc	r23, r23
    28d8:	88 1f       	adc	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	1a 94       	dec	r1
    28de:	69 f7       	brne	.-38     	; 0x28ba <__udivmodsi4_loop>
    28e0:	60 95       	com	r22
    28e2:	70 95       	com	r23
    28e4:	80 95       	com	r24
    28e6:	90 95       	com	r25
    28e8:	9b 01       	movw	r18, r22
    28ea:	ac 01       	movw	r20, r24
    28ec:	bd 01       	movw	r22, r26
    28ee:	cf 01       	movw	r24, r30
    28f0:	08 95       	ret

000028f2 <__muluhisi3>:
    28f2:	09 d0       	rcall	.+18     	; 0x2906 <__umulhisi3>
    28f4:	a5 9f       	mul	r26, r21
    28f6:	90 0d       	add	r25, r0
    28f8:	b4 9f       	mul	r27, r20
    28fa:	90 0d       	add	r25, r0
    28fc:	a4 9f       	mul	r26, r20
    28fe:	80 0d       	add	r24, r0
    2900:	91 1d       	adc	r25, r1
    2902:	11 24       	eor	r1, r1
    2904:	08 95       	ret

00002906 <__umulhisi3>:
    2906:	a2 9f       	mul	r26, r18
    2908:	b0 01       	movw	r22, r0
    290a:	b3 9f       	mul	r27, r19
    290c:	c0 01       	movw	r24, r0
    290e:	a3 9f       	mul	r26, r19
    2910:	70 0d       	add	r23, r0
    2912:	81 1d       	adc	r24, r1
    2914:	11 24       	eor	r1, r1
    2916:	91 1d       	adc	r25, r1
    2918:	b2 9f       	mul	r27, r18
    291a:	70 0d       	add	r23, r0
    291c:	81 1d       	adc	r24, r1
    291e:	11 24       	eor	r1, r1
    2920:	91 1d       	adc	r25, r1
    2922:	08 95       	ret

00002924 <do_rand>:
    2924:	8f 92       	push	r8
    2926:	9f 92       	push	r9
    2928:	af 92       	push	r10
    292a:	bf 92       	push	r11
    292c:	cf 92       	push	r12
    292e:	df 92       	push	r13
    2930:	ef 92       	push	r14
    2932:	ff 92       	push	r15
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	ec 01       	movw	r28, r24
    293a:	68 81       	ld	r22, Y
    293c:	79 81       	ldd	r23, Y+1	; 0x01
    293e:	8a 81       	ldd	r24, Y+2	; 0x02
    2940:	9b 81       	ldd	r25, Y+3	; 0x03
    2942:	61 15       	cp	r22, r1
    2944:	71 05       	cpc	r23, r1
    2946:	81 05       	cpc	r24, r1
    2948:	91 05       	cpc	r25, r1
    294a:	21 f4       	brne	.+8      	; 0x2954 <do_rand+0x30>
    294c:	64 e2       	ldi	r22, 0x24	; 36
    294e:	79 ed       	ldi	r23, 0xD9	; 217
    2950:	8b e5       	ldi	r24, 0x5B	; 91
    2952:	97 e0       	ldi	r25, 0x07	; 7
    2954:	2d e1       	ldi	r18, 0x1D	; 29
    2956:	33 ef       	ldi	r19, 0xF3	; 243
    2958:	41 e0       	ldi	r20, 0x01	; 1
    295a:	50 e0       	ldi	r21, 0x00	; 0
    295c:	cd d1       	rcall	.+922    	; 0x2cf8 <__divmodsi4>
    295e:	49 01       	movw	r8, r18
    2960:	5a 01       	movw	r10, r20
    2962:	9b 01       	movw	r18, r22
    2964:	ac 01       	movw	r20, r24
    2966:	a7 ea       	ldi	r26, 0xA7	; 167
    2968:	b1 e4       	ldi	r27, 0x41	; 65
    296a:	c3 df       	rcall	.-122    	; 0x28f2 <__muluhisi3>
    296c:	6b 01       	movw	r12, r22
    296e:	7c 01       	movw	r14, r24
    2970:	ac ee       	ldi	r26, 0xEC	; 236
    2972:	b4 ef       	ldi	r27, 0xF4	; 244
    2974:	a5 01       	movw	r20, r10
    2976:	94 01       	movw	r18, r8
    2978:	dd d1       	rcall	.+954    	; 0x2d34 <__mulohisi3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	8c 0d       	add	r24, r12
    2980:	9d 1d       	adc	r25, r13
    2982:	ae 1d       	adc	r26, r14
    2984:	bf 1d       	adc	r27, r15
    2986:	b7 ff       	sbrs	r27, 7
    2988:	03 c0       	rjmp	.+6      	; 0x2990 <do_rand+0x6c>
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	a1 09       	sbc	r26, r1
    298e:	b0 48       	sbci	r27, 0x80	; 128
    2990:	88 83       	st	Y, r24
    2992:	99 83       	std	Y+1, r25	; 0x01
    2994:	aa 83       	std	Y+2, r26	; 0x02
    2996:	bb 83       	std	Y+3, r27	; 0x03
    2998:	9f 77       	andi	r25, 0x7F	; 127
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	ff 90       	pop	r15
    29a0:	ef 90       	pop	r14
    29a2:	df 90       	pop	r13
    29a4:	cf 90       	pop	r12
    29a6:	bf 90       	pop	r11
    29a8:	af 90       	pop	r10
    29aa:	9f 90       	pop	r9
    29ac:	8f 90       	pop	r8
    29ae:	08 95       	ret

000029b0 <rand_r>:
    29b0:	b9 cf       	rjmp	.-142    	; 0x2924 <do_rand>

000029b2 <rand>:
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	92 e0       	ldi	r25, 0x02	; 2
    29b6:	b6 cf       	rjmp	.-148    	; 0x2924 <do_rand>

000029b8 <srand>:
    29b8:	a0 e0       	ldi	r26, 0x00	; 0
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    29c0:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    29c4:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    29c8:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    29cc:	08 95       	ret

000029ce <memcpy>:
    29ce:	fb 01       	movw	r30, r22
    29d0:	dc 01       	movw	r26, r24
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <memcpy+0xa>
    29d4:	01 90       	ld	r0, Z+
    29d6:	0d 92       	st	X+, r0
    29d8:	41 50       	subi	r20, 0x01	; 1
    29da:	50 40       	sbci	r21, 0x00	; 0
    29dc:	d8 f7       	brcc	.-10     	; 0x29d4 <memcpy+0x6>
    29de:	08 95       	ret

000029e0 <fdevopen>:
    29e0:	0f 93       	push	r16
    29e2:	1f 93       	push	r17
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	31 f4       	brne	.+12     	; 0x29f8 <fdevopen+0x18>
    29ec:	61 15       	cp	r22, r1
    29ee:	71 05       	cpc	r23, r1
    29f0:	19 f4       	brne	.+6      	; 0x29f8 <fdevopen+0x18>
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	39 c0       	rjmp	.+114    	; 0x2a6a <fdevopen+0x8a>
    29f8:	8b 01       	movw	r16, r22
    29fa:	ec 01       	movw	r28, r24
    29fc:	6e e0       	ldi	r22, 0x0E	; 14
    29fe:	70 e0       	ldi	r23, 0x00	; 0
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	37 d0       	rcall	.+110    	; 0x2a74 <calloc>
    2a06:	fc 01       	movw	r30, r24
    2a08:	89 2b       	or	r24, r25
    2a0a:	99 f3       	breq	.-26     	; 0x29f2 <fdevopen+0x12>
    2a0c:	80 e8       	ldi	r24, 0x80	; 128
    2a0e:	83 83       	std	Z+3, r24	; 0x03
    2a10:	01 15       	cp	r16, r1
    2a12:	11 05       	cpc	r17, r1
    2a14:	71 f0       	breq	.+28     	; 0x2a32 <fdevopen+0x52>
    2a16:	13 87       	std	Z+11, r17	; 0x0b
    2a18:	02 87       	std	Z+10, r16	; 0x0a
    2a1a:	81 e8       	ldi	r24, 0x81	; 129
    2a1c:	83 83       	std	Z+3, r24	; 0x03
    2a1e:	80 91 cb 08 	lds	r24, 0x08CB	; 0x8008cb <__iob>
    2a22:	90 91 cc 08 	lds	r25, 0x08CC	; 0x8008cc <__iob+0x1>
    2a26:	89 2b       	or	r24, r25
    2a28:	21 f4       	brne	.+8      	; 0x2a32 <fdevopen+0x52>
    2a2a:	f0 93 cc 08 	sts	0x08CC, r31	; 0x8008cc <__iob+0x1>
    2a2e:	e0 93 cb 08 	sts	0x08CB, r30	; 0x8008cb <__iob>
    2a32:	20 97       	sbiw	r28, 0x00	; 0
    2a34:	c9 f0       	breq	.+50     	; 0x2a68 <fdevopen+0x88>
    2a36:	d1 87       	std	Z+9, r29	; 0x09
    2a38:	c0 87       	std	Z+8, r28	; 0x08
    2a3a:	83 81       	ldd	r24, Z+3	; 0x03
    2a3c:	82 60       	ori	r24, 0x02	; 2
    2a3e:	83 83       	std	Z+3, r24	; 0x03
    2a40:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <__iob+0x2>
    2a44:	90 91 ce 08 	lds	r25, 0x08CE	; 0x8008ce <__iob+0x3>
    2a48:	89 2b       	or	r24, r25
    2a4a:	71 f4       	brne	.+28     	; 0x2a68 <fdevopen+0x88>
    2a4c:	f0 93 ce 08 	sts	0x08CE, r31	; 0x8008ce <__iob+0x3>
    2a50:	e0 93 cd 08 	sts	0x08CD, r30	; 0x8008cd <__iob+0x2>
    2a54:	80 91 cf 08 	lds	r24, 0x08CF	; 0x8008cf <__iob+0x4>
    2a58:	90 91 d0 08 	lds	r25, 0x08D0	; 0x8008d0 <__iob+0x5>
    2a5c:	89 2b       	or	r24, r25
    2a5e:	21 f4       	brne	.+8      	; 0x2a68 <fdevopen+0x88>
    2a60:	f0 93 d0 08 	sts	0x08D0, r31	; 0x8008d0 <__iob+0x5>
    2a64:	e0 93 cf 08 	sts	0x08CF, r30	; 0x8008cf <__iob+0x4>
    2a68:	cf 01       	movw	r24, r30
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	1f 91       	pop	r17
    2a70:	0f 91       	pop	r16
    2a72:	08 95       	ret

00002a74 <calloc>:
    2a74:	0f 93       	push	r16
    2a76:	1f 93       	push	r17
    2a78:	cf 93       	push	r28
    2a7a:	df 93       	push	r29
    2a7c:	86 9f       	mul	r24, r22
    2a7e:	80 01       	movw	r16, r0
    2a80:	87 9f       	mul	r24, r23
    2a82:	10 0d       	add	r17, r0
    2a84:	96 9f       	mul	r25, r22
    2a86:	10 0d       	add	r17, r0
    2a88:	11 24       	eor	r1, r1
    2a8a:	c8 01       	movw	r24, r16
    2a8c:	0d d0       	rcall	.+26     	; 0x2aa8 <malloc>
    2a8e:	ec 01       	movw	r28, r24
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	21 f0       	breq	.+8      	; 0x2a9c <calloc+0x28>
    2a94:	a8 01       	movw	r20, r16
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	27 d1       	rcall	.+590    	; 0x2cea <memset>
    2a9c:	ce 01       	movw	r24, r28
    2a9e:	df 91       	pop	r29
    2aa0:	cf 91       	pop	r28
    2aa2:	1f 91       	pop	r17
    2aa4:	0f 91       	pop	r16
    2aa6:	08 95       	ret

00002aa8 <malloc>:
    2aa8:	0f 93       	push	r16
    2aaa:	1f 93       	push	r17
    2aac:	cf 93       	push	r28
    2aae:	df 93       	push	r29
    2ab0:	82 30       	cpi	r24, 0x02	; 2
    2ab2:	91 05       	cpc	r25, r1
    2ab4:	10 f4       	brcc	.+4      	; 0x2aba <malloc+0x12>
    2ab6:	82 e0       	ldi	r24, 0x02	; 2
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	e0 91 d3 08 	lds	r30, 0x08D3	; 0x8008d3 <__flp>
    2abe:	f0 91 d4 08 	lds	r31, 0x08D4	; 0x8008d4 <__flp+0x1>
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	a0 e0       	ldi	r26, 0x00	; 0
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	30 97       	sbiw	r30, 0x00	; 0
    2acc:	19 f1       	breq	.+70     	; 0x2b14 <malloc+0x6c>
    2ace:	40 81       	ld	r20, Z
    2ad0:	51 81       	ldd	r21, Z+1	; 0x01
    2ad2:	02 81       	ldd	r16, Z+2	; 0x02
    2ad4:	13 81       	ldd	r17, Z+3	; 0x03
    2ad6:	48 17       	cp	r20, r24
    2ad8:	59 07       	cpc	r21, r25
    2ada:	c8 f0       	brcs	.+50     	; 0x2b0e <malloc+0x66>
    2adc:	84 17       	cp	r24, r20
    2ade:	95 07       	cpc	r25, r21
    2ae0:	69 f4       	brne	.+26     	; 0x2afc <malloc+0x54>
    2ae2:	10 97       	sbiw	r26, 0x00	; 0
    2ae4:	31 f0       	breq	.+12     	; 0x2af2 <malloc+0x4a>
    2ae6:	12 96       	adiw	r26, 0x02	; 2
    2ae8:	0c 93       	st	X, r16
    2aea:	12 97       	sbiw	r26, 0x02	; 2
    2aec:	13 96       	adiw	r26, 0x03	; 3
    2aee:	1c 93       	st	X, r17
    2af0:	27 c0       	rjmp	.+78     	; 0x2b40 <malloc+0x98>
    2af2:	00 93 d3 08 	sts	0x08D3, r16	; 0x8008d3 <__flp>
    2af6:	10 93 d4 08 	sts	0x08D4, r17	; 0x8008d4 <__flp+0x1>
    2afa:	22 c0       	rjmp	.+68     	; 0x2b40 <malloc+0x98>
    2afc:	21 15       	cp	r18, r1
    2afe:	31 05       	cpc	r19, r1
    2b00:	19 f0       	breq	.+6      	; 0x2b08 <malloc+0x60>
    2b02:	42 17       	cp	r20, r18
    2b04:	53 07       	cpc	r21, r19
    2b06:	18 f4       	brcc	.+6      	; 0x2b0e <malloc+0x66>
    2b08:	9a 01       	movw	r18, r20
    2b0a:	bd 01       	movw	r22, r26
    2b0c:	ef 01       	movw	r28, r30
    2b0e:	df 01       	movw	r26, r30
    2b10:	f8 01       	movw	r30, r16
    2b12:	db cf       	rjmp	.-74     	; 0x2aca <malloc+0x22>
    2b14:	21 15       	cp	r18, r1
    2b16:	31 05       	cpc	r19, r1
    2b18:	f9 f0       	breq	.+62     	; 0x2b58 <malloc+0xb0>
    2b1a:	28 1b       	sub	r18, r24
    2b1c:	39 0b       	sbc	r19, r25
    2b1e:	24 30       	cpi	r18, 0x04	; 4
    2b20:	31 05       	cpc	r19, r1
    2b22:	80 f4       	brcc	.+32     	; 0x2b44 <malloc+0x9c>
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	9b 81       	ldd	r25, Y+3	; 0x03
    2b28:	61 15       	cp	r22, r1
    2b2a:	71 05       	cpc	r23, r1
    2b2c:	21 f0       	breq	.+8      	; 0x2b36 <malloc+0x8e>
    2b2e:	fb 01       	movw	r30, r22
    2b30:	93 83       	std	Z+3, r25	; 0x03
    2b32:	82 83       	std	Z+2, r24	; 0x02
    2b34:	04 c0       	rjmp	.+8      	; 0x2b3e <malloc+0x96>
    2b36:	90 93 d4 08 	sts	0x08D4, r25	; 0x8008d4 <__flp+0x1>
    2b3a:	80 93 d3 08 	sts	0x08D3, r24	; 0x8008d3 <__flp>
    2b3e:	fe 01       	movw	r30, r28
    2b40:	32 96       	adiw	r30, 0x02	; 2
    2b42:	44 c0       	rjmp	.+136    	; 0x2bcc <malloc+0x124>
    2b44:	fe 01       	movw	r30, r28
    2b46:	e2 0f       	add	r30, r18
    2b48:	f3 1f       	adc	r31, r19
    2b4a:	81 93       	st	Z+, r24
    2b4c:	91 93       	st	Z+, r25
    2b4e:	22 50       	subi	r18, 0x02	; 2
    2b50:	31 09       	sbc	r19, r1
    2b52:	39 83       	std	Y+1, r19	; 0x01
    2b54:	28 83       	st	Y, r18
    2b56:	3a c0       	rjmp	.+116    	; 0x2bcc <malloc+0x124>
    2b58:	20 91 d1 08 	lds	r18, 0x08D1	; 0x8008d1 <__brkval>
    2b5c:	30 91 d2 08 	lds	r19, 0x08D2	; 0x8008d2 <__brkval+0x1>
    2b60:	23 2b       	or	r18, r19
    2b62:	41 f4       	brne	.+16     	; 0x2b74 <malloc+0xcc>
    2b64:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__malloc_heap_start>
    2b68:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__malloc_heap_start+0x1>
    2b6c:	30 93 d2 08 	sts	0x08D2, r19	; 0x8008d2 <__brkval+0x1>
    2b70:	20 93 d1 08 	sts	0x08D1, r18	; 0x8008d1 <__brkval>
    2b74:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__malloc_heap_end>
    2b78:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__malloc_heap_end+0x1>
    2b7c:	21 15       	cp	r18, r1
    2b7e:	31 05       	cpc	r19, r1
    2b80:	41 f4       	brne	.+16     	; 0x2b92 <malloc+0xea>
    2b82:	2d b7       	in	r18, 0x3d	; 61
    2b84:	3e b7       	in	r19, 0x3e	; 62
    2b86:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <__malloc_margin>
    2b8a:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <__malloc_margin+0x1>
    2b8e:	24 1b       	sub	r18, r20
    2b90:	35 0b       	sbc	r19, r21
    2b92:	e0 91 d1 08 	lds	r30, 0x08D1	; 0x8008d1 <__brkval>
    2b96:	f0 91 d2 08 	lds	r31, 0x08D2	; 0x8008d2 <__brkval+0x1>
    2b9a:	e2 17       	cp	r30, r18
    2b9c:	f3 07       	cpc	r31, r19
    2b9e:	a0 f4       	brcc	.+40     	; 0x2bc8 <malloc+0x120>
    2ba0:	2e 1b       	sub	r18, r30
    2ba2:	3f 0b       	sbc	r19, r31
    2ba4:	28 17       	cp	r18, r24
    2ba6:	39 07       	cpc	r19, r25
    2ba8:	78 f0       	brcs	.+30     	; 0x2bc8 <malloc+0x120>
    2baa:	ac 01       	movw	r20, r24
    2bac:	4e 5f       	subi	r20, 0xFE	; 254
    2bae:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb0:	24 17       	cp	r18, r20
    2bb2:	35 07       	cpc	r19, r21
    2bb4:	48 f0       	brcs	.+18     	; 0x2bc8 <malloc+0x120>
    2bb6:	4e 0f       	add	r20, r30
    2bb8:	5f 1f       	adc	r21, r31
    2bba:	50 93 d2 08 	sts	0x08D2, r21	; 0x8008d2 <__brkval+0x1>
    2bbe:	40 93 d1 08 	sts	0x08D1, r20	; 0x8008d1 <__brkval>
    2bc2:	81 93       	st	Z+, r24
    2bc4:	91 93       	st	Z+, r25
    2bc6:	02 c0       	rjmp	.+4      	; 0x2bcc <malloc+0x124>
    2bc8:	e0 e0       	ldi	r30, 0x00	; 0
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	cf 01       	movw	r24, r30
    2bce:	df 91       	pop	r29
    2bd0:	cf 91       	pop	r28
    2bd2:	1f 91       	pop	r17
    2bd4:	0f 91       	pop	r16
    2bd6:	08 95       	ret

00002bd8 <free>:
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <free+0xa>
    2be0:	81 c0       	rjmp	.+258    	; 0x2ce4 <free+0x10c>
    2be2:	fc 01       	movw	r30, r24
    2be4:	32 97       	sbiw	r30, 0x02	; 2
    2be6:	13 82       	std	Z+3, r1	; 0x03
    2be8:	12 82       	std	Z+2, r1	; 0x02
    2bea:	a0 91 d3 08 	lds	r26, 0x08D3	; 0x8008d3 <__flp>
    2bee:	b0 91 d4 08 	lds	r27, 0x08D4	; 0x8008d4 <__flp+0x1>
    2bf2:	10 97       	sbiw	r26, 0x00	; 0
    2bf4:	81 f4       	brne	.+32     	; 0x2c16 <free+0x3e>
    2bf6:	20 81       	ld	r18, Z
    2bf8:	31 81       	ldd	r19, Z+1	; 0x01
    2bfa:	82 0f       	add	r24, r18
    2bfc:	93 1f       	adc	r25, r19
    2bfe:	20 91 d1 08 	lds	r18, 0x08D1	; 0x8008d1 <__brkval>
    2c02:	30 91 d2 08 	lds	r19, 0x08D2	; 0x8008d2 <__brkval+0x1>
    2c06:	28 17       	cp	r18, r24
    2c08:	39 07       	cpc	r19, r25
    2c0a:	51 f5       	brne	.+84     	; 0x2c60 <free+0x88>
    2c0c:	f0 93 d2 08 	sts	0x08D2, r31	; 0x8008d2 <__brkval+0x1>
    2c10:	e0 93 d1 08 	sts	0x08D1, r30	; 0x8008d1 <__brkval>
    2c14:	67 c0       	rjmp	.+206    	; 0x2ce4 <free+0x10c>
    2c16:	ed 01       	movw	r28, r26
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	ce 17       	cp	r28, r30
    2c1e:	df 07       	cpc	r29, r31
    2c20:	40 f4       	brcc	.+16     	; 0x2c32 <free+0x5a>
    2c22:	4a 81       	ldd	r20, Y+2	; 0x02
    2c24:	5b 81       	ldd	r21, Y+3	; 0x03
    2c26:	9e 01       	movw	r18, r28
    2c28:	41 15       	cp	r20, r1
    2c2a:	51 05       	cpc	r21, r1
    2c2c:	f1 f0       	breq	.+60     	; 0x2c6a <free+0x92>
    2c2e:	ea 01       	movw	r28, r20
    2c30:	f5 cf       	rjmp	.-22     	; 0x2c1c <free+0x44>
    2c32:	d3 83       	std	Z+3, r29	; 0x03
    2c34:	c2 83       	std	Z+2, r28	; 0x02
    2c36:	40 81       	ld	r20, Z
    2c38:	51 81       	ldd	r21, Z+1	; 0x01
    2c3a:	84 0f       	add	r24, r20
    2c3c:	95 1f       	adc	r25, r21
    2c3e:	c8 17       	cp	r28, r24
    2c40:	d9 07       	cpc	r29, r25
    2c42:	59 f4       	brne	.+22     	; 0x2c5a <free+0x82>
    2c44:	88 81       	ld	r24, Y
    2c46:	99 81       	ldd	r25, Y+1	; 0x01
    2c48:	84 0f       	add	r24, r20
    2c4a:	95 1f       	adc	r25, r21
    2c4c:	02 96       	adiw	r24, 0x02	; 2
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	80 83       	st	Z, r24
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	9b 81       	ldd	r25, Y+3	; 0x03
    2c56:	93 83       	std	Z+3, r25	; 0x03
    2c58:	82 83       	std	Z+2, r24	; 0x02
    2c5a:	21 15       	cp	r18, r1
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	29 f4       	brne	.+10     	; 0x2c6a <free+0x92>
    2c60:	f0 93 d4 08 	sts	0x08D4, r31	; 0x8008d4 <__flp+0x1>
    2c64:	e0 93 d3 08 	sts	0x08D3, r30	; 0x8008d3 <__flp>
    2c68:	3d c0       	rjmp	.+122    	; 0x2ce4 <free+0x10c>
    2c6a:	e9 01       	movw	r28, r18
    2c6c:	fb 83       	std	Y+3, r31	; 0x03
    2c6e:	ea 83       	std	Y+2, r30	; 0x02
    2c70:	49 91       	ld	r20, Y+
    2c72:	59 91       	ld	r21, Y+
    2c74:	c4 0f       	add	r28, r20
    2c76:	d5 1f       	adc	r29, r21
    2c78:	ec 17       	cp	r30, r28
    2c7a:	fd 07       	cpc	r31, r29
    2c7c:	61 f4       	brne	.+24     	; 0x2c96 <free+0xbe>
    2c7e:	80 81       	ld	r24, Z
    2c80:	91 81       	ldd	r25, Z+1	; 0x01
    2c82:	84 0f       	add	r24, r20
    2c84:	95 1f       	adc	r25, r21
    2c86:	02 96       	adiw	r24, 0x02	; 2
    2c88:	e9 01       	movw	r28, r18
    2c8a:	99 83       	std	Y+1, r25	; 0x01
    2c8c:	88 83       	st	Y, r24
    2c8e:	82 81       	ldd	r24, Z+2	; 0x02
    2c90:	93 81       	ldd	r25, Z+3	; 0x03
    2c92:	9b 83       	std	Y+3, r25	; 0x03
    2c94:	8a 83       	std	Y+2, r24	; 0x02
    2c96:	e0 e0       	ldi	r30, 0x00	; 0
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	12 96       	adiw	r26, 0x02	; 2
    2c9c:	8d 91       	ld	r24, X+
    2c9e:	9c 91       	ld	r25, X
    2ca0:	13 97       	sbiw	r26, 0x03	; 3
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	19 f0       	breq	.+6      	; 0x2cac <free+0xd4>
    2ca6:	fd 01       	movw	r30, r26
    2ca8:	dc 01       	movw	r26, r24
    2caa:	f7 cf       	rjmp	.-18     	; 0x2c9a <free+0xc2>
    2cac:	8d 91       	ld	r24, X+
    2cae:	9c 91       	ld	r25, X
    2cb0:	11 97       	sbiw	r26, 0x01	; 1
    2cb2:	9d 01       	movw	r18, r26
    2cb4:	2e 5f       	subi	r18, 0xFE	; 254
    2cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb8:	82 0f       	add	r24, r18
    2cba:	93 1f       	adc	r25, r19
    2cbc:	20 91 d1 08 	lds	r18, 0x08D1	; 0x8008d1 <__brkval>
    2cc0:	30 91 d2 08 	lds	r19, 0x08D2	; 0x8008d2 <__brkval+0x1>
    2cc4:	28 17       	cp	r18, r24
    2cc6:	39 07       	cpc	r19, r25
    2cc8:	69 f4       	brne	.+26     	; 0x2ce4 <free+0x10c>
    2cca:	30 97       	sbiw	r30, 0x00	; 0
    2ccc:	29 f4       	brne	.+10     	; 0x2cd8 <free+0x100>
    2cce:	10 92 d4 08 	sts	0x08D4, r1	; 0x8008d4 <__flp+0x1>
    2cd2:	10 92 d3 08 	sts	0x08D3, r1	; 0x8008d3 <__flp>
    2cd6:	02 c0       	rjmp	.+4      	; 0x2cdc <free+0x104>
    2cd8:	13 82       	std	Z+3, r1	; 0x03
    2cda:	12 82       	std	Z+2, r1	; 0x02
    2cdc:	b0 93 d2 08 	sts	0x08D2, r27	; 0x8008d2 <__brkval+0x1>
    2ce0:	a0 93 d1 08 	sts	0x08D1, r26	; 0x8008d1 <__brkval>
    2ce4:	df 91       	pop	r29
    2ce6:	cf 91       	pop	r28
    2ce8:	08 95       	ret

00002cea <memset>:
    2cea:	dc 01       	movw	r26, r24
    2cec:	01 c0       	rjmp	.+2      	; 0x2cf0 <memset+0x6>
    2cee:	6d 93       	st	X+, r22
    2cf0:	41 50       	subi	r20, 0x01	; 1
    2cf2:	50 40       	sbci	r21, 0x00	; 0
    2cf4:	e0 f7       	brcc	.-8      	; 0x2cee <memset+0x4>
    2cf6:	08 95       	ret

00002cf8 <__divmodsi4>:
    2cf8:	05 2e       	mov	r0, r21
    2cfa:	97 fb       	bst	r25, 7
    2cfc:	16 f4       	brtc	.+4      	; 0x2d02 <__divmodsi4+0xa>
    2cfe:	00 94       	com	r0
    2d00:	0f d0       	rcall	.+30     	; 0x2d20 <__negsi2>
    2d02:	57 fd       	sbrc	r21, 7
    2d04:	05 d0       	rcall	.+10     	; 0x2d10 <__divmodsi4_neg2>
    2d06:	d3 dd       	rcall	.-1114   	; 0x28ae <__udivmodsi4>
    2d08:	07 fc       	sbrc	r0, 7
    2d0a:	02 d0       	rcall	.+4      	; 0x2d10 <__divmodsi4_neg2>
    2d0c:	46 f4       	brtc	.+16     	; 0x2d1e <__divmodsi4_exit>
    2d0e:	08 c0       	rjmp	.+16     	; 0x2d20 <__negsi2>

00002d10 <__divmodsi4_neg2>:
    2d10:	50 95       	com	r21
    2d12:	40 95       	com	r20
    2d14:	30 95       	com	r19
    2d16:	21 95       	neg	r18
    2d18:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1a:	4f 4f       	sbci	r20, 0xFF	; 255
    2d1c:	5f 4f       	sbci	r21, 0xFF	; 255

00002d1e <__divmodsi4_exit>:
    2d1e:	08 95       	ret

00002d20 <__negsi2>:
    2d20:	90 95       	com	r25
    2d22:	80 95       	com	r24
    2d24:	70 95       	com	r23
    2d26:	61 95       	neg	r22
    2d28:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2e:	08 95       	ret

00002d30 <__mulshisi3>:
    2d30:	b7 ff       	sbrs	r27, 7
    2d32:	df cd       	rjmp	.-1090   	; 0x28f2 <__muluhisi3>

00002d34 <__mulohisi3>:
    2d34:	de dd       	rcall	.-1092   	; 0x28f2 <__muluhisi3>
    2d36:	82 1b       	sub	r24, r18
    2d38:	93 0b       	sbc	r25, r19
    2d3a:	08 95       	ret

00002d3c <_exit>:
    2d3c:	f8 94       	cli

00002d3e <__stop_program>:
    2d3e:	ff cf       	rjmp	.-2      	; 0x2d3e <__stop_program>
