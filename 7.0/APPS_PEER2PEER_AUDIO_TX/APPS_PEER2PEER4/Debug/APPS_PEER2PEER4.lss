
APPS_PEER2PEER4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  00003262  000032f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003262  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000805  00800212  00800212  00003308  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003308  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000730  00000000  00000000  00003378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a733  00000000  00000000  00003aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000042e5  00000000  00000000  0000e1db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009d68  00000000  00000000  000124c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001620  00000000  00000000  0001c228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001d7df  00000000  00000000  0001d848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000057ab  00000000  00000000  0003b027  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000738  00000000  00000000  000407d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000098d1  00000000  00000000  00040f0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b8 c0       	rjmp	.+368    	; 0x176 <__bad_interrupt>
       6:	00 00       	nop
       8:	b6 c0       	rjmp	.+364    	; 0x176 <__bad_interrupt>
       a:	00 00       	nop
       c:	b4 c0       	rjmp	.+360    	; 0x176 <__bad_interrupt>
       e:	00 00       	nop
      10:	b2 c0       	rjmp	.+356    	; 0x176 <__bad_interrupt>
      12:	00 00       	nop
      14:	b0 c0       	rjmp	.+352    	; 0x176 <__bad_interrupt>
      16:	00 00       	nop
      18:	ae c0       	rjmp	.+348    	; 0x176 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ac c0       	rjmp	.+344    	; 0x176 <__bad_interrupt>
      1e:	00 00       	nop
      20:	aa c0       	rjmp	.+340    	; 0x176 <__bad_interrupt>
      22:	00 00       	nop
      24:	a8 c0       	rjmp	.+336    	; 0x176 <__bad_interrupt>
      26:	00 00       	nop
      28:	a6 c0       	rjmp	.+332    	; 0x176 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a4 c0       	rjmp	.+328    	; 0x176 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a2 c0       	rjmp	.+324    	; 0x176 <__bad_interrupt>
      32:	00 00       	nop
      34:	a0 c0       	rjmp	.+320    	; 0x176 <__bad_interrupt>
      36:	00 00       	nop
      38:	9e c0       	rjmp	.+316    	; 0x176 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9c c0       	rjmp	.+312    	; 0x176 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9a c0       	rjmp	.+308    	; 0x176 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__vector_17>
      48:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__vector_18>
      4c:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__vector_19>
      50:	0c 94 c2 10 	jmp	0x2184	; 0x2184 <__vector_20>
      54:	90 c0       	rjmp	.+288    	; 0x176 <__bad_interrupt>
      56:	00 00       	nop
      58:	8e c0       	rjmp	.+284    	; 0x176 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8c c0       	rjmp	.+280    	; 0x176 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8a c0       	rjmp	.+276    	; 0x176 <__bad_interrupt>
      62:	00 00       	nop
      64:	88 c0       	rjmp	.+272    	; 0x176 <__bad_interrupt>
      66:	00 00       	nop
      68:	86 c0       	rjmp	.+268    	; 0x176 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	84 c0       	rjmp	.+264    	; 0x176 <__bad_interrupt>
      6e:	00 00       	nop
      70:	82 c0       	rjmp	.+260    	; 0x176 <__bad_interrupt>
      72:	00 00       	nop
      74:	79 c2       	rjmp	.+1266   	; 0x568 <__vector_29>
      76:	00 00       	nop
      78:	7e c0       	rjmp	.+252    	; 0x176 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7c c0       	rjmp	.+248    	; 0x176 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <__vector_32>
      84:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__vector_33>
      88:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__vector_34>
      8c:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__vector_35>
      90:	d1 c3       	rjmp	.+1954   	; 0x834 <__vector_36>
      92:	00 00       	nop
      94:	70 c0       	rjmp	.+224    	; 0x176 <__bad_interrupt>
      96:	00 00       	nop
      98:	6e c0       	rjmp	.+220    	; 0x176 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6c c0       	rjmp	.+216    	; 0x176 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6a c0       	rjmp	.+212    	; 0x176 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	68 c0       	rjmp	.+208    	; 0x176 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__vector_42>
      ac:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__vector_43>
      b0:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__vector_44>
      b4:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__vector_45>
      b8:	5e c0       	rjmp	.+188    	; 0x176 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__vector_47>
      c0:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__vector_48>
      c4:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__vector_49>
      c8:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__vector_50>
      cc:	54 c0       	rjmp	.+168    	; 0x176 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	52 c0       	rjmp	.+164    	; 0x176 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	50 c0       	rjmp	.+160    	; 0x176 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4e c0       	rjmp	.+156    	; 0x176 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4c c0       	rjmp	.+152    	; 0x176 <__bad_interrupt>
      de:	00 00       	nop
      e0:	4a c0       	rjmp	.+148    	; 0x176 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	48 c0       	rjmp	.+144    	; 0x176 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	46 c0       	rjmp	.+140    	; 0x176 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	44 c0       	rjmp	.+136    	; 0x176 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	42 c0       	rjmp	.+132    	; 0x176 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	40 c0       	rjmp	.+128    	; 0x176 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3e c0       	rjmp	.+124    	; 0x176 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3c c0       	rjmp	.+120    	; 0x176 <__bad_interrupt>
      fe:	00 00       	nop
     100:	3a c0       	rjmp	.+116    	; 0x176 <__bad_interrupt>
     102:	00 00       	nop
     104:	38 c0       	rjmp	.+112    	; 0x176 <__bad_interrupt>
     106:	00 00       	nop
     108:	36 c0       	rjmp	.+108    	; 0x176 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	34 c0       	rjmp	.+104    	; 0x176 <__bad_interrupt>
     10e:	00 00       	nop
     110:	32 c0       	rjmp	.+100    	; 0x176 <__bad_interrupt>
     112:	00 00       	nop
     114:	30 c0       	rjmp	.+96     	; 0x176 <__bad_interrupt>
     116:	00 00       	nop
     118:	2e c0       	rjmp	.+92     	; 0x176 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2c c0       	rjmp	.+88     	; 0x176 <__bad_interrupt>
     11e:	00 00       	nop
     120:	2a c0       	rjmp	.+84     	; 0x176 <__bad_interrupt>
     122:	00 00       	nop
     124:	28 c0       	rjmp	.+80     	; 0x176 <__bad_interrupt>
     126:	00 00       	nop
     128:	26 c0       	rjmp	.+76     	; 0x176 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	24 c0       	rjmp	.+72     	; 0x176 <__bad_interrupt>
     12e:	00 00       	nop
     130:	22 c0       	rjmp	.+68     	; 0x176 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e2 e6       	ldi	r30, 0x62	; 98
     14c:	f2 e3       	ldi	r31, 0x32	; 50
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a2 31       	cpi	r26, 0x12	; 18
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2a e0       	ldi	r18, 0x0A	; 10
     160:	a2 e1       	ldi	r26, 0x12	; 18
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a7 31       	cpi	r26, 0x17	; 23
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <main>
     172:	0c 94 2f 19 	jmp	0x325e	; 0x325e <_exit>

00000176 <__bad_interrupt>:
     176:	44 cf       	rjmp	.-376    	; 0x0 <__vectors>

00000178 <common_tc_read_count>:
     178:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <tmr_read_count>
     17c:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <timer_mul_var>
     180:	22 23       	and	r18, r18
     182:	d9 f0       	breq	.+54     	; 0x1ba <common_tc_read_count+0x42>
     184:	40 91 0c 0a 	lds	r20, 0x0A0C	; 0x800a0c <timer_multiplier>
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <timer_mul_var>
     18e:	64 2f       	mov	r22, r20
     190:	73 2f       	mov	r23, r19
     192:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__udivmodhi4>
     196:	fb 01       	movw	r30, r22
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	9f ef       	ldi	r25, 0xFF	; 255
     19c:	64 2f       	mov	r22, r20
     19e:	73 2f       	mov	r23, r19
     1a0:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__udivmodhi4>
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	62 9f       	mul	r22, r18
     1a8:	c0 01       	movw	r24, r0
     1aa:	63 9f       	mul	r22, r19
     1ac:	90 0d       	add	r25, r0
     1ae:	72 9f       	mul	r23, r18
     1b0:	90 0d       	add	r25, r0
     1b2:	11 24       	eor	r1, r1
     1b4:	8e 0f       	add	r24, r30
     1b6:	9f 1f       	adc	r25, r31
     1b8:	08 95       	ret
     1ba:	60 91 0c 0a 	lds	r22, 0x0A0C	; 0x800a0c <timer_multiplier>
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__udivmodhi4>
     1c4:	cb 01       	movw	r24, r22
     1c6:	08 95       	ret

000001c8 <common_tc_compare_stop>:
     1c8:	0e 94 6f 10 	call	0x20de	; 0x20de <tmr_disable_cc_interrupt>
     1cc:	0e 94 93 10 	call	0x2126	; 0x2126 <save_cpu_interrupt>
     1d0:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
     1d4:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <__data_end+0x1>
     1d8:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end+0x2>
     1dc:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x3>
     1e0:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <compare_value+0x1>
     1e4:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <compare_value>
     1e8:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <restore_cpu_interrupt>

000001ec <common_tc_overflow_stop>:
     1ec:	0e 94 7d 10 	call	0x20fa	; 0x20fa <tmr_disable_ovf_interrupt>
     1f0:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <timer_mul_var>
     1f4:	08 95       	ret

000001f6 <common_tc_stop>:
     1f6:	e8 df       	rcall	.-48     	; 0x1c8 <common_tc_compare_stop>
     1f8:	f9 df       	rcall	.-14     	; 0x1ec <common_tc_overflow_stop>
     1fa:	0c 94 84 10 	jmp	0x2108	; 0x2108 <tmr_stop>

000001fe <common_tc_delay>:
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	ec 01       	movw	r28, r24
     208:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <tmr_read_count>
     20c:	8c 01       	movw	r16, r24
     20e:	be 01       	movw	r22, r28
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	20 91 0c 0a 	lds	r18, 0x0A0C	; 0x800a0c <timer_multiplier>
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__mulsi3>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	a8 01       	movw	r20, r16
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	48 0f       	add	r20, r24
     22e:	59 1f       	adc	r21, r25
     230:	6a 1f       	adc	r22, r26
     232:	7b 1f       	adc	r23, r27
     234:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <__data_end>
     238:	50 93 13 02 	sts	0x0213, r21	; 0x800213 <__data_end+0x1>
     23c:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <__data_end+0x2>
     240:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <__data_end+0x3>
     244:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <__data_end>
     248:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <__data_end+0x1>
     24c:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end+0x2>
     250:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x3>
     254:	ab 01       	movw	r20, r22
     256:	66 27       	eor	r22, r22
     258:	77 27       	eor	r23, r23
     25a:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <__data_end>
     25e:	50 93 13 02 	sts	0x0213, r21	; 0x800213 <__data_end+0x1>
     262:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <__data_end+0x2>
     266:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <__data_end+0x3>
     26a:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <__data_end>
     26e:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <__data_end+0x1>
     272:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end+0x2>
     276:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x3>
     27a:	41 15       	cp	r20, r1
     27c:	51 05       	cpc	r21, r1
     27e:	61 05       	cpc	r22, r1
     280:	71 05       	cpc	r23, r1
     282:	91 f0       	breq	.+36     	; 0x2a8 <common_tc_delay+0xaa>
     284:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <__data_end>
     288:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <__data_end+0x1>
     28c:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end+0x2>
     290:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x3>
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	08 0f       	add	r16, r24
     298:	19 1f       	adc	r17, r25
     29a:	10 93 18 02 	sts	0x0218, r17	; 0x800218 <compare_value+0x1>
     29e:	00 93 17 02 	sts	0x0217, r16	; 0x800217 <compare_value>
     2a2:	0e 94 6f 10 	call	0x20de	; 0x20de <tmr_disable_cc_interrupt>
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <common_tc_delay+0xba>
     2a8:	08 0f       	add	r16, r24
     2aa:	19 1f       	adc	r17, r25
     2ac:	10 93 18 02 	sts	0x0218, r17	; 0x800218 <compare_value+0x1>
     2b0:	00 93 17 02 	sts	0x0217, r16	; 0x800217 <compare_value>
     2b4:	0e 94 76 10 	call	0x20ec	; 0x20ec <tmr_enable_cc_interrupt>
     2b8:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <compare_value>
     2bc:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <compare_value+0x1>
     2c0:	84 36       	cpi	r24, 0x64	; 100
     2c2:	91 05       	cpc	r25, r1
     2c4:	30 f4       	brcc	.+12     	; 0x2d2 <common_tc_delay+0xd4>
     2c6:	8c 59       	subi	r24, 0x9C	; 156
     2c8:	9f 4f       	sbci	r25, 0xFF	; 255
     2ca:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <compare_value+0x1>
     2ce:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <compare_value>
     2d2:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <compare_value>
     2d6:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <compare_value+0x1>
     2da:	0e 94 88 10 	call	0x2110	; 0x2110 <tmr_write_cmpreg>
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	08 95       	ret

000002e8 <common_tc_init>:
     2e8:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <timer_mul_var>
     2ec:	0e 94 a2 10 	call	0x2144	; 0x2144 <tmr_init>
     2f0:	80 93 0c 0a 	sts	0x0A0C, r24	; 0x800a0c <timer_multiplier>
     2f4:	08 95       	ret

000002f6 <tmr_ovf_callback>:
     2f6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     2fa:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
     2fe:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <__data_end+0x2>
     302:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <__data_end+0x3>
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	a1 05       	cpc	r26, r1
     30a:	b1 05       	cpc	r27, r1
     30c:	c9 f0       	breq	.+50     	; 0x340 <tmr_ovf_callback+0x4a>
     30e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     312:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
     316:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <__data_end+0x2>
     31a:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <__data_end+0x3>
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	a1 09       	sbc	r26, r1
     322:	b1 09       	sbc	r27, r1
     324:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
     328:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x1>
     32c:	a0 93 14 02 	sts	0x0214, r26	; 0x800214 <__data_end+0x2>
     330:	b0 93 15 02 	sts	0x0215, r27	; 0x800215 <__data_end+0x3>
     334:	00 97       	sbiw	r24, 0x00	; 0
     336:	a1 05       	cpc	r26, r1
     338:	b1 05       	cpc	r27, r1
     33a:	11 f4       	brne	.+4      	; 0x340 <tmr_ovf_callback+0x4a>
     33c:	0e 94 76 10 	call	0x20ec	; 0x20ec <tmr_enable_cc_interrupt>
     340:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <timer_mul_var>
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <timer_mul_var>
     34a:	90 91 0c 0a 	lds	r25, 0x0A0C	; 0x800a0c <timer_multiplier>
     34e:	89 17       	cp	r24, r25
     350:	48 f0       	brcs	.+18     	; 0x364 <tmr_ovf_callback+0x6e>
     352:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <timer_mul_var>
     356:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <common_tc_ovf_callback>
     35a:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <common_tc_ovf_callback+0x1>
     35e:	30 97       	sbiw	r30, 0x00	; 0
     360:	09 f0       	breq	.+2      	; 0x364 <tmr_ovf_callback+0x6e>
     362:	19 95       	eicall
     364:	08 95       	ret

00000366 <tmr_cca_callback>:
     366:	0e 94 6f 10 	call	0x20de	; 0x20de <tmr_disable_cc_interrupt>
     36a:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <common_tc_cca_callback>
     36e:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <common_tc_cca_callback+0x1>
     372:	30 97       	sbiw	r30, 0x00	; 0
     374:	09 f0       	breq	.+2      	; 0x378 <tmr_cca_callback+0x12>
     376:	19 95       	eicall
     378:	08 95       	ret

0000037a <set_common_tc_overflow_callback>:
     37a:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <common_tc_ovf_callback+0x1>
     37e:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <common_tc_ovf_callback>
     382:	08 95       	ret

00000384 <set_common_tc_expiry_callback>:
     384:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <common_tc_cca_callback+0x1>
     388:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <common_tc_cca_callback>
     38c:	08 95       	ret

0000038e <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	1f 92       	push	r1
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     398:	8f ef       	ldi	r24, 0xFF	; 255
     39a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     39e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3a2:	8f b7       	in	r24, 0x3f	; 63
     3a4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     3a6:	f8 94       	cli
	return flags;
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     3aa:	5f 93       	push	r21
     3ac:	50 e8       	ldi	r21, 0x80	; 128
     3ae:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     3b8:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3ba:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     3bc:	0f 90       	pop	r0
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	1f 92       	push	r1
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3ce:	9f b7       	in	r25, 0x3f	; 63
     3d0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     3d2:	f8 94       	cli
	return flags;
     3d4:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     3d6:	82 30       	cpi	r24, 0x02	; 2
     3d8:	40 f4       	brcc	.+16     	; 0x3ea <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     3da:	e8 2f       	mov	r30, r24
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	ec 59       	subi	r30, 0x9C	; 156
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	60 95       	com	r22
     3e4:	80 81       	ld	r24, Z
     3e6:	68 23       	and	r22, r24
     3e8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3ea:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     3ec:	0f 90       	pop	r0
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	1f 92       	push	r1
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3fe:	9f b7       	in	r25, 0x3f	; 63
     400:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     402:	f8 94       	cli
	return flags;
     404:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     406:	82 30       	cpi	r24, 0x02	; 2
     408:	38 f4       	brcc	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		*(reg + port) |= id;
     40a:	e8 2f       	mov	r30, r24
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	ec 59       	subi	r30, 0x9C	; 156
     410:	ff 4f       	sbci	r31, 0xFF	; 255
     412:	80 81       	ld	r24, Z
     414:	68 2b       	or	r22, r24
     416:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     418:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     41a:	0f 90       	pop	r0
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	08 95       	ret

00000422 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	7c 01       	movw	r14, r24
     430:	8b 01       	movw	r16, r22
     432:	ea 01       	movw	r28, r20
	while (len) {
     434:	20 97       	sbiw	r28, 0x00	; 0
     436:	39 f0       	breq	.+14     	; 0x446 <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     438:	f8 01       	movw	r30, r16
     43a:	61 91       	ld	r22, Z+
     43c:	8f 01       	movw	r16, r30
     43e:	c7 01       	movw	r24, r14
     440:	be d0       	rcall	.+380    	; 0x5be <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
     442:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
     444:	c9 f7       	brne	.-14     	; 0x438 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	08 95       	ret

00000456 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
     456:	ef 92       	push	r14
     458:	ff 92       	push	r15
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	7c 01       	movw	r14, r24
     464:	8b 01       	movw	r16, r22
     466:	ea 01       	movw	r28, r20
	while (len) {
     468:	20 97       	sbiw	r28, 0x00	; 0
     46a:	39 f0       	breq	.+14     	; 0x47a <usart_serial_read_packet+0x24>
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
     46c:	c7 01       	movw	r24, r14
     46e:	ae d0       	rcall	.+348    	; 0x5cc <usart_getchar>
     470:	f8 01       	movw	r30, r16
     472:	81 93       	st	Z+, r24
     474:	8f 01       	movw	r16, r30
		usart_serial_getchar(usart, data);
		len--;
     476:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
     478:	c9 f7       	brne	.-14     	; 0x46c <usart_serial_read_packet+0x16>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	08 95       	ret

0000048a <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	1f 92       	push	r1
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     494:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <stdio_base>
     498:	90 91 d0 09 	lds	r25, 0x09D0	; 0x8009d0 <stdio_base+0x1>
     49c:	e0 91 cb 09 	lds	r30, 0x09CB	; 0x8009cb <ptr_get>
     4a0:	f0 91 cc 09 	lds	r31, 0x09CC	; 0x8009cc <ptr_get+0x1>
     4a4:	be 01       	movw	r22, r28
     4a6:	6f 5f       	subi	r22, 0xFF	; 255
     4a8:	7f 4f       	sbci	r23, 0xFF	; 255
     4aa:	19 95       	eicall
	return c;
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
}
     4ae:	08 2e       	mov	r0, r24
     4b0:	00 0c       	add	r0, r0
     4b2:	99 0b       	sbc	r25, r25
     4b4:	0f 90       	pop	r0
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     4bc:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     4be:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <stdio_base>
     4c2:	90 91 d0 09 	lds	r25, 0x09D0	; 0x8009d0 <stdio_base+0x1>
     4c6:	e0 91 cd 09 	lds	r30, 0x09CD	; 0x8009cd <ptr_put>
     4ca:	f0 91 ce 09 	lds	r31, 0x09CE	; 0x8009ce <ptr_put+0x1>
     4ce:	19 95       	eicall
     4d0:	99 23       	and	r25, r25
     4d2:	1c f0       	brlt	.+6      	; 0x4da <_write+0x1e>
		return -1;
	}
	return 1;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     4de:	08 95       	ret

000004e0 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     4e0:	2c 9a       	sbi	0x05, 4	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     4e2:	24 9a       	sbi	0x04, 4	; 4
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     4e4:	6c 98       	cbi	0x0d, 4	; 13
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     4e6:	74 9a       	sbi	0x0e, 4	; 14
     4e8:	08 95       	ret

000004ea <read_adc_buff>:

/*Number of samples to send*/
int8_t number_samples = 10;

uint8_t read_adc_buff(uint8_t *data, uint8_t max_length)
{
     4ea:	dc 01       	movw	r26, r24
	uint8_t data_received = 0;
	if(adc_buf_tail >= adc_buf_head)
     4ec:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <adc_buf_tail>
     4f0:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <adc_buf_head>
     4f4:	89 17       	cp	r24, r25
     4f6:	28 f0       	brcs	.+10     	; 0x502 <read_adc_buff+0x18>
	{
		adc_count = adc_buf_tail - adc_buf_head;
     4f8:	28 2f       	mov	r18, r24
     4fa:	29 1b       	sub	r18, r25
     4fc:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <adc_count>
     500:	05 c0       	rjmp	.+10     	; 0x50c <read_adc_buff+0x22>
	}
	else
	{
		adc_count = adc_buf_tail + (ADC_BUF_SIZE - adc_buf_head);
     502:	2d e6       	ldi	r18, 0x6D	; 109
     504:	28 0f       	add	r18, r24
     506:	29 1b       	sub	r18, r25
     508:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <adc_count>
	}
	
	if (0 == adc_count) {
     50c:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <adc_count>
     510:	99 23       	and	r25, r25
     512:	31 f1       	breq	.+76     	; 0x560 <read_adc_buff+0x76>
		return 0;
	}

	if (ADC_BUF_SIZE <= adc_count) {
     514:	9d 36       	cpi	r25, 0x6D	; 109
     516:	40 f0       	brcs	.+16     	; 0x528 <read_adc_buff+0x3e>
		/*
		 * Bytes between head and tail are overwritten by new data.
		 * The oldest data in buffer is the one to which the tail is
		 * pointing. So reading operation should start from the tail.
		 */
		adc_buf_head = adc_buf_tail;
     518:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <adc_buf_head>
		/*
		 * This is a buffer overflow case. But still only the number of
		 * bytes equivalent to
		 * full buffer size are useful.
		 */
		adc_count = ADC_BUF_SIZE;
     51c:	8d e6       	ldi	r24, 0x6D	; 109
     51e:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <adc_count>

		/* Bytes received is more than or equal to buffer. */
		if (ADC_BUF_SIZE <= max_length) {
     522:	6d 36       	cpi	r22, 0x6D	; 109
     524:	38 f4       	brcc	.+14     	; 0x534 <read_adc_buff+0x4a>
     526:	03 c0       	rjmp	.+6      	; 0x52e <read_adc_buff+0x44>
     528:	96 17       	cp	r25, r22
     52a:	08 f4       	brcc	.+2      	; 0x52e <read_adc_buff+0x44>
     52c:	69 2f       	mov	r22, r25
			max_length = adc_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
     52e:	61 11       	cpse	r22, r1
     530:	02 c0       	rjmp	.+4      	; 0x536 <read_adc_buff+0x4c>
     532:	18 c0       	rjmp	.+48     	; 0x564 <read_adc_buff+0x7a>
			 * Requested receive length (max_length) is more than
			 * the
			 * max size of receive buffer, but at max the full
			 * buffer can be read.
			 */
			max_length = ADC_BUF_SIZE;
     534:	6d e6       	ldi	r22, 0x6D	; 109
     536:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <adc_buf_head>
     53a:	26 2f       	mov	r18, r22
	}

	data_received = max_length;
	while (max_length > 0) {
		/* Start to copy from head. */
		*data = adc_buf[adc_buf_head];
     53c:	e9 2f       	mov	r30, r25
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	e0 5e       	subi	r30, 0xE0	; 224
     542:	fd 4f       	sbci	r31, 0xFD	; 253
     544:	30 81       	ld	r19, Z
     546:	3d 93       	st	X+, r19
		data++;
		max_length--;
     548:	21 50       	subi	r18, 0x01	; 1
		if ((ADC_BUF_SIZE - 1) == adc_buf_head) {
     54a:	9c 36       	cpi	r25, 0x6C	; 108
     54c:	11 f0       	breq	.+4      	; 0x552 <read_adc_buff+0x68>
			adc_buf_head = 0;
		}
		else
		{
			adc_buf_head++;
     54e:	9f 5f       	subi	r25, 0xFF	; 255
     550:	01 c0       	rjmp	.+2      	; 0x554 <read_adc_buff+0x6a>
		/* Start to copy from head. */
		*data = adc_buf[adc_buf_head];
		data++;
		max_length--;
		if ((ADC_BUF_SIZE - 1) == adc_buf_head) {
			adc_buf_head = 0;
     552:	90 e0       	ldi	r25, 0x00	; 0
			max_length = adc_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
     554:	21 11       	cpse	r18, r1
     556:	f2 cf       	rjmp	.-28     	; 0x53c <read_adc_buff+0x52>
     558:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <adc_buf_head>
     55c:	86 2f       	mov	r24, r22
     55e:	08 95       	ret
	{
		adc_count = adc_buf_tail + (ADC_BUF_SIZE - adc_buf_head);
	}
	
	if (0 == adc_count) {
		return 0;
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	08 95       	ret
		else
		{
			adc_buf_head++;
		}
	}
	return data_received;
     564:	80 e0       	ldi	r24, 0x00	; 0
}
     566:	08 95       	ret

00000568 <__vector_29>:

ISR( ADC_vect ){
     568:	1f 92       	push	r1
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	0b b6       	in	r0, 0x3b	; 59
     574:	0f 92       	push	r0
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	ef 93       	push	r30
     57c:	ff 93       	push	r31
	if( number_samples <= 0 )
	{
		adc_disable();
	}*/
	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     57e:	f8 94       	cli
	
	adc_temp = ADCH;
     580:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     584:	90 93 d1 09 	sts	0x09D1, r25	; 0x8009d1 <adc_temp>

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	adc_buf[adc_buf_tail] = adc_temp;
     588:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <adc_buf_tail>
     58c:	e8 2f       	mov	r30, r24
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	e0 5e       	subi	r30, 0xE0	; 224
     592:	fd 4f       	sbci	r31, 0xFD	; 253
     594:	90 83       	st	Z, r25

	if ((ADC_BUF_SIZE - 1) == adc_buf_tail) {
     596:	8c 36       	cpi	r24, 0x6C	; 108
     598:	19 f4       	brne	.+6      	; 0x5a0 <__vector_29+0x38>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		adc_buf_tail = 0x00;
     59a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <adc_buf_tail>
     59e:	03 c0       	rjmp	.+6      	; 0x5a6 <__vector_29+0x3e>
	} else {
		adc_buf_tail++;
     5a0:	8f 5f       	subi	r24, 0xFF	; 255
     5a2:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <adc_buf_tail>
	}

	cpu_irq_enable();
     5a6:	78 94       	sei

}
     5a8:	ff 91       	pop	r31
     5aa:	ef 91       	pop	r30
     5ac:	9f 91       	pop	r25
     5ae:	8f 91       	pop	r24
     5b0:	0f 90       	pop	r0
     5b2:	0b be       	out	0x3b, r0	; 59
     5b4:	0f 90       	pop	r0
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	0f 90       	pop	r0
     5ba:	1f 90       	pop	r1
     5bc:	18 95       	reti

000005be <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
     5be:	fc 01       	movw	r30, r24
     5c0:	90 81       	ld	r25, Z
     5c2:	95 ff       	sbrs	r25, 5
     5c4:	fd cf       	rjmp	.-6      	; 0x5c0 <usart_putchar+0x2>
     5c6:	66 83       	std	Z+6, r22	; 0x06
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	08 95       	ret

000005cc <usart_getchar>:
     5cc:	fc 01       	movw	r30, r24
     5ce:	90 81       	ld	r25, Z
     5d0:	99 23       	and	r25, r25
     5d2:	ec f7       	brge	.-6      	; 0x5ce <usart_getchar+0x2>
     5d4:	86 81       	ldd	r24, Z+6	; 0x06
     5d6:	08 95       	ret

000005d8 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     5d8:	8f 92       	push	r8
     5da:	9f 92       	push	r9
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
     5f2:	6a 01       	movw	r12, r20
     5f4:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     5f6:	c9 01       	movw	r24, r18
     5f8:	b8 01       	movw	r22, r16
     5fa:	68 94       	set
     5fc:	12 f8       	bld	r1, 2
     5fe:	96 95       	lsr	r25
     600:	87 95       	ror	r24
     602:	77 95       	ror	r23
     604:	67 95       	ror	r22
     606:	16 94       	lsr	r1
     608:	d1 f7       	brne	.-12     	; 0x5fe <usart_set_baudrate+0x26>

	/*if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
		min_rate /= 2;
	}*/
	if( baud <= max_rate && baud > max_rate/2 ){
     60a:	6c 15       	cp	r22, r12
     60c:	7d 05       	cpc	r23, r13
     60e:	8e 05       	cpc	r24, r14
     610:	9f 05       	cpc	r25, r15
     612:	78 f1       	brcs	.+94     	; 0x672 <usart_set_baudrate+0x9a>
     614:	48 01       	movw	r8, r16
     616:	59 01       	movw	r10, r18
     618:	68 94       	set
     61a:	13 f8       	bld	r1, 3
     61c:	b6 94       	lsr	r11
     61e:	a7 94       	ror	r10
     620:	97 94       	ror	r9
     622:	87 94       	ror	r8
     624:	16 94       	lsr	r1
     626:	d1 f7       	brne	.-12     	; 0x61c <usart_set_baudrate+0x44>
     628:	8c 14       	cp	r8, r12
     62a:	9d 04       	cpc	r9, r13
     62c:	ae 04       	cpc	r10, r14
     62e:	bf 04       	cpc	r11, r15
     630:	20 f5       	brcc	.+72     	; 0x67a <usart_set_baudrate+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_double_baud_enable(USART_t *usart)
{
	usart->UCSRnA |=  USART_U2X_bm;
     632:	e8 81       	ld	r30, Y
     634:	e2 60       	ori	r30, 0x02	; 2
     636:	e8 83       	st	Y, r30
     638:	20 c0       	rjmp	.+64     	; 0x67a <usart_set_baudrate+0xa2>
	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     63a:	28 81       	ld	r18, Y
     63c:	21 ff       	sbrs	r18, 1
     63e:	0a c0       	rjmp	.+20     	; 0x654 <usart_set_baudrate+0x7c>
		//baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     640:	a7 01       	movw	r20, r14
     642:	96 01       	movw	r18, r12
     644:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__udivmodsi4>
     648:	da 01       	movw	r26, r20
     64a:	c9 01       	movw	r24, r18
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	a1 09       	sbc	r26, r1
     650:	b1 09       	sbc	r27, r1
     652:	0b c0       	rjmp	.+22     	; 0x66a <usart_set_baudrate+0x92>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     654:	c5 01       	movw	r24, r10
     656:	b4 01       	movw	r22, r8
     658:	a7 01       	movw	r20, r14
     65a:	96 01       	movw	r18, r12
     65c:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__udivmodsi4>
     660:	da 01       	movw	r26, r20
     662:	c9 01       	movw	r24, r18
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	a1 09       	sbc	r26, r1
     668:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     66a:	9d 83       	std	Y+5, r25	; 0x05
     66c:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	13 c0       	rjmp	.+38     	; 0x698 <usart_set_baudrate+0xc0>
	if( baud <= max_rate && baud > max_rate/2 ){
		usart_double_baud_enable(usart);
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	11 c0       	rjmp	.+34     	; 0x698 <usart_set_baudrate+0xc0>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	0f c0       	rjmp	.+30     	; 0x698 <usart_set_baudrate+0xc0>
	}*/
	if( baud <= max_rate && baud > max_rate/2 ){
		usart_double_baud_enable(usart);
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     67a:	0f 2e       	mov	r0, r31
     67c:	f3 e1       	ldi	r31, 0x13	; 19
     67e:	36 95       	lsr	r19
     680:	27 95       	ror	r18
     682:	17 95       	ror	r17
     684:	07 95       	ror	r16
     686:	fa 95       	dec	r31
     688:	d1 f7       	brne	.-12     	; 0x67e <usart_set_baudrate+0xa6>
     68a:	f0 2d       	mov	r31, r0
     68c:	c0 16       	cp	r12, r16
     68e:	d1 06       	cpc	r13, r17
     690:	e2 06       	cpc	r14, r18
     692:	f3 06       	cpc	r15, r19
     694:	90 f6       	brcc	.-92     	; 0x63a <usart_set_baudrate+0x62>
     696:	ef cf       	rjmp	.-34     	; 0x676 <usart_set_baudrate+0x9e>
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	df 90       	pop	r13
     6a6:	cf 90       	pop	r12
     6a8:	bf 90       	pop	r11
     6aa:	af 90       	pop	r10
     6ac:	9f 90       	pop	r9
     6ae:	8f 90       	pop	r8
     6b0:	08 95       	ret

000006b2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	ec 01       	movw	r28, r24
     6bc:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTA0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     6be:	80 3c       	cpi	r24, 0xC0	; 192
     6c0:	91 05       	cpc	r25, r1
     6c2:	21 f4       	brne	.+8      	; 0x6cc <usart_init_rs232+0x1a>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     6c4:	62 e0       	ldi	r22, 0x02	; 2
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	7d de       	rcall	.-774    	; 0x3c4 <sysclk_enable_module>
     6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <usart_init_rs232+0x26>
	}
#endif
#ifdef USARTA1
	if ((uintptr_t)usart == (uintptr_t)&UCSR1A) {
     6cc:	88 3c       	cpi	r24, 0xC8	; 200
     6ce:	91 05       	cpc	r25, r1
     6d0:	19 f4       	brne	.+6      	; 0x6d8 <usart_init_rs232+0x26>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
     6d2:	61 e0       	ldi	r22, 0x01	; 1
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	76 de       	rcall	.-788    	; 0x3c4 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     6d8:	8a 81       	ldd	r24, Y+2	; 0x02
     6da:	8f 73       	andi	r24, 0x3F	; 63
     6dc:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     6de:	f8 01       	movw	r30, r16
     6e0:	26 81       	ldd	r18, Z+6	; 0x06
     6e2:	35 81       	ldd	r19, Z+5	; 0x05
     6e4:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     6e6:	9a 81       	ldd	r25, Y+2	; 0x02
     6e8:	48 2f       	mov	r20, r24
     6ea:	43 70       	andi	r20, 0x03	; 3
     6ec:	44 0f       	add	r20, r20
     6ee:	99 7f       	andi	r25, 0xF9	; 249
     6f0:	94 2b       	or	r25, r20
     6f2:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     6f4:	99 81       	ldd	r25, Y+1	; 0x01
     6f6:	84 70       	andi	r24, 0x04	; 4
     6f8:	88 0f       	add	r24, r24
     6fa:	88 0f       	add	r24, r24
     6fc:	9b 7f       	andi	r25, 0xFB	; 251
     6fe:	89 2b       	or	r24, r25
     700:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     702:	8a 81       	ldd	r24, Y+2	; 0x02
     704:	8f 7c       	andi	r24, 0xCF	; 207
     706:	83 2b       	or	r24, r19
     708:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     70a:	9a 81       	ldd	r25, Y+2	; 0x02
     70c:	97 7f       	andi	r25, 0xF7	; 247
     70e:	82 2f       	mov	r24, r18
     710:	88 0f       	add	r24, r24
     712:	88 0f       	add	r24, r24
     714:	88 0f       	add	r24, r24
     716:	89 2b       	or	r24, r25
     718:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     71a:	40 81       	ld	r20, Z
     71c:	51 81       	ldd	r21, Z+1	; 0x01
     71e:	62 81       	ldd	r22, Z+2	; 0x02
     720:	73 81       	ldd	r23, Z+3	; 0x03
     722:	00 e0       	ldi	r16, 0x00	; 0
     724:	14 e2       	ldi	r17, 0x24	; 36
     726:	24 ef       	ldi	r18, 0xF4	; 244
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	ce 01       	movw	r24, r28
     72c:	55 df       	rcall	.-342    	; 0x5d8 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     72e:	99 81       	ldd	r25, Y+1	; 0x01
     730:	98 60       	ori	r25, 0x08	; 8
     732:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     734:	99 81       	ldd	r25, Y+1	; 0x01
     736:	90 61       	ori	r25, 0x10	; 16
     738:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	08 95       	ret

00000744 <usart_serial_getchar>:
	if (back >= 1) {
		return c;
	} else {
		return (-1);
	}
}
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	eb 01       	movw	r28, r22
     74a:	40 df       	rcall	.-384    	; 0x5cc <usart_getchar>
     74c:	88 83       	st	Y, r24
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <usart_serial_putchar>:
     754:	34 cf       	rjmp	.-408    	; 0x5be <usart_putchar>
     756:	08 95       	ret

00000758 <sio2host_init>:
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	27 97       	sbiw	r28, 0x07	; 7
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	08 ec       	ldi	r16, 0xC8	; 200
     772:	10 e0       	ldi	r17, 0x00	; 0
     774:	10 93 d0 09 	sts	0x09D0, r17	; 0x8009d0 <stdio_base+0x1>
     778:	00 93 cf 09 	sts	0x09CF, r16	; 0x8009cf <stdio_base>
     77c:	8a ea       	ldi	r24, 0xAA	; 170
     77e:	93 e0       	ldi	r25, 0x03	; 3
     780:	90 93 ce 09 	sts	0x09CE, r25	; 0x8009ce <ptr_put+0x1>
     784:	80 93 cd 09 	sts	0x09CD, r24	; 0x8009cd <ptr_put>
     788:	82 ea       	ldi	r24, 0xA2	; 162
     78a:	93 e0       	ldi	r25, 0x03	; 3
     78c:	90 93 cc 09 	sts	0x09CC, r25	; 0x8009cc <ptr_get+0x1>
     790:	80 93 cb 09 	sts	0x09CB, r24	; 0x8009cb <ptr_get>
     794:	ea e0       	ldi	r30, 0x0A	; 10
     796:	f2 e0       	ldi	r31, 0x02	; 2
     798:	84 81       	ldd	r24, Z+4	; 0x04
     79a:	8d 83       	std	Y+5, r24	; 0x05
     79c:	85 81       	ldd	r24, Z+5	; 0x05
     79e:	8e 83       	std	Y+6, r24	; 0x06
     7a0:	86 81       	ldd	r24, Z+6	; 0x06
     7a2:	8f 83       	std	Y+7, r24	; 0x07
     7a4:	80 81       	ld	r24, Z
     7a6:	91 81       	ldd	r25, Z+1	; 0x01
     7a8:	a2 81       	ldd	r26, Z+2	; 0x02
     7aa:	b3 81       	ldd	r27, Z+3	; 0x03
     7ac:	89 83       	std	Y+1, r24	; 0x01
     7ae:	9a 83       	std	Y+2, r25	; 0x02
     7b0:	ab 83       	std	Y+3, r26	; 0x03
     7b2:	bc 83       	std	Y+4, r27	; 0x04
     7b4:	be 01       	movw	r22, r28
     7b6:	6f 5f       	subi	r22, 0xFF	; 255
     7b8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ba:	88 ec       	ldi	r24, 0xC8	; 200
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	79 df       	rcall	.-270    	; 0x6b2 <usart_init_rs232>
     7c0:	65 e4       	ldi	r22, 0x45	; 69
     7c2:	72 e0       	ldi	r23, 0x02	; 2
     7c4:	8e e5       	ldi	r24, 0x5E	; 94
     7c6:	92 e0       	ldi	r25, 0x02	; 2
     7c8:	0e 94 81 17 	call	0x2f02	; 0x2f02 <fdevopen>
     7cc:	f8 01       	movw	r30, r16
     7ce:	81 81       	ldd	r24, Z+1	; 0x01
     7d0:	80 68       	ori	r24, 0x80	; 128
     7d2:	81 83       	std	Z+1, r24	; 0x01
     7d4:	27 96       	adiw	r28, 0x07	; 7
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	08 95       	ret

000007ea <sio2host_tx>:
     7ea:	ff 92       	push	r15
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	8c 01       	movw	r16, r24
     7f6:	f6 2e       	mov	r15, r22
     7f8:	c6 2f       	mov	r28, r22
     7fa:	d0 e0       	ldi	r29, 0x00	; 0
     7fc:	ae 01       	movw	r20, r28
     7fe:	b8 01       	movw	r22, r16
     800:	88 ec       	ldi	r24, 0xC8	; 200
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e de       	rcall	.-996    	; 0x422 <usart_serial_write_packet>
     806:	81 11       	cpse	r24, r1
     808:	f9 cf       	rjmp	.-14     	; 0x7fc <sio2host_tx+0x12>
     80a:	8f 2d       	mov	r24, r15
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	08 95       	ret

00000818 <sio2host_putchar>:
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	1f 92       	push	r1
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
     822:	89 83       	std	Y+1, r24	; 0x01
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	ce 01       	movw	r24, r28
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	df df       	rcall	.-66     	; 0x7ea <sio2host_tx>
     82c:	0f 90       	pop	r0
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <__vector_36>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
     834:	1f 92       	push	r1
     836:	0f 92       	push	r0
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
     83e:	0b b6       	in	r0, 0x3b	; 59
     840:	0f 92       	push	r0
     842:	2f 93       	push	r18
     844:	3f 93       	push	r19
     846:	4f 93       	push	r20
     848:	5f 93       	push	r21
     84a:	6f 93       	push	r22
     84c:	7f 93       	push	r23
     84e:	8f 93       	push	r24
     850:	9f 93       	push	r25
     852:	af 93       	push	r26
     854:	bf 93       	push	r27
     856:	ef 93       	push	r30
     858:	ff 93       	push	r31
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	1f 92       	push	r1
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
     864:	41 e0       	ldi	r20, 0x01	; 1
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	be 01       	movw	r22, r28
     86a:	6f 5f       	subi	r22, 0xFF	; 255
     86c:	7f 4f       	sbci	r23, 0xFF	; 255
     86e:	88 ec       	ldi	r24, 0xC8	; 200
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	f1 dd       	rcall	.-1054   	; 0x456 <usart_serial_read_packet>
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     874:	f8 94       	cli

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
     876:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <serial_rx_buf_tail>
     87a:	e8 2f       	mov	r30, r24
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	e2 57       	subi	r30, 0x72	; 114
     880:	fd 4f       	sbci	r31, 0xFD	; 253
     882:	99 81       	ldd	r25, Y+1	; 0x01
     884:	90 83       	st	Z, r25

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
     886:	8b 39       	cpi	r24, 0x9B	; 155
     888:	19 f4       	brne	.+6      	; 0x890 <__vector_36+0x5c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
     88a:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <serial_rx_buf_tail>
     88e:	03 c0       	rjmp	.+6      	; 0x896 <__vector_36+0x62>
	} else {
		serial_rx_buf_tail++;
     890:	8f 5f       	subi	r24, 0xFF	; 255
     892:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <serial_rx_buf_tail>
	}

	cpu_irq_enable();
     896:	78 94       	sei
}
     898:	0f 90       	pop	r0
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	ff 91       	pop	r31
     8a0:	ef 91       	pop	r30
     8a2:	bf 91       	pop	r27
     8a4:	af 91       	pop	r26
     8a6:	9f 91       	pop	r25
     8a8:	8f 91       	pop	r24
     8aa:	7f 91       	pop	r23
     8ac:	6f 91       	pop	r22
     8ae:	5f 91       	pop	r21
     8b0:	4f 91       	pop	r20
     8b2:	3f 91       	pop	r19
     8b4:	2f 91       	pop	r18
     8b6:	0f 90       	pop	r0
     8b8:	0b be       	out	0x3b, r0	; 59
     8ba:	0f 90       	pop	r0
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	0f 90       	pop	r0
     8c0:	1f 90       	pop	r1
     8c2:	18 95       	reti

000008c4 <NWK_Init>:

		cl += 25;
	}

	return 255;
}
     8c4:	e2 ed       	ldi	r30, 0xD2	; 210
     8c6:	f9 e0       	ldi	r31, 0x09	; 9
     8c8:	14 82       	std	Z+4, r1	; 0x04
     8ca:	15 82       	std	Z+5, r1	; 0x05
     8cc:	11 82       	std	Z+1, r1	; 0x01
     8ce:	10 82       	st	Z, r1
     8d0:	17 aa       	std	Z+55, r1	; 0x37
     8d2:	16 aa       	std	Z+54, r1	; 0x36
     8d4:	e8 ed       	ldi	r30, 0xD8	; 216
     8d6:	f9 e0       	ldi	r31, 0x09	; 9
     8d8:	88 ef       	ldi	r24, 0xF8	; 248
     8da:	99 e0       	ldi	r25, 0x09	; 9
     8dc:	11 92       	st	Z+, r1
     8de:	11 92       	st	Z+, r1
     8e0:	e8 17       	cp	r30, r24
     8e2:	f9 07       	cpc	r31, r25
     8e4:	d9 f7       	brne	.-10     	; 0x8dc <NWK_Init+0x18>
     8e6:	ad d7       	rcall	.+3930   	; 0x1842 <nwkTxInit>
     8e8:	65 d3       	rcall	.+1738   	; 0xfb4 <nwkRxInit>
     8ea:	18 d1       	rcall	.+560    	; 0xb1c <nwkFrameInit>
     8ec:	43 d0       	rcall	.+134    	; 0x974 <nwkDataReqInit>
     8ee:	96 d1       	rcall	.+812    	; 0xc1c <nwkRouteInit>
     8f0:	04 c6       	rjmp	.+3080   	; 0x14fa <nwkSecurityInit>
     8f2:	08 95       	ret

000008f4 <NWK_SetAddr>:
     8f4:	90 93 d3 09 	sts	0x09D3, r25	; 0x8009d3 <nwkIb+0x1>
     8f8:	80 93 d2 09 	sts	0x09D2, r24	; 0x8009d2 <nwkIb>
     8fc:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <PHY_SetShortAddr>
     900:	08 95       	ret

00000902 <NWK_SetPanId>:
     902:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <nwkIb+0x3>
     906:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <nwkIb+0x2>
     90a:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <PHY_SetPanId>
     90e:	08 95       	ret

00000910 <NWK_OpenEndpoint>:
     910:	e8 2f       	mov	r30, r24
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	ee 0f       	add	r30, r30
     916:	ff 1f       	adc	r31, r31
     918:	e8 52       	subi	r30, 0x28	; 40
     91a:	f6 4f       	sbci	r31, 0xF6	; 246
     91c:	71 83       	std	Z+1, r23	; 0x01
     91e:	60 83       	st	Z, r22
     920:	08 95       	ret

00000922 <NWK_TaskHandler>:
/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
	nwkRxTaskHandler();
     922:	9a d3       	rcall	.+1844   	; 0x1058 <nwkRxTaskHandler>
	nwkTxTaskHandler();
     924:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nwkTxTaskHandler>
	nwkDataReqTaskHandler();
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
     928:	4e d0       	rcall	.+156    	; 0x9c6 <nwkDataReqTaskHandler>
     92a:	3e c6       	rjmp	.+3196   	; 0x15a8 <nwkSecurityTaskHandler>
     92c:	08 95       	ret

0000092e <nwkDataReqTxConf>:
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     92e:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <nwkDataReqQueue>
     932:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <nwkDataReqQueue+0x1>
     936:	30 97       	sbiw	r30, 0x00	; 0
     938:	d9 f0       	breq	.+54     	; 0x970 <nwkDataReqTxConf+0x42>
		if (req->frame == frame) {
     93a:	22 81       	ldd	r18, Z+2	; 0x02
     93c:	33 81       	ldd	r19, Z+3	; 0x03
     93e:	82 17       	cp	r24, r18
     940:	93 07       	cpc	r25, r19
     942:	89 f4       	brne	.+34     	; 0x966 <nwkDataReqTxConf+0x38>
     944:	05 c0       	rjmp	.+10     	; 0x950 <nwkDataReqTxConf+0x22>
     946:	22 81       	ldd	r18, Z+2	; 0x02
     948:	33 81       	ldd	r19, Z+3	; 0x03
     94a:	28 17       	cp	r18, r24
     94c:	39 07       	cpc	r19, r25
     94e:	59 f4       	brne	.+22     	; 0x966 <nwkDataReqTxConf+0x38>
			req->status = frame->tx.status;
     950:	dc 01       	movw	r26, r24
     952:	ad 57       	subi	r26, 0x7D	; 125
     954:	bf 4f       	sbci	r27, 0xFF	; 255
     956:	2c 91       	ld	r18, X
     958:	27 87       	std	Z+15, r18	; 0x0f
			req->control = frame->tx.control;
     95a:	13 96       	adiw	r26, 0x03	; 3
     95c:	2c 91       	ld	r18, X
     95e:	20 8b       	std	Z+16, r18	; 0x10
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
     960:	22 e0       	ldi	r18, 0x02	; 2
     962:	24 83       	std	Z+4, r18	; 0x04
			break;
     964:	05 c0       	rjmp	.+10     	; 0x970 <nwkDataReqTxConf+0x42>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     966:	01 90       	ld	r0, Z+
     968:	f0 81       	ld	r31, Z
     96a:	e0 2d       	mov	r30, r0
     96c:	30 97       	sbiw	r30, 0x00	; 0
     96e:	59 f7       	brne	.-42     	; 0x946 <nwkDataReqTxConf+0x18>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
     970:	12 c1       	rjmp	.+548    	; 0xb96 <nwkFrameFree>
     972:	08 95       	ret

00000974 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
     974:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <nwkDataReqQueue+0x1>
     978:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <nwkDataReqQueue>
     97c:	08 95       	ret

0000097e <NWK_DataReq>:
/*************************************************************************//**
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     97e:	fc 01       	movw	r30, r24
	req->state = NWK_DATA_REQ_STATE_INITIAL;
     980:	14 82       	std	Z+4, r1	; 0x04
	req->status = NWK_SUCCESS_STATUS;
     982:	17 86       	std	Z+15, r1	; 0x0f
	req->frame = NULL;
     984:	13 82       	std	Z+3, r1	; 0x03
     986:	12 82       	std	Z+2, r1	; 0x02

	nwkIb.lock++;
     988:	a2 ed       	ldi	r26, 0xD2	; 210
     98a:	b9 e0       	ldi	r27, 0x09	; 9
     98c:	d6 96       	adiw	r26, 0x36	; 54
     98e:	8d 91       	ld	r24, X+
     990:	9c 91       	ld	r25, X
     992:	d7 97       	sbiw	r26, 0x37	; 55
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	d7 96       	adiw	r26, 0x37	; 55
     998:	9c 93       	st	X, r25
     99a:	8e 93       	st	-X, r24
     99c:	d6 97       	sbiw	r26, 0x36	; 54

	if (NULL == nwkDataReqQueue) {
     99e:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <nwkDataReqQueue>
     9a2:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <nwkDataReqQueue+0x1>
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	39 f4       	brne	.+14     	; 0x9b8 <NWK_DataReq+0x3a>
		req->next = NULL;
     9aa:	11 82       	std	Z+1, r1	; 0x01
     9ac:	10 82       	st	Z, r1
		nwkDataReqQueue = req;
     9ae:	f0 93 2b 03 	sts	0x032B, r31	; 0x80032b <nwkDataReqQueue+0x1>
     9b2:	e0 93 2a 03 	sts	0x032A, r30	; 0x80032a <nwkDataReqQueue>
     9b6:	08 95       	ret
	} else {
		req->next = nwkDataReqQueue;
     9b8:	91 83       	std	Z+1, r25	; 0x01
     9ba:	80 83       	st	Z, r24
		nwkDataReqQueue = req;
     9bc:	f0 93 2b 03 	sts	0x032B, r31	; 0x80032b <nwkDataReqQueue+0x1>
     9c0:	e0 93 2a 03 	sts	0x032A, r30	; 0x80032a <nwkDataReqQueue>
     9c4:	08 95       	ret

000009c6 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     9ce:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <nwkDataReqQueue>
     9d2:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <nwkDataReqQueue+0x1>
     9d6:	30 97       	sbiw	r30, 0x00	; 0
     9d8:	09 f4       	brne	.+2      	; 0x9dc <nwkDataReqTaskHandler+0x16>
     9da:	9b c0       	rjmp	.+310    	; 0xb12 <nwkDataReqTaskHandler+0x14c>
     9dc:	ef 01       	movw	r28, r30
		switch (req->state) {
     9de:	8c 81       	ldd	r24, Y+4	; 0x04
     9e0:	88 23       	and	r24, r24
     9e2:	21 f0       	breq	.+8      	; 0x9ec <nwkDataReqTaskHandler+0x26>
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	09 f4       	brne	.+2      	; 0x9ea <nwkDataReqTaskHandler+0x24>
     9e8:	6e c0       	rjmp	.+220    	; 0xac6 <nwkDataReqTaskHandler+0x100>
     9ea:	8d c0       	rjmp	.+282    	; 0xb06 <nwkDataReqTaskHandler+0x140>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
     9ec:	9e d0       	rcall	.+316    	; 0xb2a <nwkFrameAlloc>
     9ee:	8c 01       	movw	r16, r24
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	21 f4       	brne	.+8      	; 0x9fc <nwkDataReqTaskHandler+0x36>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
     9f4:	82 e0       	ldi	r24, 0x02	; 2
     9f6:	8c 83       	std	Y+4, r24	; 0x04
		req->status = NWK_OUT_OF_MEMORY_STATUS;
     9f8:	8f 87       	std	Y+15, r24	; 0x0f
     9fa:	8b c0       	rjmp	.+278    	; 0xb12 <nwkDataReqTaskHandler+0x14c>
		return;
	}

	req->frame = frame;
     9fc:	9b 83       	std	Y+3, r25	; 0x03
     9fe:	8a 83       	std	Y+2, r24	; 0x02
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	8c 83       	std	Y+4, r24	; 0x04

	frame->tx.confirm = nwkDataReqTxConf;
     a04:	f8 01       	movw	r30, r16
     a06:	e9 57       	subi	r30, 0x79	; 121
     a08:	ff 4f       	sbci	r31, 0xFF	; 255
     a0a:	87 e9       	ldi	r24, 0x97	; 151
     a0c:	94 e0       	ldi	r25, 0x04	; 4
     a0e:	91 83       	std	Z+1, r25	; 0x01
     a10:	80 83       	st	Z, r24
	frame->tx.control = req->options &
     a12:	31 97       	sbiw	r30, 0x01	; 1
     a14:	89 85       	ldd	r24, Y+9	; 0x09
     a16:	82 fb       	bst	r24, 2
     a18:	88 27       	eor	r24, r24
     a1a:	80 f9       	bld	r24, 0
     a1c:	80 83       	st	Z, r24
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
     a1e:	99 85       	ldd	r25, Y+9	; 0x09
     a20:	d8 01       	movw	r26, r16
     a22:	1b 96       	adiw	r26, 0x0b	; 11
     a24:	8c 91       	ld	r24, X
     a26:	1b 97       	sbiw	r26, 0x0b	; 11
     a28:	90 fb       	bst	r25, 0
     a2a:	80 f9       	bld	r24, 0
     a2c:	1b 96       	adiw	r26, 0x0b	; 11
     a2e:	8c 93       	st	X, r24
     a30:	1b 97       	sbiw	r26, 0x0b	; 11
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
     a32:	99 85       	ldd	r25, Y+9	; 0x09
     a34:	93 fb       	bst	r25, 3
     a36:	99 27       	eor	r25, r25
     a38:	90 f9       	bld	r25, 0
     a3a:	90 fb       	bst	r25, 0
     a3c:	82 f9       	bld	r24, 2
     a3e:	1b 96       	adiw	r26, 0x0b	; 11
     a40:	8c 93       	st	X, r24
     a42:	1b 97       	sbiw	r26, 0x0b	; 11
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
     a44:	99 85       	ldd	r25, Y+9	; 0x09
     a46:	96 95       	lsr	r25
     a48:	91 70       	andi	r25, 0x01	; 1
     a4a:	90 fb       	bst	r25, 0
     a4c:	81 f9       	bld	r24, 1
     a4e:	1b 96       	adiw	r26, 0x0b	; 11
     a50:	8c 93       	st	X, r24
     a52:	1b 97       	sbiw	r26, 0x0b	; 11
		frame->payload += sizeof(NwkFrameMulticastHeader_t);
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}
#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     a54:	e2 ed       	ldi	r30, 0xD2	; 210
     a56:	f9 e0       	ldi	r31, 0x09	; 9
     a58:	84 81       	ldd	r24, Z+4	; 0x04
     a5a:	8f 5f       	subi	r24, 0xFF	; 255
     a5c:	84 83       	std	Z+4, r24	; 0x04
     a5e:	1c 96       	adiw	r26, 0x0c	; 12
     a60:	8c 93       	st	X, r24
     a62:	1c 97       	sbiw	r26, 0x0c	; 12
	frame->header.nwkSrcAddr = nwkIb.addr;
     a64:	80 81       	ld	r24, Z
     a66:	91 81       	ldd	r25, Z+1	; 0x01
     a68:	1e 96       	adiw	r26, 0x0e	; 14
     a6a:	9c 93       	st	X, r25
     a6c:	8e 93       	st	-X, r24
     a6e:	1d 97       	sbiw	r26, 0x0d	; 13
	frame->header.nwkDstAddr = req->dstAddr;
     a70:	8d 81       	ldd	r24, Y+5	; 0x05
     a72:	9e 81       	ldd	r25, Y+6	; 0x06
     a74:	50 96       	adiw	r26, 0x10	; 16
     a76:	9c 93       	st	X, r25
     a78:	8e 93       	st	-X, r24
     a7a:	1f 97       	sbiw	r26, 0x0f	; 15
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
     a7c:	88 85       	ldd	r24, Y+8	; 0x08
     a7e:	98 2f       	mov	r25, r24
     a80:	9f 70       	andi	r25, 0x0F	; 15
     a82:	51 96       	adiw	r26, 0x11	; 17
     a84:	8c 91       	ld	r24, X
     a86:	51 97       	sbiw	r26, 0x11	; 17
     a88:	80 7f       	andi	r24, 0xF0	; 240
     a8a:	89 2b       	or	r24, r25
     a8c:	51 96       	adiw	r26, 0x11	; 17
     a8e:	8c 93       	st	X, r24
     a90:	51 97       	sbiw	r26, 0x11	; 17
	frame->header.nwkDstEndpoint = req->dstEndpoint;
     a92:	9f 81       	ldd	r25, Y+7	; 0x07
     a94:	92 95       	swap	r25
     a96:	90 7f       	andi	r25, 0xF0	; 240
     a98:	8f 70       	andi	r24, 0x0F	; 15
     a9a:	89 2b       	or	r24, r25
     a9c:	51 96       	adiw	r26, 0x11	; 17
     a9e:	8c 93       	st	X, r24

	memcpy(frame->payload, req->data, req->size);
     aa0:	f8 01       	movw	r30, r16
     aa2:	ef 57       	subi	r30, 0x7F	; 127
     aa4:	ff 4f       	sbci	r31, 0xFF	; 255
     aa6:	4c 85       	ldd	r20, Y+12	; 0x0c
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	6a 85       	ldd	r22, Y+10	; 0x0a
     aac:	7b 85       	ldd	r23, Y+11	; 0x0b
     aae:	80 81       	ld	r24, Z
     ab0:	91 81       	ldd	r25, Z+1	; 0x01
     ab2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <memcpy>
	frame->size += req->size;
     ab6:	f8 01       	movw	r30, r16
     ab8:	91 81       	ldd	r25, Z+1	; 0x01
     aba:	8c 85       	ldd	r24, Y+12	; 0x0c
     abc:	89 0f       	add	r24, r25
     abe:	81 83       	std	Z+1, r24	; 0x01

	nwkTxFrame(frame);
     ac0:	c8 01       	movw	r24, r16
     ac2:	e2 d6       	rcall	.+3524   	; 0x1888 <nwkTxFrame>
     ac4:	26 c0       	rjmp	.+76     	; 0xb12 <nwkDataReqTaskHandler+0x14c>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
     ac6:	ec 17       	cp	r30, r28
     ac8:	fd 07       	cpc	r31, r29
     aca:	41 f4       	brne	.+16     	; 0xadc <nwkDataReqTaskHandler+0x116>
		nwkDataReqQueue = nwkDataReqQueue->next;
     acc:	80 81       	ld	r24, Z
     ace:	91 81       	ldd	r25, Z+1	; 0x01
     ad0:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <nwkDataReqQueue+0x1>
     ad4:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <nwkDataReqQueue>
     ad8:	0a c0       	rjmp	.+20     	; 0xaee <nwkDataReqTaskHandler+0x128>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
			prev = prev->next;
     ada:	fc 01       	movw	r30, r24
{
	if (nwkDataReqQueue == req) {
		nwkDataReqQueue = nwkDataReqQueue->next;
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
     adc:	80 81       	ld	r24, Z
     ade:	91 81       	ldd	r25, Z+1	; 0x01
     ae0:	8c 17       	cp	r24, r28
     ae2:	9d 07       	cpc	r25, r29
     ae4:	d1 f7       	brne	.-12     	; 0xada <nwkDataReqTaskHandler+0x114>
			prev = prev->next;
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
     ae6:	88 81       	ld	r24, Y
     ae8:	99 81       	ldd	r25, Y+1	; 0x01
     aea:	91 83       	std	Z+1, r25	; 0x01
     aec:	80 83       	st	Z, r24
	}

	nwkIb.lock--;
     aee:	e2 ed       	ldi	r30, 0xD2	; 210
     af0:	f9 e0       	ldi	r31, 0x09	; 9
     af2:	86 a9       	ldd	r24, Z+54	; 0x36
     af4:	97 a9       	ldd	r25, Z+55	; 0x37
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	97 ab       	std	Z+55, r25	; 0x37
     afa:	86 ab       	std	Z+54, r24	; 0x36
	req->confirm(req);
     afc:	ed 85       	ldd	r30, Y+13	; 0x0d
     afe:	fe 85       	ldd	r31, Y+14	; 0x0e
     b00:	ce 01       	movw	r24, r28
     b02:	19 95       	eicall
     b04:	06 c0       	rjmp	.+12     	; 0xb12 <nwkDataReqTaskHandler+0x14c>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     b06:	09 90       	ld	r0, Y+
     b08:	d8 81       	ld	r29, Y
     b0a:	c0 2d       	mov	r28, r0
     b0c:	20 97       	sbiw	r28, 0x00	; 0
     b0e:	09 f0       	breq	.+2      	; 0xb12 <nwkDataReqTaskHandler+0x14c>
     b10:	66 cf       	rjmp	.-308    	; 0x9de <nwkDataReqTaskHandler+0x18>

		default:
			break;
		}
	}
}
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	08 95       	ret

00000b1c <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     b1c:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <nwkFrameFrames>
     b20:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <nwkFrameFrames+0x89>
     b24:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <nwkFrameFrames+0x112>
     b28:	08 95       	ret

00000b2a <nwkFrameAlloc>:
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
     b2a:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <nwkFrameFrames>
     b2e:	88 23       	and	r24, r24
     b30:	71 f0       	breq	.+28     	; 0xb4e <nwkFrameAlloc+0x24>
     b32:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <nwkFrameFrames+0x89>
     b36:	88 23       	and	r24, r24
     b38:	39 f0       	breq	.+14     	; 0xb48 <nwkFrameAlloc+0x1e>
     b3a:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <nwkFrameFrames+0x112>
     b3e:	81 11       	cpse	r24, r1
     b40:	27 c0       	rjmp	.+78     	; 0xb90 <nwkFrameAlloc+0x66>
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	05 c0       	rjmp	.+10     	; 0xb52 <nwkFrameAlloc+0x28>
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <nwkFrameAlloc+0x28>
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     b52:	49 e8       	ldi	r20, 0x89	; 137
     b54:	48 9f       	mul	r20, r24
     b56:	90 01       	movw	r18, r0
     b58:	49 9f       	mul	r20, r25
     b5a:	30 0d       	add	r19, r0
     b5c:	11 24       	eor	r1, r1
     b5e:	c9 01       	movw	r24, r18
     b60:	84 5d       	subi	r24, 0xD4	; 212
     b62:	9c 4f       	sbci	r25, 0xFC	; 252
     b64:	fc 01       	movw	r30, r24
     b66:	11 92       	st	Z+, r1
     b68:	4a 95       	dec	r20
     b6a:	e9 f7       	brne	.-6      	; 0xb66 <nwkFrameAlloc+0x3c>
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     b6c:	40 e1       	ldi	r20, 0x10	; 16
     b6e:	fc 01       	movw	r30, r24
     b70:	41 83       	std	Z+1, r20	; 0x01
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
     b72:	ef 57       	subi	r30, 0x7F	; 127
     b74:	ff 4f       	sbci	r31, 0xFF	; 255
     b76:	22 5c       	subi	r18, 0xC2	; 194
     b78:	3c 4f       	sbci	r19, 0xFC	; 252
     b7a:	31 83       	std	Z+1, r19	; 0x01
     b7c:	20 83       	st	Z, r18
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
     b7e:	e2 ed       	ldi	r30, 0xD2	; 210
     b80:	f9 e0       	ldi	r31, 0x09	; 9
     b82:	26 a9       	ldd	r18, Z+54	; 0x36
     b84:	37 a9       	ldd	r19, Z+55	; 0x37
     b86:	2f 5f       	subi	r18, 0xFF	; 255
     b88:	3f 4f       	sbci	r19, 0xFF	; 255
     b8a:	37 ab       	std	Z+55, r19	; 0x37
     b8c:	26 ab       	std	Z+54, r18	; 0x36
			return &nwkFrameFrames[i];
     b8e:	08 95       	ret
		}
	}
	return NULL;
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
}
     b94:	08 95       	ret

00000b96 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
     b96:	fc 01       	movw	r30, r24
     b98:	10 82       	st	Z, r1
	nwkIb.lock--;
     b9a:	e2 ed       	ldi	r30, 0xD2	; 210
     b9c:	f9 e0       	ldi	r31, 0x09	; 9
     b9e:	86 a9       	ldd	r24, Z+54	; 0x36
     ba0:	97 a9       	ldd	r25, Z+55	; 0x37
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	97 ab       	std	Z+55, r25	; 0x37
     ba6:	86 ab       	std	Z+54, r24	; 0x36
     ba8:	08 95       	ret

00000baa <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	41 f0       	breq	.+16     	; 0xbbe <nwkFrameNext+0x14>
		frame = nwkFrameFrames;
	} else {
		frame++;
     bae:	fc 01       	movw	r30, r24
     bb0:	e7 57       	subi	r30, 0x77	; 119
     bb2:	ff 4f       	sbci	r31, 0xFF	; 255
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     bb4:	84 e0       	ldi	r24, 0x04	; 4
     bb6:	e7 3c       	cpi	r30, 0xC7	; 199
     bb8:	f8 07       	cpc	r31, r24
     bba:	18 f0       	brcs	.+6      	; 0xbc2 <nwkFrameNext+0x18>
     bbc:	12 c0       	rjmp	.+36     	; 0xbe2 <nwkFrameNext+0x38>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
     bbe:	ec e2       	ldi	r30, 0x2C	; 44
     bc0:	f3 e0       	ldi	r31, 0x03	; 3
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
     bc2:	80 81       	ld	r24, Z
     bc4:	88 23       	and	r24, r24
     bc6:	21 f0       	breq	.+8      	; 0xbd0 <nwkFrameNext+0x26>
     bc8:	0f c0       	rjmp	.+30     	; 0xbe8 <nwkFrameNext+0x3e>
     bca:	80 81       	ld	r24, Z
     bcc:	81 11       	cpse	r24, r1
     bce:	0f c0       	rjmp	.+30     	; 0xbee <nwkFrameNext+0x44>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     bd0:	e7 57       	subi	r30, 0x77	; 119
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	84 e0       	ldi	r24, 0x04	; 4
     bd6:	e7 3c       	cpi	r30, 0xC7	; 199
     bd8:	f8 07       	cpc	r31, r24
     bda:	b8 f3       	brcs	.-18     	; 0xbca <nwkFrameNext+0x20>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	08 95       	ret
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	08 95       	ret
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
     be8:	8e 2f       	mov	r24, r30
     bea:	9f 2f       	mov	r25, r31
     bec:	08 95       	ret
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     bee:	8e 2f       	mov	r24, r30
     bf0:	9f 2f       	mov	r25, r31
			return frame;
		}
	}

	return NULL;
}
     bf2:	08 95       	ret

00000bf4 <nwkFrameCommandInit>:
/*************************************************************************//**
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     bf4:	fc 01       	movw	r30, r24
	frame->tx.status = NWK_SUCCESS_STATUS;
     bf6:	dc 01       	movw	r26, r24
     bf8:	ad 57       	subi	r26, 0x7D	; 125
     bfa:	bf 4f       	sbci	r27, 0xFF	; 255
     bfc:	1c 92       	st	X, r1
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     bfe:	a2 ed       	ldi	r26, 0xD2	; 210
     c00:	b9 e0       	ldi	r27, 0x09	; 9
     c02:	14 96       	adiw	r26, 0x04	; 4
     c04:	9c 91       	ld	r25, X
     c06:	14 97       	sbiw	r26, 0x04	; 4
     c08:	9f 5f       	subi	r25, 0xFF	; 255
     c0a:	14 96       	adiw	r26, 0x04	; 4
     c0c:	9c 93       	st	X, r25
     c0e:	14 97       	sbiw	r26, 0x04	; 4
     c10:	94 87       	std	Z+12, r25	; 0x0c
	frame->header.nwkSrcAddr = nwkIb.addr;
     c12:	8d 91       	ld	r24, X+
     c14:	9c 91       	ld	r25, X
     c16:	96 87       	std	Z+14, r25	; 0x0e
     c18:	85 87       	std	Z+13, r24	; 0x0d
     c1a:	08 95       	ret

00000c1c <nwkRouteInit>:
	entry->nextHopAddr = nextHop;
	entry->multicast = multicast;
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
	entry->lqi = lqi;
}
     c1c:	a8 ec       	ldi	r26, 0xC8	; 200
     c1e:	b4 e0       	ldi	r27, 0x04	; 4
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	4f ef       	ldi	r20, 0xFF	; 255
     c26:	5f ef       	ldi	r21, 0xFF	; 255
     c28:	11 96       	adiw	r26, 0x01	; 1
     c2a:	5c 93       	st	X, r21
     c2c:	4e 93       	st	-X, r20
     c2e:	fc 01       	movw	r30, r24
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	e8 1b       	sub	r30, r24
     c3e:	f9 0b       	sbc	r31, r25
     c40:	e9 53       	subi	r30, 0x39	; 57
     c42:	fb 4f       	sbci	r31, 0xFB	; 251
     c44:	20 81       	ld	r18, Z
     c46:	2e 7f       	andi	r18, 0xFE	; 254
     c48:	20 83       	st	Z, r18
     c4a:	14 96       	adiw	r26, 0x04	; 4
     c4c:	1c 92       	st	X, r1
     c4e:	14 97       	sbiw	r26, 0x04	; 4
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	17 96       	adiw	r26, 0x07	; 7
     c54:	84 36       	cpi	r24, 0x64	; 100
     c56:	91 05       	cpc	r25, r1
     c58:	39 f7       	brne	.-50     	; 0xc28 <nwkRouteInit+0xc>
     c5a:	08 95       	ret

00000c5c <NWK_RouteFindEntry>:
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	e8 ec       	ldi	r30, 0xC8	; 200
     c66:	f4 e0       	ldi	r31, 0x04	; 4
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	06 2f       	mov	r16, r22
     c6e:	10 e0       	ldi	r17, 0x00	; 0
     c70:	40 81       	ld	r20, Z
     c72:	51 81       	ldd	r21, Z+1	; 0x01
     c74:	48 17       	cp	r20, r24
     c76:	59 07       	cpc	r21, r25
     c78:	b1 f4       	brne	.+44     	; 0xca6 <NWK_RouteFindEntry+0x4a>
     c7a:	d9 01       	movw	r26, r18
     c7c:	aa 0f       	add	r26, r26
     c7e:	bb 1f       	adc	r27, r27
     c80:	aa 0f       	add	r26, r26
     c82:	bb 1f       	adc	r27, r27
     c84:	aa 0f       	add	r26, r26
     c86:	bb 1f       	adc	r27, r27
     c88:	a2 1b       	sub	r26, r18
     c8a:	b3 0b       	sbc	r27, r19
     c8c:	a9 53       	subi	r26, 0x39	; 57
     c8e:	bb 4f       	sbci	r27, 0xFB	; 251
     c90:	4c 91       	ld	r20, X
     c92:	46 95       	lsr	r20
     c94:	41 70       	andi	r20, 0x01	; 1
     c96:	c4 2f       	mov	r28, r20
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	d4 2f       	mov	r29, r20
     c9c:	c0 17       	cp	r28, r16
     c9e:	d1 07       	cpc	r29, r17
     ca0:	11 f4       	brne	.+4      	; 0xca6 <NWK_RouteFindEntry+0x4a>
     ca2:	cd 01       	movw	r24, r26
     ca4:	08 c0       	rjmp	.+16     	; 0xcb6 <NWK_RouteFindEntry+0x5a>
     ca6:	2f 5f       	subi	r18, 0xFF	; 255
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	37 96       	adiw	r30, 0x07	; 7
     cac:	24 36       	cpi	r18, 0x64	; 100
     cae:	31 05       	cpc	r19, r1
     cb0:	f9 f6       	brne	.-66     	; 0xc70 <NWK_RouteFindEntry+0x14>
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	08 95       	ret

00000cc0 <NWK_RouteNewEntry>:
     cc0:	a0 e0       	ldi	r26, 0x00	; 0
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e7 ec       	ldi	r30, 0xC7	; 199
     cc6:	f4 e0       	ldi	r31, 0x04	; 4
     cc8:	80 81       	ld	r24, Z
     cca:	80 fd       	sbrc	r24, 0
     ccc:	0d c0       	rjmp	.+26     	; 0xce8 <NWK_RouteNewEntry+0x28>
     cce:	85 81       	ldd	r24, Z+5	; 0x05
     cd0:	88 23       	and	r24, r24
     cd2:	81 f0       	breq	.+32     	; 0xcf4 <NWK_RouteNewEntry+0x34>
     cd4:	10 97       	sbiw	r26, 0x00	; 0
     cd6:	39 f0       	breq	.+14     	; 0xce6 <NWK_RouteNewEntry+0x26>
     cd8:	15 96       	adiw	r26, 0x05	; 5
     cda:	9c 91       	ld	r25, X
     cdc:	15 97       	sbiw	r26, 0x05	; 5
     cde:	89 17       	cp	r24, r25
     ce0:	18 f4       	brcc	.+6      	; 0xce8 <NWK_RouteNewEntry+0x28>
     ce2:	df 01       	movw	r26, r30
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <NWK_RouteNewEntry+0x28>
     ce6:	df 01       	movw	r26, r30
     ce8:	37 96       	adiw	r30, 0x07	; 7
     cea:	87 e0       	ldi	r24, 0x07	; 7
     cec:	e3 38       	cpi	r30, 0x83	; 131
     cee:	f8 07       	cpc	r31, r24
     cf0:	59 f7       	brne	.-42     	; 0xcc8 <NWK_RouteNewEntry+0x8>
     cf2:	fd 01       	movw	r30, r26
     cf4:	80 81       	ld	r24, Z
     cf6:	8d 70       	andi	r24, 0x0D	; 13
     cf8:	80 63       	ori	r24, 0x30	; 48
     cfa:	80 83       	st	Z, r24
     cfc:	80 e8       	ldi	r24, 0x80	; 128
     cfe:	85 83       	std	Z+5, r24	; 0x05
     d00:	cf 01       	movw	r24, r30
     d02:	08 95       	ret

00000d04 <NWK_RouteFreeEntry>:
     d04:	fc 01       	movw	r30, r24
     d06:	80 81       	ld	r24, Z
     d08:	80 fd       	sbrc	r24, 0
     d0a:	05 c0       	rjmp	.+10     	; 0xd16 <NWK_RouteFreeEntry+0x12>
     d0c:	8f ef       	ldi	r24, 0xFF	; 255
     d0e:	9f ef       	ldi	r25, 0xFF	; 255
     d10:	92 83       	std	Z+2, r25	; 0x02
     d12:	81 83       	std	Z+1, r24	; 0x01
     d14:	15 82       	std	Z+5, r1	; 0x05
     d16:	08 95       	ret

00000d18 <NWK_RouteNextHop>:
     d18:	a1 df       	rcall	.-190    	; 0xc5c <NWK_RouteFindEntry>
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	21 f0       	breq	.+8      	; 0xd26 <NWK_RouteNextHop+0xe>
     d1e:	fc 01       	movw	r30, r24
     d20:	83 81       	ldd	r24, Z+3	; 0x03
     d22:	94 81       	ldd	r25, Z+4	; 0x04
     d24:	08 95       	ret
     d26:	8f ef       	ldi	r24, 0xFF	; 255
     d28:	9f ef       	ldi	r25, 0xFF	; 255
     d2a:	08 95       	ret

00000d2c <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
     d2c:	97 df       	rcall	.-210    	; 0xc5c <NWK_RouteFindEntry>
	if (entry) {
     d2e:	00 97       	sbiw	r24, 0x00	; 0
		NWK_RouteFreeEntry(entry);
     d30:	09 f0       	breq	.+2      	; 0xd34 <nwkRouteRemove+0x8>
     d32:	e8 cf       	rjmp	.-48     	; 0xd04 <NWK_RouteFreeEntry>
     d34:	08 95       	ret

00000d36 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     d40:	01 85       	ldd	r16, Z+9	; 0x09
     d42:	12 85       	ldd	r17, Z+10	; 0x0a
     d44:	11 23       	and	r17, r17
     d46:	2c f4       	brge	.+10     	; 0xd52 <nwkRouteFrameReceived+0x1c>
     d48:	85 85       	ldd	r24, Z+13	; 0x0d
     d4a:	96 85       	ldd	r25, Z+14	; 0x0e
     d4c:	08 17       	cp	r16, r24
     d4e:	19 07       	cpc	r17, r25
     d50:	e1 f5       	brne	.+120    	; 0xdca <nwkRouteFrameReceived+0x94>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
     d52:	85 81       	ldd	r24, Z+5	; 0x05
     d54:	96 81       	ldd	r25, Z+6	; 0x06
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	c1 f1       	breq	.+112    	; 0xdca <nwkRouteFrameReceived+0x94>
     d5a:	ef 01       	movw	r28, r30
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	85 85       	ldd	r24, Z+13	; 0x0d
     d60:	96 85       	ldd	r25, Z+14	; 0x0e
     d62:	7c df       	rcall	.-264    	; 0xc5c <NWK_RouteFindEntry>
     d64:	fc 01       	movw	r30, r24

	if (entry) {
     d66:	89 2b       	or	r24, r25
     d68:	a1 f0       	breq	.+40     	; 0xd92 <nwkRouteFrameReceived+0x5c>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     d6a:	8f 81       	ldd	r24, Y+7	; 0x07
     d6c:	98 85       	ldd	r25, Y+8	; 0x08
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	f9 f4       	brne	.+62     	; 0xdb0 <nwkRouteFrameReceived+0x7a>
     d72:	20 91 d2 09 	lds	r18, 0x09D2	; 0x8009d2 <nwkIb>
     d76:	30 91 d3 09 	lds	r19, 0x09D3	; 0x8009d3 <nwkIb+0x1>
     d7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d7c:	98 89       	ldd	r25, Y+16	; 0x10
     d7e:	28 17       	cp	r18, r24
     d80:	39 07       	cpc	r19, r25
     d82:	b1 f4       	brne	.+44     	; 0xdb0 <nwkRouteFrameReceived+0x7a>
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
				entry->lqi) || discovery) {
			entry->nextHopAddr = header->macSrcAddr;
     d84:	14 83       	std	Z+4, r17	; 0x04
     d86:	03 83       	std	Z+3, r16	; 0x03
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
     d88:	80 81       	ld	r24, Z
     d8a:	8f 70       	andi	r24, 0x0F	; 15
     d8c:	80 63       	ori	r24, 0x30	; 48
     d8e:	80 83       	st	Z, r24
		}
	} else {
		entry = NWK_RouteNewEntry();
     d90:	0a c0       	rjmp	.+20     	; 0xda6 <nwkRouteFrameReceived+0x70>
     d92:	96 df       	rcall	.-212    	; 0xcc0 <NWK_RouteNewEntry>
     d94:	fc 01       	movw	r30, r24

		entry->dstAddr = header->nwkSrcAddr;
     d96:	8d 85       	ldd	r24, Y+13	; 0x0d
     d98:	9e 85       	ldd	r25, Y+14	; 0x0e
     d9a:	92 83       	std	Z+2, r25	; 0x02
     d9c:	81 83       	std	Z+1, r24	; 0x01
		entry->nextHopAddr = header->macSrcAddr;
     d9e:	89 85       	ldd	r24, Y+9	; 0x09
     da0:	9a 85       	ldd	r25, Y+10	; 0x0a
     da2:	94 83       	std	Z+4, r25	; 0x04
     da4:	83 83       	std	Z+3, r24	; 0x03
	}

	entry->lqi = frame->rx.lqi;
     da6:	cd 57       	subi	r28, 0x7D	; 125
     da8:	df 4f       	sbci	r29, 0xFF	; 255
     daa:	88 81       	ld	r24, Y
     dac:	86 83       	std	Z+6, r24	; 0x06
     dae:	0d c0       	rjmp	.+26     	; 0xdca <nwkRouteFrameReceived+0x94>

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
     db0:	83 81       	ldd	r24, Z+3	; 0x03
     db2:	94 81       	ldd	r25, Z+4	; 0x04
     db4:	08 17       	cp	r16, r24
     db6:	19 07       	cpc	r17, r25
     db8:	b1 f3       	breq	.-20     	; 0xda6 <nwkRouteFrameReceived+0x70>
     dba:	96 81       	ldd	r25, Z+6	; 0x06
     dbc:	de 01       	movw	r26, r28
     dbe:	ad 57       	subi	r26, 0x7D	; 125
     dc0:	bf 4f       	sbci	r27, 0xFF	; 255
     dc2:	8c 91       	ld	r24, X
     dc4:	98 17       	cp	r25, r24
     dc6:	f0 f2       	brcs	.-68     	; 0xd84 <nwkRouteFrameReceived+0x4e>
     dc8:	ee cf       	rjmp	.-36     	; 0xda6 <nwkRouteFrameReceived+0x70>

	entry->lqi = frame->rx.lqi;
#else
	(void)frame;
#endif
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	08 95       	ret

00000dd4 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	fc 01       	movw	r30, r24
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
     dda:	87 85       	ldd	r24, Z+15	; 0x0f
     ddc:	90 89       	ldd	r25, Z+16	; 0x10
     dde:	8f 3f       	cpi	r24, 0xFF	; 255
     de0:	2f ef       	ldi	r18, 0xFF	; 255
     de2:	92 07       	cpc	r25, r18
     de4:	d9 f1       	breq	.+118    	; 0xe5c <nwkRouteFrameSent+0x88>
     de6:	ef 01       	movw	r28, r30
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
     de8:	63 85       	ldd	r22, Z+11	; 0x0b
     dea:	63 fb       	bst	r22, 3
     dec:	66 27       	eor	r22, r22
     dee:	60 f9       	bld	r22, 0

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
     df0:	35 df       	rcall	.-406    	; 0xc5c <NWK_RouteFindEntry>
     df2:	dc 01       	movw	r26, r24
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
     df4:	89 2b       	or	r24, r25
     df6:	91 f1       	breq	.+100    	; 0xe5c <nwkRouteFrameSent+0x88>
     df8:	8c 91       	ld	r24, X
     dfa:	80 fd       	sbrc	r24, 0
     dfc:	2f c0       	rjmp	.+94     	; 0xe5c <nwkRouteFrameSent+0x88>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
     dfe:	fe 01       	movw	r30, r28
     e00:	ed 57       	subi	r30, 0x7D	; 125
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	80 81       	ld	r24, Z
     e06:	81 11       	cpse	r24, r1
     e08:	19 c0       	rjmp	.+50     	; 0xe3c <nwkRouteFrameSent+0x68>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
     e0a:	8c 91       	ld	r24, X
     e0c:	8f 70       	andi	r24, 0x0F	; 15
     e0e:	80 63       	ori	r24, 0x30	; 48
     e10:	8c 93       	st	X, r24

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
     e12:	15 96       	adiw	r26, 0x05	; 5
     e14:	8c 91       	ld	r24, X
     e16:	15 97       	sbiw	r26, 0x05	; 5
     e18:	8f 5f       	subi	r24, 0xFF	; 255
     e1a:	15 96       	adiw	r26, 0x05	; 5
     e1c:	8c 93       	st	X, r24
     e1e:	8f 3f       	cpi	r24, 0xFF	; 255
     e20:	e9 f4       	brne	.+58     	; 0xe5c <nwkRouteFrameSent+0x88>
     e22:	ec ec       	ldi	r30, 0xCC	; 204
     e24:	f4 e0       	ldi	r31, 0x04	; 4
     e26:	28 e8       	ldi	r18, 0x88	; 136
     e28:	37 e0       	ldi	r19, 0x07	; 7
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     e2a:	80 81       	ld	r24, Z
     e2c:	86 95       	lsr	r24
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	80 83       	st	Z, r24
     e32:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
     e34:	e2 17       	cp	r30, r18
     e36:	f3 07       	cpc	r31, r19
     e38:	c1 f7       	brne	.-16     	; 0xe2a <nwkRouteFrameSent+0x56>
     e3a:	10 c0       	rjmp	.+32     	; 0xe5c <nwkRouteFrameSent+0x88>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
     e3c:	9c 91       	ld	r25, X
     e3e:	89 2f       	mov	r24, r25
     e40:	82 95       	swap	r24
     e42:	8f 70       	andi	r24, 0x0F	; 15
     e44:	81 5f       	subi	r24, 0xF1	; 241
     e46:	8f 70       	andi	r24, 0x0F	; 15
     e48:	28 2f       	mov	r18, r24
     e4a:	22 95       	swap	r18
     e4c:	20 7f       	andi	r18, 0xF0	; 240
     e4e:	9f 70       	andi	r25, 0x0F	; 15
     e50:	92 2b       	or	r25, r18
     e52:	9c 93       	st	X, r25
     e54:	81 11       	cpse	r24, r1
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <nwkRouteFrameSent+0x88>
			NWK_RouteFreeEntry(entry);
     e58:	cd 01       	movw	r24, r26
     e5a:	54 df       	rcall	.-344    	; 0xd04 <NWK_RouteFreeEntry>
		}
	}
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	fc 01       	movw	r30, r24
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
     e68:	87 85       	ldd	r24, Z+15	; 0x0f
     e6a:	90 89       	ldd	r25, Z+16	; 0x10
     e6c:	8f 3f       	cpi	r24, 0xFF	; 255
     e6e:	2f ef       	ldi	r18, 0xFF	; 255
     e70:	92 07       	cpc	r25, r18
     e72:	29 f4       	brne	.+10     	; 0xe7e <nwkRoutePrepareTx+0x1c>
		header->macDstAddr = NWK_BROADCAST_ADDR;
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	9f ef       	ldi	r25, 0xFF	; 255
     e78:	90 87       	std	Z+8, r25	; 0x08
     e7a:	87 83       	std	Z+7, r24	; 0x07
     e7c:	0e c0       	rjmp	.+28     	; 0xe9a <nwkRoutePrepareTx+0x38>
	} else if (header->nwkFcf.linkLocal) {
     e7e:	23 85       	ldd	r18, Z+11	; 0x0b
     e80:	22 ff       	sbrs	r18, 2
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
     e84:	90 87       	std	Z+8, r25	; 0x08
     e86:	87 83       	std	Z+7, r24	; 0x07
     e88:	08 c0       	rjmp	.+16     	; 0xe9a <nwkRoutePrepareTx+0x38>
     e8a:	ef 01       	movw	r28, r30
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
     e8c:	63 85       	ldd	r22, Z+11	; 0x0b
     e8e:	63 fb       	bst	r22, 3
     e90:	66 27       	eor	r22, r22
     e92:	60 f9       	bld	r22, 0
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
     e94:	41 df       	rcall	.-382    	; 0xd18 <NWK_RouteNextHop>
     e96:	98 87       	std	Y+8, r25	; 0x08
     e98:	8f 83       	std	Y+7, r24	; 0x07
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
			nwkRouteDiscoveryRequest(frame);
		}
  #endif
	}
}
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     ea0:	af 92       	push	r10
     ea2:	bf 92       	push	r11
     ea4:	cf 92       	push	r12
     ea6:	df 92       	push	r13
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	ec 01       	movw	r28, r24
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
     eb4:	1b 85       	ldd	r17, Y+11	; 0x0b
     eb6:	13 fb       	bst	r17, 3
     eb8:	11 27       	eor	r17, r17
     eba:	10 f9       	bld	r17, 0
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
     ebc:	cf 84       	ldd	r12, Y+15	; 0x0f
     ebe:	d8 88       	ldd	r13, Y+16	; 0x10
     ec0:	61 2f       	mov	r22, r17
     ec2:	c6 01       	movw	r24, r12
     ec4:	29 df       	rcall	.-430    	; 0xd18 <NWK_RouteNextHop>
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	59 f0       	breq	.+22     	; 0xee0 <nwkRouteFrame+0x40>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
     eca:	fe 01       	movw	r30, r28
     ecc:	e9 57       	subi	r30, 0x79	; 121
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	11 82       	std	Z+1, r1	; 0x01
     ed2:	10 82       	st	Z, r1
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
     ed4:	31 97       	sbiw	r30, 0x01	; 1
     ed6:	82 e0       	ldi	r24, 0x02	; 2
     ed8:	80 83       	st	Z, r24
		nwkTxFrame(frame);
     eda:	ce 01       	movw	r24, r28
     edc:	d5 d4       	rcall	.+2474   	; 0x1888 <nwkTxFrame>
     ede:	22 c0       	rjmp	.+68     	; 0xf24 <nwkRouteFrame+0x84>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
     ee0:	ad 84       	ldd	r10, Y+13	; 0x0d
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
     ee2:	be 84       	ldd	r11, Y+14	; 0x0e
     ee4:	22 de       	rcall	.-956    	; 0xb2a <nwkFrameAlloc>
     ee6:	7c 01       	movw	r14, r24
     ee8:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}

	nwkFrameCommandInit(frame);
     eea:	d1 f0       	breq	.+52     	; 0xf20 <nwkRouteFrame+0x80>
     eec:	83 de       	rcall	.-762    	; 0xbf4 <nwkFrameCommandInit>

	frame->size += sizeof(NwkCommandRouteError_t);
     eee:	f7 01       	movw	r30, r14
     ef0:	81 81       	ldd	r24, Z+1	; 0x01
     ef2:	8a 5f       	subi	r24, 0xFA	; 250
     ef4:	81 83       	std	Z+1, r24	; 0x01
	frame->tx.confirm = NULL;
     ef6:	e9 57       	subi	r30, 0x79	; 121
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	11 82       	std	Z+1, r1	; 0x01
     efc:	10 82       	st	Z, r1

	frame->header.nwkDstAddr = src;
     efe:	f7 01       	movw	r30, r14
     f00:	b0 8a       	std	Z+16, r11	; 0x10
     f02:	a7 86       	std	Z+15, r10	; 0x0f

	command = (NwkCommandRouteError_t *)frame->payload;
     f04:	ef 57       	subi	r30, 0x7F	; 127
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	01 90       	ld	r0, Z+
     f0a:	f0 81       	ld	r31, Z
     f0c:	e0 2d       	mov	r30, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	80 83       	st	Z, r24
	command->srcAddr = src;
     f12:	b2 82       	std	Z+2, r11	; 0x02
     f14:	a1 82       	std	Z+1, r10	; 0x01
	command->dstAddr = dst;
     f16:	d4 82       	std	Z+4, r13	; 0x04
	command->multicast = multicast;

	nwkTxFrame(frame);
     f18:	c3 82       	std	Z+3, r12	; 0x03
     f1a:	15 83       	std	Z+5, r17	; 0x05
     f1c:	c7 01       	movw	r24, r14
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
     f1e:	b4 d4       	rcall	.+2408   	; 0x1888 <nwkTxFrame>
     f20:	ce 01       	movw	r24, r28
     f22:	39 de       	rcall	.-910    	; 0xb96 <nwkFrameFree>
	}
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	df 90       	pop	r13
     f30:	cf 90       	pop	r12
     f32:	bf 90       	pop	r11
     f34:	af 90       	pop	r10
     f36:	08 95       	ret

00000f38 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
     f38:	fc 01       	movw	r30, r24
     f3a:	21 85       	ldd	r18, Z+9	; 0x09
     f3c:	26 30       	cpi	r18, 0x06	; 6
     f3e:	49 f4       	brne	.+18     	; 0xf52 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     f40:	07 80       	ldd	r0, Z+7	; 0x07
     f42:	f0 85       	ldd	r31, Z+8	; 0x08
     f44:	e0 2d       	mov	r30, r0

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
     f46:	65 81       	ldd	r22, Z+5	; 0x05
     f48:	83 81       	ldd	r24, Z+3	; 0x03
     f4a:	94 81       	ldd	r25, Z+4	; 0x04
     f4c:	ef de       	rcall	.-546    	; 0xd2c <nwkRouteRemove>

	return true;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
     f52:	80 e0       	ldi	r24, 0x00	; 0
	}

	nwkRouteRemove(command->dstAddr, command->multicast);

	return true;
}
     f54:	08 95       	ret

00000f56 <nwkRxSeriveDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
	nwkRxAckControl = control;
     f56:	dc 01       	movw	r26, r24
     f58:	19 96       	adiw	r26, 0x09	; 9
     f5a:	2c 91       	ld	r18, X
     f5c:	19 97       	sbiw	r26, 0x09	; 9
     f5e:	22 23       	and	r18, r18
     f60:	71 f0       	breq	.+28     	; 0xf7e <nwkRxSeriveDataInd+0x28>
     f62:	17 96       	adiw	r26, 0x07	; 7
     f64:	ed 91       	ld	r30, X+
     f66:	fc 91       	ld	r31, X
     f68:	18 97       	sbiw	r26, 0x08	; 8
     f6a:	20 81       	ld	r18, Z
     f6c:	22 23       	and	r18, r18
     f6e:	19 f0       	breq	.+6      	; 0xf76 <nwkRxSeriveDataInd+0x20>
     f70:	21 30       	cpi	r18, 0x01	; 1
     f72:	19 f0       	breq	.+6      	; 0xf7a <nwkRxSeriveDataInd+0x24>
     f74:	06 c0       	rjmp	.+12     	; 0xf82 <nwkRxSeriveDataInd+0x2c>
     f76:	22 c5       	rjmp	.+2628   	; 0x19bc <nwkTxAckReceived>
     f78:	08 95       	ret
     f7a:	de cf       	rjmp	.-68     	; 0xf38 <nwkRouteErrorReceived>
     f7c:	08 95       	ret
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	08 95       	ret
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	08 95       	ret

00000f86 <nwkRxDuplicateRejectionTimerHandler>:
     f86:	bc 01       	movw	r22, r24
     f88:	e5 e9       	ldi	r30, 0x95	; 149
     f8a:	f7 e0       	ldi	r31, 0x07	; 7
     f8c:	27 ec       	ldi	r18, 0xC7	; 199
     f8e:	37 e0       	ldi	r19, 0x07	; 7
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	51 e0       	ldi	r21, 0x01	; 1
     f94:	90 81       	ld	r25, Z
     f96:	99 23       	and	r25, r25
     f98:	19 f0       	breq	.+6      	; 0xfa0 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     f9a:	91 50       	subi	r25, 0x01	; 1
     f9c:	90 83       	st	Z, r25
     f9e:	45 2f       	mov	r20, r21
     fa0:	35 96       	adiw	r30, 0x05	; 5
     fa2:	e2 17       	cp	r30, r18
     fa4:	f3 07       	cpc	r31, r19
     fa6:	b1 f7       	brne	.-20     	; 0xf94 <nwkRxDuplicateRejectionTimerHandler+0xe>
     fa8:	44 23       	and	r20, r20
     faa:	19 f0       	breq	.+6      	; 0xfb2 <nwkRxDuplicateRejectionTimerHandler+0x2c>
     fac:	cb 01       	movw	r24, r22
     fae:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <SYS_TimerStart>
     fb2:	08 95       	ret

00000fb4 <nwkRxInit>:
     fb4:	e5 e9       	ldi	r30, 0x95	; 149
     fb6:	f7 e0       	ldi	r31, 0x07	; 7
     fb8:	87 ec       	ldi	r24, 0xC7	; 199
     fba:	97 e0       	ldi	r25, 0x07	; 7
     fbc:	10 82       	st	Z, r1
     fbe:	35 96       	adiw	r30, 0x05	; 5
     fc0:	e8 17       	cp	r30, r24
     fc2:	f9 07       	cpc	r31, r25
     fc4:	d9 f7       	brne	.-10     	; 0xfbc <nwkRxInit+0x8>
     fc6:	e3 e8       	ldi	r30, 0x83	; 131
     fc8:	f7 e0       	ldi	r31, 0x07	; 7
     fca:	84 e6       	ldi	r24, 0x64	; 100
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a0 e0       	ldi	r26, 0x00	; 0
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	86 83       	std	Z+6, r24	; 0x06
     fd4:	97 83       	std	Z+7, r25	; 0x07
     fd6:	a0 87       	std	Z+8, r26	; 0x08
     fd8:	b1 87       	std	Z+9, r27	; 0x09
     fda:	12 86       	std	Z+10, r1	; 0x0a
     fdc:	83 ec       	ldi	r24, 0xC3	; 195
     fde:	97 e0       	ldi	r25, 0x07	; 7
     fe0:	94 87       	std	Z+12, r25	; 0x0c
     fe2:	83 87       	std	Z+11, r24	; 0x0b
     fe4:	6b ea       	ldi	r22, 0xAB	; 171
     fe6:	77 e0       	ldi	r23, 0x07	; 7
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	92 cc       	rjmp	.-1756   	; 0x910 <NWK_OpenEndpoint>
     fec:	08 95       	ret

00000fee <PHY_DataInd>:
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	dc 01       	movw	r26, r24
     ff4:	ed 91       	ld	r30, X+
     ff6:	fc 91       	ld	r31, X
     ff8:	11 97       	sbiw	r26, 0x01	; 1
     ffa:	21 81       	ldd	r18, Z+1	; 0x01
     ffc:	28 38       	cpi	r18, 0x88	; 136
     ffe:	f9 f4       	brne	.+62     	; 0x103e <PHY_DataInd+0x50>
    1000:	20 81       	ld	r18, Z
    1002:	2f 7d       	andi	r18, 0xDF	; 223
    1004:	21 34       	cpi	r18, 0x41	; 65
    1006:	d9 f4       	brne	.+54     	; 0x103e <PHY_DataInd+0x50>
    1008:	12 96       	adiw	r26, 0x02	; 2
    100a:	2c 91       	ld	r18, X
    100c:	20 31       	cpi	r18, 0x10	; 16
    100e:	b8 f0       	brcs	.+46     	; 0x103e <PHY_DataInd+0x50>
    1010:	ec 01       	movw	r28, r24
    1012:	8b dd       	rcall	.-1258   	; 0xb2a <nwkFrameAlloc>
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	99 f0       	breq	.+38     	; 0x103e <PHY_DataInd+0x50>
    1018:	20 e2       	ldi	r18, 0x20	; 32
    101a:	fc 01       	movw	r30, r24
    101c:	20 83       	st	Z, r18
    101e:	2a 81       	ldd	r18, Y+2	; 0x02
    1020:	21 83       	std	Z+1, r18	; 0x01
    1022:	2b 81       	ldd	r18, Y+3	; 0x03
    1024:	ed 57       	subi	r30, 0x7D	; 125
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	20 83       	st	Z, r18
    102a:	2c 81       	ldd	r18, Y+4	; 0x04
    102c:	31 96       	adiw	r30, 0x01	; 1
    102e:	20 83       	st	Z, r18
    1030:	4a 81       	ldd	r20, Y+2	; 0x02
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	68 81       	ld	r22, Y
    1036:	79 81       	ldd	r23, Y+1	; 0x01
    1038:	02 96       	adiw	r24, 0x02	; 2
    103a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <memcpy>
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    1044:	66 23       	and	r22, r22
    1046:	21 f0       	breq	.+8      	; 0x1050 <nwkRxDecryptConf+0xc>
		frame->state = NWK_RX_STATE_INDICATE;
    1048:	22 e2       	ldi	r18, 0x22	; 34
    104a:	fc 01       	movw	r30, r24
    104c:	20 83       	st	Z, r18
    104e:	08 95       	ret
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    1050:	24 e2       	ldi	r18, 0x24	; 36
    1052:	fc 01       	movw	r30, r24
    1054:	20 83       	st	Z, r18
    1056:	08 95       	ret

00001058 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1058:	2f 92       	push	r2
    105a:	3f 92       	push	r3
    105c:	4f 92       	push	r4
    105e:	5f 92       	push	r5
    1060:	6f 92       	push	r6
    1062:	7f 92       	push	r7
    1064:	8f 92       	push	r8
    1066:	9f 92       	push	r9
    1068:	af 92       	push	r10
    106a:	bf 92       	push	r11
    106c:	cf 92       	push	r12
    106e:	df 92       	push	r13
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	2c 97       	sbiw	r28, 0x0c	; 12
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
	NwkFrame_t *frame = NULL;
    108c:	00 e0       	ldi	r16, 0x00	; 0
    108e:	10 e0       	ldi	r17, 0x00	; 0

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    1090:	0f 2e       	mov	r0, r31
    1092:	f4 e2       	ldi	r31, 0x24	; 36
    1094:	bf 2e       	mov	r11, r31
    1096:	f0 2d       	mov	r31, r0

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    1098:	0f 2e       	mov	r0, r31
    109a:	f2 ed       	ldi	r31, 0xD2	; 210
    109c:	ef 2e       	mov	r14, r31
    109e:	f9 e0       	ldi	r31, 0x09	; 9
    10a0:	ff 2e       	mov	r15, r31
    10a2:	f0 2d       	mov	r31, r0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    10a4:	aa 24       	eor	r10, r10
    10a6:	a3 94       	inc	r10
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    10a8:	68 94       	set
    10aa:	66 24       	eor	r6, r6
    10ac:	64 f8       	bld	r6, 4
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    10ae:	68 94       	set
    10b0:	55 24       	eor	r5, r5
    10b2:	53 f8       	bld	r5, 3
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    10b4:	68 94       	set
    10b6:	44 24       	eor	r4, r4
    10b8:	42 f8       	bld	r4, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    10ba:	21 2c       	mov	r2, r1
    10bc:	31 2c       	mov	r3, r1
	}

	freeEntry->src = header->nwkSrcAddr;
	freeEntry->seq = header->nwkSeq;
	freeEntry->mask = 1;
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    10be:	0f 2e       	mov	r0, r31
    10c0:	ff e1       	ldi	r31, 0x1F	; 31
    10c2:	7f 2e       	mov	r7, r31
    10c4:	f0 2d       	mov	r31, r0
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    10c6:	cc 24       	eor	r12, r12
    10c8:	c3 94       	inc	r12
    10ca:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    10cc:	ef c1       	rjmp	.+990    	; 0x14ac <nwkRxTaskHandler+0x454>
		switch (frame->state) {
    10ce:	d8 01       	movw	r26, r16
    10d0:	8c 91       	ld	r24, X
    10d2:	82 32       	cpi	r24, 0x22	; 34
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <nwkRxTaskHandler+0x80>
    10d6:	1a c1       	rjmp	.+564    	; 0x130c <nwkRxTaskHandler+0x2b4>
    10d8:	30 f4       	brcc	.+12     	; 0x10e6 <nwkRxTaskHandler+0x8e>
    10da:	80 32       	cpi	r24, 0x20	; 32
    10dc:	59 f0       	breq	.+22     	; 0x10f4 <nwkRxTaskHandler+0x9c>
    10de:	81 32       	cpi	r24, 0x21	; 33
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <nwkRxTaskHandler+0x8c>
    10e2:	10 c1       	rjmp	.+544    	; 0x1304 <nwkRxTaskHandler+0x2ac>
    10e4:	e3 c1       	rjmp	.+966    	; 0x14ac <nwkRxTaskHandler+0x454>
    10e6:	83 32       	cpi	r24, 0x23	; 35
    10e8:	09 f4       	brne	.+2      	; 0x10ec <nwkRxTaskHandler+0x94>
    10ea:	db c1       	rjmp	.+950    	; 0x14a2 <nwkRxTaskHandler+0x44a>
    10ec:	84 32       	cpi	r24, 0x24	; 36
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <nwkRxTaskHandler+0x9a>
    10f0:	db c1       	rjmp	.+950    	; 0x14a8 <nwkRxTaskHandler+0x450>
    10f2:	dc c1       	rjmp	.+952    	; 0x14ac <nwkRxTaskHandler+0x454>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    10f4:	f8 01       	movw	r30, r16
    10f6:	b0 82       	st	Z, r11
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    10f8:	83 85       	ldd	r24, Z+11	; 0x0b
    10fa:	83 fd       	sbrc	r24, 3
    10fc:	d7 c1       	rjmp	.+942    	; 0x14ac <nwkRxTaskHandler+0x454>
		return;
	}
#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    10fe:	25 81       	ldd	r18, Z+5	; 0x05
    1100:	36 81       	ldd	r19, Z+6	; 0x06
    1102:	2f 3f       	cpi	r18, 0xFF	; 255
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
    1106:	c9 f4       	brne	.+50     	; 0x113a <nwkRxTaskHandler+0xe2>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    1108:	d8 01       	movw	r26, r16
    110a:	1f 96       	adiw	r26, 0x0f	; 15
    110c:	2d 91       	ld	r18, X+
    110e:	3c 91       	ld	r19, X
    1110:	50 97       	sbiw	r26, 0x10	; 16
    1112:	f7 01       	movw	r30, r14
    1114:	40 81       	ld	r20, Z
    1116:	51 81       	ldd	r21, Z+1	; 0x01
    1118:	42 17       	cp	r20, r18
    111a:	53 07       	cpc	r21, r19
    111c:	21 f0       	breq	.+8      	; 0x1126 <nwkRxTaskHandler+0xce>
    111e:	2f 3f       	cpi	r18, 0xFF	; 255
    1120:	3f 4f       	sbci	r19, 0xFF	; 255
    1122:	09 f0       	breq	.+2      	; 0x1126 <nwkRxTaskHandler+0xce>
    1124:	c3 c1       	rjmp	.+902    	; 0x14ac <nwkRxTaskHandler+0x454>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    1126:	81 ff       	sbrs	r24, 1
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <nwkRxTaskHandler+0xda>
				frame->state = NWK_RX_STATE_DECRYPT;
    112a:	e1 e2       	ldi	r30, 0x21	; 33
    112c:	d8 01       	movw	r26, r16
    112e:	ec 93       	st	X, r30
    1130:	bd c1       	rjmp	.+890    	; 0x14ac <nwkRxTaskHandler+0x454>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    1132:	e2 e2       	ldi	r30, 0x22	; 34
    1134:	d8 01       	movw	r26, r16
    1136:	ec 93       	st	X, r30
    1138:	b9 c1       	rjmp	.+882    	; 0x14ac <nwkRxTaskHandler+0x454>
	if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi)) {
		return;
	}
#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    113a:	d8 01       	movw	r26, r16
    113c:	1f 96       	adiw	r26, 0x0f	; 15
    113e:	2d 91       	ld	r18, X+
    1140:	3c 91       	ld	r19, X
    1142:	50 97       	sbiw	r26, 0x10	; 16
    1144:	2f 3f       	cpi	r18, 0xFF	; 255
    1146:	3f 4f       	sbci	r19, 0xFF	; 255
    1148:	11 f4       	brne	.+4      	; 0x114e <nwkRxTaskHandler+0xf6>
    114a:	80 fd       	sbrc	r24, 0
    114c:	af c1       	rjmp	.+862    	; 0x14ac <nwkRxTaskHandler+0x454>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    114e:	f7 01       	movw	r30, r14
    1150:	20 81       	ld	r18, Z
    1152:	31 81       	ldd	r19, Z+1	; 0x01
    1154:	d8 01       	movw	r26, r16
    1156:	1d 96       	adiw	r26, 0x0d	; 13
    1158:	8d 91       	ld	r24, X+
    115a:	9c 91       	ld	r25, X
    115c:	1e 97       	sbiw	r26, 0x0e	; 14
    115e:	28 17       	cp	r18, r24
    1160:	39 07       	cpc	r19, r25
    1162:	09 f4       	brne	.+2      	; 0x1166 <nwkRxTaskHandler+0x10e>
    1164:	a3 c1       	rjmp	.+838    	; 0x14ac <nwkRxTaskHandler+0x454>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    1166:	c8 01       	movw	r24, r16
    1168:	e6 dd       	rcall	.-1076   	; 0xd36 <nwkRouteFrameReceived>
    116a:	e1 e9       	ldi	r30, 0x91	; 145
    116c:	f7 e0       	ldi	r31, 0x07	; 7
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1172:	82 2c       	mov	r8, r2
    1174:	93 2c       	mov	r9, r3

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    1176:	9c 01       	movw	r18, r24

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    1178:	44 81       	ldd	r20, Z+4	; 0x04
    117a:	44 23       	and	r20, r20
    117c:	09 f4       	brne	.+2      	; 0x1180 <nwkRxTaskHandler+0x128>
    117e:	74 c0       	rjmp	.+232    	; 0x1268 <nwkRxTaskHandler+0x210>
    1180:	d8 01       	movw	r26, r16
    1182:	1d 96       	adiw	r26, 0x0d	; 13
    1184:	6d 91       	ld	r22, X+
    1186:	7c 91       	ld	r23, X
    1188:	1e 97       	sbiw	r26, 0x0e	; 14
    118a:	40 81       	ld	r20, Z
    118c:	51 81       	ldd	r21, Z+1	; 0x01
    118e:	64 17       	cp	r22, r20
    1190:	75 07       	cpc	r23, r21
    1192:	09 f0       	breq	.+2      	; 0x1196 <nwkRxTaskHandler+0x13e>
    1194:	6a c0       	rjmp	.+212    	; 0x126a <nwkRxTaskHandler+0x212>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    1196:	1c 96       	adiw	r26, 0x0c	; 12
    1198:	8c 91       	ld	r24, X
    119a:	1c 97       	sbiw	r26, 0x0c	; 12
    119c:	f9 01       	movw	r30, r18
    119e:	ee 0f       	add	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	ee 0f       	add	r30, r30
    11a4:	ff 1f       	adc	r31, r31
    11a6:	e2 0f       	add	r30, r18
    11a8:	f3 1f       	adc	r31, r19
    11aa:	ef 56       	subi	r30, 0x6F	; 111
    11ac:	f8 4f       	sbci	r31, 0xF8	; 248
    11ae:	92 81       	ldd	r25, Z+2	; 0x02
    11b0:	98 1b       	sub	r25, r24

			if (diff < 8) {
    11b2:	98 30       	cpi	r25, 0x08	; 8
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <nwkRxTaskHandler+0x160>
    11b6:	3e c0       	rjmp	.+124    	; 0x1234 <nwkRxTaskHandler+0x1dc>
				if (entry->mask & (1 << diff)) {
    11b8:	f9 01       	movw	r30, r18
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	e2 0f       	add	r30, r18
    11c4:	f3 1f       	adc	r31, r19
    11c6:	ef 56       	subi	r30, 0x6F	; 111
    11c8:	f8 4f       	sbci	r31, 0xF8	; 248
    11ca:	83 81       	ldd	r24, Z+3	; 0x03
    11cc:	48 2f       	mov	r20, r24
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	09 2e       	mov	r0, r25
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <nwkRxTaskHandler+0x180>
    11d4:	55 95       	asr	r21
    11d6:	47 95       	ror	r20
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <nwkRxTaskHandler+0x17c>
    11dc:	40 ff       	sbrs	r20, 0
    11de:	17 c0       	rjmp	.+46     	; 0x120e <nwkRxTaskHandler+0x1b6>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    11e0:	f7 01       	movw	r30, r14
    11e2:	20 81       	ld	r18, Z
    11e4:	31 81       	ldd	r19, Z+1	; 0x01
    11e6:	17 96       	adiw	r26, 0x07	; 7
    11e8:	8d 91       	ld	r24, X+
    11ea:	9c 91       	ld	r25, X
    11ec:	18 97       	sbiw	r26, 0x08	; 8
    11ee:	28 17       	cp	r18, r24
    11f0:	39 07       	cpc	r19, r25
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <nwkRxTaskHandler+0x19e>
    11f4:	5b c1       	rjmp	.+694    	; 0x14ac <nwkRxTaskHandler+0x454>
						nwkRouteRemove(
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    11f6:	1b 96       	adiw	r26, 0x0b	; 11
    11f8:	6c 91       	ld	r22, X
    11fa:	1b 97       	sbiw	r26, 0x0b	; 11
    11fc:	63 fb       	bst	r22, 3
    11fe:	66 27       	eor	r22, r22
    1200:	60 f9       	bld	r22, 0

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    1202:	1f 96       	adiw	r26, 0x0f	; 15
    1204:	8d 91       	ld	r24, X+
    1206:	9c 91       	ld	r25, X
    1208:	50 97       	sbiw	r26, 0x10	; 16
    120a:	90 dd       	rcall	.-1248   	; 0xd2c <nwkRouteRemove>
    120c:	4f c1       	rjmp	.+670    	; 0x14ac <nwkRxTaskHandler+0x454>
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    120e:	f9 01       	movw	r30, r18
    1210:	ee 0f       	add	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	ee 0f       	add	r30, r30
    1216:	ff 1f       	adc	r31, r31
    1218:	2e 0f       	add	r18, r30
    121a:	3f 1f       	adc	r19, r31
    121c:	f9 01       	movw	r30, r18
    121e:	ef 56       	subi	r30, 0x6F	; 111
    1220:	f8 4f       	sbci	r31, 0xF8	; 248
    1222:	96 01       	movw	r18, r12
    1224:	02 c0       	rjmp	.+4      	; 0x122a <nwkRxTaskHandler+0x1d2>
    1226:	22 0f       	add	r18, r18
    1228:	33 1f       	adc	r19, r19
    122a:	9a 95       	dec	r25
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <nwkRxTaskHandler+0x1ce>
    122e:	82 2b       	or	r24, r18
    1230:	83 83       	std	Z+3, r24	; 0x03
    1232:	43 c1       	rjmp	.+646    	; 0x14ba <nwkRxTaskHandler+0x462>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    1234:	f9 01       	movw	r30, r18
    1236:	ee 0f       	add	r30, r30
    1238:	ff 1f       	adc	r31, r31
    123a:	ee 0f       	add	r30, r30
    123c:	ff 1f       	adc	r31, r31
    123e:	2e 0f       	add	r18, r30
    1240:	3f 1f       	adc	r19, r31
    1242:	f9 01       	movw	r30, r18
    1244:	ef 56       	subi	r30, 0x6F	; 111
    1246:	f8 4f       	sbci	r31, 0xF8	; 248
    1248:	82 83       	std	Z+2, r24	; 0x02
				entry->mask = (entry->mask << shift) | 1;
    124a:	83 81       	ldd	r24, Z+3	; 0x03
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	91 95       	neg	r25
    1252:	a9 01       	movw	r20, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <nwkRxTaskHandler+0x202>
    1256:	44 0f       	add	r20, r20
    1258:	55 1f       	adc	r21, r21
    125a:	9a 95       	dec	r25
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <nwkRxTaskHandler+0x1fe>
    125e:	ca 01       	movw	r24, r20
    1260:	81 60       	ori	r24, 0x01	; 1
    1262:	83 83       	std	Z+3, r24	; 0x03
				entry->ttl = DUPLICATE_REJECTION_TTL;
    1264:	74 82       	std	Z+4, r7	; 0x04
    1266:	29 c1       	rjmp	.+594    	; 0x14ba <nwkRxTaskHandler+0x462>
				return false;
			}
		}

		if (0 == entry->ttl) {
			freeEntry = entry;
    1268:	4f 01       	movw	r8, r30
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    126e:	8a 30       	cpi	r24, 0x0A	; 10
    1270:	91 05       	cpc	r25, r1
    1272:	09 f0       	breq	.+2      	; 0x1276 <nwkRxTaskHandler+0x21e>
    1274:	80 cf       	rjmp	.-256    	; 0x1176 <nwkRxTaskHandler+0x11e>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    1276:	81 14       	cp	r8, r1
    1278:	91 04       	cpc	r9, r1
    127a:	09 f4       	brne	.+2      	; 0x127e <nwkRxTaskHandler+0x226>
    127c:	17 c1       	rjmp	.+558    	; 0x14ac <nwkRxTaskHandler+0x454>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    127e:	d8 01       	movw	r26, r16
    1280:	1d 96       	adiw	r26, 0x0d	; 13
    1282:	8d 91       	ld	r24, X+
    1284:	9c 91       	ld	r25, X
    1286:	1e 97       	sbiw	r26, 0x0e	; 14
    1288:	f4 01       	movw	r30, r8
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	80 83       	st	Z, r24
	freeEntry->seq = header->nwkSeq;
    128e:	1c 96       	adiw	r26, 0x0c	; 12
    1290:	8c 91       	ld	r24, X
    1292:	82 83       	std	Z+2, r24	; 0x02
	freeEntry->mask = 1;
    1294:	a3 82       	std	Z+3, r10	; 0x03
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1296:	74 82       	std	Z+4, r7	; 0x04

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1298:	83 e8       	ldi	r24, 0x83	; 131
    129a:	97 e0       	ldi	r25, 0x07	; 7
    129c:	9d d6       	rcall	.+3386   	; 0x1fd8 <SYS_TimerStart>
    129e:	0d c1       	rjmp	.+538    	; 0x14ba <nwkRxTaskHandler+0x462>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    12a0:	d7 01       	movw	r26, r14
    12a2:	2d 91       	ld	r18, X+
    12a4:	3c 91       	ld	r19, X
				header->nwkDstAddr &&
    12a6:	f8 01       	movw	r30, r16
    12a8:	87 85       	ldd	r24, Z+15	; 0x0f
    12aa:	90 89       	ldd	r25, Z+16	; 0x10
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    12ac:	28 17       	cp	r18, r24
    12ae:	39 07       	cpc	r19, r25
    12b0:	81 f0       	breq	.+32     	; 0x12d2 <nwkRxTaskHandler+0x27a>
				header->nwkDstAddr &&
    12b2:	43 85       	ldd	r20, Z+11	; 0x0b
    12b4:	42 fd       	sbrc	r20, 2
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    12b6:	0b c0       	rjmp	.+22     	; 0x12ce <nwkRxTaskHandler+0x276>
    12b8:	c8 01       	movw	r24, r16
    12ba:	3b d3       	rcall	.+1654   	; 0x1932 <nwkTxBroadcastFrame>
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    12bc:	d7 01       	movw	r26, r14
    12be:	2d 91       	ld	r18, X+
    12c0:	3c 91       	ld	r19, X
    12c2:	f8 01       	movw	r30, r16
    12c4:	87 85       	ldd	r24, Z+15	; 0x0f
    12c6:	90 89       	ldd	r25, Z+16	; 0x10
    12c8:	28 17       	cp	r18, r24
    12ca:	39 07       	cpc	r19, r25
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <nwkRxTaskHandler+0x27a>
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	69 f4       	brne	.+26     	; 0x12ec <nwkRxTaskHandler+0x294>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    12d2:	d8 01       	movw	r26, r16
    12d4:	1b 96       	adiw	r26, 0x0b	; 11
    12d6:	8c 91       	ld	r24, X
    12d8:	1b 97       	sbiw	r26, 0x0b	; 11
    12da:	81 ff       	sbrs	r24, 1
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <nwkRxTaskHandler+0x28c>
				frame->state = NWK_RX_STATE_DECRYPT;
    12de:	e1 e2       	ldi	r30, 0x21	; 33
    12e0:	ec 93       	st	X, r30
    12e2:	e4 c0       	rjmp	.+456    	; 0x14ac <nwkRxTaskHandler+0x454>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    12e4:	e2 e2       	ldi	r30, 0x22	; 34
    12e6:	d8 01       	movw	r26, r16
    12e8:	ec 93       	st	X, r30
    12ea:	e0 c0       	rjmp	.+448    	; 0x14ac <nwkRxTaskHandler+0x454>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    12ec:	d8 01       	movw	r26, r16
    12ee:	17 96       	adiw	r26, 0x07	; 7
    12f0:	8d 91       	ld	r24, X+
    12f2:	9c 91       	ld	r25, X
    12f4:	18 97       	sbiw	r26, 0x08	; 8
    12f6:	82 17       	cp	r24, r18
    12f8:	93 07       	cpc	r25, r19
    12fa:	09 f0       	breq	.+2      	; 0x12fe <nwkRxTaskHandler+0x2a6>
    12fc:	d7 c0       	rjmp	.+430    	; 0x14ac <nwkRxTaskHandler+0x454>
			frame->state = NWK_RX_STATE_ROUTE;
    12fe:	e3 e2       	ldi	r30, 0x23	; 35
    1300:	ec 93       	st	X, r30
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    1302:	d4 c0       	rjmp	.+424    	; 0x14ac <nwkRxTaskHandler+0x454>
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	c8 01       	movw	r24, r16
    1308:	ff d0       	rcall	.+510    	; 0x1508 <nwkSecurityProcess>
		}
		break;
    130a:	d0 c0       	rjmp	.+416    	; 0x14ac <nwkRxTaskHandler+0x454>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    130c:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    1310:	d8 01       	movw	r26, r16
    1312:	51 96       	adiw	r26, 0x11	; 17
    1314:	8c 91       	ld	r24, X
    1316:	51 97       	sbiw	r26, 0x11	; 17
    1318:	82 95       	swap	r24
    131a:	8f 70       	andi	r24, 0x0F	; 15
    131c:	e8 2f       	mov	r30, r24
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	e8 52       	subi	r30, 0x28	; 40
    1326:	f6 4f       	sbci	r31, 0xF6	; 246
    1328:	01 90       	ld	r0, Z+
    132a:	f0 81       	ld	r31, Z
    132c:	e0 2d       	mov	r30, r0
    132e:	30 97       	sbiw	r30, 0x00	; 0
    1330:	09 f4       	brne	.+2      	; 0x1334 <nwkRxTaskHandler+0x2dc>
    1332:	60 c0       	rjmp	.+192    	; 0x13f4 <nwkRxTaskHandler+0x39c>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    1334:	1d 96       	adiw	r26, 0x0d	; 13
    1336:	2d 91       	ld	r18, X+
    1338:	3c 91       	ld	r19, X
    133a:	1e 97       	sbiw	r26, 0x0e	; 14
    133c:	3a 83       	std	Y+2, r19	; 0x02
    133e:	29 83       	std	Y+1, r18	; 0x01
	ind.dstAddr = header->nwkDstAddr;
    1340:	1f 96       	adiw	r26, 0x0f	; 15
    1342:	4d 91       	ld	r20, X+
    1344:	5c 91       	ld	r21, X
    1346:	50 97       	sbiw	r26, 0x10	; 16
    1348:	5c 83       	std	Y+4, r21	; 0x04
    134a:	4b 83       	std	Y+3, r20	; 0x03
	ind.srcEndpoint = header->nwkSrcEndpoint;
    134c:	51 96       	adiw	r26, 0x11	; 17
    134e:	9c 91       	ld	r25, X
    1350:	51 97       	sbiw	r26, 0x11	; 17
    1352:	9f 70       	andi	r25, 0x0F	; 15
    1354:	9d 83       	std	Y+5, r25	; 0x05
	ind.dstEndpoint = header->nwkDstEndpoint;
    1356:	8e 83       	std	Y+6, r24	; 0x06
	ind.data = frame->payload;
    1358:	af 57       	subi	r26, 0x7F	; 127
    135a:	bf 4f       	sbci	r27, 0xFF	; 255
    135c:	8d 91       	ld	r24, X+
    135e:	9c 91       	ld	r25, X
    1360:	99 87       	std	Y+9, r25	; 0x09
    1362:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    1364:	b8 01       	movw	r22, r16
    1366:	6e 5f       	subi	r22, 0xFE	; 254
    1368:	7f 4f       	sbci	r23, 0xFF	; 255
	ind.size = nwkFramePayloadSize(frame);
    136a:	86 1b       	sub	r24, r22
    136c:	97 0b       	sbc	r25, r23
    136e:	d8 01       	movw	r26, r16
    1370:	11 96       	adiw	r26, 0x01	; 1
    1372:	9c 91       	ld	r25, X
    1374:	11 97       	sbiw	r26, 0x01	; 1
    1376:	98 1b       	sub	r25, r24
    1378:	9a 87       	std	Y+10, r25	; 0x0a
	ind.lqi = frame->rx.lqi;
    137a:	ad 57       	subi	r26, 0x7D	; 125
    137c:	bf 4f       	sbci	r27, 0xFF	; 255
    137e:	8c 91       	ld	r24, X
    1380:	8b 87       	std	Y+11, r24	; 0x0b
	ind.rssi = frame->rx.rssi;
    1382:	11 96       	adiw	r26, 0x01	; 1
    1384:	8c 91       	ld	r24, X
    1386:	8c 87       	std	Y+12, r24	; 0x0c

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1388:	d8 01       	movw	r26, r16
    138a:	1b 96       	adiw	r26, 0x0b	; 11
    138c:	9c 91       	ld	r25, X
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    138e:	69 2f       	mov	r22, r25
    1390:	63 70       	andi	r22, 0x03	; 3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1392:	92 fd       	sbrc	r25, 2
    1394:	02 c0       	rjmp	.+4      	; 0x139a <nwkRxTaskHandler+0x342>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	01 c0       	rjmp	.+2      	; 0x139c <nwkRxTaskHandler+0x344>
    139a:	80 e2       	ldi	r24, 0x20	; 32
    139c:	86 2b       	or	r24, r22
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    139e:	93 fd       	sbrc	r25, 3
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <nwkRxTaskHandler+0x34e>
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <nwkRxTaskHandler+0x350>
    13a6:	90 e4       	ldi	r25, 0x40	; 64
    13a8:	89 2b       	or	r24, r25
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    13aa:	4f 3f       	cpi	r20, 0xFF	; 255
    13ac:	5f 4f       	sbci	r21, 0xFF	; 255
    13ae:	11 f0       	breq	.+4      	; 0x13b4 <nwkRxTaskHandler+0x35c>
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <nwkRxTaskHandler+0x35e>
    13b4:	94 2d       	mov	r25, r4
    13b6:	89 2b       	or	r24, r25
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    13b8:	d8 01       	movw	r26, r16
    13ba:	19 96       	adiw	r26, 0x09	; 9
    13bc:	4d 91       	ld	r20, X+
    13be:	5c 91       	ld	r21, X
    13c0:	1a 97       	sbiw	r26, 0x0a	; 10
    13c2:	24 17       	cp	r18, r20
    13c4:	35 07       	cpc	r19, r21
    13c6:	11 f0       	breq	.+4      	; 0x13cc <nwkRxTaskHandler+0x374>
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <nwkRxTaskHandler+0x376>
    13cc:	95 2d       	mov	r25, r5
    13ce:	89 2b       	or	r24, r25
    13d0:	8f 83       	std	Y+7, r24	; 0x07
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    13d2:	d8 01       	movw	r26, r16
    13d4:	15 96       	adiw	r26, 0x05	; 5
    13d6:	2d 91       	ld	r18, X+
    13d8:	3c 91       	ld	r19, X
    13da:	16 97       	sbiw	r26, 0x06	; 6
    13dc:	2f 3f       	cpi	r18, 0xFF	; 255
    13de:	3f 4f       	sbci	r19, 0xFF	; 255
    13e0:	11 f0       	breq	.+4      	; 0x13e6 <nwkRxTaskHandler+0x38e>
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <nwkRxTaskHandler+0x390>
    13e6:	96 2d       	mov	r25, r6
    13e8:	89 2b       	or	r24, r25
    13ea:	8f 83       	std	Y+7, r24	; 0x07
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    13ec:	ce 01       	movw	r24, r28
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	19 95       	eicall
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <nwkRxTaskHandler+0x39e>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    13f4:	80 e0       	ldi	r24, 0x00	; 0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    13f6:	f8 01       	movw	r30, r16
    13f8:	93 85       	ldd	r25, Z+11	; 0x0b
    13fa:	90 ff       	sbrs	r25, 0
		ack = false;
    13fc:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    13fe:	d8 01       	movw	r26, r16
    1400:	17 96       	adiw	r26, 0x07	; 7
    1402:	2d 91       	ld	r18, X+
    1404:	3c 91       	ld	r19, X
    1406:	18 97       	sbiw	r26, 0x08	; 8
    1408:	2f 3f       	cpi	r18, 0xFF	; 255
    140a:	3f 4f       	sbci	r19, 0xFF	; 255
    140c:	69 f4       	brne	.+26     	; 0x1428 <nwkRxTaskHandler+0x3d0>
    140e:	f7 01       	movw	r30, r14
    1410:	40 81       	ld	r20, Z
    1412:	51 81       	ldd	r21, Z+1	; 0x01
    1414:	d8 01       	movw	r26, r16
    1416:	1f 96       	adiw	r26, 0x0f	; 15
    1418:	2d 91       	ld	r18, X+
    141a:	3c 91       	ld	r19, X
    141c:	50 97       	sbiw	r26, 0x10	; 16
    141e:	42 17       	cp	r20, r18
    1420:	53 07       	cpc	r21, r19
    1422:	11 f4       	brne	.+4      	; 0x1428 <nwkRxTaskHandler+0x3d0>
			nwkIb.addr == frame->header.nwkDstAddr &&
    1424:	93 ff       	sbrs	r25, 3
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    1426:	8a 2d       	mov	r24, r10
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    1428:	f8 01       	movw	r30, r16
    142a:	25 81       	ldd	r18, Z+5	; 0x05
    142c:	36 81       	ldd	r19, Z+6	; 0x06
    142e:	2f 3f       	cpi	r18, 0xFF	; 255
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	a1 f1       	breq	.+104    	; 0x149c <nwkRxTaskHandler+0x444>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    1434:	d7 01       	movw	r26, r14
    1436:	2d 91       	ld	r18, X+
    1438:	3c 91       	ld	r19, X
    143a:	2f 3f       	cpi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
		ack = false;
	}

	if (ack) {
    143e:	71 f1       	breq	.+92     	; 0x149c <nwkRxTaskHandler+0x444>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    1440:	88 23       	and	r24, r24
    1442:	61 f1       	breq	.+88     	; 0x149c <nwkRxTaskHandler+0x444>
    1444:	72 db       	rcall	.-2332   	; 0xb2a <nwkFrameAlloc>
    1446:	4c 01       	movw	r8, r24
    1448:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}

	nwkFrameCommandInit(ack);
    144a:	41 f1       	breq	.+80     	; 0x149c <nwkRxTaskHandler+0x444>
    144c:	d3 db       	rcall	.-2138   	; 0xbf4 <nwkFrameCommandInit>

	ack->size += sizeof(NwkCommandAck_t);
    144e:	f4 01       	movw	r30, r8
    1450:	81 81       	ldd	r24, Z+1	; 0x01
    1452:	8d 5f       	subi	r24, 0xFD	; 253
    1454:	81 83       	std	Z+1, r24	; 0x01
	ack->tx.confirm = NULL;
    1456:	e9 57       	subi	r30, 0x79	; 121
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	11 82       	std	Z+1, r1	; 0x01
    145c:	10 82       	st	Z, r1

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    145e:	d8 01       	movw	r26, r16
    1460:	1b 96       	adiw	r26, 0x0b	; 11
    1462:	8c 91       	ld	r24, X
    1464:	1b 97       	sbiw	r26, 0x0b	; 11
    1466:	86 95       	lsr	r24
    1468:	81 70       	andi	r24, 0x01	; 1
    146a:	f4 01       	movw	r30, r8
    146c:	93 85       	ldd	r25, Z+11	; 0x0b
    146e:	80 fb       	bst	r24, 0
    1470:	91 f9       	bld	r25, 1
    1472:	93 87       	std	Z+11, r25	; 0x0b
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1474:	1d 96       	adiw	r26, 0x0d	; 13
    1476:	8d 91       	ld	r24, X+
    1478:	9c 91       	ld	r25, X
    147a:	1e 97       	sbiw	r26, 0x0e	; 14
    147c:	90 8b       	std	Z+16, r25	; 0x10
    147e:	87 87       	std	Z+15, r24	; 0x0f

	command = (NwkCommandAck_t *)ack->payload;
    1480:	ef 57       	subi	r30, 0x7F	; 127
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	01 90       	ld	r0, Z+
    1486:	f0 81       	ld	r31, Z
    1488:	e0 2d       	mov	r30, r0
	command->id = NWK_COMMAND_ACK;
    148a:	10 82       	st	Z, r1
	command->control = nwkRxAckControl;
    148c:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <nwkRxAckControl>
	command->seq = frame->header.nwkSeq;
    1490:	82 83       	std	Z+2, r24	; 0x02
    1492:	1c 96       	adiw	r26, 0x0c	; 12

	nwkTxFrame(ack);
    1494:	8c 91       	ld	r24, X
    1496:	81 83       	std	Z+1, r24	; 0x01

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    1498:	c4 01       	movw	r24, r8
    149a:	f6 d1       	rcall	.+1004   	; 0x1888 <nwkTxFrame>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    149c:	d8 01       	movw	r26, r16
    149e:	bc 92       	st	X, r11
    14a0:	05 c0       	rjmp	.+10     	; 0x14ac <nwkRxTaskHandler+0x454>
		}
		break;
    14a2:	c8 01       	movw	r24, r16
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    14a4:	fd dc       	rcall	.-1542   	; 0xea0 <nwkRouteFrame>
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <nwkRxTaskHandler+0x454>
    14a8:	c8 01       	movw	r24, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    14aa:	75 db       	rcall	.-2326   	; 0xb96 <nwkFrameFree>
    14ac:	c8 01       	movw	r24, r16
    14ae:	7d db       	rcall	.-2310   	; 0xbaa <nwkFrameNext>
    14b0:	8c 01       	movw	r16, r24
    14b2:	89 2b       	or	r24, r25
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <nwkRxTaskHandler+0x460>
    14b6:	0b ce       	rjmp	.-1002   	; 0x10ce <nwkRxTaskHandler+0x76>
    14b8:	07 c0       	rjmp	.+14     	; 0x14c8 <nwkRxTaskHandler+0x470>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    14ba:	f8 01       	movw	r30, r16
    14bc:	87 81       	ldd	r24, Z+7	; 0x07
    14be:	90 85       	ldd	r25, Z+8	; 0x08
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <nwkRxTaskHandler+0x46e>
    14c4:	fb ce       	rjmp	.-522    	; 0x12bc <nwkRxTaskHandler+0x264>
    14c6:	ec ce       	rjmp	.-552    	; 0x12a0 <nwkRxTaskHandler+0x248>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    14c8:	2c 96       	adiw	r28, 0x0c	; 12
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	ef 90       	pop	r14
    14e0:	df 90       	pop	r13
    14e2:	cf 90       	pop	r12
    14e4:	bf 90       	pop	r11
    14e6:	af 90       	pop	r10
    14e8:	9f 90       	pop	r9
    14ea:	8f 90       	pop	r8
    14ec:	7f 90       	pop	r7
    14ee:	6f 90       	pop	r6
    14f0:	5f 90       	pop	r5
    14f2:	4f 90       	pop	r4
    14f4:	3f 90       	pop	r3
    14f6:	2f 90       	pop	r2
    14f8:	08 95       	ret

000014fa <nwkSecurityInit>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    14fa:	10 92 d8 07 	sts	0x07D8, r1	; 0x8007d8 <nwkSecurityActiveFrames>
    14fe:	10 92 d7 07 	sts	0x07D7, r1	; 0x8007d7 <nwkSecurityActiveFrame+0x1>
    1502:	10 92 d6 07 	sts	0x07D6, r1	; 0x8007d6 <nwkSecurityActiveFrame>
    1506:	08 95       	ret

00001508 <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    1508:	66 23       	and	r22, r22
    150a:	21 f0       	breq	.+8      	; 0x1514 <nwkSecurityProcess+0xc>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    150c:	20 e3       	ldi	r18, 0x30	; 48
    150e:	fc 01       	movw	r30, r24
    1510:	20 83       	st	Z, r18
    1512:	03 c0       	rjmp	.+6      	; 0x151a <nwkSecurityProcess+0x12>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    1514:	21 e3       	ldi	r18, 0x31	; 49
    1516:	fc 01       	movw	r30, r24
    1518:	20 83       	st	Z, r18
	}

	++nwkSecurityActiveFrames;
    151a:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <nwkSecurityActiveFrames>
    151e:	8f 5f       	subi	r24, 0xFF	; 255
    1520:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <nwkSecurityActiveFrames>
    1524:	08 95       	ret

00001526 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    152a:	c0 91 d6 07 	lds	r28, 0x07D6	; 0x8007d6 <nwkSecurityActiveFrame>
    152e:	d0 91 d7 07 	lds	r29, 0x07D7	; 0x8007d7 <nwkSecurityActiveFrame+0x1>
    1532:	fe 01       	movw	r30, r28
    1534:	ef 57       	subi	r30, 0x7F	; 127
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	a0 81       	ld	r26, Z
    153a:	b1 81       	ldd	r27, Z+1	; 0x01
    153c:	70 91 d4 07 	lds	r23, 0x07D4	; 0x8007d4 <nwkSecurityOffset>
    1540:	87 2f       	mov	r24, r23
    1542:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t block;

	block
		= (nwkSecuritySize <
    1544:	50 91 d5 07 	lds	r21, 0x07D5	; 0x8007d5 <nwkSecuritySize>
    1548:	65 2f       	mov	r22, r21
    154a:	51 31       	cpi	r21, 0x11	; 17
    154c:	08 f0       	brcs	.+2      	; 0x1550 <SYS_EncryptConf+0x2a>
    154e:	60 e1       	ldi	r22, 0x10	; 16
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    1550:	66 23       	and	r22, r22
    1552:	d1 f0       	breq	.+52     	; 0x1588 <SYS_EncryptConf+0x62>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    1554:	40 91 d3 07 	lds	r20, 0x07D3	; 0x8007d3 <nwkSecurityEncrypt>
    1558:	e3 ec       	ldi	r30, 0xC3	; 195
    155a:	f7 e0       	ldi	r31, 0x07	; 7
    155c:	a8 0f       	add	r26, r24
    155e:	b9 1f       	adc	r27, r25
    1560:	2f ef       	ldi	r18, 0xFF	; 255
    1562:	26 0f       	add	r18, r22
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	2c 53       	subi	r18, 0x3C	; 60
    1568:	38 4f       	sbci	r19, 0xF8	; 248
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    156a:	9c 91       	ld	r25, X
    156c:	80 81       	ld	r24, Z
    156e:	89 27       	eor	r24, r25
    1570:	8d 93       	st	X+, r24

		if (nwkSecurityEncrypt) {
    1572:	44 23       	and	r20, r20
    1574:	11 f0       	breq	.+4      	; 0x157a <SYS_EncryptConf+0x54>
			vector[i] = text[i];
    1576:	80 83       	st	Z, r24
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <SYS_EncryptConf+0x5a>
		} else {
			vector[i] ^= text[i];
    157a:	90 81       	ld	r25, Z
    157c:	89 27       	eor	r24, r25
    157e:	80 83       	st	Z, r24
    1580:	31 96       	adiw	r30, 0x01	; 1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    1582:	e2 17       	cp	r30, r18
    1584:	f3 07       	cpc	r31, r19
    1586:	89 f7       	brne	.-30     	; 0x156a <SYS_EncryptConf+0x44>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    1588:	76 0f       	add	r23, r22
    158a:	70 93 d4 07 	sts	0x07D4, r23	; 0x8007d4 <nwkSecurityOffset>
	nwkSecuritySize -= block;
    158e:	56 1b       	sub	r21, r22
    1590:	50 93 d5 07 	sts	0x07D5, r21	; 0x8007d5 <nwkSecuritySize>

	if (nwkSecuritySize > 0) {
    1594:	55 23       	and	r21, r21
    1596:	19 f0       	breq	.+6      	; 0x159e <SYS_EncryptConf+0x78>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    1598:	82 e3       	ldi	r24, 0x32	; 50
    159a:	88 83       	st	Y, r24
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <SYS_EncryptConf+0x7c>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    159e:	84 e3       	ldi	r24, 0x34	; 52
    15a0:	88 83       	st	Y, r24
	}
}
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	08 95       	ret

000015a8 <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    15b0:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <nwkSecurityActiveFrames>
    15b4:	88 23       	and	r24, r24
    15b6:	09 f4       	brne	.+2      	; 0x15ba <nwkSecurityTaskHandler+0x12>
    15b8:	e1 c0       	rjmp	.+450    	; 0x177c <nwkSecurityTaskHandler+0x1d4>
		return;
	}

	if (nwkSecurityActiveFrame) {
    15ba:	e0 91 d6 07 	lds	r30, 0x07D6	; 0x8007d6 <nwkSecurityActiveFrame>
    15be:	f0 91 d7 07 	lds	r31, 0x07D7	; 0x8007d7 <nwkSecurityActiveFrame+0x1>
    15c2:	30 97       	sbiw	r30, 0x00	; 0
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <nwkSecurityTaskHandler+0x20>
    15c6:	d4 c0       	rjmp	.+424    	; 0x1770 <nwkSecurityTaskHandler+0x1c8>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    15c8:	80 81       	ld	r24, Z
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    15ca:	84 33       	cpi	r24, 0x34	; 52
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <nwkSecurityTaskHandler+0x28>
    15ce:	55 c0       	rjmp	.+170    	; 0x167a <nwkSecurityTaskHandler+0xd2>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    15d0:	80 91 d4 07 	lds	r24, 0x07D4	; 0x8007d4 <nwkSecurityOffset>
    15d4:	df 01       	movw	r26, r30
    15d6:	af 57       	subi	r26, 0x7F	; 127
    15d8:	bf 4f       	sbci	r27, 0xFF	; 255
    15da:	cd 91       	ld	r28, X+
    15dc:	dc 91       	ld	r29, X
    15de:	c8 0f       	add	r28, r24
    15e0:	d1 1d       	adc	r29, r1
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    15e2:	a3 ec       	ldi	r26, 0xC3	; 195
    15e4:	b7 e0       	ldi	r27, 0x07	; 7
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    15e6:	0d 91       	ld	r16, X+
    15e8:	1d 91       	ld	r17, X+
    15ea:	2d 91       	ld	r18, X+
    15ec:	3c 91       	ld	r19, X
    15ee:	13 97       	sbiw	r26, 0x03	; 3
    15f0:	14 96       	adiw	r26, 0x04	; 4
    15f2:	4d 91       	ld	r20, X+
    15f4:	5d 91       	ld	r21, X+
    15f6:	6d 91       	ld	r22, X+
    15f8:	7c 91       	ld	r23, X
    15fa:	17 97       	sbiw	r26, 0x07	; 7
    15fc:	04 27       	eor	r16, r20
    15fe:	15 27       	eor	r17, r21
    1600:	26 27       	eor	r18, r22
    1602:	37 27       	eor	r19, r23
    1604:	18 96       	adiw	r26, 0x08	; 8
    1606:	4d 91       	ld	r20, X+
    1608:	5d 91       	ld	r21, X+
    160a:	6d 91       	ld	r22, X+
    160c:	7c 91       	ld	r23, X
    160e:	1b 97       	sbiw	r26, 0x0b	; 11
    1610:	04 27       	eor	r16, r20
    1612:	15 27       	eor	r17, r21
    1614:	26 27       	eor	r18, r22
    1616:	37 27       	eor	r19, r23
    1618:	1c 96       	adiw	r26, 0x0c	; 12
    161a:	4d 91       	ld	r20, X+
    161c:	5d 91       	ld	r21, X+
    161e:	6d 91       	ld	r22, X+
    1620:	7c 91       	ld	r23, X
    1622:	1f 97       	sbiw	r26, 0x0f	; 15
    1624:	d9 01       	movw	r26, r18
    1626:	c8 01       	movw	r24, r16
    1628:	84 27       	eor	r24, r20
    162a:	95 27       	eor	r25, r21
    162c:	a6 27       	eor	r26, r22
    162e:	b7 27       	eor	r27, r23
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    1630:	20 91 d3 07 	lds	r18, 0x07D3	; 0x8007d3 <nwkSecurityEncrypt>
    1634:	22 23       	and	r18, r18
    1636:	51 f0       	breq	.+20     	; 0x164c <nwkSecurityTaskHandler+0xa4>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    1638:	88 83       	st	Y, r24
    163a:	99 83       	std	Y+1, r25	; 0x01
    163c:	aa 83       	std	Y+2, r26	; 0x02
    163e:	bb 83       	std	Y+3, r27	; 0x03
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    1640:	81 81       	ldd	r24, Z+1	; 0x01
    1642:	8c 5f       	subi	r24, 0xFC	; 252
    1644:	81 83       	std	Z+1, r24	; 0x01
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    1646:	cf 01       	movw	r24, r30
    1648:	de d1       	rcall	.+956    	; 0x1a06 <nwkTxEncryptConf>
    164a:	0d c0       	rjmp	.+26     	; 0x1666 <nwkSecurityTaskHandler+0xbe>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    164c:	61 e0       	ldi	r22, 0x01	; 1
    164e:	08 81       	ld	r16, Y
    1650:	19 81       	ldd	r17, Y+1	; 0x01
    1652:	2a 81       	ldd	r18, Y+2	; 0x02
    1654:	3b 81       	ldd	r19, Y+3	; 0x03
    1656:	08 17       	cp	r16, r24
    1658:	19 07       	cpc	r17, r25
    165a:	2a 07       	cpc	r18, r26
    165c:	3b 07       	cpc	r19, r27
    165e:	09 f0       	breq	.+2      	; 0x1662 <nwkSecurityTaskHandler+0xba>
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	cf 01       	movw	r24, r30
    1664:	ef dc       	rcall	.-1570   	; 0x1044 <nwkRxDecryptConf>
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    1666:	10 92 d7 07 	sts	0x07D7, r1	; 0x8007d7 <nwkSecurityActiveFrame+0x1>
    166a:	10 92 d6 07 	sts	0x07D6, r1	; 0x8007d6 <nwkSecurityActiveFrame>
			--nwkSecurityActiveFrames;
    166e:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <nwkSecurityActiveFrames>
    1672:	81 50       	subi	r24, 0x01	; 1
    1674:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <nwkSecurityActiveFrames>
    1678:	81 c0       	rjmp	.+258    	; 0x177c <nwkSecurityTaskHandler+0x1d4>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    167a:	82 33       	cpi	r24, 0x32	; 50
    167c:	09 f0       	breq	.+2      	; 0x1680 <nwkSecurityTaskHandler+0xd8>
    167e:	7e c0       	rjmp	.+252    	; 0x177c <nwkSecurityTaskHandler+0x1d4>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    1680:	83 e3       	ldi	r24, 0x33	; 51
    1682:	80 83       	st	Z, r24
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    1684:	68 ef       	ldi	r22, 0xF8	; 248
    1686:	79 e0       	ldi	r23, 0x09	; 9
    1688:	83 ec       	ldi	r24, 0xC3	; 195
    168a:	97 e0       	ldi	r25, 0x07	; 7
    168c:	cc d3       	rcall	.+1944   	; 0x1e26 <SYS_EncryptReq>
    168e:	76 c0       	rjmp	.+236    	; 0x177c <nwkSecurityTaskHandler+0x1d4>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    1690:	dc 01       	movw	r26, r24
    1692:	2c 91       	ld	r18, X
    1694:	20 53       	subi	r18, 0x30	; 48
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	08 f0       	brcs	.+2      	; 0x169c <nwkSecurityTaskHandler+0xf4>
    169a:	6c c0       	rjmp	.+216    	; 0x1774 <nwkSecurityTaskHandler+0x1cc>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    169c:	90 93 d7 07 	sts	0x07D7, r25	; 0x8007d7 <nwkSecurityActiveFrame+0x1>
    16a0:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <nwkSecurityActiveFrame>
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    16a4:	e3 ec       	ldi	r30, 0xC3	; 195
    16a6:	f7 e0       	ldi	r31, 0x07	; 7
    16a8:	1c 96       	adiw	r26, 0x0c	; 12
    16aa:	4c 91       	ld	r20, X
    16ac:	1c 97       	sbiw	r26, 0x0c	; 12
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	40 83       	st	Z, r20
    16b6:	51 83       	std	Z+1, r21	; 0x01
    16b8:	62 83       	std	Z+2, r22	; 0x02
    16ba:	73 83       	std	Z+3, r23	; 0x03
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    16bc:	1f 96       	adiw	r26, 0x0f	; 15
    16be:	4d 91       	ld	r20, X+
    16c0:	5c 91       	ld	r21, X
    16c2:	50 97       	sbiw	r26, 0x10	; 16
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	70 e0       	ldi	r23, 0x00	; 0
    16c8:	ba 01       	movw	r22, r20
    16ca:	55 27       	eor	r21, r21
    16cc:	44 27       	eor	r20, r20
			16) | header->nwkDstEndpoint;
    16ce:	51 96       	adiw	r26, 0x11	; 17
    16d0:	2c 91       	ld	r18, X
    16d2:	51 97       	sbiw	r26, 0x11	; 17
    16d4:	22 95       	swap	r18
    16d6:	2f 70       	andi	r18, 0x0F	; 15
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    16d8:	42 2b       	or	r20, r18
    16da:	44 83       	std	Z+4, r20	; 0x04
    16dc:	55 83       	std	Z+5, r21	; 0x05
    16de:	66 83       	std	Z+6, r22	; 0x06
    16e0:	77 83       	std	Z+7, r23	; 0x07
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    16e2:	1d 96       	adiw	r26, 0x0d	; 13
    16e4:	4d 91       	ld	r20, X+
    16e6:	5c 91       	ld	r21, X
    16e8:	1e 97       	sbiw	r26, 0x0e	; 14
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	ba 01       	movw	r22, r20
    16f0:	55 27       	eor	r21, r21
    16f2:	44 27       	eor	r20, r20
			16) | header->nwkSrcEndpoint;
    16f4:	51 96       	adiw	r26, 0x11	; 17
    16f6:	2c 91       	ld	r18, X
    16f8:	51 97       	sbiw	r26, 0x11	; 17
    16fa:	2f 70       	andi	r18, 0x0F	; 15
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    16fc:	42 2b       	or	r20, r18
    16fe:	40 87       	std	Z+8, r20	; 0x08
    1700:	51 87       	std	Z+9, r21	; 0x09
    1702:	62 87       	std	Z+10, r22	; 0x0a
    1704:	73 87       	std	Z+11, r23	; 0x0b
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    1706:	15 96       	adiw	r26, 0x05	; 5
    1708:	4d 91       	ld	r20, X+
    170a:	5c 91       	ld	r21, X
    170c:	16 97       	sbiw	r26, 0x06	; 6
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	ba 01       	movw	r22, r20
    1714:	55 27       	eor	r21, r21
    1716:	44 27       	eor	r20, r20
    1718:	1b 96       	adiw	r26, 0x0b	; 11
    171a:	2c 91       	ld	r18, X
    171c:	1b 97       	sbiw	r26, 0x0b	; 11
    171e:	42 2b       	or	r20, r18
    1720:	44 87       	std	Z+12, r20	; 0x0c
    1722:	55 87       	std	Z+13, r21	; 0x0d
    1724:	66 87       	std	Z+14, r22	; 0x0e
    1726:	77 87       	std	Z+15, r23	; 0x0f
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
			nwkSecurityActiveFrame->state) {
    1728:	6c 91       	ld	r22, X
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    172a:	61 33       	cpi	r22, 0x31	; 49
    172c:	31 f4       	brne	.+12     	; 0x173a <nwkSecurityTaskHandler+0x192>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    172e:	11 96       	adiw	r26, 0x01	; 1
    1730:	2c 91       	ld	r18, X
    1732:	11 97       	sbiw	r26, 0x01	; 1
    1734:	24 50       	subi	r18, 0x04	; 4
    1736:	11 96       	adiw	r26, 0x01	; 1
    1738:	2c 93       	st	X, r18
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    173a:	fc 01       	movw	r30, r24
    173c:	ef 57       	subi	r30, 0x7F	; 127
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	40 81       	ld	r20, Z
    1742:	51 81       	ldd	r21, Z+1	; 0x01
    1744:	9c 01       	movw	r18, r24
    1746:	2e 5f       	subi	r18, 0xFE	; 254
    1748:	3f 4f       	sbci	r19, 0xFF	; 255
    174a:	42 1b       	sub	r20, r18
    174c:	53 0b       	sbc	r21, r19
    174e:	fc 01       	movw	r30, r24
    1750:	21 81       	ldd	r18, Z+1	; 0x01
    1752:	24 1b       	sub	r18, r20
    1754:	20 93 d5 07 	sts	0x07D5, r18	; 0x8007d5 <nwkSecuritySize>
	nwkSecurityOffset = 0;
    1758:	10 92 d4 07 	sts	0x07D4, r1	; 0x8007d4 <nwkSecurityOffset>
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    175c:	21 e0       	ldi	r18, 0x01	; 1
    175e:	60 33       	cpi	r22, 0x30	; 48
    1760:	09 f0       	breq	.+2      	; 0x1764 <nwkSecurityTaskHandler+0x1bc>
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	20 93 d3 07 	sts	0x07D3, r18	; 0x8007d3 <nwkSecurityEncrypt>
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    1768:	22 e3       	ldi	r18, 0x32	; 50
    176a:	dc 01       	movw	r26, r24
    176c:	2c 93       	st	X, r18
    176e:	06 c0       	rjmp	.+12     	; 0x177c <nwkSecurityTaskHandler+0x1d4>
    1770:	80 e0       	ldi	r24, 0x00	; 0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	1a da       	rcall	.-3020   	; 0xbaa <nwkFrameNext>
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	09 f0       	breq	.+2      	; 0x177c <nwkSecurityTaskHandler+0x1d4>
    177a:	8a cf       	rjmp	.-236    	; 0x1690 <nwkSecurityTaskHandler+0xe8>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	08 95       	ret

00001786 <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
	frame->tx.status = status;
    1786:	ef 92       	push	r14
    1788:	ff 92       	push	r15
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	cf 93       	push	r28
    1790:	7c 01       	movw	r14, r24
    1792:	10 e0       	ldi	r17, 0x00	; 0
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	01 e0       	ldi	r16, 0x01	; 1
    179a:	c3 e1       	ldi	r28, 0x13	; 19
    179c:	13 c0       	rjmp	.+38     	; 0x17c4 <nwkTxDelayTimerHandler+0x3e>
    179e:	fc 01       	movw	r30, r24
    17a0:	20 81       	ld	r18, Z
    17a2:	21 31       	cpi	r18, 0x11	; 17
    17a4:	79 f4       	brne	.+30     	; 0x17c4 <nwkTxDelayTimerHandler+0x3e>
    17a6:	ec 57       	subi	r30, 0x7C	; 124
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	20 81       	ld	r18, Z
    17ac:	31 81       	ldd	r19, Z+1	; 0x01
    17ae:	21 50       	subi	r18, 0x01	; 1
    17b0:	31 09       	sbc	r19, r1
    17b2:	31 83       	std	Z+1, r19	; 0x01
    17b4:	20 83       	st	Z, r18
    17b6:	23 2b       	or	r18, r19
    17b8:	21 f4       	brne	.+8      	; 0x17c2 <nwkTxDelayTimerHandler+0x3c>
    17ba:	fc 01       	movw	r30, r24
    17bc:	c0 83       	st	Z, r28
    17be:	10 2f       	mov	r17, r16
    17c0:	01 c0       	rjmp	.+2      	; 0x17c4 <nwkTxDelayTimerHandler+0x3e>
    17c2:	10 2f       	mov	r17, r16
    17c4:	f2 d9       	rcall	.-3100   	; 0xbaa <nwkFrameNext>
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	51 f7       	brne	.-44     	; 0x179e <nwkTxDelayTimerHandler+0x18>
    17ca:	11 23       	and	r17, r17
    17cc:	11 f0       	breq	.+4      	; 0x17d2 <nwkTxDelayTimerHandler+0x4c>
    17ce:	c7 01       	movw	r24, r14
    17d0:	03 d4       	rcall	.+2054   	; 0x1fd8 <SYS_TimerStart>
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	08 95       	ret

000017de <nwkTxAckWaitTimerHandler>:
    17de:	ef 92       	push	r14
    17e0:	ff 92       	push	r15
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	7c 01       	movw	r14, r24
    17ec:	10 e0       	ldi	r17, 0x00	; 0
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	01 e0       	ldi	r16, 0x01	; 1
    17f4:	d7 e1       	ldi	r29, 0x17	; 23
    17f6:	c0 e1       	ldi	r28, 0x10	; 16
    17f8:	16 c0       	rjmp	.+44     	; 0x1826 <nwkTxAckWaitTimerHandler+0x48>
    17fa:	fc 01       	movw	r30, r24
    17fc:	20 81       	ld	r18, Z
    17fe:	26 31       	cpi	r18, 0x16	; 22
    1800:	91 f4       	brne	.+36     	; 0x1826 <nwkTxAckWaitTimerHandler+0x48>
    1802:	ec 57       	subi	r30, 0x7C	; 124
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	20 81       	ld	r18, Z
    1808:	31 81       	ldd	r19, Z+1	; 0x01
    180a:	21 50       	subi	r18, 0x01	; 1
    180c:	31 09       	sbc	r19, r1
    180e:	31 83       	std	Z+1, r19	; 0x01
    1810:	20 83       	st	Z, r18
    1812:	23 2b       	or	r18, r19
    1814:	39 f4       	brne	.+14     	; 0x1824 <nwkTxAckWaitTimerHandler+0x46>
    1816:	fc 01       	movw	r30, r24
    1818:	d0 83       	st	Z, r29
    181a:	ed 57       	subi	r30, 0x7D	; 125
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	c0 83       	st	Z, r28
    1820:	10 2f       	mov	r17, r16
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <nwkTxAckWaitTimerHandler+0x48>
    1824:	10 2f       	mov	r17, r16
    1826:	c1 d9       	rcall	.-3198   	; 0xbaa <nwkFrameNext>
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	39 f7       	brne	.-50     	; 0x17fa <nwkTxAckWaitTimerHandler+0x1c>
    182c:	11 23       	and	r17, r17
    182e:	11 f0       	breq	.+4      	; 0x1834 <nwkTxAckWaitTimerHandler+0x56>
    1830:	c7 01       	movw	r24, r14
    1832:	d2 d3       	rcall	.+1956   	; 0x1fd8 <SYS_TimerStart>
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	08 95       	ret

00001842 <nwkTxInit>:
    1842:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <nwkTxPhyActiveFrame+0x1>
    1846:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <nwkTxPhyActiveFrame>
    184a:	e6 ee       	ldi	r30, 0xE6	; 230
    184c:	f7 e0       	ldi	r31, 0x07	; 7
    184e:	82 e3       	ldi	r24, 0x32	; 50
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	a0 e0       	ldi	r26, 0x00	; 0
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	86 83       	std	Z+6, r24	; 0x06
    1858:	97 83       	std	Z+7, r25	; 0x07
    185a:	a0 87       	std	Z+8, r26	; 0x08
    185c:	b1 87       	std	Z+9, r27	; 0x09
    185e:	12 86       	std	Z+10, r1	; 0x0a
    1860:	8f ee       	ldi	r24, 0xEF	; 239
    1862:	9b e0       	ldi	r25, 0x0B	; 11
    1864:	94 87       	std	Z+12, r25	; 0x0c
    1866:	83 87       	std	Z+11, r24	; 0x0b
    1868:	e9 ed       	ldi	r30, 0xD9	; 217
    186a:	f7 e0       	ldi	r31, 0x07	; 7
    186c:	8a e0       	ldi	r24, 0x0A	; 10
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a0 e0       	ldi	r26, 0x00	; 0
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	86 83       	std	Z+6, r24	; 0x06
    1876:	97 83       	std	Z+7, r25	; 0x07
    1878:	a0 87       	std	Z+8, r26	; 0x08
    187a:	b1 87       	std	Z+9, r27	; 0x09
    187c:	12 86       	std	Z+10, r1	; 0x0a
    187e:	83 ec       	ldi	r24, 0xC3	; 195
    1880:	9b e0       	ldi	r25, 0x0B	; 11
    1882:	94 87       	std	Z+12, r25	; 0x0c
    1884:	83 87       	std	Z+11, r24	; 0x0b
    1886:	08 95       	ret

00001888 <nwkTxFrame>:
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	ec 01       	movw	r28, r24
    188e:	fc 01       	movw	r30, r24
    1890:	ea 57       	subi	r30, 0x7A	; 122
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 81       	ld	r24, Z
    1896:	81 ff       	sbrs	r24, 1
    1898:	03 c0       	rjmp	.+6      	; 0x18a0 <nwkTxFrame+0x18>
    189a:	92 e1       	ldi	r25, 0x12	; 18
    189c:	98 83       	st	Y, r25
    189e:	08 c0       	rjmp	.+16     	; 0x18b0 <nwkTxFrame+0x28>
    18a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    18a2:	91 ff       	sbrs	r25, 1
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <nwkTxFrame+0x24>
    18a6:	90 e1       	ldi	r25, 0x10	; 16
    18a8:	98 83       	st	Y, r25
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <nwkTxFrame+0x28>
    18ac:	92 e1       	ldi	r25, 0x12	; 18
    18ae:	98 83       	st	Y, r25
    18b0:	fe 01       	movw	r30, r28
    18b2:	ed 57       	subi	r30, 0x7D	; 125
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	10 82       	st	Z, r1
    18b8:	80 ff       	sbrs	r24, 0
    18ba:	05 c0       	rjmp	.+10     	; 0x18c6 <nwkTxFrame+0x3e>
    18bc:	2f ef       	ldi	r18, 0xFF	; 255
    18be:	3f ef       	ldi	r19, 0xFF	; 255
    18c0:	3e 83       	std	Y+6, r19	; 0x06
    18c2:	2d 83       	std	Y+5, r18	; 0x05
    18c4:	06 c0       	rjmp	.+12     	; 0x18d2 <nwkTxFrame+0x4a>
    18c6:	20 91 d4 09 	lds	r18, 0x09D4	; 0x8009d4 <nwkIb+0x2>
    18ca:	30 91 d5 09 	lds	r19, 0x09D5	; 0x8009d5 <nwkIb+0x3>
    18ce:	3e 83       	std	Y+6, r19	; 0x06
    18d0:	2d 83       	std	Y+5, r18	; 0x05
    18d2:	85 70       	andi	r24, 0x05	; 5
    18d4:	19 f4       	brne	.+6      	; 0x18dc <nwkTxFrame+0x54>
    18d6:	ce 01       	movw	r24, r28
    18d8:	c4 da       	rcall	.-2680   	; 0xe62 <nwkRoutePrepareTx>
    18da:	04 c0       	rjmp	.+8      	; 0x18e4 <nwkTxFrame+0x5c>
    18dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18de:	98 89       	ldd	r25, Y+16	; 0x10
    18e0:	98 87       	std	Y+8, r25	; 0x08
    18e2:	8f 83       	std	Y+7, r24	; 0x07
    18e4:	e2 ed       	ldi	r30, 0xD2	; 210
    18e6:	f9 e0       	ldi	r31, 0x09	; 9
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	9a 87       	std	Y+10, r25	; 0x0a
    18ee:	89 87       	std	Y+9, r24	; 0x09
    18f0:	85 81       	ldd	r24, Z+5	; 0x05
    18f2:	8f 5f       	subi	r24, 0xFF	; 255
    18f4:	85 83       	std	Z+5, r24	; 0x05
    18f6:	8c 83       	std	Y+4, r24	; 0x04
    18f8:	8f 81       	ldd	r24, Y+7	; 0x07
    18fa:	98 85       	ldd	r25, Y+8	; 0x08
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	71 f4       	brne	.+28     	; 0x191c <nwkTxFrame+0x94>
    1900:	81 e4       	ldi	r24, 0x41	; 65
    1902:	98 e8       	ldi	r25, 0x88	; 136
    1904:	9b 83       	std	Y+3, r25	; 0x03
    1906:	8a 83       	std	Y+2, r24	; 0x02
    1908:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <rand>
    190c:	cc 57       	subi	r28, 0x7C	; 124
    190e:	df 4f       	sbci	r29, 0xFF	; 255
    1910:	87 70       	andi	r24, 0x07	; 7
    1912:	99 27       	eor	r25, r25
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	99 83       	std	Y+1, r25	; 0x01
    1918:	88 83       	st	Y, r24
    191a:	08 c0       	rjmp	.+16     	; 0x192c <nwkTxFrame+0xa4>
    191c:	81 e6       	ldi	r24, 0x61	; 97
    191e:	98 e8       	ldi	r25, 0x88	; 136
    1920:	9b 83       	std	Y+3, r25	; 0x03
    1922:	8a 83       	std	Y+2, r24	; 0x02
    1924:	cc 57       	subi	r28, 0x7C	; 124
    1926:	df 4f       	sbci	r29, 0xFF	; 255
    1928:	19 82       	std	Y+1, r1	; 0x01
    192a:	18 82       	st	Y, r1
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	08 95       	ret

00001932 <nwkTxBroadcastFrame>:
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	8c 01       	movw	r16, r24
    193c:	f6 d8       	rcall	.-3604   	; 0xb2a <nwkFrameAlloc>
    193e:	ec 01       	movw	r28, r24
    1940:	89 2b       	or	r24, r25
    1942:	b9 f1       	breq	.+110    	; 0x19b2 <nwkTxBroadcastFrame+0x80>
    1944:	82 e1       	ldi	r24, 0x12	; 18
    1946:	88 83       	st	Y, r24
    1948:	f8 01       	movw	r30, r16
    194a:	81 81       	ldd	r24, Z+1	; 0x01
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	fe 01       	movw	r30, r28
    1950:	ed 57       	subi	r30, 0x7D	; 125
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	10 82       	st	Z, r1
    1956:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <rand>
    195a:	fe 01       	movw	r30, r28
    195c:	ec 57       	subi	r30, 0x7C	; 124
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	87 70       	andi	r24, 0x07	; 7
    1962:	99 27       	eor	r25, r25
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	80 83       	st	Z, r24
    196a:	33 96       	adiw	r30, 0x03	; 3
    196c:	11 82       	std	Z+1, r1	; 0x01
    196e:	10 82       	st	Z, r1
    1970:	f8 01       	movw	r30, r16
    1972:	41 81       	ldd	r20, Z+1	; 0x01
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	b8 01       	movw	r22, r16
    1978:	6e 5f       	subi	r22, 0xFE	; 254
    197a:	7f 4f       	sbci	r23, 0xFF	; 255
    197c:	ce 01       	movw	r24, r28
    197e:	02 96       	adiw	r24, 0x02	; 2
    1980:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <memcpy>
    1984:	81 e4       	ldi	r24, 0x41	; 65
    1986:	98 e8       	ldi	r25, 0x88	; 136
    1988:	9b 83       	std	Y+3, r25	; 0x03
    198a:	8a 83       	std	Y+2, r24	; 0x02
    198c:	8f ef       	ldi	r24, 0xFF	; 255
    198e:	9f ef       	ldi	r25, 0xFF	; 255
    1990:	98 87       	std	Y+8, r25	; 0x08
    1992:	8f 83       	std	Y+7, r24	; 0x07
    1994:	f8 01       	movw	r30, r16
    1996:	85 81       	ldd	r24, Z+5	; 0x05
    1998:	96 81       	ldd	r25, Z+6	; 0x06
    199a:	9e 83       	std	Y+6, r25	; 0x06
    199c:	8d 83       	std	Y+5, r24	; 0x05
    199e:	e2 ed       	ldi	r30, 0xD2	; 210
    19a0:	f9 e0       	ldi	r31, 0x09	; 9
    19a2:	80 81       	ld	r24, Z
    19a4:	91 81       	ldd	r25, Z+1	; 0x01
    19a6:	9a 87       	std	Y+10, r25	; 0x0a
    19a8:	89 87       	std	Y+9, r24	; 0x09
    19aa:	85 81       	ldd	r24, Z+5	; 0x05
    19ac:	8f 5f       	subi	r24, 0xFF	; 255
    19ae:	85 83       	std	Z+5, r24	; 0x05
    19b0:	8c 83       	std	Y+4, r24	; 0x04
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	1f 91       	pop	r17
    19b8:	0f 91       	pop	r16
    19ba:	08 95       	ret

000019bc <nwkTxAckReceived>:
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	fc 01       	movw	r30, r24
    19c2:	21 85       	ldd	r18, Z+9	; 0x09
    19c4:	23 30       	cpi	r18, 0x03	; 3
    19c6:	d9 f4       	brne	.+54     	; 0x19fe <nwkTxAckReceived+0x42>
    19c8:	10 c0       	rjmp	.+32     	; 0x19ea <nwkTxAckReceived+0x2e>
    19ca:	fc 01       	movw	r30, r24
    19cc:	20 81       	ld	r18, Z
    19ce:	26 31       	cpi	r18, 0x16	; 22
    19d0:	89 f4       	brne	.+34     	; 0x19f4 <nwkTxAckReceived+0x38>
    19d2:	34 85       	ldd	r19, Z+12	; 0x0c
    19d4:	29 81       	ldd	r18, Y+1	; 0x01
    19d6:	32 13       	cpse	r19, r18
    19d8:	0d c0       	rjmp	.+26     	; 0x19f4 <nwkTxAckReceived+0x38>
    19da:	27 e1       	ldi	r18, 0x17	; 23
    19dc:	20 83       	st	Z, r18
    19de:	2a 81       	ldd	r18, Y+2	; 0x02
    19e0:	ea 57       	subi	r30, 0x7A	; 122
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	20 83       	st	Z, r18
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	0b c0       	rjmp	.+22     	; 0x1a00 <nwkTxAckReceived+0x44>
    19ea:	fc 01       	movw	r30, r24
    19ec:	c7 81       	ldd	r28, Z+7	; 0x07
    19ee:	d0 85       	ldd	r29, Z+8	; 0x08
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	da d8       	rcall	.-3660   	; 0xbaa <nwkFrameNext>
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	41 f7       	brne	.-48     	; 0x19ca <nwkTxAckReceived+0xe>
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <nwkTxAckReceived+0x44>
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	08 95       	ret

00001a06 <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    1a06:	22 e1       	ldi	r18, 0x12	; 18
    1a08:	fc 01       	movw	r30, r24
    1a0a:	20 83       	st	Z, r18
    1a0c:	08 95       	ret

00001a0e <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1a0e:	e0 91 f3 07 	lds	r30, 0x07F3	; 0x8007f3 <nwkTxPhyActiveFrame>
    1a12:	f0 91 f4 07 	lds	r31, 0x07F4	; 0x8007f4 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	21 f0       	breq	.+8      	; 0x1a22 <PHY_DataConf+0x14>
    1a1a:	48 f0       	brcs	.+18     	; 0x1a2e <PHY_DataConf+0x20>
    1a1c:	82 30       	cpi	r24, 0x02	; 2
    1a1e:	19 f0       	breq	.+6      	; 0x1a26 <PHY_DataConf+0x18>
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <PHY_DataConf+0x1c>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1a22:	80 e2       	ldi	r24, 0x20	; 32
    1a24:	05 c0       	rjmp	.+10     	; 0x1a30 <PHY_DataConf+0x22>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    1a26:	81 e2       	ldi	r24, 0x21	; 33
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <PHY_DataConf+0x22>

	default:
		return NWK_ERROR_STATUS;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <PHY_DataConf+0x22>
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    1a2e:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1a30:	df 01       	movw	r26, r30
    1a32:	ad 57       	subi	r26, 0x7D	; 125
    1a34:	bf 4f       	sbci	r27, 0xFF	; 255
    1a36:	8c 93       	st	X, r24
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1a38:	85 e1       	ldi	r24, 0x15	; 21
    1a3a:	80 83       	st	Z, r24
	nwkTxPhyActiveFrame = NULL;
    1a3c:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <nwkTxPhyActiveFrame+0x1>
    1a40:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <nwkTxPhyActiveFrame>
	nwkIb.lock--;
    1a44:	e2 ed       	ldi	r30, 0xD2	; 210
    1a46:	f9 e0       	ldi	r31, 0x09	; 9
    1a48:	86 a9       	ldd	r24, Z+54	; 0x36
    1a4a:	97 a9       	ldd	r25, Z+55	; 0x37
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	97 ab       	std	Z+55, r25	; 0x37
    1a50:	86 ab       	std	Z+54, r24	; 0x36
    1a52:	08 95       	ret

00001a54 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1a54:	9f 92       	push	r9
    1a56:	af 92       	push	r10
    1a58:	bf 92       	push	r11
    1a5a:	cf 92       	push	r12
    1a5c:	df 92       	push	r13
    1a5e:	ef 92       	push	r14
    1a60:	ff 92       	push	r15
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
	NwkFrame_t *frame = NULL;
    1a6a:	c0 e0       	ldi	r28, 0x00	; 0
    1a6c:	d0 e0       	ldi	r29, 0x00	; 0

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
				nwkTxPhyActiveFrame = frame;
				frame->state = NWK_TX_STATE_WAIT_CONF;
    1a6e:	0f 2e       	mov	r0, r31
    1a70:	f4 e1       	ldi	r31, 0x14	; 20
    1a72:	af 2e       	mov	r10, r31
    1a74:	f0 2d       	mov	r31, r0
				PHY_DataReq(&(frame->size));
				nwkIb.lock++;
    1a76:	02 ed       	ldi	r16, 0xD2	; 210
    1a78:	19 e0       	ldi	r17, 0x09	; 9
					SYS_TimerStart(&nwkTxAckWaitTimer);
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    1a7a:	0f 2e       	mov	r0, r31
    1a7c:	f7 e1       	ldi	r31, 0x17	; 23
    1a7e:	df 2e       	mov	r13, r31
    1a80:	f0 2d       	mov	r31, r0
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    1a82:	0f 2e       	mov	r0, r31
    1a84:	f6 e1       	ldi	r31, 0x16	; 22
    1a86:	9f 2e       	mov	r9, r31
    1a88:	f0 2d       	mov	r31, r0
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    1a8a:	0f 2e       	mov	r0, r31
    1a8c:	f5 e1       	ldi	r31, 0x15	; 21
    1a8e:	ef 2e       	mov	r14, r31
    1a90:	f1 2c       	mov	r15, r1
    1a92:	f0 2d       	mov	r31, r0
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
				SYS_TimerStart(&nwkTxDelayTimer);
			} else {
				frame->state = NWK_TX_STATE_SEND;
    1a94:	0f 2e       	mov	r0, r31
    1a96:	f3 e1       	ldi	r31, 0x13	; 19
    1a98:	cf 2e       	mov	r12, r31
    1a9a:	f0 2d       	mov	r31, r0
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    1a9c:	0f 2e       	mov	r0, r31
    1a9e:	f1 e1       	ldi	r31, 0x11	; 17
    1aa0:	bf 2e       	mov	r11, r31
    1aa2:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1aa4:	65 c0       	rjmp	.+202    	; 0x1b70 <nwkTxTaskHandler+0x11c>
		switch (frame->state) {
    1aa6:	88 81       	ld	r24, Y
    1aa8:	83 31       	cpi	r24, 0x13	; 19
    1aaa:	f1 f0       	breq	.+60     	; 0x1ae8 <nwkTxTaskHandler+0x94>
    1aac:	28 f4       	brcc	.+10     	; 0x1ab8 <nwkTxTaskHandler+0x64>
    1aae:	80 31       	cpi	r24, 0x10	; 16
    1ab0:	49 f0       	breq	.+18     	; 0x1ac4 <nwkTxTaskHandler+0x70>
    1ab2:	82 31       	cpi	r24, 0x12	; 18
    1ab4:	59 f0       	breq	.+22     	; 0x1acc <nwkTxTaskHandler+0x78>
    1ab6:	5c c0       	rjmp	.+184    	; 0x1b70 <nwkTxTaskHandler+0x11c>
    1ab8:	85 31       	cpi	r24, 0x15	; 21
    1aba:	61 f1       	breq	.+88     	; 0x1b14 <nwkTxTaskHandler+0xc0>
    1abc:	87 31       	cpi	r24, 0x17	; 23
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <nwkTxTaskHandler+0x6e>
    1ac0:	48 c0       	rjmp	.+144    	; 0x1b52 <nwkTxTaskHandler+0xfe>
    1ac2:	56 c0       	rjmp	.+172    	; 0x1b70 <nwkTxTaskHandler+0x11c>
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    1ac4:	61 e0       	ldi	r22, 0x01	; 1
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	1f dd       	rcall	.-1474   	; 0x1508 <nwkSecurityProcess>
		}
		break;
    1aca:	52 c0       	rjmp	.+164    	; 0x1b70 <nwkTxTaskHandler+0x11c>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    1acc:	fe 01       	movw	r30, r28
    1ace:	ec 57       	subi	r30, 0x7C	; 124
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	89 2b       	or	r24, r25
    1ad8:	29 f0       	breq	.+10     	; 0x1ae4 <nwkTxTaskHandler+0x90>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    1ada:	b8 82       	st	Y, r11
				SYS_TimerStart(&nwkTxDelayTimer);
    1adc:	89 ed       	ldi	r24, 0xD9	; 217
    1ade:	97 e0       	ldi	r25, 0x07	; 7
    1ae0:	7b d2       	rcall	.+1270   	; 0x1fd8 <SYS_TimerStart>
    1ae2:	46 c0       	rjmp	.+140    	; 0x1b70 <nwkTxTaskHandler+0x11c>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    1ae4:	c8 82       	st	Y, r12
    1ae6:	44 c0       	rjmp	.+136    	; 0x1b70 <nwkTxTaskHandler+0x11c>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    1ae8:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <nwkTxPhyActiveFrame>
    1aec:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <nwkTxPhyActiveFrame+0x1>
    1af0:	89 2b       	or	r24, r25
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <nwkTxTaskHandler+0xa2>
    1af4:	3d c0       	rjmp	.+122    	; 0x1b70 <nwkTxTaskHandler+0x11c>
				nwkTxPhyActiveFrame = frame;
    1af6:	d0 93 f4 07 	sts	0x07F4, r29	; 0x8007f4 <nwkTxPhyActiveFrame+0x1>
    1afa:	c0 93 f3 07 	sts	0x07F3, r28	; 0x8007f3 <nwkTxPhyActiveFrame>
				frame->state = NWK_TX_STATE_WAIT_CONF;
    1afe:	fe 01       	movw	r30, r28
    1b00:	a1 92       	st	Z+, r10
				PHY_DataReq(&(frame->size));
    1b02:	cf 01       	movw	r24, r30
    1b04:	d4 d0       	rcall	.+424    	; 0x1cae <PHY_DataReq>
				nwkIb.lock++;
    1b06:	f8 01       	movw	r30, r16
    1b08:	86 a9       	ldd	r24, Z+54	; 0x36
    1b0a:	97 a9       	ldd	r25, Z+55	; 0x37
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	97 ab       	std	Z+55, r25	; 0x37
    1b10:	86 ab       	std	Z+54, r24	; 0x36
    1b12:	2e c0       	rjmp	.+92     	; 0x1b70 <nwkTxTaskHandler+0x11c>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    1b14:	fe 01       	movw	r30, r28
    1b16:	ed 57       	subi	r30, 0x7D	; 125
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	80 81       	ld	r24, Z
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	17 c0       	rjmp	.+46     	; 0x1b4e <nwkTxTaskHandler+0xfa>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    1b20:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b22:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b24:	f8 01       	movw	r30, r16
    1b26:	80 81       	ld	r24, Z
    1b28:	91 81       	ldd	r25, Z+1	; 0x01
    1b2a:	28 17       	cp	r18, r24
    1b2c:	39 07       	cpc	r19, r25
    1b2e:	69 f4       	brne	.+26     	; 0x1b4a <nwkTxTaskHandler+0xf6>
    1b30:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b32:	80 ff       	sbrs	r24, 0
    1b34:	0a c0       	rjmp	.+20     	; 0x1b4a <nwkTxTaskHandler+0xf6>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    1b36:	98 82       	st	Y, r9
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    1b38:	fe 01       	movw	r30, r28
    1b3a:	ec 57       	subi	r30, 0x7C	; 124
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	f1 82       	std	Z+1, r15	; 0x01
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    1b40:	e0 82       	st	Z, r14
    1b42:	86 ee       	ldi	r24, 0xE6	; 230
    1b44:	97 e0       	ldi	r25, 0x07	; 7
    1b46:	48 d2       	rcall	.+1168   	; 0x1fd8 <SYS_TimerStart>
    1b48:	13 c0       	rjmp	.+38     	; 0x1b70 <nwkTxTaskHandler+0x11c>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    1b4a:	d8 82       	st	Y, r13
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    1b4c:	11 c0       	rjmp	.+34     	; 0x1b70 <nwkTxTaskHandler+0x11c>
    1b4e:	d8 82       	st	Y, r13
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    1b50:	0f c0       	rjmp	.+30     	; 0x1b70 <nwkTxTaskHandler+0x11c>
    1b52:	ce 01       	movw	r24, r28
    1b54:	3f d9       	rcall	.-3458   	; 0xdd4 <nwkRouteFrameSent>
#endif
			if (NULL == frame->tx.confirm) {
    1b56:	fe 01       	movw	r30, r28
    1b58:	e9 57       	subi	r30, 0x79	; 121
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	01 90       	ld	r0, Z+
    1b5e:	f0 81       	ld	r31, Z
    1b60:	e0 2d       	mov	r30, r0
    1b62:	30 97       	sbiw	r30, 0x00	; 0
				nwkFrameFree(frame);
    1b64:	19 f4       	brne	.+6      	; 0x1b6c <nwkTxTaskHandler+0x118>
    1b66:	ce 01       	movw	r24, r28
    1b68:	16 d8       	rcall	.-4052   	; 0xb96 <nwkFrameFree>
			} else {
				frame->tx.confirm(frame);
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <nwkTxTaskHandler+0x11c>
    1b6c:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1b6e:	19 95       	eicall
    1b70:	ce 01       	movw	r24, r28
    1b72:	1b d8       	rcall	.-4042   	; 0xbaa <nwkFrameNext>
    1b74:	ec 01       	movw	r28, r24
    1b76:	89 2b       	or	r24, r25
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <nwkTxTaskHandler+0x128>
    1b7a:	95 cf       	rjmp	.-214    	; 0x1aa6 <nwkTxTaskHandler+0x52>

		default:
			break;
		}
	}
}
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	ff 90       	pop	r15
    1b86:	ef 90       	pop	r14
    1b88:	df 90       	pop	r13
    1b8a:	cf 90       	pop	r12
    1b8c:	bf 90       	pop	r11
    1b8e:	af 90       	pop	r10
    1b90:	9f 90       	pop	r9
    1b92:	08 95       	ret

00001b94 <phySetChannel>:
	IEEE_ADDR_2_REG = *ptr_to_reg++;
	IEEE_ADDR_3_REG = *ptr_to_reg++;
	IEEE_ADDR_4_REG = *ptr_to_reg++;
	IEEE_ADDR_5_REG = *ptr_to_reg++;
	IEEE_ADDR_6_REG = *ptr_to_reg++;
	IEEE_ADDR_7_REG = *ptr_to_reg;
    1b94:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <phyBand>
    1b98:	98 2f       	mov	r25, r24
    1b9a:	9f 70       	andi	r25, 0x0F	; 15
    1b9c:	e4 e5       	ldi	r30, 0x54	; 84
    1b9e:	f1 e0       	ldi	r31, 0x01	; 1
    1ba0:	80 81       	ld	r24, Z
    1ba2:	80 7f       	andi	r24, 0xF0	; 240
    1ba4:	89 2b       	or	r24, r25
    1ba6:	80 83       	st	Z, r24
    1ba8:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <phyBand>
    1bac:	88 23       	and	r24, r24
    1bae:	29 f0       	breq	.+10     	; 0x1bba <phySetChannel+0x26>
    1bb0:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <phyChannel>
    1bb4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
    1bb8:	08 95       	ret
    1bba:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <phyChannel>
    1bbe:	98 2f       	mov	r25, r24
    1bc0:	9f 71       	andi	r25, 0x1F	; 31
    1bc2:	e8 e4       	ldi	r30, 0x48	; 72
    1bc4:	f1 e0       	ldi	r31, 0x01	; 1
    1bc6:	80 81       	ld	r24, Z
    1bc8:	80 7e       	andi	r24, 0xE0	; 224
    1bca:	89 2b       	or	r24, r25
    1bcc:	80 83       	st	Z, r24
    1bce:	08 95       	ret

00001bd0 <phyTrxSetState>:
    1bd0:	a2 e4       	ldi	r26, 0x42	; 66
    1bd2:	b1 e0       	ldi	r27, 0x01	; 1
    1bd4:	23 e0       	ldi	r18, 0x03	; 3
    1bd6:	e1 e4       	ldi	r30, 0x41	; 65
    1bd8:	f1 e0       	ldi	r31, 0x01	; 1
    1bda:	2c 93       	st	X, r18
    1bdc:	90 81       	ld	r25, Z
    1bde:	9f 71       	andi	r25, 0x1F	; 31
    1be0:	98 30       	cpi	r25, 0x08	; 8
    1be2:	d9 f7       	brne	.-10     	; 0x1bda <phyTrxSetState+0xa>
    1be4:	a2 e4       	ldi	r26, 0x42	; 66
    1be6:	b1 e0       	ldi	r27, 0x01	; 1
    1be8:	e1 e4       	ldi	r30, 0x41	; 65
    1bea:	f1 e0       	ldi	r31, 0x01	; 1
    1bec:	8c 93       	st	X, r24
    1bee:	90 81       	ld	r25, Z
    1bf0:	9f 71       	andi	r25, 0x1F	; 31
    1bf2:	89 13       	cpse	r24, r25
    1bf4:	fb cf       	rjmp	.-10     	; 0x1bec <phyTrxSetState+0x1c>
    1bf6:	08 95       	ret

00001bf8 <phySetRxState>:
    1bf8:	88 e0       	ldi	r24, 0x08	; 8
    1bfa:	ea df       	rcall	.-44     	; 0x1bd0 <phyTrxSetState>
    1bfc:	8f ef       	ldi	r24, 0xFF	; 255
    1bfe:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1c02:	80 91 f7 07 	lds	r24, 0x07F7	; 0x8007f7 <phyRxState>
    1c06:	88 23       	and	r24, r24
    1c08:	11 f0       	breq	.+4      	; 0x1c0e <phySetRxState+0x16>
    1c0a:	86 e1       	ldi	r24, 0x16	; 22
    1c0c:	e1 cf       	rjmp	.-62     	; 0x1bd0 <phyTrxSetState>
    1c0e:	08 95       	ret

00001c10 <PHY_Init>:
    1c10:	60 e4       	ldi	r22, 0x40	; 64
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    1c18:	e9 e3       	ldi	r30, 0x39	; 57
    1c1a:	f1 e0       	ldi	r31, 0x01	; 1
    1c1c:	80 81       	ld	r24, Z
    1c1e:	81 60       	ori	r24, 0x01	; 1
    1c20:	80 83       	st	Z, r24
    1c22:	10 92 f7 07 	sts	0x07F7, r1	; 0x8007f7 <phyRxState>
    1c26:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <phyBand>
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	80 93 78 08 	sts	0x0878, r24	; 0x800878 <phyState>
    1c30:	88 e0       	ldi	r24, 0x08	; 8
    1c32:	ce df       	rcall	.-100    	; 0x1bd0 <phyTrxSetState>
    1c34:	8b ee       	ldi	r24, 0xEB	; 235
    1c36:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x700156>
    1c3a:	ec e4       	ldi	r30, 0x4C	; 76
    1c3c:	f1 e0       	ldi	r31, 0x01	; 1
    1c3e:	80 81       	ld	r24, Z
    1c40:	83 60       	ori	r24, 0x03	; 3
    1c42:	80 83       	st	Z, r24
    1c44:	80 81       	ld	r24, Z
    1c46:	80 68       	ori	r24, 0x80	; 128
    1c48:	80 83       	st	Z, r24
    1c4a:	08 95       	ret

00001c4c <PHY_SetRxState>:
    1c4c:	80 93 f7 07 	sts	0x07F7, r24	; 0x8007f7 <phyRxState>
    1c50:	d3 cf       	rjmp	.-90     	; 0x1bf8 <phySetRxState>
    1c52:	08 95       	ret

00001c54 <PHY_SetChannel>:
    1c54:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <phyChannel>
    1c58:	9d cf       	rjmp	.-198    	; 0x1b94 <phySetChannel>
    1c5a:	08 95       	ret

00001c5c <PHY_SetPanId>:
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	1f 92       	push	r1
    1c62:	1f 92       	push	r1
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	9a 83       	std	Y+2, r25	; 0x02
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x700162>
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x700163>
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	08 95       	ret

00001c80 <PHY_SetShortAddr>:
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	1f 92       	push	r1
    1c86:	1f 92       	push	r1
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x700160>
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x700161>
    1c9a:	99 81       	ldd	r25, Y+1	; 0x01
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	89 0f       	add	r24, r25
    1ca0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x70016d>
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret

00001cae <PHY_DataReq>:
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
    1cb2:	ec 01       	movw	r28, r24
    1cb4:	89 e1       	ldi	r24, 0x19	; 25
    1cb6:	8c df       	rcall	.-232    	; 0x1bd0 <phyTrxSetState>
    1cb8:	8f ef       	ldi	r24, 0xFF	; 255
    1cba:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1cbe:	88 81       	ld	r24, Y
    1cc0:	8e 5f       	subi	r24, 0xFE	; 254
    1cc2:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
    1cc6:	88 81       	ld	r24, Y
    1cc8:	88 23       	and	r24, r24
    1cca:	81 f0       	breq	.+32     	; 0x1cec <PHY_DataReq+0x3e>
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	82 2f       	mov	r24, r18
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	ef 57       	subi	r30, 0x7F	; 127
    1cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd8:	de 01       	movw	r26, r28
    1cda:	a8 0f       	add	r26, r24
    1cdc:	b9 1f       	adc	r27, r25
    1cde:	11 96       	adiw	r26, 0x01	; 1
    1ce0:	8c 91       	ld	r24, X
    1ce2:	80 83       	st	Z, r24
    1ce4:	2f 5f       	subi	r18, 0xFF	; 255
    1ce6:	88 81       	ld	r24, Y
    1ce8:	28 17       	cp	r18, r24
    1cea:	88 f3       	brcs	.-30     	; 0x1cce <PHY_DataReq+0x20>
    1cec:	83 e0       	ldi	r24, 0x03	; 3
    1cee:	80 93 78 08 	sts	0x0878, r24	; 0x800878 <phyState>
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	08 95       	ret

00001cfe <PHY_EncryptReq>:
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	ec 01       	movw	r28, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	51 d6       	rcall	.+3234   	; 0x29ae <sal_aes_setup>
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	39 d6       	rcall	.+3186   	; 0x2982 <sal_aes_exec>
    1d10:	ce 01       	movw	r24, r28
    1d12:	db d6       	rcall	.+3510   	; 0x2aca <sal_aes_read>
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	08 95       	ret

00001d1a <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <PHY_TaskHandler+0x8>
    1d22:	1f 92       	push	r1
    1d24:	1f 92       	push	r1
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
	if (PHY_STATE_SLEEP == phyState) {
    1d2a:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <phyState>
    1d2e:	82 30       	cpi	r24, 0x02	; 2
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <PHY_TaskHandler+0x1a>
    1d32:	65 c0       	rjmp	.+202    	; 0x1dfe <PHY_TaskHandler+0xe4>
		return;
	}

	if (IRQ_STATUS_REG_s.rxEnd) {
    1d34:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1d38:	83 ff       	sbrs	r24, 3
    1d3a:	3e c0       	rjmp	.+124    	; 0x1db8 <PHY_TaskHandler+0x9e>
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;
    1d3c:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x70017b>

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    1d40:	6a 2f       	mov	r22, r26
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	ab 01       	movw	r20, r22
    1d46:	4f 5f       	subi	r20, 0xFF	; 255
    1d48:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1d50:	fc 01       	movw	r30, r24
    1d52:	e0 58       	subi	r30, 0x80	; 128
    1d54:	fe 4f       	sbci	r31, 0xFE	; 254
    1d56:	30 81       	ld	r19, Z
    1d58:	fc 01       	movw	r30, r24
    1d5a:	e8 50       	subi	r30, 0x08	; 8
    1d5c:	f8 4f       	sbci	r31, 0xF8	; 248
    1d5e:	30 83       	st	Z, r19

	if (IRQ_STATUS_REG_s.rxEnd) {
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    1d60:	2f 5f       	subi	r18, 0xFF	; 255
    1d62:	82 2f       	mov	r24, r18
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	84 17       	cp	r24, r20
    1d68:	95 07       	cpc	r25, r21
    1d6a:	94 f3       	brlt	.-28     	; 0x1d50 <PHY_TaskHandler+0x36>
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
		}

		ind.data = phyRxBuffer;
    1d6c:	88 ef       	ldi	r24, 0xF8	; 248
    1d6e:	97 e0       	ldi	r25, 0x07	; 7
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
		ind.size = size - PHY_CRC_SIZE;
    1d74:	a2 50       	subi	r26, 0x02	; 2
    1d76:	ab 83       	std	Y+3, r26	; 0x03
		ind.lqi  = phyRxBuffer[size];
    1d78:	fb 01       	movw	r30, r22
    1d7a:	e8 50       	subi	r30, 0x08	; 8
    1d7c:	f8 4f       	sbci	r31, 0xF8	; 248
    1d7e:	80 81       	ld	r24, Z
    1d80:	8c 83       	std	Y+4, r24	; 0x04
		ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1d82:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    1d86:	8a 55       	subi	r24, 0x5A	; 90
    1d88:	8d 83       	std	Y+5, r24	; 0x05
		PHY_DataInd(&ind);
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	01 96       	adiw	r24, 0x01	; 1
    1d8e:	2f d9       	rcall	.-3490   	; 0xfee <PHY_DataInd>

		while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus) {
    1d90:	e1 e4       	ldi	r30, 0x41	; 65
    1d92:	f1 e0       	ldi	r31, 0x01	; 1
    1d94:	80 81       	ld	r24, Z
    1d96:	8f 71       	andi	r24, 0x1F	; 31
    1d98:	86 31       	cpi	r24, 0x16	; 22
    1d9a:	e1 f7       	brne	.-8      	; 0x1d94 <PHY_TaskHandler+0x7a>
		}

		IRQ_STATUS_REG_s.rxEnd = 1;
    1d9c:	ef e4       	ldi	r30, 0x4F	; 79
    1d9e:	f1 e0       	ldi	r31, 0x01	; 1
    1da0:	80 81       	ld	r24, Z
    1da2:	88 60       	ori	r24, 0x08	; 8
    1da4:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 0;
    1da6:	ec e4       	ldi	r30, 0x4C	; 76
    1da8:	f1 e0       	ldi	r31, 0x01	; 1
    1daa:	80 81       	ld	r24, Z
    1dac:	8f 77       	andi	r24, 0x7F	; 127
    1dae:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1db0:	80 81       	ld	r24, Z
    1db2:	80 68       	ori	r24, 0x80	; 128
    1db4:	80 83       	st	Z, r24
    1db6:	23 c0       	rjmp	.+70     	; 0x1dfe <PHY_TaskHandler+0xe4>
	} else if (IRQ_STATUS_REG_s.txEnd) {
    1db8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1dbc:	86 ff       	sbrs	r24, 6
    1dbe:	1f c0       	rjmp	.+62     	; 0x1dfe <PHY_TaskHandler+0xe4>
		if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus) {
    1dc0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1dc4:	8f 71       	andi	r24, 0x1F	; 31
    1dc6:	89 31       	cpi	r24, 0x19	; 25
    1dc8:	a9 f4       	brne	.+42     	; 0x1df4 <PHY_TaskHandler+0xda>
			uint8_t status = TRX_STATE_REG_s.tracStatus;
    1dca:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1dce:	12 95       	swap	r17
    1dd0:	16 95       	lsr	r17
    1dd2:	17 70       	andi	r17, 0x07	; 7

			if (TRAC_STATUS_SUCCESS == status) {
    1dd4:	49 f0       	breq	.+18     	; 0x1de8 <PHY_TaskHandler+0xce>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    1dd6:	13 30       	cpi	r17, 0x03	; 3
    1dd8:	21 f0       	breq	.+8      	; 0x1de2 <PHY_TaskHandler+0xc8>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
    1dda:	15 30       	cpi	r17, 0x05	; 5
    1ddc:	21 f0       	breq	.+8      	; 0x1de6 <PHY_TaskHandler+0xcc>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
    1dde:	13 e0       	ldi	r17, 0x03	; 3
    1de0:	03 c0       	rjmp	.+6      	; 0x1de8 <PHY_TaskHandler+0xce>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1de2:	11 e0       	ldi	r17, 0x01	; 1
    1de4:	01 c0       	rjmp	.+2      	; 0x1de8 <PHY_TaskHandler+0xce>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    1de6:	12 e0       	ldi	r17, 0x02	; 2
    1de8:	07 df       	rcall	.-498    	; 0x1bf8 <phySetRxState>
			phyState = PHY_STATE_IDLE;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	80 93 78 08 	sts	0x0878, r24	; 0x800878 <phyState>

			PHY_DataConf(status);
    1df0:	81 2f       	mov	r24, r17
    1df2:	0d de       	rcall	.-998    	; 0x1a0e <PHY_DataConf>
		}

		IRQ_STATUS_REG_s.txEnd = 1;
    1df4:	ef e4       	ldi	r30, 0x4F	; 79
    1df6:	f1 e0       	ldi	r31, 0x01	; 1
    1df8:	80 81       	ld	r24, Z
    1dfa:	80 64       	ori	r24, 0x40	; 64
    1dfc:	80 83       	st	Z, r24
	}
}
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	08 95       	ret

00001e10 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
	SYS_TimerInit();
    1e10:	7b d0       	rcall	.+246    	; 0x1f08 <SYS_TimerInit>
#if SYS_SECURITY_MODE == 0
	sal_init();
    1e12:	b6 d5       	rcall	.+2924   	; 0x2980 <sal_init>
#endif
	PHY_Init();
    1e14:	fd de       	rcall	.-518    	; 0x1c10 <PHY_Init>
    1e16:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <NWK_Init>
	NWK_Init();
    1e1a:	08 95       	ret

00001e1c <SYS_TaskHandler>:
    1e1c:	7e df       	rcall	.-260    	; 0x1d1a <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
	PHY_TaskHandler();
	NWK_TaskHandler();
    1e1e:	0e 94 91 04 	call	0x922	; 0x922 <NWK_TaskHandler>
	SYS_TimerTaskHandler();
    1e22:	e5 c0       	rjmp	.+458    	; 0x1fee <SYS_TimerTaskHandler>
    1e24:	08 95       	ret

00001e26 <SYS_EncryptReq>:
/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    1e26:	6b df       	rcall	.-298    	; 0x1cfe <PHY_EncryptReq>
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    1e28:	7e cb       	rjmp	.-2308   	; 0x1526 <SYS_EncryptConf>
    1e2a:	08 95       	ret

00001e2c <placeTimer>:
    1e2c:	0f 93       	push	r16
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	ec 01       	movw	r28, r24
	if (timers) {
    1e36:	80 91 79 08 	lds	r24, 0x0879	; 0x800879 <timers>
    1e3a:	90 91 7a 08 	lds	r25, 0x087A	; 0x80087a <timers+0x1>
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <placeTimer+0x18>
    1e42:	45 c0       	rjmp	.+138    	; 0x1ece <placeTimer+0xa2>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    1e44:	4e 81       	ldd	r20, Y+6	; 0x06
    1e46:	5f 81       	ldd	r21, Y+7	; 0x07
    1e48:	68 85       	ldd	r22, Y+8	; 0x08
    1e4a:	79 85       	ldd	r23, Y+9	; 0x09

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	02 81       	ldd	r16, Z+2	; 0x02
    1e50:	13 81       	ldd	r17, Z+3	; 0x03
    1e52:	24 81       	ldd	r18, Z+4	; 0x04
    1e54:	35 81       	ldd	r19, Z+5	; 0x05
    1e56:	40 17       	cp	r20, r16
    1e58:	51 07       	cpc	r21, r17
    1e5a:	62 07       	cpc	r22, r18
    1e5c:	73 07       	cpc	r23, r19
    1e5e:	60 f0       	brcs	.+24     	; 0x1e78 <placeTimer+0x4c>
    1e60:	dc 01       	movw	r26, r24
    1e62:	17 c0       	rjmp	.+46     	; 0x1e92 <placeTimer+0x66>
    1e64:	02 81       	ldd	r16, Z+2	; 0x02
    1e66:	13 81       	ldd	r17, Z+3	; 0x03
    1e68:	24 81       	ldd	r18, Z+4	; 0x04
    1e6a:	35 81       	ldd	r19, Z+5	; 0x05
    1e6c:	40 17       	cp	r20, r16
    1e6e:	51 07       	cpc	r21, r17
    1e70:	62 07       	cpc	r22, r18
    1e72:	73 07       	cpc	r23, r19
    1e74:	68 f4       	brcc	.+26     	; 0x1e90 <placeTimer+0x64>
    1e76:	03 c0       	rjmp	.+6      	; 0x1e7e <placeTimer+0x52>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1e78:	fc 01       	movw	r30, r24
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    1e7a:	a0 e0       	ldi	r26, 0x00	; 0
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    1e7e:	04 1b       	sub	r16, r20
    1e80:	15 0b       	sbc	r17, r21
    1e82:	26 0b       	sbc	r18, r22
    1e84:	37 0b       	sbc	r19, r23
    1e86:	02 83       	std	Z+2, r16	; 0x02
    1e88:	13 83       	std	Z+3, r17	; 0x03
    1e8a:	24 83       	std	Z+4, r18	; 0x04
    1e8c:	35 83       	std	Z+5, r19	; 0x05
				break;
    1e8e:	0a c0       	rjmp	.+20     	; 0x1ea4 <placeTimer+0x78>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1e90:	df 01       	movw	r26, r30
			if (timeout < t->timeout) {
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    1e92:	40 1b       	sub	r20, r16
    1e94:	51 0b       	sbc	r21, r17
    1e96:	62 0b       	sbc	r22, r18
    1e98:	73 0b       	sbc	r23, r19
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1e9a:	ed 91       	ld	r30, X+
    1e9c:	fc 91       	ld	r31, X
    1e9e:	11 97       	sbiw	r26, 0x01	; 1
    1ea0:	30 97       	sbiw	r30, 0x00	; 0
    1ea2:	01 f7       	brne	.-64     	; 0x1e64 <placeTimer+0x38>
			}

			prev = t;
		}

		timer->timeout = timeout;
    1ea4:	4a 83       	std	Y+2, r20	; 0x02
    1ea6:	5b 83       	std	Y+3, r21	; 0x03
    1ea8:	6c 83       	std	Y+4, r22	; 0x04
    1eaa:	7d 83       	std	Y+5, r23	; 0x05

		if (prev) {
    1eac:	10 97       	sbiw	r26, 0x00	; 0
    1eae:	41 f0       	breq	.+16     	; 0x1ec0 <placeTimer+0x94>
			timer->next = prev->next;
    1eb0:	8d 91       	ld	r24, X+
    1eb2:	9c 91       	ld	r25, X
    1eb4:	11 97       	sbiw	r26, 0x01	; 1
    1eb6:	99 83       	std	Y+1, r25	; 0x01
    1eb8:	88 83       	st	Y, r24
			prev->next = timer;
    1eba:	cd 93       	st	X+, r28
    1ebc:	dc 93       	st	X, r29
    1ebe:	15 c0       	rjmp	.+42     	; 0x1eea <placeTimer+0xbe>
		} else {
			timer->next = timers;
    1ec0:	99 83       	std	Y+1, r25	; 0x01
    1ec2:	88 83       	st	Y, r24
			timers = timer;
    1ec4:	d0 93 7a 08 	sts	0x087A, r29	; 0x80087a <timers+0x1>
    1ec8:	c0 93 79 08 	sts	0x0879, r28	; 0x800879 <timers>
    1ecc:	0e c0       	rjmp	.+28     	; 0x1eea <placeTimer+0xbe>
		}
	} else {
		timer->next = NULL;
    1ece:	19 82       	std	Y+1, r1	; 0x01
    1ed0:	18 82       	st	Y, r1
		timer->timeout = timer->interval;
    1ed2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed6:	a8 85       	ldd	r26, Y+8	; 0x08
    1ed8:	b9 85       	ldd	r27, Y+9	; 0x09
    1eda:	8a 83       	std	Y+2, r24	; 0x02
    1edc:	9b 83       	std	Y+3, r25	; 0x03
    1ede:	ac 83       	std	Y+4, r26	; 0x04
    1ee0:	bd 83       	std	Y+5, r27	; 0x05
		timers = timer;
    1ee2:	d0 93 7a 08 	sts	0x087A, r29	; 0x80087a <timers+0x1>
    1ee6:	c0 93 79 08 	sts	0x0879, r28	; 0x800879 <timers>
	}
}
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	08 95       	ret

00001ef4 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
	SysTimerIrqCount++;
    1ef4:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <SysTimerIrqCount>
    1ef8:	8f 5f       	subi	r24, 0xFF	; 255
    1efa:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <SysTimerIrqCount>
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1efe:	80 e1       	ldi	r24, 0x10	; 16
    1f00:	97 e2       	ldi	r25, 0x27	; 39
    1f02:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <common_tc_delay>
    1f06:	08 95       	ret

00001f08 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
	SysTimerIrqCount = 0;
    1f08:	10 92 0a 0a 	sts	0x0A0A, r1	; 0x800a0a <SysTimerIrqCount>
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    1f0c:	8a e7       	ldi	r24, 0x7A	; 122
    1f0e:	9f e0       	ldi	r25, 0x0F	; 15
    1f10:	0e 94 c2 01 	call	0x384	; 0x384 <set_common_tc_expiry_callback>
	common_tc_init();
    1f14:	0e 94 74 01 	call	0x2e8	; 0x2e8 <common_tc_init>
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1f18:	80 e1       	ldi	r24, 0x10	; 16
    1f1a:	97 e2       	ldi	r25, 0x27	; 39
    1f1c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <common_tc_delay>
	timers = NULL;
    1f20:	10 92 7a 08 	sts	0x087A, r1	; 0x80087a <timers+0x1>
    1f24:	10 92 79 08 	sts	0x0879, r1	; 0x800879 <timers>
    1f28:	08 95       	ret

00001f2a <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1f2e:	a0 91 79 08 	lds	r26, 0x0879	; 0x800879 <timers>
    1f32:	b0 91 7a 08 	lds	r27, 0x087A	; 0x80087a <timers+0x1>
    1f36:	10 97       	sbiw	r26, 0x00	; 0
    1f38:	91 f1       	breq	.+100    	; 0x1f9e <SYS_TimerStop+0x74>
		if (t == timer) {
    1f3a:	a8 17       	cp	r26, r24
    1f3c:	b9 07       	cpc	r27, r25
    1f3e:	51 f5       	brne	.+84     	; 0x1f94 <SYS_TimerStop+0x6a>
    1f40:	0a c0       	rjmp	.+20     	; 0x1f56 <SYS_TimerStop+0x2c>
    1f42:	8e 17       	cp	r24, r30
    1f44:	9f 07       	cpc	r25, r31
    1f46:	29 f5       	brne	.+74     	; 0x1f92 <SYS_TimerStop+0x68>
			if (prev) {
    1f48:	10 97       	sbiw	r26, 0x00	; 0
    1f4a:	31 f0       	breq	.+12     	; 0x1f58 <SYS_TimerStop+0x2e>
				prev->next = t->next;
    1f4c:	20 81       	ld	r18, Z
    1f4e:	31 81       	ldd	r19, Z+1	; 0x01
    1f50:	2d 93       	st	X+, r18
    1f52:	3c 93       	st	X, r19
    1f54:	07 c0       	rjmp	.+14     	; 0x1f64 <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1f56:	fc 01       	movw	r30, r24
		if (t == timer) {
			if (prev) {
				prev->next = t->next;
			} else {
				timers = t->next;
    1f58:	20 81       	ld	r18, Z
    1f5a:	31 81       	ldd	r19, Z+1	; 0x01
    1f5c:	30 93 7a 08 	sts	0x087A, r19	; 0x80087a <timers+0x1>
    1f60:	20 93 79 08 	sts	0x0879, r18	; 0x800879 <timers>
			}

			if (t->next) {
    1f64:	01 90       	ld	r0, Z+
    1f66:	f0 81       	ld	r31, Z
    1f68:	e0 2d       	mov	r30, r0
    1f6a:	30 97       	sbiw	r30, 0x00	; 0
    1f6c:	c1 f0       	breq	.+48     	; 0x1f9e <SYS_TimerStop+0x74>
				t->next->timeout += timer->timeout;
    1f6e:	42 81       	ldd	r20, Z+2	; 0x02
    1f70:	53 81       	ldd	r21, Z+3	; 0x03
    1f72:	64 81       	ldd	r22, Z+4	; 0x04
    1f74:	75 81       	ldd	r23, Z+5	; 0x05
    1f76:	ec 01       	movw	r28, r24
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7c:	ac 81       	ldd	r26, Y+4	; 0x04
    1f7e:	bd 81       	ldd	r27, Y+5	; 0x05
    1f80:	84 0f       	add	r24, r20
    1f82:	95 1f       	adc	r25, r21
    1f84:	a6 1f       	adc	r26, r22
    1f86:	b7 1f       	adc	r27, r23
    1f88:	82 83       	std	Z+2, r24	; 0x02
    1f8a:	93 83       	std	Z+3, r25	; 0x03
    1f8c:	a4 83       	std	Z+4, r26	; 0x04
    1f8e:	b5 83       	std	Z+5, r27	; 0x05
    1f90:	06 c0       	rjmp	.+12     	; 0x1f9e <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1f92:	df 01       	movw	r26, r30
    1f94:	ed 91       	ld	r30, X+
    1f96:	fc 91       	ld	r31, X
    1f98:	11 97       	sbiw	r26, 0x01	; 1
    1f9a:	30 97       	sbiw	r30, 0x00	; 0
    1f9c:	91 f6       	brne	.-92     	; 0x1f42 <SYS_TimerStop+0x18>
			break;
		}

		prev = t;
	}
}
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	08 95       	ret

00001fa4 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1fa4:	e0 91 79 08 	lds	r30, 0x0879	; 0x800879 <timers>
    1fa8:	f0 91 7a 08 	lds	r31, 0x087A	; 0x80087a <timers+0x1>
    1fac:	30 97       	sbiw	r30, 0x00	; 0
    1fae:	71 f0       	breq	.+28     	; 0x1fcc <SYS_TimerStarted+0x28>
		if (t == timer) {
    1fb0:	e8 17       	cp	r30, r24
    1fb2:	f9 07       	cpc	r31, r25
    1fb4:	21 f4       	brne	.+8      	; 0x1fbe <SYS_TimerStarted+0x1a>
    1fb6:	0c c0       	rjmp	.+24     	; 0x1fd0 <SYS_TimerStarted+0x2c>
    1fb8:	8e 17       	cp	r24, r30
    1fba:	9f 07       	cpc	r25, r31
    1fbc:	59 f0       	breq	.+22     	; 0x1fd4 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1fbe:	01 90       	ld	r0, Z+
    1fc0:	f0 81       	ld	r31, Z
    1fc2:	e0 2d       	mov	r30, r0
    1fc4:	30 97       	sbiw	r30, 0x00	; 0
    1fc6:	c1 f7       	brne	.-16     	; 0x1fb8 <SYS_TimerStarted+0x14>
		if (t == timer) {
			return true;
		}
	}
	return false;
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	08 95       	ret
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	08 95       	ret
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return false;
}
    1fd6:	08 95       	ret

00001fd8 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	ec 01       	movw	r28, r24
	if (!SYS_TimerStarted(timer)) {
    1fde:	e2 df       	rcall	.-60     	; 0x1fa4 <SYS_TimerStarted>
    1fe0:	81 11       	cpse	r24, r1
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <SYS_TimerStart+0x10>
		placeTimer(timer);
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	22 df       	rcall	.-444    	; 0x1e2c <placeTimer>
	}
}
    1fe8:	df 91       	pop	r29
    1fea:	cf 91       	pop	r28
    1fec:	08 95       	ret

00001fee <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1fee:	cf 92       	push	r12
    1ff0:	df 92       	push	r13
    1ff2:	ef 92       	push	r14
    1ff4:	ff 92       	push	r15
    1ff6:	0f 93       	push	r16
    1ff8:	1f 93       	push	r17
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	1f 92       	push	r1
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    2004:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <SysTimerIrqCount>
    2008:	88 23       	and	r24, r24
    200a:	09 f4       	brne	.+2      	; 0x200e <SYS_TimerTaskHandler+0x20>
    200c:	53 c0       	rjmp	.+166    	; 0x20b4 <SYS_TimerTaskHandler+0xc6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    200e:	8f b7       	in	r24, 0x3f	; 63
    2010:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2012:	f8 94       	cli
	return flags;
    2014:	89 81       	ldd	r24, Y+1	; 0x01
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    2016:	c0 90 0a 0a 	lds	r12, 0x0A0A	; 0x800a0a <SysTimerIrqCount>
	SysTimerIrqCount = 0;
    201a:	10 92 0a 0a 	sts	0x0A0A, r1	; 0x800a0a <SysTimerIrqCount>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    201e:	8f bf       	out	0x3f, r24	; 63
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    2020:	d1 2c       	mov	r13, r1
    2022:	e1 2c       	mov	r14, r1
    2024:	f1 2c       	mov	r15, r1
    2026:	cc 0c       	add	r12, r12
    2028:	dd 1c       	adc	r13, r13
    202a:	ee 1c       	adc	r14, r14
    202c:	ff 1c       	adc	r15, r15
    202e:	d7 01       	movw	r26, r14
    2030:	c6 01       	movw	r24, r12
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	aa 1f       	adc	r26, r26
    2038:	bb 1f       	adc	r27, r27
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	aa 1f       	adc	r26, r26
    2040:	bb 1f       	adc	r27, r27
    2042:	c8 0e       	add	r12, r24
    2044:	d9 1e       	adc	r13, r25
    2046:	ea 1e       	adc	r14, r26
    2048:	fb 1e       	adc	r15, r27

	while (timers && (timers->timeout <= elapsed)) {
    204a:	1b c0       	rjmp	.+54     	; 0x2082 <SYS_TimerTaskHandler+0x94>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    204c:	c8 1a       	sub	r12, r24
    204e:	d9 0a       	sbc	r13, r25
    2050:	ea 0a       	sbc	r14, r26
    2052:	fb 0a       	sbc	r15, r27
		timers = timers->next;
    2054:	d8 01       	movw	r26, r16
    2056:	8d 91       	ld	r24, X+
    2058:	9c 91       	ld	r25, X
    205a:	11 97       	sbiw	r26, 0x01	; 1
    205c:	90 93 7a 08 	sts	0x087A, r25	; 0x80087a <timers+0x1>
    2060:	80 93 79 08 	sts	0x0879, r24	; 0x800879 <timers>
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    2064:	1a 96       	adiw	r26, 0x0a	; 10
    2066:	8c 91       	ld	r24, X
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	11 f4       	brne	.+4      	; 0x2070 <SYS_TimerTaskHandler+0x82>
			placeTimer(timer);
    206c:	c8 01       	movw	r24, r16
    206e:	de de       	rcall	.-580    	; 0x1e2c <placeTimer>
		}

		if (timer->handler) {
    2070:	d8 01       	movw	r26, r16
    2072:	1b 96       	adiw	r26, 0x0b	; 11
    2074:	ed 91       	ld	r30, X+
    2076:	fc 91       	ld	r31, X
    2078:	1c 97       	sbiw	r26, 0x0c	; 12
    207a:	30 97       	sbiw	r30, 0x00	; 0
    207c:	11 f0       	breq	.+4      	; 0x2082 <SYS_TimerTaskHandler+0x94>
			timer->handler(timer);
    207e:	c8 01       	movw	r24, r16
    2080:	19 95       	eicall
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    2082:	00 91 79 08 	lds	r16, 0x0879	; 0x800879 <timers>
    2086:	10 91 7a 08 	lds	r17, 0x087A	; 0x80087a <timers+0x1>
    208a:	01 15       	cp	r16, r1
    208c:	11 05       	cpc	r17, r1
    208e:	91 f0       	breq	.+36     	; 0x20b4 <SYS_TimerTaskHandler+0xc6>
    2090:	f8 01       	movw	r30, r16
    2092:	82 81       	ldd	r24, Z+2	; 0x02
    2094:	93 81       	ldd	r25, Z+3	; 0x03
    2096:	a4 81       	ldd	r26, Z+4	; 0x04
    2098:	b5 81       	ldd	r27, Z+5	; 0x05
    209a:	c8 16       	cp	r12, r24
    209c:	d9 06       	cpc	r13, r25
    209e:	ea 06       	cpc	r14, r26
    20a0:	fb 06       	cpc	r15, r27
    20a2:	a0 f6       	brcc	.-88     	; 0x204c <SYS_TimerTaskHandler+0x5e>
			timer->handler(timer);
		}
	}

	if (timers) {
		timers->timeout -= elapsed;
    20a4:	8c 19       	sub	r24, r12
    20a6:	9d 09       	sbc	r25, r13
    20a8:	ae 09       	sbc	r26, r14
    20aa:	bf 09       	sbc	r27, r15
    20ac:	82 83       	std	Z+2, r24	; 0x02
    20ae:	93 83       	std	Z+3, r25	; 0x03
    20b0:	a4 83       	std	Z+4, r26	; 0x04
    20b2:	b5 83       	std	Z+5, r27	; 0x05
	}
}
    20b4:	0f 90       	pop	r0
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	1f 91       	pop	r17
    20bc:	0f 91       	pop	r16
    20be:	ff 90       	pop	r15
    20c0:	ef 90       	pop	r14
    20c2:	df 90       	pop	r13
    20c4:	cf 90       	pop	r12
    20c6:	08 95       	ret

000020c8 <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
    20c8:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <tmr_ovf_callback>
    20cc:	08 95       	ret

000020ce <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
    20ce:	0c 94 b3 01 	jmp	0x366	; 0x366 <tmr_cca_callback>
    20d2:	08 95       	ret

000020d4 <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
    20d4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    20d8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
    20dc:	08 95       	ret

000020de <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    20de:	ef e6       	ldi	r30, 0x6F	; 111
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	8d 7f       	andi	r24, 0xFD	; 253
    20e6:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
    20e8:	b1 9a       	sbi	0x16, 1	; 22
    20ea:	08 95       	ret

000020ec <tmr_enable_cc_interrupt>:
    20ec:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
    20ee:	ef e6       	ldi	r30, 0x6F	; 111
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	82 60       	ori	r24, 0x02	; 2
    20f6:	80 83       	st	Z, r24
    20f8:	08 95       	ret

000020fa <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    20fa:	ef e6       	ldi	r30, 0x6F	; 111
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	81 60       	ori	r24, 0x01	; 1
    2102:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
    2104:	b0 9a       	sbi	0x16, 0	; 22
    2106:	08 95       	ret

00002108 <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
    2108:	80 e8       	ldi	r24, 0x80	; 128
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	82 c3       	rjmp	.+1796   	; 0x2812 <tc_disable>
    210e:	08 95       	ret

00002110 <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
    2110:	e9 e8       	ldi	r30, 0x89	; 137
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	20 81       	ld	r18, Z
    2116:	92 2b       	or	r25, r18
    2118:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
    211a:	e8 e8       	ldi	r30, 0x88	; 136
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	90 81       	ld	r25, Z
    2120:	89 2b       	or	r24, r25
    2122:	80 83       	st	Z, r24
    2124:	08 95       	ret

00002126 <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	1f 92       	push	r1
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2130:	8f b7       	in	r24, 0x3f	; 63
    2132:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2134:	f8 94       	cli
	return flags;
    2136:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
    2138:	0f 90       	pop	r0
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2140:	8f bf       	out	0x3f, r24	; 63
    2142:	08 95       	ret

00002144 <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
    2148:	80 e8       	ldi	r24, 0x80	; 128
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	eb d2       	rcall	.+1494   	; 0x2724 <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
    214e:	64 e6       	ldi	r22, 0x64	; 100
    2150:	70 e1       	ldi	r23, 0x10	; 16
    2152:	80 e8       	ldi	r24, 0x80	; 128
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	d4 d3       	rcall	.+1960   	; 0x2900 <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    2158:	cf e6       	ldi	r28, 0x6F	; 111
    215a:	d0 e0       	ldi	r29, 0x00	; 0
    215c:	88 81       	ld	r24, Y
    215e:	81 60       	ori	r24, 0x01	; 1
    2160:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
    2162:	67 e6       	ldi	r22, 0x67	; 103
    2164:	70 e1       	ldi	r23, 0x10	; 16
    2166:	80 e8       	ldi	r24, 0x80	; 128
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	ea d3       	rcall	.+2004   	; 0x2940 <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    216c:	88 81       	ld	r24, Y
    216e:	8d 7f       	andi	r24, 0xFD	; 253
    2170:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
    2172:	e1 e8       	ldi	r30, 0x81	; 129
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	81 60       	ori	r24, 0x01	; 1
    217a:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
    217c:	80 e1       	ldi	r24, 0x10	; 16
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	08 95       	ret

00002184 <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
    2184:	1f 92       	push	r1
    2186:	0f 92       	push	r0
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	0f 92       	push	r0
    218c:	11 24       	eor	r1, r1
    218e:	0b b6       	in	r0, 0x3b	; 59
    2190:	0f 92       	push	r0
    2192:	2f 93       	push	r18
    2194:	3f 93       	push	r19
    2196:	4f 93       	push	r20
    2198:	5f 93       	push	r21
    219a:	6f 93       	push	r22
    219c:	7f 93       	push	r23
    219e:	8f 93       	push	r24
    21a0:	9f 93       	push	r25
    21a2:	af 93       	push	r26
    21a4:	bf 93       	push	r27
    21a6:	ef 93       	push	r30
    21a8:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
    21aa:	e0 91 99 08 	lds	r30, 0x0899	; 0x800899 <tc_tccr1_ovf_callback>
    21ae:	f0 91 9a 08 	lds	r31, 0x089A	; 0x80089a <tc_tccr1_ovf_callback+0x1>
    21b2:	30 97       	sbiw	r30, 0x00	; 0
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <__vector_20+0x34>
		tc_tccr1_ovf_callback();
    21b6:	19 95       	eicall
	}
}
    21b8:	ff 91       	pop	r31
    21ba:	ef 91       	pop	r30
    21bc:	bf 91       	pop	r27
    21be:	af 91       	pop	r26
    21c0:	9f 91       	pop	r25
    21c2:	8f 91       	pop	r24
    21c4:	7f 91       	pop	r23
    21c6:	6f 91       	pop	r22
    21c8:	5f 91       	pop	r21
    21ca:	4f 91       	pop	r20
    21cc:	3f 91       	pop	r19
    21ce:	2f 91       	pop	r18
    21d0:	0f 90       	pop	r0
    21d2:	0b be       	out	0x3b, r0	; 59
    21d4:	0f 90       	pop	r0
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	0f 90       	pop	r0
    21da:	1f 90       	pop	r1
    21dc:	18 95       	reti

000021de <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
    21de:	1f 92       	push	r1
    21e0:	0f 92       	push	r0
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	0f 92       	push	r0
    21e6:	11 24       	eor	r1, r1
    21e8:	0b b6       	in	r0, 0x3b	; 59
    21ea:	0f 92       	push	r0
    21ec:	2f 93       	push	r18
    21ee:	3f 93       	push	r19
    21f0:	4f 93       	push	r20
    21f2:	5f 93       	push	r21
    21f4:	6f 93       	push	r22
    21f6:	7f 93       	push	r23
    21f8:	8f 93       	push	r24
    21fa:	9f 93       	push	r25
    21fc:	af 93       	push	r26
    21fe:	bf 93       	push	r27
    2200:	ef 93       	push	r30
    2202:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
    2204:	e0 91 97 08 	lds	r30, 0x0897	; 0x800897 <tc_tccr1_compa_callback>
    2208:	f0 91 98 08 	lds	r31, 0x0898	; 0x800898 <tc_tccr1_compa_callback+0x1>
    220c:	30 97       	sbiw	r30, 0x00	; 0
    220e:	09 f0       	breq	.+2      	; 0x2212 <__vector_17+0x34>
		tc_tccr1_compa_callback();
    2210:	19 95       	eicall
	}
}
    2212:	ff 91       	pop	r31
    2214:	ef 91       	pop	r30
    2216:	bf 91       	pop	r27
    2218:	af 91       	pop	r26
    221a:	9f 91       	pop	r25
    221c:	8f 91       	pop	r24
    221e:	7f 91       	pop	r23
    2220:	6f 91       	pop	r22
    2222:	5f 91       	pop	r21
    2224:	4f 91       	pop	r20
    2226:	3f 91       	pop	r19
    2228:	2f 91       	pop	r18
    222a:	0f 90       	pop	r0
    222c:	0b be       	out	0x3b, r0	; 59
    222e:	0f 90       	pop	r0
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	0f 90       	pop	r0
    2234:	1f 90       	pop	r1
    2236:	18 95       	reti

00002238 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
    2238:	1f 92       	push	r1
    223a:	0f 92       	push	r0
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	0f 92       	push	r0
    2240:	11 24       	eor	r1, r1
    2242:	0b b6       	in	r0, 0x3b	; 59
    2244:	0f 92       	push	r0
    2246:	2f 93       	push	r18
    2248:	3f 93       	push	r19
    224a:	4f 93       	push	r20
    224c:	5f 93       	push	r21
    224e:	6f 93       	push	r22
    2250:	7f 93       	push	r23
    2252:	8f 93       	push	r24
    2254:	9f 93       	push	r25
    2256:	af 93       	push	r26
    2258:	bf 93       	push	r27
    225a:	ef 93       	push	r30
    225c:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
    225e:	e0 91 95 08 	lds	r30, 0x0895	; 0x800895 <tc_tccr1_compb_callback>
    2262:	f0 91 96 08 	lds	r31, 0x0896	; 0x800896 <tc_tccr1_compb_callback+0x1>
    2266:	30 97       	sbiw	r30, 0x00	; 0
    2268:	09 f0       	breq	.+2      	; 0x226c <__vector_18+0x34>
		tc_tccr1_compb_callback();
    226a:	19 95       	eicall
	}
}
    226c:	ff 91       	pop	r31
    226e:	ef 91       	pop	r30
    2270:	bf 91       	pop	r27
    2272:	af 91       	pop	r26
    2274:	9f 91       	pop	r25
    2276:	8f 91       	pop	r24
    2278:	7f 91       	pop	r23
    227a:	6f 91       	pop	r22
    227c:	5f 91       	pop	r21
    227e:	4f 91       	pop	r20
    2280:	3f 91       	pop	r19
    2282:	2f 91       	pop	r18
    2284:	0f 90       	pop	r0
    2286:	0b be       	out	0x3b, r0	; 59
    2288:	0f 90       	pop	r0
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	0f 90       	pop	r0
    228e:	1f 90       	pop	r1
    2290:	18 95       	reti

00002292 <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
    2292:	1f 92       	push	r1
    2294:	0f 92       	push	r0
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	0f 92       	push	r0
    229a:	11 24       	eor	r1, r1
    229c:	0b b6       	in	r0, 0x3b	; 59
    229e:	0f 92       	push	r0
    22a0:	2f 93       	push	r18
    22a2:	3f 93       	push	r19
    22a4:	4f 93       	push	r20
    22a6:	5f 93       	push	r21
    22a8:	6f 93       	push	r22
    22aa:	7f 93       	push	r23
    22ac:	8f 93       	push	r24
    22ae:	9f 93       	push	r25
    22b0:	af 93       	push	r26
    22b2:	bf 93       	push	r27
    22b4:	ef 93       	push	r30
    22b6:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
    22b8:	e0 91 93 08 	lds	r30, 0x0893	; 0x800893 <tc_tccr1_compc_callback>
    22bc:	f0 91 94 08 	lds	r31, 0x0894	; 0x800894 <tc_tccr1_compc_callback+0x1>
    22c0:	30 97       	sbiw	r30, 0x00	; 0
    22c2:	09 f0       	breq	.+2      	; 0x22c6 <__vector_19+0x34>
		tc_tccr1_compc_callback();
    22c4:	19 95       	eicall
	}
}
    22c6:	ff 91       	pop	r31
    22c8:	ef 91       	pop	r30
    22ca:	bf 91       	pop	r27
    22cc:	af 91       	pop	r26
    22ce:	9f 91       	pop	r25
    22d0:	8f 91       	pop	r24
    22d2:	7f 91       	pop	r23
    22d4:	6f 91       	pop	r22
    22d6:	5f 91       	pop	r21
    22d8:	4f 91       	pop	r20
    22da:	3f 91       	pop	r19
    22dc:	2f 91       	pop	r18
    22de:	0f 90       	pop	r0
    22e0:	0b be       	out	0x3b, r0	; 59
    22e2:	0f 90       	pop	r0
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	0f 90       	pop	r0
    22e8:	1f 90       	pop	r1
    22ea:	18 95       	reti

000022ec <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
    22ec:	1f 92       	push	r1
    22ee:	0f 92       	push	r0
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	0f 92       	push	r0
    22f4:	11 24       	eor	r1, r1
    22f6:	0b b6       	in	r0, 0x3b	; 59
    22f8:	0f 92       	push	r0
    22fa:	2f 93       	push	r18
    22fc:	3f 93       	push	r19
    22fe:	4f 93       	push	r20
    2300:	5f 93       	push	r21
    2302:	6f 93       	push	r22
    2304:	7f 93       	push	r23
    2306:	8f 93       	push	r24
    2308:	9f 93       	push	r25
    230a:	af 93       	push	r26
    230c:	bf 93       	push	r27
    230e:	ef 93       	push	r30
    2310:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
    2312:	e0 91 91 08 	lds	r30, 0x0891	; 0x800891 <tc_tccr3_ovf_callback>
    2316:	f0 91 92 08 	lds	r31, 0x0892	; 0x800892 <tc_tccr3_ovf_callback+0x1>
    231a:	30 97       	sbiw	r30, 0x00	; 0
    231c:	09 f0       	breq	.+2      	; 0x2320 <__vector_35+0x34>
		tc_tccr3_ovf_callback();
    231e:	19 95       	eicall
	}
}
    2320:	ff 91       	pop	r31
    2322:	ef 91       	pop	r30
    2324:	bf 91       	pop	r27
    2326:	af 91       	pop	r26
    2328:	9f 91       	pop	r25
    232a:	8f 91       	pop	r24
    232c:	7f 91       	pop	r23
    232e:	6f 91       	pop	r22
    2330:	5f 91       	pop	r21
    2332:	4f 91       	pop	r20
    2334:	3f 91       	pop	r19
    2336:	2f 91       	pop	r18
    2338:	0f 90       	pop	r0
    233a:	0b be       	out	0x3b, r0	; 59
    233c:	0f 90       	pop	r0
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	0f 90       	pop	r0
    2342:	1f 90       	pop	r1
    2344:	18 95       	reti

00002346 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
    2346:	1f 92       	push	r1
    2348:	0f 92       	push	r0
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	0f 92       	push	r0
    234e:	11 24       	eor	r1, r1
    2350:	0b b6       	in	r0, 0x3b	; 59
    2352:	0f 92       	push	r0
    2354:	2f 93       	push	r18
    2356:	3f 93       	push	r19
    2358:	4f 93       	push	r20
    235a:	5f 93       	push	r21
    235c:	6f 93       	push	r22
    235e:	7f 93       	push	r23
    2360:	8f 93       	push	r24
    2362:	9f 93       	push	r25
    2364:	af 93       	push	r26
    2366:	bf 93       	push	r27
    2368:	ef 93       	push	r30
    236a:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
    236c:	e0 91 8f 08 	lds	r30, 0x088F	; 0x80088f <tc_tccr3_compa_callback>
    2370:	f0 91 90 08 	lds	r31, 0x0890	; 0x800890 <tc_tccr3_compa_callback+0x1>
    2374:	30 97       	sbiw	r30, 0x00	; 0
    2376:	09 f0       	breq	.+2      	; 0x237a <__vector_32+0x34>
		tc_tccr3_compa_callback();
    2378:	19 95       	eicall
	}
}
    237a:	ff 91       	pop	r31
    237c:	ef 91       	pop	r30
    237e:	bf 91       	pop	r27
    2380:	af 91       	pop	r26
    2382:	9f 91       	pop	r25
    2384:	8f 91       	pop	r24
    2386:	7f 91       	pop	r23
    2388:	6f 91       	pop	r22
    238a:	5f 91       	pop	r21
    238c:	4f 91       	pop	r20
    238e:	3f 91       	pop	r19
    2390:	2f 91       	pop	r18
    2392:	0f 90       	pop	r0
    2394:	0b be       	out	0x3b, r0	; 59
    2396:	0f 90       	pop	r0
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	0f 90       	pop	r0
    239c:	1f 90       	pop	r1
    239e:	18 95       	reti

000023a0 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    23a0:	1f 92       	push	r1
    23a2:	0f 92       	push	r0
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	0f 92       	push	r0
    23a8:	11 24       	eor	r1, r1
    23aa:	0b b6       	in	r0, 0x3b	; 59
    23ac:	0f 92       	push	r0
    23ae:	2f 93       	push	r18
    23b0:	3f 93       	push	r19
    23b2:	4f 93       	push	r20
    23b4:	5f 93       	push	r21
    23b6:	6f 93       	push	r22
    23b8:	7f 93       	push	r23
    23ba:	8f 93       	push	r24
    23bc:	9f 93       	push	r25
    23be:	af 93       	push	r26
    23c0:	bf 93       	push	r27
    23c2:	ef 93       	push	r30
    23c4:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
    23c6:	e0 91 8d 08 	lds	r30, 0x088D	; 0x80088d <tc_tccr3_compb_callback>
    23ca:	f0 91 8e 08 	lds	r31, 0x088E	; 0x80088e <tc_tccr3_compb_callback+0x1>
    23ce:	30 97       	sbiw	r30, 0x00	; 0
    23d0:	09 f0       	breq	.+2      	; 0x23d4 <__vector_33+0x34>
		tc_tccr3_compb_callback();
    23d2:	19 95       	eicall
	}
}
    23d4:	ff 91       	pop	r31
    23d6:	ef 91       	pop	r30
    23d8:	bf 91       	pop	r27
    23da:	af 91       	pop	r26
    23dc:	9f 91       	pop	r25
    23de:	8f 91       	pop	r24
    23e0:	7f 91       	pop	r23
    23e2:	6f 91       	pop	r22
    23e4:	5f 91       	pop	r21
    23e6:	4f 91       	pop	r20
    23e8:	3f 91       	pop	r19
    23ea:	2f 91       	pop	r18
    23ec:	0f 90       	pop	r0
    23ee:	0b be       	out	0x3b, r0	; 59
    23f0:	0f 90       	pop	r0
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	0f 90       	pop	r0
    23f6:	1f 90       	pop	r1
    23f8:	18 95       	reti

000023fa <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
    23fa:	1f 92       	push	r1
    23fc:	0f 92       	push	r0
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	0f 92       	push	r0
    2402:	11 24       	eor	r1, r1
    2404:	0b b6       	in	r0, 0x3b	; 59
    2406:	0f 92       	push	r0
    2408:	2f 93       	push	r18
    240a:	3f 93       	push	r19
    240c:	4f 93       	push	r20
    240e:	5f 93       	push	r21
    2410:	6f 93       	push	r22
    2412:	7f 93       	push	r23
    2414:	8f 93       	push	r24
    2416:	9f 93       	push	r25
    2418:	af 93       	push	r26
    241a:	bf 93       	push	r27
    241c:	ef 93       	push	r30
    241e:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
    2420:	e0 91 8b 08 	lds	r30, 0x088B	; 0x80088b <tc_tccr3_compc_callback>
    2424:	f0 91 8c 08 	lds	r31, 0x088C	; 0x80088c <tc_tccr3_compc_callback+0x1>
    2428:	30 97       	sbiw	r30, 0x00	; 0
    242a:	09 f0       	breq	.+2      	; 0x242e <__vector_34+0x34>
		tc_tccr3_compc_callback();
    242c:	19 95       	eicall
	}
}
    242e:	ff 91       	pop	r31
    2430:	ef 91       	pop	r30
    2432:	bf 91       	pop	r27
    2434:	af 91       	pop	r26
    2436:	9f 91       	pop	r25
    2438:	8f 91       	pop	r24
    243a:	7f 91       	pop	r23
    243c:	6f 91       	pop	r22
    243e:	5f 91       	pop	r21
    2440:	4f 91       	pop	r20
    2442:	3f 91       	pop	r19
    2444:	2f 91       	pop	r18
    2446:	0f 90       	pop	r0
    2448:	0b be       	out	0x3b, r0	; 59
    244a:	0f 90       	pop	r0
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	0f 90       	pop	r0
    2450:	1f 90       	pop	r1
    2452:	18 95       	reti

00002454 <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
    2454:	1f 92       	push	r1
    2456:	0f 92       	push	r0
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	0f 92       	push	r0
    245c:	11 24       	eor	r1, r1
    245e:	0b b6       	in	r0, 0x3b	; 59
    2460:	0f 92       	push	r0
    2462:	2f 93       	push	r18
    2464:	3f 93       	push	r19
    2466:	4f 93       	push	r20
    2468:	5f 93       	push	r21
    246a:	6f 93       	push	r22
    246c:	7f 93       	push	r23
    246e:	8f 93       	push	r24
    2470:	9f 93       	push	r25
    2472:	af 93       	push	r26
    2474:	bf 93       	push	r27
    2476:	ef 93       	push	r30
    2478:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
    247a:	e0 91 89 08 	lds	r30, 0x0889	; 0x800889 <tc_tccr4_ovf_callback>
    247e:	f0 91 8a 08 	lds	r31, 0x088A	; 0x80088a <tc_tccr4_ovf_callback+0x1>
    2482:	30 97       	sbiw	r30, 0x00	; 0
    2484:	09 f0       	breq	.+2      	; 0x2488 <__vector_45+0x34>
		tc_tccr4_ovf_callback();
    2486:	19 95       	eicall
	}
}
    2488:	ff 91       	pop	r31
    248a:	ef 91       	pop	r30
    248c:	bf 91       	pop	r27
    248e:	af 91       	pop	r26
    2490:	9f 91       	pop	r25
    2492:	8f 91       	pop	r24
    2494:	7f 91       	pop	r23
    2496:	6f 91       	pop	r22
    2498:	5f 91       	pop	r21
    249a:	4f 91       	pop	r20
    249c:	3f 91       	pop	r19
    249e:	2f 91       	pop	r18
    24a0:	0f 90       	pop	r0
    24a2:	0b be       	out	0x3b, r0	; 59
    24a4:	0f 90       	pop	r0
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	0f 90       	pop	r0
    24aa:	1f 90       	pop	r1
    24ac:	18 95       	reti

000024ae <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    24ae:	1f 92       	push	r1
    24b0:	0f 92       	push	r0
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	0f 92       	push	r0
    24b6:	11 24       	eor	r1, r1
    24b8:	0b b6       	in	r0, 0x3b	; 59
    24ba:	0f 92       	push	r0
    24bc:	2f 93       	push	r18
    24be:	3f 93       	push	r19
    24c0:	4f 93       	push	r20
    24c2:	5f 93       	push	r21
    24c4:	6f 93       	push	r22
    24c6:	7f 93       	push	r23
    24c8:	8f 93       	push	r24
    24ca:	9f 93       	push	r25
    24cc:	af 93       	push	r26
    24ce:	bf 93       	push	r27
    24d0:	ef 93       	push	r30
    24d2:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
    24d4:	e0 91 87 08 	lds	r30, 0x0887	; 0x800887 <tc_tccr4_compa_callback>
    24d8:	f0 91 88 08 	lds	r31, 0x0888	; 0x800888 <tc_tccr4_compa_callback+0x1>
    24dc:	30 97       	sbiw	r30, 0x00	; 0
    24de:	09 f0       	breq	.+2      	; 0x24e2 <__vector_42+0x34>
		tc_tccr4_compa_callback();
    24e0:	19 95       	eicall
	}
}
    24e2:	ff 91       	pop	r31
    24e4:	ef 91       	pop	r30
    24e6:	bf 91       	pop	r27
    24e8:	af 91       	pop	r26
    24ea:	9f 91       	pop	r25
    24ec:	8f 91       	pop	r24
    24ee:	7f 91       	pop	r23
    24f0:	6f 91       	pop	r22
    24f2:	5f 91       	pop	r21
    24f4:	4f 91       	pop	r20
    24f6:	3f 91       	pop	r19
    24f8:	2f 91       	pop	r18
    24fa:	0f 90       	pop	r0
    24fc:	0b be       	out	0x3b, r0	; 59
    24fe:	0f 90       	pop	r0
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	0f 90       	pop	r0
    2504:	1f 90       	pop	r1
    2506:	18 95       	reti

00002508 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
    2508:	1f 92       	push	r1
    250a:	0f 92       	push	r0
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	0f 92       	push	r0
    2510:	11 24       	eor	r1, r1
    2512:	0b b6       	in	r0, 0x3b	; 59
    2514:	0f 92       	push	r0
    2516:	2f 93       	push	r18
    2518:	3f 93       	push	r19
    251a:	4f 93       	push	r20
    251c:	5f 93       	push	r21
    251e:	6f 93       	push	r22
    2520:	7f 93       	push	r23
    2522:	8f 93       	push	r24
    2524:	9f 93       	push	r25
    2526:	af 93       	push	r26
    2528:	bf 93       	push	r27
    252a:	ef 93       	push	r30
    252c:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
    252e:	e0 91 85 08 	lds	r30, 0x0885	; 0x800885 <tc_tccr4_compb_callback>
    2532:	f0 91 86 08 	lds	r31, 0x0886	; 0x800886 <tc_tccr4_compb_callback+0x1>
    2536:	30 97       	sbiw	r30, 0x00	; 0
    2538:	09 f0       	breq	.+2      	; 0x253c <__vector_43+0x34>
		tc_tccr4_compb_callback();
    253a:	19 95       	eicall
	}
}
    253c:	ff 91       	pop	r31
    253e:	ef 91       	pop	r30
    2540:	bf 91       	pop	r27
    2542:	af 91       	pop	r26
    2544:	9f 91       	pop	r25
    2546:	8f 91       	pop	r24
    2548:	7f 91       	pop	r23
    254a:	6f 91       	pop	r22
    254c:	5f 91       	pop	r21
    254e:	4f 91       	pop	r20
    2550:	3f 91       	pop	r19
    2552:	2f 91       	pop	r18
    2554:	0f 90       	pop	r0
    2556:	0b be       	out	0x3b, r0	; 59
    2558:	0f 90       	pop	r0
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	0f 90       	pop	r0
    255e:	1f 90       	pop	r1
    2560:	18 95       	reti

00002562 <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
    2562:	1f 92       	push	r1
    2564:	0f 92       	push	r0
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	0f 92       	push	r0
    256a:	11 24       	eor	r1, r1
    256c:	0b b6       	in	r0, 0x3b	; 59
    256e:	0f 92       	push	r0
    2570:	2f 93       	push	r18
    2572:	3f 93       	push	r19
    2574:	4f 93       	push	r20
    2576:	5f 93       	push	r21
    2578:	6f 93       	push	r22
    257a:	7f 93       	push	r23
    257c:	8f 93       	push	r24
    257e:	9f 93       	push	r25
    2580:	af 93       	push	r26
    2582:	bf 93       	push	r27
    2584:	ef 93       	push	r30
    2586:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
    2588:	e0 91 83 08 	lds	r30, 0x0883	; 0x800883 <tc_tccr4_compc_callback>
    258c:	f0 91 84 08 	lds	r31, 0x0884	; 0x800884 <tc_tccr4_compc_callback+0x1>
    2590:	30 97       	sbiw	r30, 0x00	; 0
    2592:	09 f0       	breq	.+2      	; 0x2596 <__vector_44+0x34>
		tc_tccr4_compc_callback();
    2594:	19 95       	eicall
	}
}
    2596:	ff 91       	pop	r31
    2598:	ef 91       	pop	r30
    259a:	bf 91       	pop	r27
    259c:	af 91       	pop	r26
    259e:	9f 91       	pop	r25
    25a0:	8f 91       	pop	r24
    25a2:	7f 91       	pop	r23
    25a4:	6f 91       	pop	r22
    25a6:	5f 91       	pop	r21
    25a8:	4f 91       	pop	r20
    25aa:	3f 91       	pop	r19
    25ac:	2f 91       	pop	r18
    25ae:	0f 90       	pop	r0
    25b0:	0b be       	out	0x3b, r0	; 59
    25b2:	0f 90       	pop	r0
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	0f 90       	pop	r0
    25b8:	1f 90       	pop	r1
    25ba:	18 95       	reti

000025bc <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
    25bc:	1f 92       	push	r1
    25be:	0f 92       	push	r0
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	0f 92       	push	r0
    25c4:	11 24       	eor	r1, r1
    25c6:	0b b6       	in	r0, 0x3b	; 59
    25c8:	0f 92       	push	r0
    25ca:	2f 93       	push	r18
    25cc:	3f 93       	push	r19
    25ce:	4f 93       	push	r20
    25d0:	5f 93       	push	r21
    25d2:	6f 93       	push	r22
    25d4:	7f 93       	push	r23
    25d6:	8f 93       	push	r24
    25d8:	9f 93       	push	r25
    25da:	af 93       	push	r26
    25dc:	bf 93       	push	r27
    25de:	ef 93       	push	r30
    25e0:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
    25e2:	e0 91 81 08 	lds	r30, 0x0881	; 0x800881 <tc_tccr5_ovf_callback>
    25e6:	f0 91 82 08 	lds	r31, 0x0882	; 0x800882 <tc_tccr5_ovf_callback+0x1>
    25ea:	30 97       	sbiw	r30, 0x00	; 0
    25ec:	09 f0       	breq	.+2      	; 0x25f0 <__vector_50+0x34>
		tc_tccr5_ovf_callback();
    25ee:	19 95       	eicall
	}
}
    25f0:	ff 91       	pop	r31
    25f2:	ef 91       	pop	r30
    25f4:	bf 91       	pop	r27
    25f6:	af 91       	pop	r26
    25f8:	9f 91       	pop	r25
    25fa:	8f 91       	pop	r24
    25fc:	7f 91       	pop	r23
    25fe:	6f 91       	pop	r22
    2600:	5f 91       	pop	r21
    2602:	4f 91       	pop	r20
    2604:	3f 91       	pop	r19
    2606:	2f 91       	pop	r18
    2608:	0f 90       	pop	r0
    260a:	0b be       	out	0x3b, r0	; 59
    260c:	0f 90       	pop	r0
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	0f 90       	pop	r0
    2612:	1f 90       	pop	r1
    2614:	18 95       	reti

00002616 <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
    2616:	1f 92       	push	r1
    2618:	0f 92       	push	r0
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	0f 92       	push	r0
    261e:	11 24       	eor	r1, r1
    2620:	0b b6       	in	r0, 0x3b	; 59
    2622:	0f 92       	push	r0
    2624:	2f 93       	push	r18
    2626:	3f 93       	push	r19
    2628:	4f 93       	push	r20
    262a:	5f 93       	push	r21
    262c:	6f 93       	push	r22
    262e:	7f 93       	push	r23
    2630:	8f 93       	push	r24
    2632:	9f 93       	push	r25
    2634:	af 93       	push	r26
    2636:	bf 93       	push	r27
    2638:	ef 93       	push	r30
    263a:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
    263c:	e0 91 7f 08 	lds	r30, 0x087F	; 0x80087f <tc_tccr5_compa_callback>
    2640:	f0 91 80 08 	lds	r31, 0x0880	; 0x800880 <tc_tccr5_compa_callback+0x1>
    2644:	30 97       	sbiw	r30, 0x00	; 0
    2646:	09 f0       	breq	.+2      	; 0x264a <__vector_47+0x34>
		tc_tccr5_compa_callback();
    2648:	19 95       	eicall
	}
}
    264a:	ff 91       	pop	r31
    264c:	ef 91       	pop	r30
    264e:	bf 91       	pop	r27
    2650:	af 91       	pop	r26
    2652:	9f 91       	pop	r25
    2654:	8f 91       	pop	r24
    2656:	7f 91       	pop	r23
    2658:	6f 91       	pop	r22
    265a:	5f 91       	pop	r21
    265c:	4f 91       	pop	r20
    265e:	3f 91       	pop	r19
    2660:	2f 91       	pop	r18
    2662:	0f 90       	pop	r0
    2664:	0b be       	out	0x3b, r0	; 59
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	0f 90       	pop	r0
    266c:	1f 90       	pop	r1
    266e:	18 95       	reti

00002670 <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
    2670:	1f 92       	push	r1
    2672:	0f 92       	push	r0
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	0f 92       	push	r0
    2678:	11 24       	eor	r1, r1
    267a:	0b b6       	in	r0, 0x3b	; 59
    267c:	0f 92       	push	r0
    267e:	2f 93       	push	r18
    2680:	3f 93       	push	r19
    2682:	4f 93       	push	r20
    2684:	5f 93       	push	r21
    2686:	6f 93       	push	r22
    2688:	7f 93       	push	r23
    268a:	8f 93       	push	r24
    268c:	9f 93       	push	r25
    268e:	af 93       	push	r26
    2690:	bf 93       	push	r27
    2692:	ef 93       	push	r30
    2694:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
    2696:	e0 91 7d 08 	lds	r30, 0x087D	; 0x80087d <tc_tccr5_compb_callback>
    269a:	f0 91 7e 08 	lds	r31, 0x087E	; 0x80087e <tc_tccr5_compb_callback+0x1>
    269e:	30 97       	sbiw	r30, 0x00	; 0
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <__vector_48+0x34>
		tc_tccr5_compb_callback();
    26a2:	19 95       	eicall
	}
}
    26a4:	ff 91       	pop	r31
    26a6:	ef 91       	pop	r30
    26a8:	bf 91       	pop	r27
    26aa:	af 91       	pop	r26
    26ac:	9f 91       	pop	r25
    26ae:	8f 91       	pop	r24
    26b0:	7f 91       	pop	r23
    26b2:	6f 91       	pop	r22
    26b4:	5f 91       	pop	r21
    26b6:	4f 91       	pop	r20
    26b8:	3f 91       	pop	r19
    26ba:	2f 91       	pop	r18
    26bc:	0f 90       	pop	r0
    26be:	0b be       	out	0x3b, r0	; 59
    26c0:	0f 90       	pop	r0
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	0f 90       	pop	r0
    26c6:	1f 90       	pop	r1
    26c8:	18 95       	reti

000026ca <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
    26ca:	1f 92       	push	r1
    26cc:	0f 92       	push	r0
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	0f 92       	push	r0
    26d2:	11 24       	eor	r1, r1
    26d4:	0b b6       	in	r0, 0x3b	; 59
    26d6:	0f 92       	push	r0
    26d8:	2f 93       	push	r18
    26da:	3f 93       	push	r19
    26dc:	4f 93       	push	r20
    26de:	5f 93       	push	r21
    26e0:	6f 93       	push	r22
    26e2:	7f 93       	push	r23
    26e4:	8f 93       	push	r24
    26e6:	9f 93       	push	r25
    26e8:	af 93       	push	r26
    26ea:	bf 93       	push	r27
    26ec:	ef 93       	push	r30
    26ee:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
    26f0:	e0 91 7b 08 	lds	r30, 0x087B	; 0x80087b <tc_tccr5_compc_callback>
    26f4:	f0 91 7c 08 	lds	r31, 0x087C	; 0x80087c <tc_tccr5_compc_callback+0x1>
    26f8:	30 97       	sbiw	r30, 0x00	; 0
    26fa:	09 f0       	breq	.+2      	; 0x26fe <__vector_49+0x34>
		tc_tccr5_compc_callback();
    26fc:	19 95       	eicall
	}
}
    26fe:	ff 91       	pop	r31
    2700:	ef 91       	pop	r30
    2702:	bf 91       	pop	r27
    2704:	af 91       	pop	r26
    2706:	9f 91       	pop	r25
    2708:	8f 91       	pop	r24
    270a:	7f 91       	pop	r23
    270c:	6f 91       	pop	r22
    270e:	5f 91       	pop	r21
    2710:	4f 91       	pop	r20
    2712:	3f 91       	pop	r19
    2714:	2f 91       	pop	r18
    2716:	0f 90       	pop	r0
    2718:	0b be       	out	0x3b, r0	; 59
    271a:	0f 90       	pop	r0
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	0f 90       	pop	r0
    2720:	1f 90       	pop	r1
    2722:	18 95       	reti

00002724 <tc_enable>:

void tc_enable(volatile void *tc)
{
    2724:	1f 93       	push	r17
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	1f 92       	push	r1
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2730:	2f b7       	in	r18, 0x3f	; 63
    2732:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2734:	f8 94       	cli
	return flags;
    2736:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	09 f4       	brne	.+2      	; 0x273e <tc_enable+0x1a>
    273c:	64 c0       	rjmp	.+200    	; 0x2806 <tc_enable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    273e:	88 37       	cpi	r24, 0x78	; 120
    2740:	91 05       	cpc	r25, r1
    2742:	49 f4       	brne	.+18     	; 0x2756 <tc_enable+0x32>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    2744:	61 e0       	ldi	r22, 0x01	; 1
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    274c:	60 e1       	ldi	r22, 0x10	; 16
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    2754:	58 c0       	rjmp	.+176    	; 0x2806 <tc_enable+0xe2>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2756:	80 3c       	cpi	r24, 0xC0	; 192
    2758:	91 05       	cpc	r25, r1
    275a:	29 f4       	brne	.+10     	; 0x2766 <tc_enable+0x42>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    275c:	62 e0       	ldi	r22, 0x02	; 2
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    2764:	50 c0       	rjmp	.+160    	; 0x2806 <tc_enable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2766:	8c 34       	cpi	r24, 0x4C	; 76
    2768:	91 05       	cpc	r25, r1
    276a:	29 f4       	brne	.+10     	; 0x2776 <tc_enable+0x52>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    276c:	64 e0       	ldi	r22, 0x04	; 4
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    2774:	48 c0       	rjmp	.+144    	; 0x2806 <tc_enable+0xe2>
	}
#endif

	else if (module == &TCCR1A) {
    2776:	80 38       	cpi	r24, 0x80	; 128
    2778:	91 05       	cpc	r25, r1
    277a:	29 f4       	brne	.+10     	; 0x2786 <tc_enable+0x62>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    277c:	68 e0       	ldi	r22, 0x08	; 8
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    2784:	40 c0       	rjmp	.+128    	; 0x2806 <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    2786:	84 34       	cpi	r24, 0x44	; 68
    2788:	91 05       	cpc	r25, r1
    278a:	29 f4       	brne	.+10     	; 0x2796 <tc_enable+0x72>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    278c:	60 e2       	ldi	r22, 0x20	; 32
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    2794:	38 c0       	rjmp	.+112    	; 0x2806 <tc_enable+0xe2>
	} else if (module == &TCCR2A) {
    2796:	80 3b       	cpi	r24, 0xB0	; 176
    2798:	91 05       	cpc	r25, r1
    279a:	29 f4       	brne	.+10     	; 0x27a6 <tc_enable+0x82>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    279c:	60 e4       	ldi	r22, 0x40	; 64
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    27a4:	30 c0       	rjmp	.+96     	; 0x2806 <tc_enable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    27a6:	88 3b       	cpi	r24, 0xB8	; 184
    27a8:	91 05       	cpc	r25, r1
    27aa:	29 f4       	brne	.+10     	; 0x27b6 <tc_enable+0x92>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    27ac:	60 e8       	ldi	r22, 0x80	; 128
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    27b4:	28 c0       	rjmp	.+80     	; 0x2806 <tc_enable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    27b6:	88 3c       	cpi	r24, 0xC8	; 200
    27b8:	91 05       	cpc	r25, r1
    27ba:	29 f4       	brne	.+10     	; 0x27c6 <tc_enable+0xa2>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    27bc:	61 e0       	ldi	r22, 0x01	; 1
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    27c4:	20 c0       	rjmp	.+64     	; 0x2806 <tc_enable+0xe2>
	} else if (module == &TCCR3A) {
    27c6:	80 39       	cpi	r24, 0x90	; 144
    27c8:	91 05       	cpc	r25, r1
    27ca:	29 f4       	brne	.+10     	; 0x27d6 <tc_enable+0xb2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    27cc:	68 e0       	ldi	r22, 0x08	; 8
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    27d4:	18 c0       	rjmp	.+48     	; 0x2806 <tc_enable+0xe2>
	} else if (module == &TCCR4A) {
    27d6:	80 3a       	cpi	r24, 0xA0	; 160
    27d8:	91 05       	cpc	r25, r1
    27da:	29 f4       	brne	.+10     	; 0x27e6 <tc_enable+0xc2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    27dc:	60 e1       	ldi	r22, 0x10	; 16
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    27e4:	10 c0       	rjmp	.+32     	; 0x2806 <tc_enable+0xe2>
	} else if (module == &TCCR5A) {
    27e6:	80 32       	cpi	r24, 0x20	; 32
    27e8:	21 e0       	ldi	r18, 0x01	; 1
    27ea:	92 07       	cpc	r25, r18
    27ec:	29 f4       	brne	.+10     	; 0x27f8 <tc_enable+0xd4>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    27ee:	60 e2       	ldi	r22, 0x20	; 32
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    27f6:	07 c0       	rjmp	.+14     	; 0x2806 <tc_enable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    27f8:	83 34       	cpi	r24, 0x43	; 67
    27fa:	91 40       	sbci	r25, 0x01	; 1
    27fc:	21 f4       	brne	.+8      	; 0x2806 <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    27fe:	60 e4       	ldi	r22, 0x40	; 64
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2806:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    2808:	0f 90       	pop	r0
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	1f 91       	pop	r17
    2810:	08 95       	ret

00002812 <tc_disable>:

void tc_disable(volatile void *tc)
{
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	1f 92       	push	r1
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    281e:	2f b7       	in	r18, 0x3f	; 63
    2820:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2822:	f8 94       	cli
	return flags;
    2824:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	09 f4       	brne	.+2      	; 0x282c <tc_disable+0x1a>
    282a:	64 c0       	rjmp	.+200    	; 0x28f4 <tc_disable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    282c:	88 37       	cpi	r24, 0x78	; 120
    282e:	91 05       	cpc	r25, r1
    2830:	49 f4       	brne	.+18     	; 0x2844 <tc_disable+0x32>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    2832:	61 e0       	ldi	r22, 0x01	; 1
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    283a:	60 e1       	ldi	r22, 0x10	; 16
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    2842:	58 c0       	rjmp	.+176    	; 0x28f4 <tc_disable+0xe2>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2844:	80 3c       	cpi	r24, 0xC0	; 192
    2846:	91 05       	cpc	r25, r1
    2848:	29 f4       	brne	.+10     	; 0x2854 <tc_disable+0x42>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    284a:	62 e0       	ldi	r22, 0x02	; 2
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    2852:	50 c0       	rjmp	.+160    	; 0x28f4 <tc_disable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2854:	8c 34       	cpi	r24, 0x4C	; 76
    2856:	91 05       	cpc	r25, r1
    2858:	29 f4       	brne	.+10     	; 0x2864 <tc_disable+0x52>
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    285a:	64 e0       	ldi	r22, 0x04	; 4
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    2862:	48 c0       	rjmp	.+144    	; 0x28f4 <tc_disable+0xe2>
	}
#endif
	else if (module == &TCCR1A) {
    2864:	80 38       	cpi	r24, 0x80	; 128
    2866:	91 05       	cpc	r25, r1
    2868:	29 f4       	brne	.+10     	; 0x2874 <tc_disable+0x62>
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    286a:	68 e0       	ldi	r22, 0x08	; 8
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    2872:	40 c0       	rjmp	.+128    	; 0x28f4 <tc_disable+0xe2>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    2874:	84 34       	cpi	r24, 0x44	; 68
    2876:	91 05       	cpc	r25, r1
    2878:	29 f4       	brne	.+10     	; 0x2884 <tc_disable+0x72>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    287a:	60 e2       	ldi	r22, 0x20	; 32
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    2882:	38 c0       	rjmp	.+112    	; 0x28f4 <tc_disable+0xe2>
	} else if (module == &TCCR2A) {
    2884:	80 3b       	cpi	r24, 0xB0	; 176
    2886:	91 05       	cpc	r25, r1
    2888:	29 f4       	brne	.+10     	; 0x2894 <tc_disable+0x82>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    288a:	60 e4       	ldi	r22, 0x40	; 64
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    2892:	30 c0       	rjmp	.+96     	; 0x28f4 <tc_disable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    2894:	88 3b       	cpi	r24, 0xB8	; 184
    2896:	91 05       	cpc	r25, r1
    2898:	29 f4       	brne	.+10     	; 0x28a4 <tc_disable+0x92>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    289a:	60 e8       	ldi	r22, 0x80	; 128
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    28a2:	28 c0       	rjmp	.+80     	; 0x28f4 <tc_disable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    28a4:	88 3c       	cpi	r24, 0xC8	; 200
    28a6:	91 05       	cpc	r25, r1
    28a8:	29 f4       	brne	.+10     	; 0x28b4 <tc_disable+0xa2>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    28aa:	61 e0       	ldi	r22, 0x01	; 1
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    28b2:	20 c0       	rjmp	.+64     	; 0x28f4 <tc_disable+0xe2>
	} else if (module == &TCCR3A) {
    28b4:	80 39       	cpi	r24, 0x90	; 144
    28b6:	91 05       	cpc	r25, r1
    28b8:	29 f4       	brne	.+10     	; 0x28c4 <tc_disable+0xb2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    28ba:	68 e0       	ldi	r22, 0x08	; 8
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    28c2:	18 c0       	rjmp	.+48     	; 0x28f4 <tc_disable+0xe2>
	} else if (module == &TCCR4A) {
    28c4:	80 3a       	cpi	r24, 0xA0	; 160
    28c6:	91 05       	cpc	r25, r1
    28c8:	29 f4       	brne	.+10     	; 0x28d4 <tc_disable+0xc2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    28ca:	60 e1       	ldi	r22, 0x10	; 16
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    28d2:	10 c0       	rjmp	.+32     	; 0x28f4 <tc_disable+0xe2>
	} else if (module == &TCCR5A) {
    28d4:	80 32       	cpi	r24, 0x20	; 32
    28d6:	21 e0       	ldi	r18, 0x01	; 1
    28d8:	92 07       	cpc	r25, r18
    28da:	29 f4       	brne	.+10     	; 0x28e6 <tc_disable+0xd4>
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    28dc:	60 e2       	ldi	r22, 0x20	; 32
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    28e4:	07 c0       	rjmp	.+14     	; 0x28f4 <tc_disable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    28e6:	83 34       	cpi	r24, 0x43	; 67
    28e8:	91 40       	sbci	r25, 0x01	; 1
    28ea:	21 f4       	brne	.+8      	; 0x28f4 <tc_disable+0xe2>
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    28ec:	60 e4       	ldi	r22, 0x40	; 64
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    28f4:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    28f6:	0f 90       	pop	r0
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	1f 91       	pop	r17
    28fe:	08 95       	ret

00002900 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    2900:	80 38       	cpi	r24, 0x80	; 128
    2902:	91 05       	cpc	r25, r1
    2904:	29 f4       	brne	.+10     	; 0x2910 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
    2906:	70 93 9a 08 	sts	0x089A, r23	; 0x80089a <tc_tccr1_ovf_callback+0x1>
    290a:	60 93 99 08 	sts	0x0899, r22	; 0x800899 <tc_tccr1_ovf_callback>
    290e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    2910:	80 39       	cpi	r24, 0x90	; 144
    2912:	91 05       	cpc	r25, r1
    2914:	29 f4       	brne	.+10     	; 0x2920 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
    2916:	70 93 92 08 	sts	0x0892, r23	; 0x800892 <tc_tccr3_ovf_callback+0x1>
    291a:	60 93 91 08 	sts	0x0891, r22	; 0x800891 <tc_tccr3_ovf_callback>
    291e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    2920:	80 3a       	cpi	r24, 0xA0	; 160
    2922:	91 05       	cpc	r25, r1
    2924:	29 f4       	brne	.+10     	; 0x2930 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
    2926:	70 93 8a 08 	sts	0x088A, r23	; 0x80088a <tc_tccr4_ovf_callback+0x1>
    292a:	60 93 89 08 	sts	0x0889, r22	; 0x800889 <tc_tccr4_ovf_callback>
    292e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    2930:	80 32       	cpi	r24, 0x20	; 32
    2932:	91 40       	sbci	r25, 0x01	; 1
    2934:	21 f4       	brne	.+8      	; 0x293e <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
    2936:	70 93 82 08 	sts	0x0882, r23	; 0x800882 <tc_tccr5_ovf_callback+0x1>
    293a:	60 93 81 08 	sts	0x0881, r22	; 0x800881 <tc_tccr5_ovf_callback>
    293e:	08 95       	ret

00002940 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    2940:	80 38       	cpi	r24, 0x80	; 128
    2942:	91 05       	cpc	r25, r1
    2944:	29 f4       	brne	.+10     	; 0x2950 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
    2946:	70 93 98 08 	sts	0x0898, r23	; 0x800898 <tc_tccr1_compa_callback+0x1>
    294a:	60 93 97 08 	sts	0x0897, r22	; 0x800897 <tc_tccr1_compa_callback>
    294e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    2950:	80 39       	cpi	r24, 0x90	; 144
    2952:	91 05       	cpc	r25, r1
    2954:	29 f4       	brne	.+10     	; 0x2960 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
    2956:	70 93 90 08 	sts	0x0890, r23	; 0x800890 <tc_tccr3_compa_callback+0x1>
    295a:	60 93 8f 08 	sts	0x088F, r22	; 0x80088f <tc_tccr3_compa_callback>
    295e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    2960:	80 3a       	cpi	r24, 0xA0	; 160
    2962:	91 05       	cpc	r25, r1
    2964:	29 f4       	brne	.+10     	; 0x2970 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
    2966:	70 93 88 08 	sts	0x0888, r23	; 0x800888 <tc_tccr4_compa_callback+0x1>
    296a:	60 93 87 08 	sts	0x0887, r22	; 0x800887 <tc_tccr4_compa_callback>
    296e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    2970:	80 32       	cpi	r24, 0x20	; 32
    2972:	91 40       	sbci	r25, 0x01	; 1
    2974:	21 f4       	brne	.+8      	; 0x297e <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
    2976:	70 93 80 08 	sts	0x0880, r23	; 0x800880 <tc_tccr5_compa_callback+0x1>
    297a:	60 93 7f 08 	sts	0x087F, r22	; 0x80087f <tc_tccr5_compa_callback>
    297e:	08 95       	ret

00002980 <sal_init>:

/**
 * @brief Cleans up the SAL/AES after STB has been finished
 */
void _sal_aes_clean_up(void)
{
    2980:	08 95       	ret

00002982 <sal_aes_exec>:
 * The function returns after the AES operation is finished.
 *
 * @param[in]  data  AES block to be en/decrypted
 */
void sal_aes_exec(uint8_t *data)
{
    2982:	fc 01       	movw	r30, r24
    2984:	9c 01       	movw	r18, r24
    2986:	20 5f       	subi	r18, 0xF0	; 240
    2988:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
		trx_reg_write(RG_AES_STATE, *data++);
    298a:	ae e3       	ldi	r26, 0x3E	; 62
    298c:	b1 e0       	ldi	r27, 0x01	; 1
    298e:	81 91       	ld	r24, Z+
    2990:	8c 93       	st	X, r24
 */
void sal_aes_exec(uint8_t *data)
{
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
    2992:	e2 17       	cp	r30, r18
    2994:	f3 07       	cpc	r31, r19
    2996:	d9 f7       	brne	.-10     	; 0x298e <sal_aes_exec+0xc>
		trx_reg_write(RG_AES_STATE, *data++);
	}

	trx_reg_write(RG_AES_CTRL,
    2998:	80 91 bb 08 	lds	r24, 0x08BB	; 0x8008bb <mode_byte>
    299c:	80 68       	ori	r24, 0x80	; 128
    299e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__TEXT_REGION_LENGTH__+0x70013c>
			mode_byte | SR_MASK(SR_AES_REQUEST, AES_START));

	/* Wait for the operation to finish - poll RG_AES_RY. */
	while (!trx_bit_read(SR_AES_DONE)) {
    29a2:	ed e3       	ldi	r30, 0x3D	; 61
    29a4:	f1 e0       	ldi	r31, 0x01	; 1
    29a6:	80 81       	ld	r24, Z
    29a8:	80 ff       	sbrs	r24, 0
    29aa:	fd cf       	rjmp	.-6      	; 0x29a6 <sal_aes_exec+0x24>
	}
}
    29ac:	08 95       	ret

000029ae <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    29ae:	0f 93       	push	r16
    29b0:	1f 93       	push	r17
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	60 97       	sbiw	r28, 0x10	; 16
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	06 2f       	mov	r16, r22
    29c8:	14 2f       	mov	r17, r20
	uint8_t i;

	if (key != NULL) {
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	c9 f0       	breq	.+50     	; 0x2a00 <sal_aes_setup+0x52>
		/* Setup key. */
		dec_initialized = false;
    29ce:	10 92 bc 08 	sts	0x08BC, r1	; 0x8008bc <dec_initialized>

		last_dir = AES_DIR_VOID;
    29d2:	22 e0       	ldi	r18, 0x02	; 2
    29d4:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <last_dir>

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    29d8:	20 e1       	ldi	r18, 0x10	; 16
    29da:	fc 01       	movw	r30, r24
    29dc:	ab ea       	ldi	r26, 0xAB	; 171
    29de:	b8 e0       	ldi	r27, 0x08	; 8
    29e0:	01 90       	ld	r0, Z+
    29e2:	0d 92       	st	X+, r0
    29e4:	2a 95       	dec	r18
    29e6:	e1 f7       	brne	.-8      	; 0x29e0 <sal_aes_setup+0x32>
    29e8:	dc 01       	movw	r26, r24
    29ea:	ac 01       	movw	r20, r24
    29ec:	40 5f       	subi	r20, 0xF0	; 240
    29ee:	5f 4f       	sbci	r21, 0xFF	; 255

		/* fill in key */
		for (i = 0; i < AES_BLOCKSIZE; ++i) {
			trx_reg_write(RG_AES_KEY, key[i]);
    29f0:	2f e3       	ldi	r18, 0x3F	; 63
    29f2:	31 e0       	ldi	r19, 0x01	; 1
    29f4:	9d 91       	ld	r25, X+
    29f6:	f9 01       	movw	r30, r18
    29f8:	90 83       	st	Z, r25

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);

		/* fill in key */
		for (i = 0; i < AES_BLOCKSIZE; ++i) {
    29fa:	4a 17       	cp	r20, r26
    29fc:	5b 07       	cpc	r21, r27
    29fe:	d1 f7       	brne	.-12     	; 0x29f4 <sal_aes_setup+0x46>
			trx_reg_write(RG_AES_KEY, key[i]);
		}
	}

	/* Set encryption direction. */
	switch (dir) {
    2a00:	11 23       	and	r17, r17
    2a02:	19 f0       	breq	.+6      	; 0x2a0a <sal_aes_setup+0x5c>
    2a04:	11 30       	cpi	r17, 0x01	; 1
    2a06:	89 f0       	breq	.+34     	; 0x2a2a <sal_aes_setup+0x7c>
    2a08:	48 c0       	rjmp	.+144    	; 0x2a9a <sal_aes_setup+0xec>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    2a0a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <last_dir>
    2a0e:	81 30       	cpi	r24, 0x01	; 1
    2a10:	79 f5       	brne	.+94     	; 0x2a70 <sal_aes_setup+0xc2>
    2a12:	eb ea       	ldi	r30, 0xAB	; 171
    2a14:	f8 e0       	ldi	r31, 0x08	; 8
    2a16:	2b eb       	ldi	r18, 0xBB	; 187
    2a18:	38 e0       	ldi	r19, 0x08	; 8
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, enc_key[i]);
    2a1a:	af e3       	ldi	r26, 0x3F	; 63
    2a1c:	b1 e0       	ldi	r27, 0x01	; 1
    2a1e:	81 91       	ld	r24, Z+
    2a20:	8c 93       	st	X, r24
		if (last_dir == AES_DIR_DECRYPT) {
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
    2a22:	2e 17       	cp	r18, r30
    2a24:	3f 07       	cpc	r19, r31
    2a26:	d9 f7       	brne	.-10     	; 0x2a1e <sal_aes_setup+0x70>
    2a28:	23 c0       	rjmp	.+70     	; 0x2a70 <sal_aes_setup+0xc2>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    2a2a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <last_dir>
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	b1 f1       	breq	.+108    	; 0x2a9e <sal_aes_setup+0xf0>
			if (!dec_initialized) {
    2a32:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <dec_initialized>
    2a36:	81 11       	cpse	r24, r1
    2a38:	36 c0       	rjmp	.+108    	; 0x2aa6 <sal_aes_setup+0xf8>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				mode_byte = SR_MASK(SR_AES_MODE, AES_MODE_ECB) |
    2a3a:	10 92 bb 08 	sts	0x08BB, r1	; 0x8008bb <mode_byte>
						SR_MASK(SR_AES_DIR,
						AES_DIR_ENCRYPT);
				trx_reg_write(RG_AES_CTRL, mode_byte);
    2a3e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__TEXT_REGION_LENGTH__+0x70013c>
				sal_aes_exec(dummy);
    2a42:	ce 01       	movw	r24, r28
    2a44:	01 96       	adiw	r24, 0x01	; 1
    2a46:	9d df       	rcall	.-198    	; 0x2982 <sal_aes_exec>
    2a48:	eb e9       	ldi	r30, 0x9B	; 155
    2a4a:	f8 e0       	ldi	r31, 0x08	; 8
    2a4c:	2b ea       	ldi	r18, 0xAB	; 171
    2a4e:	38 e0       	ldi	r19, 0x08	; 8

				/* Read last round key. */
				for (i = 0; i < AES_BLOCKSIZE; ++i) {
					dec_key[i]
						= trx_reg_read(RG_AES_KEY);
    2a50:	af e3       	ldi	r26, 0x3F	; 63
    2a52:	b1 e0       	ldi	r27, 0x01	; 1
    2a54:	8c 91       	ld	r24, X
    2a56:	81 93       	st	Z+, r24
						AES_DIR_ENCRYPT);
				trx_reg_write(RG_AES_CTRL, mode_byte);
				sal_aes_exec(dummy);

				/* Read last round key. */
				for (i = 0; i < AES_BLOCKSIZE; ++i) {
    2a58:	2e 17       	cp	r18, r30
    2a5a:	3f 07       	cpc	r19, r31
    2a5c:	d9 f7       	brne	.-10     	; 0x2a54 <sal_aes_setup+0xa6>
					dec_key[i]
						= trx_reg_read(RG_AES_KEY);
				}

				dec_initialized = true;
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	80 93 bc 08 	sts	0x08BC, r24	; 0x8008bc <dec_initialized>
    2a64:	20 c0       	rjmp	.+64     	; 0x2aa6 <sal_aes_setup+0xf8>
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, dec_key[i]);
    2a66:	81 91       	ld	r24, Z+
    2a68:	8c 93       	st	X, r24

				dec_initialized = true;
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
    2a6a:	2e 17       	cp	r18, r30
    2a6c:	3f 07       	cpc	r19, r31
    2a6e:	d9 f7       	brne	.-10     	; 0x2a66 <sal_aes_setup+0xb8>

	default:
		return false;
	}

	last_dir = dir;
    2a70:	10 93 11 02 	sts	0x0211, r17	; 0x800211 <last_dir>

	/* Set encryption mode. */
	switch (enc_mode) {
    2a74:	02 30       	cpi	r16, 0x02	; 2
    2a76:	a8 f4       	brcc	.+42     	; 0x2aa2 <sal_aes_setup+0xf4>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
		mode_byte
			= SR_MASK(SR_AES_MODE, enc_mode) | SR_MASK(SR_AES_DIR,
    2a78:	f0 e2       	ldi	r31, 0x20	; 32
    2a7a:	0f 9f       	mul	r16, r31
    2a7c:	c0 01       	movw	r24, r0
    2a7e:	11 24       	eor	r1, r1
    2a80:	08 2f       	mov	r16, r24
    2a82:	00 72       	andi	r16, 0x20	; 32
    2a84:	11 0f       	add	r17, r17
    2a86:	11 0f       	add	r17, r17
    2a88:	11 0f       	add	r17, r17
    2a8a:	18 70       	andi	r17, 0x08	; 8
    2a8c:	10 2b       	or	r17, r16
    2a8e:	10 93 bb 08 	sts	0x08BB, r17	; 0x8008bb <mode_byte>
		return (false);
	}

	/* set mode and direction */

	trx_reg_write(RG_AES_CTRL, mode_byte);
    2a92:	10 93 3c 01 	sts	0x013C, r17	; 0x80013c <__TEXT_REGION_LENGTH__+0x70013c>

	return (true);
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	0d c0       	rjmp	.+26     	; 0x2ab4 <sal_aes_setup+0x106>

			break;
		}

	default:
		return false;
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	0b c0       	rjmp	.+22     	; 0x2ab4 <sal_aes_setup+0x106>
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	09 c0       	rjmp	.+18     	; 0x2ab4 <sal_aes_setup+0x106>
			= SR_MASK(SR_AES_MODE, enc_mode) | SR_MASK(SR_AES_DIR,
				dir);
		break;

	default:
		return (false);
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	07 c0       	rjmp	.+14     	; 0x2ab4 <sal_aes_setup+0x106>
    2aa6:	eb e9       	ldi	r30, 0x9B	; 155
    2aa8:	f8 e0       	ldi	r31, 0x08	; 8
    2aaa:	2b ea       	ldi	r18, 0xAB	; 171
    2aac:	38 e0       	ldi	r19, 0x08	; 8
				dec_initialized = true;
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, dec_key[i]);
    2aae:	af e3       	ldi	r26, 0x3F	; 63
    2ab0:	b1 e0       	ldi	r27, 0x01	; 1
    2ab2:	d9 cf       	rjmp	.-78     	; 0x2a66 <sal_aes_setup+0xb8>
	/* set mode and direction */

	trx_reg_write(RG_AES_CTRL, mode_byte);

	return (true);
}
    2ab4:	60 96       	adiw	r28, 0x10	; 16
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	1f 91       	pop	r17
    2ac6:	0f 91       	pop	r16
    2ac8:	08 95       	ret

00002aca <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    2aca:	fc 01       	movw	r30, r24
    2acc:	9c 01       	movw	r18, r24
    2ace:	20 5f       	subi	r18, 0xF0	; 240
    2ad0:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
		*data++ = trx_reg_read(RG_AES_STATE);
    2ad2:	ae e3       	ldi	r26, 0x3E	; 62
    2ad4:	b1 e0       	ldi	r27, 0x01	; 1
    2ad6:	8c 91       	ld	r24, X
    2ad8:	81 93       	st	Z+, r24
 */
void sal_aes_read(uint8_t *data)
{
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
    2ada:	e2 17       	cp	r30, r18
    2adc:	f3 07       	cpc	r31, r19
    2ade:	d9 f7       	brne	.-10     	; 0x2ad6 <sal_aes_read+0xc>
		*data++ = trx_reg_read(RG_AES_STATE);
	}
}
    2ae0:	08 95       	ret

00002ae2 <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
	appDataReqBusy = false;
    2ae2:	10 92 97 09 	sts	0x0997, r1	; 0x800997 <appDataReqBusy>
    2ae6:	08 95       	ret

00002ae8 <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    2ae8:	0f 93       	push	r16
    2aea:	1f 93       	push	r17
    2aec:	cf 93       	push	r28
	for (uint8_t i = 0; i < ind->size; i++) {
    2aee:	dc 01       	movw	r26, r24
    2af0:	19 96       	adiw	r26, 0x09	; 9
    2af2:	2c 91       	ld	r18, X
    2af4:	22 23       	and	r18, r18
    2af6:	89 f0       	breq	.+34     	; 0x2b1a <appDataInd+0x32>
    2af8:	8c 01       	movw	r16, r24
    2afa:	c0 e0       	ldi	r28, 0x00	; 0
		sio2host_putchar(ind->data[i]);
    2afc:	d8 01       	movw	r26, r16
    2afe:	17 96       	adiw	r26, 0x07	; 7
    2b00:	ed 91       	ld	r30, X+
    2b02:	fc 91       	ld	r31, X
    2b04:	18 97       	sbiw	r26, 0x08	; 8
    2b06:	ec 0f       	add	r30, r28
    2b08:	f1 1d       	adc	r31, r1
    2b0a:	80 81       	ld	r24, Z
    2b0c:	0e 94 0c 04 	call	0x818	; 0x818 <sio2host_putchar>

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	for (uint8_t i = 0; i < ind->size; i++) {
    2b10:	cf 5f       	subi	r28, 0xFF	; 255
    2b12:	f8 01       	movw	r30, r16
    2b14:	81 85       	ldd	r24, Z+9	; 0x09
    2b16:	c8 17       	cp	r28, r24
    2b18:	88 f3       	brcs	.-30     	; 0x2afc <appDataInd+0x14>
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
    2b1a:	80 e1       	ldi	r24, 0x10	; 16
    2b1c:	83 b9       	out	0x03, r24	; 3
		sio2host_putchar(ind->data[i]);
	}
	LED_Toggle(LED0);
	return true;
}
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	cf 91       	pop	r28
    2b22:	1f 91       	pop	r17
    2b24:	0f 91       	pop	r16
    2b26:	08 95       	ret

00002b28 <appSendData>:
}

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
	if (appDataReqBusy || 0 == appADCbufferPtr) {
    2b2c:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <appDataReqBusy>
    2b30:	81 11       	cpse	r24, r1
    2b32:	28 c0       	rjmp	.+80     	; 0x2b84 <appSendData+0x5c>
    2b34:	c0 91 c4 08 	lds	r28, 0x08C4	; 0x8008c4 <appADCbufferPtr>
    2b38:	cc 23       	and	r28, r28
    2b3a:	21 f1       	breq	.+72     	; 0x2b84 <appSendData+0x5c>
		return;
	}

	memcpy(appDataReqBuffer, appADCbuffer, appADCbufferPtr);
    2b3c:	4c 2f       	mov	r20, r28
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	65 ec       	ldi	r22, 0xC5	; 197
    2b42:	78 e0       	ldi	r23, 0x08	; 8
    2b44:	8e e2       	ldi	r24, 0x2E	; 46
    2b46:	99 e0       	ldi	r25, 0x09	; 9
    2b48:	d3 d1       	rcall	.+934    	; 0x2ef0 <memcpy>

	appDataReq.dstAddr = 1 - APP_ADDR;
    2b4a:	e8 e9       	ldi	r30, 0x98	; 152
    2b4c:	f9 e0       	ldi	r31, 0x09	; 9
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	96 83       	std	Z+6, r25	; 0x06
    2b54:	85 83       	std	Z+5, r24	; 0x05
	appDataReq.dstEndpoint = APP_ENDPOINT;
    2b56:	d1 e0       	ldi	r29, 0x01	; 1
    2b58:	d7 83       	std	Z+7, r29	; 0x07
	appDataReq.srcEndpoint = APP_ENDPOINT;
    2b5a:	d0 87       	std	Z+8, r29	; 0x08
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	81 87       	std	Z+9, r24	; 0x09
	appDataReq.data = appDataReqBuffer;
    2b60:	8e e2       	ldi	r24, 0x2E	; 46
    2b62:	99 e0       	ldi	r25, 0x09	; 9
    2b64:	93 87       	std	Z+11, r25	; 0x0b
    2b66:	82 87       	std	Z+10, r24	; 0x0a
	appDataReq.size = appADCbufferPtr;
    2b68:	c4 87       	std	Z+12, r28	; 0x0c
	appDataReq.confirm = appDataConf;
    2b6a:	81 e7       	ldi	r24, 0x71	; 113
    2b6c:	95 e1       	ldi	r25, 0x15	; 21
    2b6e:	96 87       	std	Z+14, r25	; 0x0e
    2b70:	85 87       	std	Z+13, r24	; 0x0d
	NWK_DataReq(&appDataReq);
    2b72:	cf 01       	movw	r24, r30
    2b74:	0e 94 bf 04 	call	0x97e	; 0x97e <NWK_DataReq>

	appADCbufferPtr = 0;
    2b78:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <appADCbufferPtr>
	appDataReqBusy = true;
    2b7c:	d0 93 97 09 	sts	0x0997, r29	; 0x800997 <appDataReqBusy>
    2b80:	80 e1       	ldi	r24, 0x10	; 16
    2b82:	83 b9       	out	0x03, r24	; 3
	LED_Toggle(LED0);
}
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	08 95       	ret

00002b8a <appTimerHandler>:
/*************************************************************************//**
*****************************************************************************/

static void appTimerHandler(SYS_Timer_t *timer)
{
	appSendData();
    2b8a:	ce cf       	rjmp	.-100    	; 0x2b28 <appSendData>
    2b8c:	08 95       	ret

00002b8e <main>:
/*************************************************************************//**
*****************************************************************************/
int main(void)
{
	irq_initialize_vectors();
	sysclk_init();
    2b8e:	0e 94 c7 01 	call	0x38e	; 0x38e <sysclk_init>
	board_init();
    2b92:	0e 94 70 02 	call	0x4e0	; 0x4e0 <board_init>
	SYS_Init();
    2b96:	3c d9       	rcall	.-3464   	; 0x1e10 <SYS_Init>
	sio2host_init();
    2b98:	0e 94 ac 03 	call	0x758	; 0x758 <sio2host_init>
						 enum adc_mux_setting input, bool irq_e, bool adate, 
						 enum adc_auto_trigger_source trg )
{
	uint32_t sampling_rate=0;
	uint8_t pres=0;
	sysclk_enable_module( POWER_RED_REG0,  PRADC_bm );
    2b9c:	61 e0       	ldi	r22, 0x01	; 1
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    2ba4:	84 e8       	ldi	r24, 0x84	; 132
    2ba6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	while( ! (ADCSRB & (1 << AVDDOK) ));
    2baa:	eb e7       	ldi	r30, 0x7B	; 123
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	88 23       	and	r24, r24
    2bb2:	ec f7       	brge	.-6      	; 0x2bae <main+0x20>
	ADCSRC = 10<<ADSUT0; // set start-up time
    2bb4:	a7 e7       	ldi	r26, 0x77	; 119
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	8a e0       	ldi	r24, 0x0A	; 10
    2bba:	8c 93       	st	X, r24
	if(irq_e){
		ADCSRA |= (1 << ADIE); //Enable ADC interrupt
    2bbc:	ea e7       	ldi	r30, 0x7A	; 122
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	88 60       	ori	r24, 0x08	; 8
    2bc4:	80 83       	st	Z, r24
}

/*  \brief Enable ADC Auto Trigger */
static inline void adc_enable_autotrigger(void)
{
	ADCSRA |= (1 << ADATE);
    2bc6:	80 81       	ld	r24, Z
    2bc8:	80 62       	ori	r24, 0x20	; 32
    2bca:	80 83       	st	Z, r24
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    2bcc:	cb e7       	ldi	r28, 0x7B	; 123
    2bce:	d0 e0       	ldi	r29, 0x00	; 0
    2bd0:	88 81       	ld	r24, Y
    2bd2:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
	ADC_ADTS_REG = temp;
    2bd4:	88 83       	st	Y, r24
 */
static inline void adc_set_voltage_reference(enum adc_voltage_reference vref)
{
	uint8_t temp;

	temp = (ADMUX & ~(ADC_VREF_MASK));
    2bd6:	ec e7       	ldi	r30, 0x7C	; 124
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
	temp |= (uint8_t)vref;
    2bdc:	80 6c       	ori	r24, 0xC0	; 192
	ADMUX = temp;
    2bde:	80 83       	st	Z, r24
 */
static inline void adc_set_mux(enum adc_mux_setting input)
{
	uint8_t temp;

	temp = (ADMUX & ~(ADC_MUX_MASK));
    2be0:	80 81       	ld	r24, Z
    2be2:	80 7e       	andi	r24, 0xE0	; 224
#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
	} else {
		ADCSRB &= ~(1 << MUX5);
    2be4:	98 81       	ld	r25, Y
    2be6:	97 7f       	andi	r25, 0xF7	; 247
    2be8:	98 83       	st	Y, r25
	/* mask out MUX5 for ADMUX. */
	temp |= ((uint8_t)input & ADC_MUX_MASK);
#else
	temp |= (uint8_t)input;
#endif
	ADMUX = temp;
    2bea:	80 83       	st	Z, r24
		adc_enable_autotrigger();
		adc_set_autotrigger_source(trg);
	}
	adc_set_voltage_reference( vref ); //set voltage ref
	adc_set_mux( input );
	ADCSRC |=  (1 << ADTHT1 | 1 << ADTHT0);//Set conversion time
    2bec:	8c 91       	ld	r24, X
    2bee:	80 6c       	ori	r24, 0xC0	; 192
    2bf0:	8c 93       	st	X, r24
	uint8_t adtht = (((ADCSRC) & (ADC_THT_MASK))>>ADTHT0);
    2bf2:	2c 91       	ld	r18, X
	ADMUX |= (1 << ADLAR);
    2bf4:	80 81       	ld	r24, Z
    2bf6:	80 62       	ori	r24, 0x20	; 32
    2bf8:	80 83       	st	Z, r24
	fs = adc_init( ADC_PRESCALER_DIV16, ADC_VREF_1V6, ADC_MUX_ADC0, true, true, ADC_AUTOTRIGGER_SOURCE_FREERUNNING );
    2bfa:	22 95       	swap	r18
    2bfc:	26 95       	lsr	r18
    2bfe:	26 95       	lsr	r18
    2c00:	23 70       	andi	r18, 0x03	; 3
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	24 5f       	subi	r18, 0xF4	; 244
    2c06:	3f 4f       	sbci	r19, 0xFF	; 255
    2c08:	22 95       	swap	r18
    2c0a:	32 95       	swap	r19
    2c0c:	30 7f       	andi	r19, 0xF0	; 240
    2c0e:	32 27       	eor	r19, r18
    2c10:	20 7f       	andi	r18, 0xF0	; 240
    2c12:	32 27       	eor	r19, r18
    2c14:	03 2e       	mov	r0, r19
    2c16:	00 0c       	add	r0, r0
    2c18:	44 0b       	sbc	r20, r20
    2c1a:	55 0b       	sbc	r21, r21
    2c1c:	60 e0       	ldi	r22, 0x00	; 0
    2c1e:	74 e2       	ldi	r23, 0x24	; 36
    2c20:	84 ef       	ldi	r24, 0xF4	; 244
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	d5 d0       	rcall	.+426    	; 0x2dd0 <__udivmodsi4>
    2c26:	20 93 bf 08 	sts	0x08BF, r18	; 0x8008bf <fs>
    2c2a:	30 93 c0 08 	sts	0x08C0, r19	; 0x8008c0 <fs+0x1>
    2c2e:	40 93 c1 08 	sts	0x08C1, r20	; 0x8008c1 <fs+0x2>
    2c32:	50 93 c2 08 	sts	0x08C2, r21	; 0x8008c2 <fs+0x3>
	cpu_irq_enable();
    2c36:	78 94       	sei
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_complete_interrupt_disable(USART_t *usart)
{
	(usart)->UCSRnB &= ~USART_TXC_bm;
    2c38:	e8 ec       	ldi	r30, 0xC8	; 200
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	81 81       	ldd	r24, Z+1	; 0x01
    2c3e:	8f 7b       	andi	r24, 0xBF	; 191
    2c40:	81 83       	std	Z+1, r24	; 0x01
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_complete_interrupt_disable(USART_t *usart)
{
	(usart)->UCSRnB &= ~USART_RXC_bm;
    2c42:	81 81       	ldd	r24, Z+1	; 0x01
    2c44:	8f 77       	andi	r24, 0x7F	; 127
    2c46:	81 83       	std	Z+1, r24	; 0x01
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_data_empty_interrupt_disable(USART_t *usart)
{
	(usart)->UCSRnB &= ~USART_DRIE_bm;
    2c48:	81 81       	ldd	r24, Z+1	; 0x01
    2c4a:	8f 7d       	andi	r24, 0xDF	; 223
    2c4c:	81 83       	std	Z+1, r24	; 0x01
#endif
	PHY_SetRxState(true);

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    2c4e:	0f 2e       	mov	r0, r31
    2c50:	f9 ea       	ldi	r31, 0xA9	; 169
    2c52:	cf 2e       	mov	r12, r31
    2c54:	f9 e0       	ldi	r31, 0x09	; 9
    2c56:	df 2e       	mov	r13, r31
    2c58:	f0 2d       	mov	r31, r0
    2c5a:	0f 2e       	mov	r0, r31
    2c5c:	f4 e1       	ldi	r31, 0x14	; 20
    2c5e:	8f 2e       	mov	r8, r31
    2c60:	91 2c       	mov	r9, r1
    2c62:	a1 2c       	mov	r10, r1
    2c64:	b1 2c       	mov	r11, r1
    2c66:	f0 2d       	mov	r31, r0
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
	appTimer.handler = appTimerHandler;
    2c68:	0f 2e       	mov	r0, r31
    2c6a:	f5 ec       	ldi	r31, 0xC5	; 197
    2c6c:	4f 2e       	mov	r4, r31
    2c6e:	f5 e1       	ldi	r31, 0x15	; 21
    2c70:	5f 2e       	mov	r5, r31
    2c72:	f0 2d       	mov	r31, r0
}

/*  \brief Start ADC conversion */
static inline void adc_start_conversion(void)
{
	ADCSRA |= (1 << ADSC);
    2c74:	0f 2e       	mov	r0, r31
    2c76:	fa e7       	ldi	r31, 0x7A	; 122
    2c78:	6f 2e       	mov	r6, r31
    2c7a:	71 2c       	mov	r7, r1
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 0;

	// Check if button is high or low for the moment
	uint8_t current_state = (~PINE & (1<<PORTE4)) != 0;
    2c7c:	f0 2d       	mov	r31, r0
	usart_tx_complete_interrupt_disable(USART_HOST);
	usart_rx_complete_interrupt_disable(USART_HOST);
	usart_data_empty_interrupt_disable(USART_HOST);
	//LED_On(LED0);
	while (1) {
		SYS_TaskHandler();
    2c7e:	31 2c       	mov	r3, r1
    2c80:	cd d8       	rcall	.-3686   	; 0x1e1c <SYS_TaskHandler>
} 
/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
	switch (appState) {
    2c82:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <appState>
    2c86:	81 11       	cpse	r24, r1
    2c88:	24 c0       	rjmp	.+72     	; 0x2cd2 <main+0x144>

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
	NWK_SetAddr(APP_ADDR);
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
    2c92:	87 e6       	ldi	r24, 0x67	; 103
    2c94:	95 e4       	ldi	r25, 0x45	; 69
    2c96:	0e 94 81 04 	call	0x902	; 0x902 <NWK_SetPanId>
	PHY_SetChannel(APP_CHANNEL);
    2c9a:	8f e0       	ldi	r24, 0x0F	; 15
    2c9c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <PHY_SetChannel>
#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
#endif
	PHY_SetRxState(true);
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <PHY_SetRxState>

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    2ca6:	64 e7       	ldi	r22, 0x74	; 116
    2ca8:	75 e1       	ldi	r23, 0x15	; 21
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	0e 94 88 04 	call	0x910	; 0x910 <NWK_OpenEndpoint>

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    2cb0:	d6 01       	movw	r26, r12
    2cb2:	16 96       	adiw	r26, 0x06	; 6
    2cb4:	8d 92       	st	X+, r8
    2cb6:	9d 92       	st	X+, r9
    2cb8:	ad 92       	st	X+, r10
    2cba:	bc 92       	st	X, r11
    2cbc:	19 97       	sbiw	r26, 0x09	; 9
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2cbe:	1a 96       	adiw	r26, 0x0a	; 10
    2cc0:	1c 92       	st	X, r1
    2cc2:	1a 97       	sbiw	r26, 0x0a	; 10
	appTimer.handler = appTimerHandler;
    2cc4:	1c 96       	adiw	r26, 0x0c	; 12
    2cc6:	5c 92       	st	X, r5
    2cc8:	4e 92       	st	-X, r4
    2cca:	1b 97       	sbiw	r26, 0x0b	; 11
{
	switch (appState) {
	case APP_STATE_INITIAL:
	{
		appInit();
		appState = APP_STATE_IDLE;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	80 93 b6 09 	sts	0x09B6, r24	; 0x8009b6 <appState>
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 0;

	// Check if button is high or low for the moment
	uint8_t current_state = (~PINE & (1<<PORTE4)) != 0;
    2cd2:	8c b1       	in	r24, 0x0c	; 12
    2cd4:	91 e0       	ldi	r25, 0x01	; 1
    2cd6:	28 2f       	mov	r18, r24
    2cd8:	20 71       	andi	r18, 0x10	; 16
    2cda:	84 fd       	sbrc	r24, 4
    2cdc:	93 2d       	mov	r25, r3
	if(current_state != button_state) {
    2cde:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <button_state.3562>
    2ce2:	98 17       	cp	r25, r24
    2ce4:	89 f0       	breq	.+34     	; 0x2d08 <main+0x17a>
		// Button state is about to be changed, increase counter
		count++;
    2ce6:	80 91 bd 08 	lds	r24, 0x08BD	; 0x8008bd <count.3561>
    2cea:	8f 5f       	subi	r24, 0xFF	; 255
    2cec:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <count.3561>
		if(count >= 4) {
    2cf0:	84 30       	cpi	r24, 0x04	; 4
    2cf2:	60 f0       	brcs	.+24     	; 0x2d0c <main+0x17e>
			// The button have not bounced for four checks, change state
			button_state = current_state;
    2cf4:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <button_state.3562>
			// If the button was pressed (not released), tell main so
			if(current_state != 0) {
    2cf8:	21 11       	cpse	r18, r1
    2cfa:	03 c0       	rjmp	.+6      	; 0x2d02 <main+0x174>
				button_down = 1;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <button_down>
			}
			count = 0;
    2d02:	30 92 bd 08 	sts	0x08BD, r3	; 0x8008bd <count.3561>
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <main+0x17e>
		}
	}
	else{
		// Reset counter
		count = 0;
    2d08:	30 92 bd 08 	sts	0x08BD, r3	; 0x8008bd <count.3561>
	default:
		break;
	}
	//check_order_and_start_convertions();
	debounce();
	if( button_down ){
    2d0c:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <button_down>
    2d10:	88 23       	and	r24, r24
    2d12:	69 f0       	breq	.+26     	; 0x2d2e <main+0x1a0>
		button_down = 0;
    2d14:	30 92 0b 0a 	sts	0x0A0B, r3	; 0x800a0b <button_down>
    2d18:	f3 01       	movw	r30, r6
    2d1a:	80 81       	ld	r24, Z
    2d1c:	80 64       	ori	r24, 0x40	; 64
    2d1e:	80 83       	st	Z, r24
		adc_start_conversion();
		adc_length = read_adc_buff(rx_data, APP_RX_BUF_SIZE);
    2d20:	64 e1       	ldi	r22, 0x14	; 20
    2d22:	87 eb       	ldi	r24, 0xB7	; 183
    2d24:	99 e0       	ldi	r25, 0x09	; 9
    2d26:	0e 94 75 02 	call	0x4ea	; 0x4ea <read_adc_buff>
    2d2a:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <adc_length>
	}
	if (adc_length) {
    2d2e:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <adc_length>
    2d32:	88 23       	and	r24, r24
    2d34:	09 f4       	brne	.+2      	; 0x2d38 <main+0x1aa>
    2d36:	a4 cf       	rjmp	.-184    	; 0x2c80 <main+0xf2>
    2d38:	c7 eb       	ldi	r28, 0xB7	; 183
    2d3a:	d9 e0       	ldi	r29, 0x09	; 9
    2d3c:	00 e0       	ldi	r16, 0x00	; 0
    2d3e:	10 e0       	ldi	r17, 0x00	; 0
    2d40:	7e 01       	movw	r14, r28
		for (uint16_t i = 0; i < adc_length; i++) {
			sio2host_putchar(rx_data[i]);
    2d42:	88 81       	ld	r24, Y
    2d44:	0e 94 0c 04 	call	0x818	; 0x818 <sio2host_putchar>
			if (appADCbufferPtr == sizeof(appADCbuffer)) {
    2d48:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <appADCbufferPtr>
    2d4c:	89 36       	cpi	r24, 0x69	; 105
				appSendData();
    2d4e:	09 f4       	brne	.+2      	; 0x2d52 <main+0x1c4>
    2d50:	eb de       	rcall	.-554    	; 0x2b28 <appSendData>
			}

			if (appADCbufferPtr < sizeof(appADCbuffer)) {
    2d52:	e0 91 c4 08 	lds	r30, 0x08C4	; 0x8008c4 <appADCbufferPtr>
    2d56:	e9 36       	cpi	r30, 0x69	; 105
    2d58:	50 f4       	brcc	.+20     	; 0x2d6e <main+0x1e0>
				appADCbuffer[appADCbufferPtr++] = rx_data[i];
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	8e 0f       	add	r24, r30
    2d5e:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <appADCbufferPtr>
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	eb 53       	subi	r30, 0x3B	; 59
    2d66:	f7 4f       	sbci	r31, 0xF7	; 247
    2d68:	d7 01       	movw	r26, r14
    2d6a:	8c 91       	ld	r24, X
    2d6c:	80 83       	st	Z, r24
		button_down = 0;
		adc_start_conversion();
		adc_length = read_adc_buff(rx_data, APP_RX_BUF_SIZE);
	}
	if (adc_length) {
		for (uint16_t i = 0; i < adc_length; i++) {
    2d6e:	0f 5f       	subi	r16, 0xFF	; 255
    2d70:	1f 4f       	sbci	r17, 0xFF	; 255
    2d72:	21 96       	adiw	r28, 0x01	; 1
    2d74:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <adc_length>
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	08 17       	cp	r16, r24
    2d7c:	19 07       	cpc	r17, r25
			if (appADCbufferPtr < sizeof(appADCbuffer)) {
				appADCbuffer[appADCbufferPtr++] = rx_data[i];
			}
		}

		SYS_TimerStop(&appTimer);
    2d7e:	00 f3       	brcs	.-64     	; 0x2d40 <main+0x1b2>
    2d80:	c6 01       	movw	r24, r12
    2d82:	d3 d8       	rcall	.-3674   	; 0x1f2a <SYS_TimerStop>
		SYS_TimerStart(&appTimer);
    2d84:	c6 01       	movw	r24, r12
    2d86:	28 d9       	rcall	.-3504   	; 0x1fd8 <SYS_TimerStart>
    2d88:	7b cf       	rjmp	.-266    	; 0x2c80 <main+0xf2>

00002d8a <__mulsi3>:
    2d8a:	db 01       	movw	r26, r22
    2d8c:	8f 93       	push	r24
    2d8e:	9f 93       	push	r25
    2d90:	41 d0       	rcall	.+130    	; 0x2e14 <__muluhisi3>
    2d92:	bf 91       	pop	r27
    2d94:	af 91       	pop	r26
    2d96:	a2 9f       	mul	r26, r18
    2d98:	80 0d       	add	r24, r0
    2d9a:	91 1d       	adc	r25, r1
    2d9c:	a3 9f       	mul	r26, r19
    2d9e:	90 0d       	add	r25, r0
    2da0:	b2 9f       	mul	r27, r18
    2da2:	90 0d       	add	r25, r0
    2da4:	11 24       	eor	r1, r1
    2da6:	08 95       	ret

00002da8 <__udivmodhi4>:
    2da8:	aa 1b       	sub	r26, r26
    2daa:	bb 1b       	sub	r27, r27
    2dac:	51 e1       	ldi	r21, 0x11	; 17
    2dae:	07 c0       	rjmp	.+14     	; 0x2dbe <__udivmodhi4_ep>

00002db0 <__udivmodhi4_loop>:
    2db0:	aa 1f       	adc	r26, r26
    2db2:	bb 1f       	adc	r27, r27
    2db4:	a6 17       	cp	r26, r22
    2db6:	b7 07       	cpc	r27, r23
    2db8:	10 f0       	brcs	.+4      	; 0x2dbe <__udivmodhi4_ep>
    2dba:	a6 1b       	sub	r26, r22
    2dbc:	b7 0b       	sbc	r27, r23

00002dbe <__udivmodhi4_ep>:
    2dbe:	88 1f       	adc	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	5a 95       	dec	r21
    2dc4:	a9 f7       	brne	.-22     	; 0x2db0 <__udivmodhi4_loop>
    2dc6:	80 95       	com	r24
    2dc8:	90 95       	com	r25
    2dca:	bc 01       	movw	r22, r24
    2dcc:	cd 01       	movw	r24, r26
    2dce:	08 95       	ret

00002dd0 <__udivmodsi4>:
    2dd0:	a1 e2       	ldi	r26, 0x21	; 33
    2dd2:	1a 2e       	mov	r1, r26
    2dd4:	aa 1b       	sub	r26, r26
    2dd6:	bb 1b       	sub	r27, r27
    2dd8:	fd 01       	movw	r30, r26
    2dda:	0d c0       	rjmp	.+26     	; 0x2df6 <__udivmodsi4_ep>

00002ddc <__udivmodsi4_loop>:
    2ddc:	aa 1f       	adc	r26, r26
    2dde:	bb 1f       	adc	r27, r27
    2de0:	ee 1f       	adc	r30, r30
    2de2:	ff 1f       	adc	r31, r31
    2de4:	a2 17       	cp	r26, r18
    2de6:	b3 07       	cpc	r27, r19
    2de8:	e4 07       	cpc	r30, r20
    2dea:	f5 07       	cpc	r31, r21
    2dec:	20 f0       	brcs	.+8      	; 0x2df6 <__udivmodsi4_ep>
    2dee:	a2 1b       	sub	r26, r18
    2df0:	b3 0b       	sbc	r27, r19
    2df2:	e4 0b       	sbc	r30, r20
    2df4:	f5 0b       	sbc	r31, r21

00002df6 <__udivmodsi4_ep>:
    2df6:	66 1f       	adc	r22, r22
    2df8:	77 1f       	adc	r23, r23
    2dfa:	88 1f       	adc	r24, r24
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	1a 94       	dec	r1
    2e00:	69 f7       	brne	.-38     	; 0x2ddc <__udivmodsi4_loop>
    2e02:	60 95       	com	r22
    2e04:	70 95       	com	r23
    2e06:	80 95       	com	r24
    2e08:	90 95       	com	r25
    2e0a:	9b 01       	movw	r18, r22
    2e0c:	ac 01       	movw	r20, r24
    2e0e:	bd 01       	movw	r22, r26
    2e10:	cf 01       	movw	r24, r30
    2e12:	08 95       	ret

00002e14 <__muluhisi3>:
    2e14:	09 d0       	rcall	.+18     	; 0x2e28 <__umulhisi3>
    2e16:	a5 9f       	mul	r26, r21
    2e18:	90 0d       	add	r25, r0
    2e1a:	b4 9f       	mul	r27, r20
    2e1c:	90 0d       	add	r25, r0
    2e1e:	a4 9f       	mul	r26, r20
    2e20:	80 0d       	add	r24, r0
    2e22:	91 1d       	adc	r25, r1
    2e24:	11 24       	eor	r1, r1
    2e26:	08 95       	ret

00002e28 <__umulhisi3>:
    2e28:	a2 9f       	mul	r26, r18
    2e2a:	b0 01       	movw	r22, r0
    2e2c:	b3 9f       	mul	r27, r19
    2e2e:	c0 01       	movw	r24, r0
    2e30:	a3 9f       	mul	r26, r19
    2e32:	70 0d       	add	r23, r0
    2e34:	81 1d       	adc	r24, r1
    2e36:	11 24       	eor	r1, r1
    2e38:	91 1d       	adc	r25, r1
    2e3a:	b2 9f       	mul	r27, r18
    2e3c:	70 0d       	add	r23, r0
    2e3e:	81 1d       	adc	r24, r1
    2e40:	11 24       	eor	r1, r1
    2e42:	91 1d       	adc	r25, r1
    2e44:	08 95       	ret

00002e46 <do_rand>:
    2e46:	8f 92       	push	r8
    2e48:	9f 92       	push	r9
    2e4a:	af 92       	push	r10
    2e4c:	bf 92       	push	r11
    2e4e:	cf 92       	push	r12
    2e50:	df 92       	push	r13
    2e52:	ef 92       	push	r14
    2e54:	ff 92       	push	r15
    2e56:	cf 93       	push	r28
    2e58:	df 93       	push	r29
    2e5a:	ec 01       	movw	r28, r24
    2e5c:	68 81       	ld	r22, Y
    2e5e:	79 81       	ldd	r23, Y+1	; 0x01
    2e60:	8a 81       	ldd	r24, Y+2	; 0x02
    2e62:	9b 81       	ldd	r25, Y+3	; 0x03
    2e64:	61 15       	cp	r22, r1
    2e66:	71 05       	cpc	r23, r1
    2e68:	81 05       	cpc	r24, r1
    2e6a:	91 05       	cpc	r25, r1
    2e6c:	21 f4       	brne	.+8      	; 0x2e76 <do_rand+0x30>
    2e6e:	64 e2       	ldi	r22, 0x24	; 36
    2e70:	79 ed       	ldi	r23, 0xD9	; 217
    2e72:	8b e5       	ldi	r24, 0x5B	; 91
    2e74:	97 e0       	ldi	r25, 0x07	; 7
    2e76:	2d e1       	ldi	r18, 0x1D	; 29
    2e78:	33 ef       	ldi	r19, 0xF3	; 243
    2e7a:	41 e0       	ldi	r20, 0x01	; 1
    2e7c:	50 e0       	ldi	r21, 0x00	; 0
    2e7e:	cd d1       	rcall	.+922    	; 0x321a <__divmodsi4>
    2e80:	49 01       	movw	r8, r18
    2e82:	5a 01       	movw	r10, r20
    2e84:	9b 01       	movw	r18, r22
    2e86:	ac 01       	movw	r20, r24
    2e88:	a7 ea       	ldi	r26, 0xA7	; 167
    2e8a:	b1 e4       	ldi	r27, 0x41	; 65
    2e8c:	c3 df       	rcall	.-122    	; 0x2e14 <__muluhisi3>
    2e8e:	6b 01       	movw	r12, r22
    2e90:	7c 01       	movw	r14, r24
    2e92:	ac ee       	ldi	r26, 0xEC	; 236
    2e94:	b4 ef       	ldi	r27, 0xF4	; 244
    2e96:	a5 01       	movw	r20, r10
    2e98:	94 01       	movw	r18, r8
    2e9a:	dd d1       	rcall	.+954    	; 0x3256 <__mulohisi3>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	8c 0d       	add	r24, r12
    2ea2:	9d 1d       	adc	r25, r13
    2ea4:	ae 1d       	adc	r26, r14
    2ea6:	bf 1d       	adc	r27, r15
    2ea8:	b7 ff       	sbrs	r27, 7
    2eaa:	03 c0       	rjmp	.+6      	; 0x2eb2 <do_rand+0x6c>
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	a1 09       	sbc	r26, r1
    2eb0:	b0 48       	sbci	r27, 0x80	; 128
    2eb2:	88 83       	st	Y, r24
    2eb4:	99 83       	std	Y+1, r25	; 0x01
    2eb6:	aa 83       	std	Y+2, r26	; 0x02
    2eb8:	bb 83       	std	Y+3, r27	; 0x03
    2eba:	9f 77       	andi	r25, 0x7F	; 127
    2ebc:	df 91       	pop	r29
    2ebe:	cf 91       	pop	r28
    2ec0:	ff 90       	pop	r15
    2ec2:	ef 90       	pop	r14
    2ec4:	df 90       	pop	r13
    2ec6:	cf 90       	pop	r12
    2ec8:	bf 90       	pop	r11
    2eca:	af 90       	pop	r10
    2ecc:	9f 90       	pop	r9
    2ece:	8f 90       	pop	r8
    2ed0:	08 95       	ret

00002ed2 <rand_r>:
    2ed2:	b9 cf       	rjmp	.-142    	; 0x2e46 <do_rand>

00002ed4 <rand>:
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	92 e0       	ldi	r25, 0x02	; 2
    2ed8:	b6 cf       	rjmp	.-148    	; 0x2e46 <do_rand>

00002eda <srand>:
    2eda:	a0 e0       	ldi	r26, 0x00	; 0
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    2ee2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2ee6:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    2eea:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    2eee:	08 95       	ret

00002ef0 <memcpy>:
    2ef0:	fb 01       	movw	r30, r22
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	02 c0       	rjmp	.+4      	; 0x2efa <memcpy+0xa>
    2ef6:	01 90       	ld	r0, Z+
    2ef8:	0d 92       	st	X+, r0
    2efa:	41 50       	subi	r20, 0x01	; 1
    2efc:	50 40       	sbci	r21, 0x00	; 0
    2efe:	d8 f7       	brcc	.-10     	; 0x2ef6 <memcpy+0x6>
    2f00:	08 95       	ret

00002f02 <fdevopen>:
    2f02:	0f 93       	push	r16
    2f04:	1f 93       	push	r17
    2f06:	cf 93       	push	r28
    2f08:	df 93       	push	r29
    2f0a:	00 97       	sbiw	r24, 0x00	; 0
    2f0c:	31 f4       	brne	.+12     	; 0x2f1a <fdevopen+0x18>
    2f0e:	61 15       	cp	r22, r1
    2f10:	71 05       	cpc	r23, r1
    2f12:	19 f4       	brne	.+6      	; 0x2f1a <fdevopen+0x18>
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	39 c0       	rjmp	.+114    	; 0x2f8c <fdevopen+0x8a>
    2f1a:	8b 01       	movw	r16, r22
    2f1c:	ec 01       	movw	r28, r24
    2f1e:	6e e0       	ldi	r22, 0x0E	; 14
    2f20:	70 e0       	ldi	r23, 0x00	; 0
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	37 d0       	rcall	.+110    	; 0x2f96 <calloc>
    2f28:	fc 01       	movw	r30, r24
    2f2a:	89 2b       	or	r24, r25
    2f2c:	99 f3       	breq	.-26     	; 0x2f14 <fdevopen+0x12>
    2f2e:	80 e8       	ldi	r24, 0x80	; 128
    2f30:	83 83       	std	Z+3, r24	; 0x03
    2f32:	01 15       	cp	r16, r1
    2f34:	11 05       	cpc	r17, r1
    2f36:	71 f0       	breq	.+28     	; 0x2f54 <fdevopen+0x52>
    2f38:	13 87       	std	Z+11, r17	; 0x0b
    2f3a:	02 87       	std	Z+10, r16	; 0x0a
    2f3c:	81 e8       	ldi	r24, 0x81	; 129
    2f3e:	83 83       	std	Z+3, r24	; 0x03
    2f40:	80 91 0d 0a 	lds	r24, 0x0A0D	; 0x800a0d <__iob>
    2f44:	90 91 0e 0a 	lds	r25, 0x0A0E	; 0x800a0e <__iob+0x1>
    2f48:	89 2b       	or	r24, r25
    2f4a:	21 f4       	brne	.+8      	; 0x2f54 <fdevopen+0x52>
    2f4c:	f0 93 0e 0a 	sts	0x0A0E, r31	; 0x800a0e <__iob+0x1>
    2f50:	e0 93 0d 0a 	sts	0x0A0D, r30	; 0x800a0d <__iob>
    2f54:	20 97       	sbiw	r28, 0x00	; 0
    2f56:	c9 f0       	breq	.+50     	; 0x2f8a <fdevopen+0x88>
    2f58:	d1 87       	std	Z+9, r29	; 0x09
    2f5a:	c0 87       	std	Z+8, r28	; 0x08
    2f5c:	83 81       	ldd	r24, Z+3	; 0x03
    2f5e:	82 60       	ori	r24, 0x02	; 2
    2f60:	83 83       	std	Z+3, r24	; 0x03
    2f62:	80 91 0f 0a 	lds	r24, 0x0A0F	; 0x800a0f <__iob+0x2>
    2f66:	90 91 10 0a 	lds	r25, 0x0A10	; 0x800a10 <__iob+0x3>
    2f6a:	89 2b       	or	r24, r25
    2f6c:	71 f4       	brne	.+28     	; 0x2f8a <fdevopen+0x88>
    2f6e:	f0 93 10 0a 	sts	0x0A10, r31	; 0x800a10 <__iob+0x3>
    2f72:	e0 93 0f 0a 	sts	0x0A0F, r30	; 0x800a0f <__iob+0x2>
    2f76:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <__iob+0x4>
    2f7a:	90 91 12 0a 	lds	r25, 0x0A12	; 0x800a12 <__iob+0x5>
    2f7e:	89 2b       	or	r24, r25
    2f80:	21 f4       	brne	.+8      	; 0x2f8a <fdevopen+0x88>
    2f82:	f0 93 12 0a 	sts	0x0A12, r31	; 0x800a12 <__iob+0x5>
    2f86:	e0 93 11 0a 	sts	0x0A11, r30	; 0x800a11 <__iob+0x4>
    2f8a:	cf 01       	movw	r24, r30
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	1f 91       	pop	r17
    2f92:	0f 91       	pop	r16
    2f94:	08 95       	ret

00002f96 <calloc>:
    2f96:	0f 93       	push	r16
    2f98:	1f 93       	push	r17
    2f9a:	cf 93       	push	r28
    2f9c:	df 93       	push	r29
    2f9e:	86 9f       	mul	r24, r22
    2fa0:	80 01       	movw	r16, r0
    2fa2:	87 9f       	mul	r24, r23
    2fa4:	10 0d       	add	r17, r0
    2fa6:	96 9f       	mul	r25, r22
    2fa8:	10 0d       	add	r17, r0
    2faa:	11 24       	eor	r1, r1
    2fac:	c8 01       	movw	r24, r16
    2fae:	0d d0       	rcall	.+26     	; 0x2fca <malloc>
    2fb0:	ec 01       	movw	r28, r24
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	21 f0       	breq	.+8      	; 0x2fbe <calloc+0x28>
    2fb6:	a8 01       	movw	r20, r16
    2fb8:	60 e0       	ldi	r22, 0x00	; 0
    2fba:	70 e0       	ldi	r23, 0x00	; 0
    2fbc:	27 d1       	rcall	.+590    	; 0x320c <memset>
    2fbe:	ce 01       	movw	r24, r28
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	08 95       	ret

00002fca <malloc>:
    2fca:	0f 93       	push	r16
    2fcc:	1f 93       	push	r17
    2fce:	cf 93       	push	r28
    2fd0:	df 93       	push	r29
    2fd2:	82 30       	cpi	r24, 0x02	; 2
    2fd4:	91 05       	cpc	r25, r1
    2fd6:	10 f4       	brcc	.+4      	; 0x2fdc <malloc+0x12>
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	e0 91 15 0a 	lds	r30, 0x0A15	; 0x800a15 <__flp>
    2fe0:	f0 91 16 0a 	lds	r31, 0x0A16	; 0x800a16 <__flp+0x1>
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	a0 e0       	ldi	r26, 0x00	; 0
    2fea:	b0 e0       	ldi	r27, 0x00	; 0
    2fec:	30 97       	sbiw	r30, 0x00	; 0
    2fee:	19 f1       	breq	.+70     	; 0x3036 <malloc+0x6c>
    2ff0:	40 81       	ld	r20, Z
    2ff2:	51 81       	ldd	r21, Z+1	; 0x01
    2ff4:	02 81       	ldd	r16, Z+2	; 0x02
    2ff6:	13 81       	ldd	r17, Z+3	; 0x03
    2ff8:	48 17       	cp	r20, r24
    2ffa:	59 07       	cpc	r21, r25
    2ffc:	c8 f0       	brcs	.+50     	; 0x3030 <malloc+0x66>
    2ffe:	84 17       	cp	r24, r20
    3000:	95 07       	cpc	r25, r21
    3002:	69 f4       	brne	.+26     	; 0x301e <malloc+0x54>
    3004:	10 97       	sbiw	r26, 0x00	; 0
    3006:	31 f0       	breq	.+12     	; 0x3014 <malloc+0x4a>
    3008:	12 96       	adiw	r26, 0x02	; 2
    300a:	0c 93       	st	X, r16
    300c:	12 97       	sbiw	r26, 0x02	; 2
    300e:	13 96       	adiw	r26, 0x03	; 3
    3010:	1c 93       	st	X, r17
    3012:	27 c0       	rjmp	.+78     	; 0x3062 <malloc+0x98>
    3014:	00 93 15 0a 	sts	0x0A15, r16	; 0x800a15 <__flp>
    3018:	10 93 16 0a 	sts	0x0A16, r17	; 0x800a16 <__flp+0x1>
    301c:	22 c0       	rjmp	.+68     	; 0x3062 <malloc+0x98>
    301e:	21 15       	cp	r18, r1
    3020:	31 05       	cpc	r19, r1
    3022:	19 f0       	breq	.+6      	; 0x302a <malloc+0x60>
    3024:	42 17       	cp	r20, r18
    3026:	53 07       	cpc	r21, r19
    3028:	18 f4       	brcc	.+6      	; 0x3030 <malloc+0x66>
    302a:	9a 01       	movw	r18, r20
    302c:	bd 01       	movw	r22, r26
    302e:	ef 01       	movw	r28, r30
    3030:	df 01       	movw	r26, r30
    3032:	f8 01       	movw	r30, r16
    3034:	db cf       	rjmp	.-74     	; 0x2fec <malloc+0x22>
    3036:	21 15       	cp	r18, r1
    3038:	31 05       	cpc	r19, r1
    303a:	f9 f0       	breq	.+62     	; 0x307a <malloc+0xb0>
    303c:	28 1b       	sub	r18, r24
    303e:	39 0b       	sbc	r19, r25
    3040:	24 30       	cpi	r18, 0x04	; 4
    3042:	31 05       	cpc	r19, r1
    3044:	80 f4       	brcc	.+32     	; 0x3066 <malloc+0x9c>
    3046:	8a 81       	ldd	r24, Y+2	; 0x02
    3048:	9b 81       	ldd	r25, Y+3	; 0x03
    304a:	61 15       	cp	r22, r1
    304c:	71 05       	cpc	r23, r1
    304e:	21 f0       	breq	.+8      	; 0x3058 <malloc+0x8e>
    3050:	fb 01       	movw	r30, r22
    3052:	93 83       	std	Z+3, r25	; 0x03
    3054:	82 83       	std	Z+2, r24	; 0x02
    3056:	04 c0       	rjmp	.+8      	; 0x3060 <malloc+0x96>
    3058:	90 93 16 0a 	sts	0x0A16, r25	; 0x800a16 <__flp+0x1>
    305c:	80 93 15 0a 	sts	0x0A15, r24	; 0x800a15 <__flp>
    3060:	fe 01       	movw	r30, r28
    3062:	32 96       	adiw	r30, 0x02	; 2
    3064:	44 c0       	rjmp	.+136    	; 0x30ee <malloc+0x124>
    3066:	fe 01       	movw	r30, r28
    3068:	e2 0f       	add	r30, r18
    306a:	f3 1f       	adc	r31, r19
    306c:	81 93       	st	Z+, r24
    306e:	91 93       	st	Z+, r25
    3070:	22 50       	subi	r18, 0x02	; 2
    3072:	31 09       	sbc	r19, r1
    3074:	39 83       	std	Y+1, r19	; 0x01
    3076:	28 83       	st	Y, r18
    3078:	3a c0       	rjmp	.+116    	; 0x30ee <malloc+0x124>
    307a:	20 91 13 0a 	lds	r18, 0x0A13	; 0x800a13 <__brkval>
    307e:	30 91 14 0a 	lds	r19, 0x0A14	; 0x800a14 <__brkval+0x1>
    3082:	23 2b       	or	r18, r19
    3084:	41 f4       	brne	.+16     	; 0x3096 <malloc+0xcc>
    3086:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__malloc_heap_start>
    308a:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__malloc_heap_start+0x1>
    308e:	30 93 14 0a 	sts	0x0A14, r19	; 0x800a14 <__brkval+0x1>
    3092:	20 93 13 0a 	sts	0x0A13, r18	; 0x800a13 <__brkval>
    3096:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__malloc_heap_end>
    309a:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__malloc_heap_end+0x1>
    309e:	21 15       	cp	r18, r1
    30a0:	31 05       	cpc	r19, r1
    30a2:	41 f4       	brne	.+16     	; 0x30b4 <malloc+0xea>
    30a4:	2d b7       	in	r18, 0x3d	; 61
    30a6:	3e b7       	in	r19, 0x3e	; 62
    30a8:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <__malloc_margin>
    30ac:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <__malloc_margin+0x1>
    30b0:	24 1b       	sub	r18, r20
    30b2:	35 0b       	sbc	r19, r21
    30b4:	e0 91 13 0a 	lds	r30, 0x0A13	; 0x800a13 <__brkval>
    30b8:	f0 91 14 0a 	lds	r31, 0x0A14	; 0x800a14 <__brkval+0x1>
    30bc:	e2 17       	cp	r30, r18
    30be:	f3 07       	cpc	r31, r19
    30c0:	a0 f4       	brcc	.+40     	; 0x30ea <malloc+0x120>
    30c2:	2e 1b       	sub	r18, r30
    30c4:	3f 0b       	sbc	r19, r31
    30c6:	28 17       	cp	r18, r24
    30c8:	39 07       	cpc	r19, r25
    30ca:	78 f0       	brcs	.+30     	; 0x30ea <malloc+0x120>
    30cc:	ac 01       	movw	r20, r24
    30ce:	4e 5f       	subi	r20, 0xFE	; 254
    30d0:	5f 4f       	sbci	r21, 0xFF	; 255
    30d2:	24 17       	cp	r18, r20
    30d4:	35 07       	cpc	r19, r21
    30d6:	48 f0       	brcs	.+18     	; 0x30ea <malloc+0x120>
    30d8:	4e 0f       	add	r20, r30
    30da:	5f 1f       	adc	r21, r31
    30dc:	50 93 14 0a 	sts	0x0A14, r21	; 0x800a14 <__brkval+0x1>
    30e0:	40 93 13 0a 	sts	0x0A13, r20	; 0x800a13 <__brkval>
    30e4:	81 93       	st	Z+, r24
    30e6:	91 93       	st	Z+, r25
    30e8:	02 c0       	rjmp	.+4      	; 0x30ee <malloc+0x124>
    30ea:	e0 e0       	ldi	r30, 0x00	; 0
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	cf 01       	movw	r24, r30
    30f0:	df 91       	pop	r29
    30f2:	cf 91       	pop	r28
    30f4:	1f 91       	pop	r17
    30f6:	0f 91       	pop	r16
    30f8:	08 95       	ret

000030fa <free>:
    30fa:	cf 93       	push	r28
    30fc:	df 93       	push	r29
    30fe:	00 97       	sbiw	r24, 0x00	; 0
    3100:	09 f4       	brne	.+2      	; 0x3104 <free+0xa>
    3102:	81 c0       	rjmp	.+258    	; 0x3206 <free+0x10c>
    3104:	fc 01       	movw	r30, r24
    3106:	32 97       	sbiw	r30, 0x02	; 2
    3108:	13 82       	std	Z+3, r1	; 0x03
    310a:	12 82       	std	Z+2, r1	; 0x02
    310c:	a0 91 15 0a 	lds	r26, 0x0A15	; 0x800a15 <__flp>
    3110:	b0 91 16 0a 	lds	r27, 0x0A16	; 0x800a16 <__flp+0x1>
    3114:	10 97       	sbiw	r26, 0x00	; 0
    3116:	81 f4       	brne	.+32     	; 0x3138 <free+0x3e>
    3118:	20 81       	ld	r18, Z
    311a:	31 81       	ldd	r19, Z+1	; 0x01
    311c:	82 0f       	add	r24, r18
    311e:	93 1f       	adc	r25, r19
    3120:	20 91 13 0a 	lds	r18, 0x0A13	; 0x800a13 <__brkval>
    3124:	30 91 14 0a 	lds	r19, 0x0A14	; 0x800a14 <__brkval+0x1>
    3128:	28 17       	cp	r18, r24
    312a:	39 07       	cpc	r19, r25
    312c:	51 f5       	brne	.+84     	; 0x3182 <free+0x88>
    312e:	f0 93 14 0a 	sts	0x0A14, r31	; 0x800a14 <__brkval+0x1>
    3132:	e0 93 13 0a 	sts	0x0A13, r30	; 0x800a13 <__brkval>
    3136:	67 c0       	rjmp	.+206    	; 0x3206 <free+0x10c>
    3138:	ed 01       	movw	r28, r26
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	ce 17       	cp	r28, r30
    3140:	df 07       	cpc	r29, r31
    3142:	40 f4       	brcc	.+16     	; 0x3154 <free+0x5a>
    3144:	4a 81       	ldd	r20, Y+2	; 0x02
    3146:	5b 81       	ldd	r21, Y+3	; 0x03
    3148:	9e 01       	movw	r18, r28
    314a:	41 15       	cp	r20, r1
    314c:	51 05       	cpc	r21, r1
    314e:	f1 f0       	breq	.+60     	; 0x318c <free+0x92>
    3150:	ea 01       	movw	r28, r20
    3152:	f5 cf       	rjmp	.-22     	; 0x313e <free+0x44>
    3154:	d3 83       	std	Z+3, r29	; 0x03
    3156:	c2 83       	std	Z+2, r28	; 0x02
    3158:	40 81       	ld	r20, Z
    315a:	51 81       	ldd	r21, Z+1	; 0x01
    315c:	84 0f       	add	r24, r20
    315e:	95 1f       	adc	r25, r21
    3160:	c8 17       	cp	r28, r24
    3162:	d9 07       	cpc	r29, r25
    3164:	59 f4       	brne	.+22     	; 0x317c <free+0x82>
    3166:	88 81       	ld	r24, Y
    3168:	99 81       	ldd	r25, Y+1	; 0x01
    316a:	84 0f       	add	r24, r20
    316c:	95 1f       	adc	r25, r21
    316e:	02 96       	adiw	r24, 0x02	; 2
    3170:	91 83       	std	Z+1, r25	; 0x01
    3172:	80 83       	st	Z, r24
    3174:	8a 81       	ldd	r24, Y+2	; 0x02
    3176:	9b 81       	ldd	r25, Y+3	; 0x03
    3178:	93 83       	std	Z+3, r25	; 0x03
    317a:	82 83       	std	Z+2, r24	; 0x02
    317c:	21 15       	cp	r18, r1
    317e:	31 05       	cpc	r19, r1
    3180:	29 f4       	brne	.+10     	; 0x318c <free+0x92>
    3182:	f0 93 16 0a 	sts	0x0A16, r31	; 0x800a16 <__flp+0x1>
    3186:	e0 93 15 0a 	sts	0x0A15, r30	; 0x800a15 <__flp>
    318a:	3d c0       	rjmp	.+122    	; 0x3206 <free+0x10c>
    318c:	e9 01       	movw	r28, r18
    318e:	fb 83       	std	Y+3, r31	; 0x03
    3190:	ea 83       	std	Y+2, r30	; 0x02
    3192:	49 91       	ld	r20, Y+
    3194:	59 91       	ld	r21, Y+
    3196:	c4 0f       	add	r28, r20
    3198:	d5 1f       	adc	r29, r21
    319a:	ec 17       	cp	r30, r28
    319c:	fd 07       	cpc	r31, r29
    319e:	61 f4       	brne	.+24     	; 0x31b8 <free+0xbe>
    31a0:	80 81       	ld	r24, Z
    31a2:	91 81       	ldd	r25, Z+1	; 0x01
    31a4:	84 0f       	add	r24, r20
    31a6:	95 1f       	adc	r25, r21
    31a8:	02 96       	adiw	r24, 0x02	; 2
    31aa:	e9 01       	movw	r28, r18
    31ac:	99 83       	std	Y+1, r25	; 0x01
    31ae:	88 83       	st	Y, r24
    31b0:	82 81       	ldd	r24, Z+2	; 0x02
    31b2:	93 81       	ldd	r25, Z+3	; 0x03
    31b4:	9b 83       	std	Y+3, r25	; 0x03
    31b6:	8a 83       	std	Y+2, r24	; 0x02
    31b8:	e0 e0       	ldi	r30, 0x00	; 0
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	12 96       	adiw	r26, 0x02	; 2
    31be:	8d 91       	ld	r24, X+
    31c0:	9c 91       	ld	r25, X
    31c2:	13 97       	sbiw	r26, 0x03	; 3
    31c4:	00 97       	sbiw	r24, 0x00	; 0
    31c6:	19 f0       	breq	.+6      	; 0x31ce <free+0xd4>
    31c8:	fd 01       	movw	r30, r26
    31ca:	dc 01       	movw	r26, r24
    31cc:	f7 cf       	rjmp	.-18     	; 0x31bc <free+0xc2>
    31ce:	8d 91       	ld	r24, X+
    31d0:	9c 91       	ld	r25, X
    31d2:	11 97       	sbiw	r26, 0x01	; 1
    31d4:	9d 01       	movw	r18, r26
    31d6:	2e 5f       	subi	r18, 0xFE	; 254
    31d8:	3f 4f       	sbci	r19, 0xFF	; 255
    31da:	82 0f       	add	r24, r18
    31dc:	93 1f       	adc	r25, r19
    31de:	20 91 13 0a 	lds	r18, 0x0A13	; 0x800a13 <__brkval>
    31e2:	30 91 14 0a 	lds	r19, 0x0A14	; 0x800a14 <__brkval+0x1>
    31e6:	28 17       	cp	r18, r24
    31e8:	39 07       	cpc	r19, r25
    31ea:	69 f4       	brne	.+26     	; 0x3206 <free+0x10c>
    31ec:	30 97       	sbiw	r30, 0x00	; 0
    31ee:	29 f4       	brne	.+10     	; 0x31fa <free+0x100>
    31f0:	10 92 16 0a 	sts	0x0A16, r1	; 0x800a16 <__flp+0x1>
    31f4:	10 92 15 0a 	sts	0x0A15, r1	; 0x800a15 <__flp>
    31f8:	02 c0       	rjmp	.+4      	; 0x31fe <free+0x104>
    31fa:	13 82       	std	Z+3, r1	; 0x03
    31fc:	12 82       	std	Z+2, r1	; 0x02
    31fe:	b0 93 14 0a 	sts	0x0A14, r27	; 0x800a14 <__brkval+0x1>
    3202:	a0 93 13 0a 	sts	0x0A13, r26	; 0x800a13 <__brkval>
    3206:	df 91       	pop	r29
    3208:	cf 91       	pop	r28
    320a:	08 95       	ret

0000320c <memset>:
    320c:	dc 01       	movw	r26, r24
    320e:	01 c0       	rjmp	.+2      	; 0x3212 <memset+0x6>
    3210:	6d 93       	st	X+, r22
    3212:	41 50       	subi	r20, 0x01	; 1
    3214:	50 40       	sbci	r21, 0x00	; 0
    3216:	e0 f7       	brcc	.-8      	; 0x3210 <memset+0x4>
    3218:	08 95       	ret

0000321a <__divmodsi4>:
    321a:	05 2e       	mov	r0, r21
    321c:	97 fb       	bst	r25, 7
    321e:	16 f4       	brtc	.+4      	; 0x3224 <__divmodsi4+0xa>
    3220:	00 94       	com	r0
    3222:	0f d0       	rcall	.+30     	; 0x3242 <__negsi2>
    3224:	57 fd       	sbrc	r21, 7
    3226:	05 d0       	rcall	.+10     	; 0x3232 <__divmodsi4_neg2>
    3228:	d3 dd       	rcall	.-1114   	; 0x2dd0 <__udivmodsi4>
    322a:	07 fc       	sbrc	r0, 7
    322c:	02 d0       	rcall	.+4      	; 0x3232 <__divmodsi4_neg2>
    322e:	46 f4       	brtc	.+16     	; 0x3240 <__divmodsi4_exit>
    3230:	08 c0       	rjmp	.+16     	; 0x3242 <__negsi2>

00003232 <__divmodsi4_neg2>:
    3232:	50 95       	com	r21
    3234:	40 95       	com	r20
    3236:	30 95       	com	r19
    3238:	21 95       	neg	r18
    323a:	3f 4f       	sbci	r19, 0xFF	; 255
    323c:	4f 4f       	sbci	r20, 0xFF	; 255
    323e:	5f 4f       	sbci	r21, 0xFF	; 255

00003240 <__divmodsi4_exit>:
    3240:	08 95       	ret

00003242 <__negsi2>:
    3242:	90 95       	com	r25
    3244:	80 95       	com	r24
    3246:	70 95       	com	r23
    3248:	61 95       	neg	r22
    324a:	7f 4f       	sbci	r23, 0xFF	; 255
    324c:	8f 4f       	sbci	r24, 0xFF	; 255
    324e:	9f 4f       	sbci	r25, 0xFF	; 255
    3250:	08 95       	ret

00003252 <__mulshisi3>:
    3252:	b7 ff       	sbrs	r27, 7
    3254:	df cd       	rjmp	.-1090   	; 0x2e14 <__muluhisi3>

00003256 <__mulohisi3>:
    3256:	de dd       	rcall	.-1092   	; 0x2e14 <__muluhisi3>
    3258:	82 1b       	sub	r24, r18
    325a:	93 0b       	sbc	r25, r19
    325c:	08 95       	ret

0000325e <_exit>:
    325e:	f8 94       	cli

00003260 <__stop_program>:
    3260:	ff cf       	rjmp	.-2      	; 0x3260 <__stop_program>
