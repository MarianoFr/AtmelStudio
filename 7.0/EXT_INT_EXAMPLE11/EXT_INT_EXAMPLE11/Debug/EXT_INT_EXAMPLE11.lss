
EXT_INT_EXAMPLE11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000806  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000792  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800200  00800200  00000806  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025ff  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a35  00000000  00000000  00002f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b1  00000000  00000000  000049d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000051c  00000000  00000000  00006388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00017a7d  00000000  00000000  000068a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e94  00000000  00000000  0001e321  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0001f1b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000067d3  00000000  00000000  0001f29d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	ce c0       	rjmp	.+412    	; 0x1a2 <__vector_1>
   6:	00 00       	nop
   8:	f9 c0       	rjmp	.+498    	; 0x1fc <__vector_2>
   a:	00 00       	nop
   c:	24 c1       	rjmp	.+584    	; 0x256 <__vector_3>
   e:	00 00       	nop
  10:	4f c1       	rjmp	.+670    	; 0x2b0 <__vector_4>
  12:	00 00       	nop
  14:	7a c1       	rjmp	.+756    	; 0x30a <__vector_5>
  16:	00 00       	nop
  18:	a5 c1       	rjmp	.+842    	; 0x364 <__vector_6>
  1a:	00 00       	nop
  1c:	d0 c1       	rjmp	.+928    	; 0x3be <__vector_7>
  1e:	00 00       	nop
  20:	fb c1       	rjmp	.+1014   	; 0x418 <__vector_8>
  22:	00 00       	nop
  24:	26 c2       	rjmp	.+1100   	; 0x472 <__vector_9>
  26:	00 00       	nop
  28:	51 c2       	rjmp	.+1186   	; 0x4cc <__vector_10>
  2a:	00 00       	nop
  2c:	95 c0       	rjmp	.+298    	; 0x158 <__bad_interrupt>
  2e:	00 00       	nop
  30:	93 c0       	rjmp	.+294    	; 0x158 <__bad_interrupt>
  32:	00 00       	nop
  34:	91 c0       	rjmp	.+290    	; 0x158 <__bad_interrupt>
  36:	00 00       	nop
  38:	8f c0       	rjmp	.+286    	; 0x158 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8d c0       	rjmp	.+282    	; 0x158 <__bad_interrupt>
  3e:	00 00       	nop
  40:	8b c0       	rjmp	.+278    	; 0x158 <__bad_interrupt>
  42:	00 00       	nop
  44:	89 c0       	rjmp	.+274    	; 0x158 <__bad_interrupt>
  46:	00 00       	nop
  48:	87 c0       	rjmp	.+270    	; 0x158 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	85 c0       	rjmp	.+266    	; 0x158 <__bad_interrupt>
  4e:	00 00       	nop
  50:	83 c0       	rjmp	.+262    	; 0x158 <__bad_interrupt>
  52:	00 00       	nop
  54:	81 c0       	rjmp	.+258    	; 0x158 <__bad_interrupt>
  56:	00 00       	nop
  58:	7f c0       	rjmp	.+254    	; 0x158 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	7d c0       	rjmp	.+250    	; 0x158 <__bad_interrupt>
  5e:	00 00       	nop
  60:	7b c0       	rjmp	.+246    	; 0x158 <__bad_interrupt>
  62:	00 00       	nop
  64:	79 c0       	rjmp	.+242    	; 0x158 <__bad_interrupt>
  66:	00 00       	nop
  68:	77 c0       	rjmp	.+238    	; 0x158 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	75 c0       	rjmp	.+234    	; 0x158 <__bad_interrupt>
  6e:	00 00       	nop
  70:	73 c0       	rjmp	.+230    	; 0x158 <__bad_interrupt>
  72:	00 00       	nop
  74:	71 c0       	rjmp	.+226    	; 0x158 <__bad_interrupt>
  76:	00 00       	nop
  78:	6f c0       	rjmp	.+222    	; 0x158 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	6d c0       	rjmp	.+218    	; 0x158 <__bad_interrupt>
  7e:	00 00       	nop
  80:	6b c0       	rjmp	.+214    	; 0x158 <__bad_interrupt>
  82:	00 00       	nop
  84:	69 c0       	rjmp	.+210    	; 0x158 <__bad_interrupt>
  86:	00 00       	nop
  88:	67 c0       	rjmp	.+206    	; 0x158 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	65 c0       	rjmp	.+202    	; 0x158 <__bad_interrupt>
  8e:	00 00       	nop
  90:	63 c0       	rjmp	.+198    	; 0x158 <__bad_interrupt>
  92:	00 00       	nop
  94:	61 c0       	rjmp	.+194    	; 0x158 <__bad_interrupt>
  96:	00 00       	nop
  98:	5f c0       	rjmp	.+190    	; 0x158 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	5d c0       	rjmp	.+186    	; 0x158 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	5b c0       	rjmp	.+182    	; 0x158 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	59 c0       	rjmp	.+178    	; 0x158 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	57 c0       	rjmp	.+174    	; 0x158 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	55 c0       	rjmp	.+170    	; 0x158 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	53 c0       	rjmp	.+166    	; 0x158 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	51 c0       	rjmp	.+162    	; 0x158 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	4f c0       	rjmp	.+158    	; 0x158 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	4d c0       	rjmp	.+154    	; 0x158 <__bad_interrupt>
  be:	00 00       	nop
  c0:	4b c0       	rjmp	.+150    	; 0x158 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	49 c0       	rjmp	.+146    	; 0x158 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	47 c0       	rjmp	.+142    	; 0x158 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	45 c0       	rjmp	.+138    	; 0x158 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	43 c0       	rjmp	.+134    	; 0x158 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	41 c0       	rjmp	.+130    	; 0x158 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	3f c0       	rjmp	.+126    	; 0x158 <__bad_interrupt>
  da:	00 00       	nop
  dc:	3d c0       	rjmp	.+122    	; 0x158 <__bad_interrupt>
  de:	00 00       	nop
  e0:	3b c0       	rjmp	.+118    	; 0x158 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	39 c0       	rjmp	.+114    	; 0x158 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	37 c0       	rjmp	.+110    	; 0x158 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	35 c0       	rjmp	.+106    	; 0x158 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	33 c0       	rjmp	.+102    	; 0x158 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	31 c0       	rjmp	.+98     	; 0x158 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	2f c0       	rjmp	.+94     	; 0x158 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	2d c0       	rjmp	.+90     	; 0x158 <__bad_interrupt>
  fe:	00 00       	nop
 100:	2b c0       	rjmp	.+86     	; 0x158 <__bad_interrupt>
 102:	00 00       	nop
 104:	29 c0       	rjmp	.+82     	; 0x158 <__bad_interrupt>
 106:	00 00       	nop
 108:	27 c0       	rjmp	.+78     	; 0x158 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	25 c0       	rjmp	.+74     	; 0x158 <__bad_interrupt>
 10e:	00 00       	nop
 110:	23 c0       	rjmp	.+70     	; 0x158 <__bad_interrupt>
 112:	00 00       	nop
 114:	21 c0       	rjmp	.+66     	; 0x158 <__bad_interrupt>
 116:	00 00       	nop
 118:	1f c0       	rjmp	.+62     	; 0x158 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	1d c0       	rjmp	.+58     	; 0x158 <__bad_interrupt>
 11e:	00 00       	nop
 120:	1b c0       	rjmp	.+54     	; 0x158 <__bad_interrupt>
 122:	00 00       	nop
 124:	19 c0       	rjmp	.+50     	; 0x158 <__bad_interrupt>
 126:	00 00       	nop
 128:	17 c0       	rjmp	.+46     	; 0x158 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	15 c0       	rjmp	.+42     	; 0x158 <__bad_interrupt>
 12e:	00 00       	nop
 130:	13 c0       	rjmp	.+38     	; 0x158 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_clear_bss>:
 144:	22 e0       	ldi	r18, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	01 c0       	rjmp	.+2      	; 0x14e <.do_clear_bss_start>

0000014c <.do_clear_bss_loop>:
 14c:	1d 92       	st	X+, r1

0000014e <.do_clear_bss_start>:
 14e:	a4 31       	cpi	r26, 0x14	; 20
 150:	b2 07       	cpc	r27, r18
 152:	e1 f7       	brne	.-8      	; 0x14c <.do_clear_bss_loop>
 154:	0e d3       	rcall	.+1564   	; 0x772 <main>
 156:	1b c3       	rjmp	.+1590   	; 0x78e <_exit>

00000158 <__bad_interrupt>:
 158:	53 cf       	rjmp	.-346    	; 0x0 <__vectors>

0000015a <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	1f 92       	push	r1
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
 16a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
 16e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	69 f0       	breq	.+26     	; 0x190 <sysclk_init+0x36>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 176:	8f b7       	in	r24, 0x3f	; 63
 178:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 17a:	f8 94       	cli
	return flags;
 17c:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
 17e:	5f 93       	push	r21
 180:	50 e8       	ldi	r21, 0x80	; 128
 182:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
 186:	53 e0       	ldi	r21, 0x03	; 3
 188:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
 18c:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 18e:	8f bf       	out	0x3f, r24	; 63
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
 190:	0f 90       	pop	r0
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 198:	2c 9a       	sbi	0x05, 4	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 19a:	24 9a       	sbi	0x04, 4	; 4
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 19c:	6c 98       	cbi	0x0d, 4	; 13
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 19e:	74 9a       	sbi	0x0e, 4	; 14
 1a0:	08 95       	ret

000001a2 <__vector_1>:
	/* Clear the PCINTn interrupt flag */
	ext_int_pcint_clear_flag(pin);

	/* Enable the interrupt */
	ext_int_pcint_enable(pin);
}
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	0b b6       	in	r0, 0x3b	; 59
 1ae:	0f 92       	push	r0
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
 1c8:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <ext_int_int0_callback>
 1cc:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <ext_int_int0_callback+0x1>
 1d0:	30 97       	sbiw	r30, 0x00	; 0
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <__vector_1+0x34>
 1d4:	19 95       	eicall
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0b be       	out	0x3b, r0	; 59
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <__vector_2>:
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	0b b6       	in	r0, 0x3b	; 59
 208:	0f 92       	push	r0
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
 222:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <ext_int_int1_callback>
 226:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <ext_int_int1_callback+0x1>
 22a:	30 97       	sbiw	r30, 0x00	; 0
 22c:	09 f0       	breq	.+2      	; 0x230 <__vector_2+0x34>
 22e:	19 95       	eicall
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0b be       	out	0x3b, r0	; 59
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <__vector_3>:
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	0b b6       	in	r0, 0x3b	; 59
 262:	0f 92       	push	r0
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
 27c:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <ext_int_int2_callback>
 280:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <ext_int_int2_callback+0x1>
 284:	30 97       	sbiw	r30, 0x00	; 0
 286:	09 f0       	breq	.+2      	; 0x28a <__vector_3+0x34>
 288:	19 95       	eicall
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	0f 90       	pop	r0
 2a4:	0b be       	out	0x3b, r0	; 59
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <__vector_4>:
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
 2ba:	0b b6       	in	r0, 0x3b	; 59
 2bc:	0f 92       	push	r0
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
 2d6:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <ext_int_int3_callback>
 2da:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <ext_int_int3_callback+0x1>
 2de:	30 97       	sbiw	r30, 0x00	; 0
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <__vector_4+0x34>
 2e2:	19 95       	eicall
 2e4:	ff 91       	pop	r31
 2e6:	ef 91       	pop	r30
 2e8:	bf 91       	pop	r27
 2ea:	af 91       	pop	r26
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	7f 91       	pop	r23
 2f2:	6f 91       	pop	r22
 2f4:	5f 91       	pop	r21
 2f6:	4f 91       	pop	r20
 2f8:	3f 91       	pop	r19
 2fa:	2f 91       	pop	r18
 2fc:	0f 90       	pop	r0
 2fe:	0b be       	out	0x3b, r0	; 59
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__vector_5>:
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	0b b6       	in	r0, 0x3b	; 59
 316:	0f 92       	push	r0
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	5f 93       	push	r21
 320:	6f 93       	push	r22
 322:	7f 93       	push	r23
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31
 330:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <ext_int_int4_callback>
 334:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <ext_int_int4_callback+0x1>
 338:	30 97       	sbiw	r30, 0x00	; 0
 33a:	09 f0       	breq	.+2      	; 0x33e <__vector_5+0x34>
 33c:	19 95       	eicall
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	bf 91       	pop	r27
 344:	af 91       	pop	r26
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	7f 91       	pop	r23
 34c:	6f 91       	pop	r22
 34e:	5f 91       	pop	r21
 350:	4f 91       	pop	r20
 352:	3f 91       	pop	r19
 354:	2f 91       	pop	r18
 356:	0f 90       	pop	r0
 358:	0b be       	out	0x3b, r0	; 59
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <__vector_6>:
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	0b b6       	in	r0, 0x3b	; 59
 370:	0f 92       	push	r0
 372:	2f 93       	push	r18
 374:	3f 93       	push	r19
 376:	4f 93       	push	r20
 378:	5f 93       	push	r21
 37a:	6f 93       	push	r22
 37c:	7f 93       	push	r23
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	af 93       	push	r26
 384:	bf 93       	push	r27
 386:	ef 93       	push	r30
 388:	ff 93       	push	r31
 38a:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <ext_int_int5_callback>
 38e:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <ext_int_int5_callback+0x1>
 392:	30 97       	sbiw	r30, 0x00	; 0
 394:	09 f0       	breq	.+2      	; 0x398 <__vector_6+0x34>
 396:	19 95       	eicall
 398:	ff 91       	pop	r31
 39a:	ef 91       	pop	r30
 39c:	bf 91       	pop	r27
 39e:	af 91       	pop	r26
 3a0:	9f 91       	pop	r25
 3a2:	8f 91       	pop	r24
 3a4:	7f 91       	pop	r23
 3a6:	6f 91       	pop	r22
 3a8:	5f 91       	pop	r21
 3aa:	4f 91       	pop	r20
 3ac:	3f 91       	pop	r19
 3ae:	2f 91       	pop	r18
 3b0:	0f 90       	pop	r0
 3b2:	0b be       	out	0x3b, r0	; 59
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <__vector_7>:
 3be:	1f 92       	push	r1
 3c0:	0f 92       	push	r0
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	0f 92       	push	r0
 3c6:	11 24       	eor	r1, r1
 3c8:	0b b6       	in	r0, 0x3b	; 59
 3ca:	0f 92       	push	r0
 3cc:	2f 93       	push	r18
 3ce:	3f 93       	push	r19
 3d0:	4f 93       	push	r20
 3d2:	5f 93       	push	r21
 3d4:	6f 93       	push	r22
 3d6:	7f 93       	push	r23
 3d8:	8f 93       	push	r24
 3da:	9f 93       	push	r25
 3dc:	af 93       	push	r26
 3de:	bf 93       	push	r27
 3e0:	ef 93       	push	r30
 3e2:	ff 93       	push	r31
 3e4:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <ext_int_int6_callback>
 3e8:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <ext_int_int6_callback+0x1>
 3ec:	30 97       	sbiw	r30, 0x00	; 0
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <__vector_7+0x34>
 3f0:	19 95       	eicall
 3f2:	ff 91       	pop	r31
 3f4:	ef 91       	pop	r30
 3f6:	bf 91       	pop	r27
 3f8:	af 91       	pop	r26
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	7f 91       	pop	r23
 400:	6f 91       	pop	r22
 402:	5f 91       	pop	r21
 404:	4f 91       	pop	r20
 406:	3f 91       	pop	r19
 408:	2f 91       	pop	r18
 40a:	0f 90       	pop	r0
 40c:	0b be       	out	0x3b, r0	; 59
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <__vector_8>:
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	0b b6       	in	r0, 0x3b	; 59
 424:	0f 92       	push	r0
 426:	2f 93       	push	r18
 428:	3f 93       	push	r19
 42a:	4f 93       	push	r20
 42c:	5f 93       	push	r21
 42e:	6f 93       	push	r22
 430:	7f 93       	push	r23
 432:	8f 93       	push	r24
 434:	9f 93       	push	r25
 436:	af 93       	push	r26
 438:	bf 93       	push	r27
 43a:	ef 93       	push	r30
 43c:	ff 93       	push	r31
 43e:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <ext_int_int7_callback>
 442:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <ext_int_int7_callback+0x1>
 446:	30 97       	sbiw	r30, 0x00	; 0
 448:	09 f0       	breq	.+2      	; 0x44c <__vector_8+0x34>
 44a:	19 95       	eicall
 44c:	ff 91       	pop	r31
 44e:	ef 91       	pop	r30
 450:	bf 91       	pop	r27
 452:	af 91       	pop	r26
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	7f 91       	pop	r23
 45a:	6f 91       	pop	r22
 45c:	5f 91       	pop	r21
 45e:	4f 91       	pop	r20
 460:	3f 91       	pop	r19
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0b be       	out	0x3b, r0	; 59
 468:	0f 90       	pop	r0
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	0f 90       	pop	r0
 46e:	1f 90       	pop	r1
 470:	18 95       	reti

00000472 <__vector_9>:
 472:	1f 92       	push	r1
 474:	0f 92       	push	r0
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	0f 92       	push	r0
 47a:	11 24       	eor	r1, r1
 47c:	0b b6       	in	r0, 0x3b	; 59
 47e:	0f 92       	push	r0
 480:	2f 93       	push	r18
 482:	3f 93       	push	r19
 484:	4f 93       	push	r20
 486:	5f 93       	push	r21
 488:	6f 93       	push	r22
 48a:	7f 93       	push	r23
 48c:	8f 93       	push	r24
 48e:	9f 93       	push	r25
 490:	af 93       	push	r26
 492:	bf 93       	push	r27
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
 498:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <ext_int_pcint0_callback>
 49c:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <ext_int_pcint0_callback+0x1>
 4a0:	30 97       	sbiw	r30, 0x00	; 0
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <__vector_9+0x34>
 4a4:	19 95       	eicall
 4a6:	ff 91       	pop	r31
 4a8:	ef 91       	pop	r30
 4aa:	bf 91       	pop	r27
 4ac:	af 91       	pop	r26
 4ae:	9f 91       	pop	r25
 4b0:	8f 91       	pop	r24
 4b2:	7f 91       	pop	r23
 4b4:	6f 91       	pop	r22
 4b6:	5f 91       	pop	r21
 4b8:	4f 91       	pop	r20
 4ba:	3f 91       	pop	r19
 4bc:	2f 91       	pop	r18
 4be:	0f 90       	pop	r0
 4c0:	0b be       	out	0x3b, r0	; 59
 4c2:	0f 90       	pop	r0
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	0f 90       	pop	r0
 4c8:	1f 90       	pop	r1
 4ca:	18 95       	reti

000004cc <__vector_10>:
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	0b b6       	in	r0, 0x3b	; 59
 4d8:	0f 92       	push	r0
 4da:	2f 93       	push	r18
 4dc:	3f 93       	push	r19
 4de:	4f 93       	push	r20
 4e0:	5f 93       	push	r21
 4e2:	6f 93       	push	r22
 4e4:	7f 93       	push	r23
 4e6:	8f 93       	push	r24
 4e8:	9f 93       	push	r25
 4ea:	af 93       	push	r26
 4ec:	bf 93       	push	r27
 4ee:	ef 93       	push	r30
 4f0:	ff 93       	push	r31
 4f2:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_edata>
 4f6:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <_edata+0x1>
 4fa:	30 97       	sbiw	r30, 0x00	; 0
 4fc:	09 f0       	breq	.+2      	; 0x500 <__vector_10+0x34>
 4fe:	19 95       	eicall
 500:	ff 91       	pop	r31
 502:	ef 91       	pop	r30
 504:	bf 91       	pop	r27
 506:	af 91       	pop	r26
 508:	9f 91       	pop	r25
 50a:	8f 91       	pop	r24
 50c:	7f 91       	pop	r23
 50e:	6f 91       	pop	r22
 510:	5f 91       	pop	r21
 512:	4f 91       	pop	r20
 514:	3f 91       	pop	r19
 516:	2f 91       	pop	r18
 518:	0f 90       	pop	r0
 51a:	0b be       	out	0x3b, r0	; 59
 51c:	0f 90       	pop	r0
 51e:	0f be       	out	0x3f, r0	; 63
 520:	0f 90       	pop	r0
 522:	1f 90       	pop	r1
 524:	18 95       	reti

00000526 <ext_int_clear_flag>:
 526:	4c b3       	in	r20, 0x1c	; 28
 528:	87 70       	andi	r24, 0x07	; 7
 52a:	99 27       	eor	r25, r25
 52c:	21 e0       	ldi	r18, 0x01	; 1
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	b9 01       	movw	r22, r18
 532:	02 c0       	rjmp	.+4      	; 0x538 <ext_int_clear_flag+0x12>
 534:	66 0f       	add	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	8a 95       	dec	r24
 53a:	e2 f7       	brpl	.-8      	; 0x534 <ext_int_clear_flag+0xe>
 53c:	cb 01       	movw	r24, r22
 53e:	84 2b       	or	r24, r20
 540:	8c bb       	out	0x1c, r24	; 28
 542:	08 95       	ret

00000544 <ext_int_disable>:
 544:	4d b3       	in	r20, 0x1d	; 29
 546:	87 70       	andi	r24, 0x07	; 7
 548:	99 27       	eor	r25, r25
 54a:	21 e0       	ldi	r18, 0x01	; 1
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	b9 01       	movw	r22, r18
 550:	02 c0       	rjmp	.+4      	; 0x556 <ext_int_disable+0x12>
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	8a 95       	dec	r24
 558:	e2 f7       	brpl	.-8      	; 0x552 <ext_int_disable+0xe>
 55a:	cb 01       	movw	r24, r22
 55c:	80 95       	com	r24
 55e:	84 23       	and	r24, r20
 560:	8d bb       	out	0x1d, r24	; 29
 562:	08 95       	ret

00000564 <ext_int_enable>:
 564:	4d b3       	in	r20, 0x1d	; 29
 566:	87 70       	andi	r24, 0x07	; 7
 568:	99 27       	eor	r25, r25
 56a:	21 e0       	ldi	r18, 0x01	; 1
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	b9 01       	movw	r22, r18
 570:	02 c0       	rjmp	.+4      	; 0x576 <ext_int_enable+0x12>
 572:	66 0f       	add	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	8a 95       	dec	r24
 578:	e2 f7       	brpl	.-8      	; 0x572 <ext_int_enable+0xe>
 57a:	cb 01       	movw	r24, r22
 57c:	84 2b       	or	r24, r20
 57e:	8d bb       	out	0x1d, r24	; 29
 580:	08 95       	ret

00000582 <ext_int_init>:
 582:	ff 92       	push	r15
 584:	0f 93       	push	r16
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	1f 92       	push	r1
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
 592:	8c 01       	movw	r16, r24
 594:	f6 2e       	mov	r15, r22
 596:	d6 df       	rcall	.-84     	; 0x544 <ext_int_disable>
 598:	20 2f       	mov	r18, r16
 59a:	27 70       	andi	r18, 0x07	; 7
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <ext_int_init+0x24>
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	2a 95       	dec	r18
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <ext_int_init+0x20>
 5aa:	f8 01       	movw	r30, r16
 5ac:	ff 27       	eor	r31, r31
 5ae:	f6 95       	lsr	r31
 5b0:	e7 95       	ror	r30
 5b2:	f6 95       	lsr	r31
 5b4:	e7 95       	ror	r30
 5b6:	f6 95       	lsr	r31
 5b8:	e7 95       	ror	r30
 5ba:	9f 01       	movw	r18, r30
 5bc:	22 0f       	add	r18, r18
 5be:	33 1f       	adc	r19, r19
 5c0:	e2 0f       	add	r30, r18
 5c2:	f3 1f       	adc	r31, r19
 5c4:	b0 96       	adiw	r30, 0x20	; 32
 5c6:	98 2f       	mov	r25, r24
 5c8:	90 95       	com	r25
 5ca:	21 81       	ldd	r18, Z+1	; 0x01
 5cc:	92 23       	and	r25, r18
 5ce:	91 83       	std	Z+1, r25	; 0x01
 5d0:	92 81       	ldd	r25, Z+2	; 0x02
 5d2:	89 2b       	or	r24, r25
 5d4:	82 83       	std	Z+2, r24	; 0x02
 5d6:	8f b7       	in	r24, 0x3f	; 63
 5d8:	89 83       	std	Y+1, r24	; 0x01
 5da:	f8 94       	cli
 5dc:	29 81       	ldd	r18, Y+1	; 0x01
 5de:	80 2f       	mov	r24, r16
 5e0:	86 95       	lsr	r24
 5e2:	86 95       	lsr	r24
 5e4:	86 95       	lsr	r24
 5e6:	83 30       	cpi	r24, 0x03	; 3
 5e8:	21 f5       	brne	.+72     	; 0x632 <ext_int_init+0xb0>
 5ea:	c8 01       	movw	r24, r16
 5ec:	87 70       	andi	r24, 0x07	; 7
 5ee:	99 27       	eor	r25, r25
 5f0:	04 97       	sbiw	r24, 0x04	; 4
 5f2:	08 f0       	brcs	.+2      	; 0x5f6 <ext_int_init+0x74>
 5f4:	42 c0       	rjmp	.+132    	; 0x67a <ext_int_init+0xf8>
 5f6:	e9 e6       	ldi	r30, 0x69	; 105
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	30 81       	ld	r19, Z
 5fc:	a8 01       	movw	r20, r16
 5fe:	43 70       	andi	r20, 0x03	; 3
 600:	55 27       	eor	r21, r21
 602:	44 0f       	add	r20, r20
 604:	55 1f       	adc	r21, r21
 606:	83 e0       	ldi	r24, 0x03	; 3
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	04 2e       	mov	r0, r20
 60c:	02 c0       	rjmp	.+4      	; 0x612 <ext_int_init+0x90>
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	0a 94       	dec	r0
 614:	e2 f7       	brpl	.-8      	; 0x60e <ext_int_init+0x8c>
 616:	80 95       	com	r24
 618:	83 23       	and	r24, r19
 61a:	80 83       	st	Z, r24
 61c:	30 81       	ld	r19, Z
 61e:	8f 2d       	mov	r24, r15
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <ext_int_init+0xa6>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	4a 95       	dec	r20
 62a:	e2 f7       	brpl	.-8      	; 0x624 <ext_int_init+0xa2>
 62c:	83 2b       	or	r24, r19
 62e:	80 83       	st	Z, r24
 630:	24 c0       	rjmp	.+72     	; 0x67a <ext_int_init+0xf8>
 632:	84 30       	cpi	r24, 0x04	; 4
 634:	11 f5       	brne	.+68     	; 0x67a <ext_int_init+0xf8>
 636:	c8 01       	movw	r24, r16
 638:	87 70       	andi	r24, 0x07	; 7
 63a:	99 27       	eor	r25, r25
 63c:	04 97       	sbiw	r24, 0x04	; 4
 63e:	e8 f0       	brcs	.+58     	; 0x67a <ext_int_init+0xf8>
 640:	ea e6       	ldi	r30, 0x6A	; 106
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	30 81       	ld	r19, Z
 646:	a8 01       	movw	r20, r16
 648:	43 70       	andi	r20, 0x03	; 3
 64a:	55 27       	eor	r21, r21
 64c:	44 0f       	add	r20, r20
 64e:	55 1f       	adc	r21, r21
 650:	83 e0       	ldi	r24, 0x03	; 3
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	04 2e       	mov	r0, r20
 656:	02 c0       	rjmp	.+4      	; 0x65c <ext_int_init+0xda>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	0a 94       	dec	r0
 65e:	e2 f7       	brpl	.-8      	; 0x658 <ext_int_init+0xd6>
 660:	80 95       	com	r24
 662:	83 23       	and	r24, r19
 664:	80 83       	st	Z, r24
 666:	30 81       	ld	r19, Z
 668:	8f 2d       	mov	r24, r15
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <ext_int_init+0xf0>
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	4a 95       	dec	r20
 674:	e2 f7       	brpl	.-8      	; 0x66e <ext_int_init+0xec>
 676:	83 2b       	or	r24, r19
 678:	80 83       	st	Z, r24
 67a:	2f bf       	out	0x3f, r18	; 63
 67c:	c8 01       	movw	r24, r16
 67e:	53 df       	rcall	.-346    	; 0x526 <ext_int_clear_flag>
 680:	c8 01       	movw	r24, r16
 682:	70 df       	rcall	.-288    	; 0x564 <ext_int_enable>
 684:	0f 90       	pop	r0
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	1f 91       	pop	r17
 68c:	0f 91       	pop	r16
 68e:	ff 90       	pop	r15
 690:	08 95       	ret

00000692 <ext_int_set_interrupt_callback>:

void ext_int_set_interrupt_callback(ioport_pin_t ext_int, ext_int_callback_t callback)
{
	if (ext_int == EXT_INT0_PIN) {
 692:	88 31       	cpi	r24, 0x18	; 24
 694:	91 05       	cpc	r25, r1
 696:	29 f4       	brne	.+10     	; 0x6a2 <ext_int_set_interrupt_callback+0x10>
		ext_int_int0_callback = callback;
 698:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <ext_int_int0_callback+0x1>
 69c:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <ext_int_int0_callback>
 6a0:	08 95       	ret
	} else
	if (ext_int == EXT_INT1_PIN) {
 6a2:	89 31       	cpi	r24, 0x19	; 25
 6a4:	91 05       	cpc	r25, r1
 6a6:	29 f4       	brne	.+10     	; 0x6b2 <ext_int_set_interrupt_callback+0x20>
		ext_int_int1_callback = callback;
 6a8:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <ext_int_int1_callback+0x1>
 6ac:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <ext_int_int1_callback>
 6b0:	08 95       	ret
	} else
	if (ext_int == EXT_INT2_PIN) {
 6b2:	8a 31       	cpi	r24, 0x1A	; 26
 6b4:	91 05       	cpc	r25, r1
 6b6:	29 f4       	brne	.+10     	; 0x6c2 <ext_int_set_interrupt_callback+0x30>
		ext_int_int2_callback = callback;
 6b8:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <ext_int_int2_callback+0x1>
 6bc:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <ext_int_int2_callback>
 6c0:	08 95       	ret
	} else
	if (ext_int == EXT_INT3_PIN) {
 6c2:	8b 31       	cpi	r24, 0x1B	; 27
 6c4:	91 05       	cpc	r25, r1
 6c6:	29 f4       	brne	.+10     	; 0x6d2 <ext_int_set_interrupt_callback+0x40>
		ext_int_int3_callback = callback;
 6c8:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <ext_int_int3_callback+0x1>
 6cc:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <ext_int_int3_callback>
 6d0:	08 95       	ret
	} else
	if (ext_int == EXT_INT4_PIN) {
 6d2:	84 32       	cpi	r24, 0x24	; 36
 6d4:	91 05       	cpc	r25, r1
 6d6:	29 f4       	brne	.+10     	; 0x6e2 <ext_int_set_interrupt_callback+0x50>
		ext_int_int4_callback = callback;
 6d8:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <ext_int_int4_callback+0x1>
 6dc:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <ext_int_int4_callback>
 6e0:	08 95       	ret
	} else
	if (ext_int == EXT_INT5_PIN) {
 6e2:	85 32       	cpi	r24, 0x25	; 37
 6e4:	91 05       	cpc	r25, r1
 6e6:	29 f4       	brne	.+10     	; 0x6f2 <ext_int_set_interrupt_callback+0x60>
		ext_int_int5_callback = callback;
 6e8:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <ext_int_int5_callback+0x1>
 6ec:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <ext_int_int5_callback>
 6f0:	08 95       	ret
	} else
	if (ext_int == EXT_INT6_PIN) {
 6f2:	86 32       	cpi	r24, 0x26	; 38
 6f4:	91 05       	cpc	r25, r1
 6f6:	29 f4       	brne	.+10     	; 0x702 <ext_int_set_interrupt_callback+0x70>
		ext_int_int6_callback = callback;
 6f8:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <ext_int_int6_callback+0x1>
 6fc:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <ext_int_int6_callback>
 700:	08 95       	ret
	} else
	if (ext_int == EXT_INT7_PIN) {
 702:	87 32       	cpi	r24, 0x27	; 39
 704:	91 05       	cpc	r25, r1
 706:	29 f4       	brne	.+10     	; 0x712 <ext_int_set_interrupt_callback+0x80>
		ext_int_int7_callback = callback;
 708:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <ext_int_int7_callback+0x1>
 70c:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <ext_int_int7_callback>
 710:	08 95       	ret
	} else
	if (ext_int >= PC_INT0_PIN && ext_int <=PC_INT7_PIN) {
 712:	9c 01       	movw	r18, r24
 714:	28 50       	subi	r18, 0x08	; 8
 716:	31 09       	sbc	r19, r1
 718:	28 30       	cpi	r18, 0x08	; 8
 71a:	31 05       	cpc	r19, r1
 71c:	28 f4       	brcc	.+10     	; 0x728 <ext_int_set_interrupt_callback+0x96>
		ext_int_pcint0_callback = callback;
 71e:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <ext_int_pcint0_callback+0x1>
 722:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <ext_int_pcint0_callback>
 726:	08 95       	ret
	} else
	if (ext_int == PC_INT8_PIN) {
 728:	80 97       	sbiw	r24, 0x20	; 32
 72a:	21 f4       	brne	.+8      	; 0x734 <ext_int_set_interrupt_callback+0xa2>
		ext_int_pcint1_callback = callback;
 72c:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <_edata+0x1>
 730:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <_edata>
 734:	08 95       	ret

00000736 <ext_int_callback>:
 *  Switch ON LED on the board for some time and then switches OFF
 *  when the interrupt is triggered
 *  \param none
 */
static void ext_int_callback(void)
{
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	1f 92       	push	r1
 73c:	1f 92       	push	r1
 73e:	cd b7       	in	r28, 0x3d	; 61
 740:	de b7       	in	r29, 0x3e	; 62
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 742:	2c 98       	cbi	0x05, 4	; 5
 *  \param none
 */

static inline void ext_int_delay(void)
{
	for (volatile unsigned int i = 0; i < 10000; i++) {
 744:	1a 82       	std	Y+2, r1	; 0x02
 746:	19 82       	std	Y+1, r1	; 0x01
 748:	89 81       	ldd	r24, Y+1	; 0x01
 74a:	9a 81       	ldd	r25, Y+2	; 0x02
 74c:	80 31       	cpi	r24, 0x10	; 16
 74e:	97 42       	sbci	r25, 0x27	; 39
 750:	50 f4       	brcc	.+20     	; 0x766 <ext_int_callback+0x30>
 752:	89 81       	ldd	r24, Y+1	; 0x01
 754:	9a 81       	ldd	r25, Y+2	; 0x02
 756:	01 96       	adiw	r24, 0x01	; 1
 758:	9a 83       	std	Y+2, r25	; 0x02
 75a:	89 83       	std	Y+1, r24	; 0x01
 75c:	89 81       	ldd	r24, Y+1	; 0x01
 75e:	9a 81       	ldd	r25, Y+2	; 0x02
 760:	80 31       	cpi	r24, 0x10	; 16
 762:	97 42       	sbci	r25, 0x27	; 39
 764:	b0 f3       	brcs	.-20     	; 0x752 <ext_int_callback+0x1c>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 766:	2c 9a       	sbi	0x05, 4	; 5

	ext_int_delay();

	/* Switch OFF LED1 */
	LED_Off(LED_PIN);
}
 768:	0f 90       	pop	r0
 76a:	0f 90       	pop	r0
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	08 95       	ret

00000772 <main>:
{
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	sysclk_init();
 772:	f3 dc       	rcall	.-1562   	; 0x15a <sysclk_init>
	board_init();
 774:	11 dd       	rcall	.-1502   	; 0x198 <board_init>
 776:	f8 94       	cli

	/* Disable Global interrupt */
	cpu_irq_disable();
 778:	6b e9       	ldi	r22, 0x9B	; 155

    /* Set Interrupt CallBack Function **/
    ext_int_set_interrupt_callback(BUTTON_INTERRUPT_SOURCE,ext_int_callback);
 77a:	73 e0       	ldi	r23, 0x03	; 3
 77c:	84 e2       	ldi	r24, 0x24	; 36
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	88 df       	rcall	.-240    	; 0x692 <ext_int_set_interrupt_callback>
 782:	63 e0       	ldi	r22, 0x03	; 3
	
	/* Enable the Ext Int */
	ext_int_init(BUTTON_INTERRUPT_SOURCE, BUTTON_INTERRUPT_MODE);
 784:	84 e2       	ldi	r24, 0x24	; 36
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	fc de       	rcall	.-520    	; 0x582 <ext_int_init>
 78a:	78 94       	sei

	/* Enable Global interrupt */
	cpu_irq_enable();
 78c:	ff cf       	rjmp	.-2      	; 0x78c <main+0x1a>

0000078e <_exit>:
 78e:	f8 94       	cli

00000790 <__stop_program>:
 790:	ff cf       	rjmp	.-2      	; 0x790 <__stop_program>
