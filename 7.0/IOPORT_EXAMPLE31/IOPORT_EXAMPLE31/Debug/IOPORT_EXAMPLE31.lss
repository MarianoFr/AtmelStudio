
IOPORT_EXAMPLE31.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000060  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d95  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017a9  00000000  00000000  000020a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011e7  00000000  00000000  0000384e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00004a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000174a8  00000000  00000000  00004af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000294  00000000  00000000  0001bf9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0001c230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00006584  00000000  00000000  0001c270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	a1 c0       	rjmp	.+322    	; 0x148 <__bad_interrupt>
   6:	00 00       	nop
   8:	9f c0       	rjmp	.+318    	; 0x148 <__bad_interrupt>
   a:	00 00       	nop
   c:	9d c0       	rjmp	.+314    	; 0x148 <__bad_interrupt>
   e:	00 00       	nop
  10:	9b c0       	rjmp	.+310    	; 0x148 <__bad_interrupt>
  12:	00 00       	nop
  14:	99 c0       	rjmp	.+306    	; 0x148 <__bad_interrupt>
  16:	00 00       	nop
  18:	97 c0       	rjmp	.+302    	; 0x148 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
  1e:	00 00       	nop
  20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
  22:	00 00       	nop
  24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
  26:	00 00       	nop
  28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8d c0       	rjmp	.+282    	; 0x148 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8b c0       	rjmp	.+278    	; 0x148 <__bad_interrupt>
  32:	00 00       	nop
  34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
  36:	00 00       	nop
  38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
  3e:	00 00       	nop
  40:	83 c0       	rjmp	.+262    	; 0x148 <__bad_interrupt>
  42:	00 00       	nop
  44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
  46:	00 00       	nop
  48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
  52:	00 00       	nop
  54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
  56:	00 00       	nop
  58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	75 c0       	rjmp	.+234    	; 0x148 <__bad_interrupt>
  5e:	00 00       	nop
  60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
  62:	00 00       	nop
  64:	71 c0       	rjmp	.+226    	; 0x148 <__bad_interrupt>
  66:	00 00       	nop
  68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
  72:	00 00       	nop
  74:	69 c0       	rjmp	.+210    	; 0x148 <__bad_interrupt>
  76:	00 00       	nop
  78:	67 c0       	rjmp	.+206    	; 0x148 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	65 c0       	rjmp	.+202    	; 0x148 <__bad_interrupt>
  7e:	00 00       	nop
  80:	63 c0       	rjmp	.+198    	; 0x148 <__bad_interrupt>
  82:	00 00       	nop
  84:	61 c0       	rjmp	.+194    	; 0x148 <__bad_interrupt>
  86:	00 00       	nop
  88:	5f c0       	rjmp	.+190    	; 0x148 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5d c0       	rjmp	.+186    	; 0x148 <__bad_interrupt>
  8e:	00 00       	nop
  90:	5b c0       	rjmp	.+182    	; 0x148 <__bad_interrupt>
  92:	00 00       	nop
  94:	59 c0       	rjmp	.+178    	; 0x148 <__bad_interrupt>
  96:	00 00       	nop
  98:	57 c0       	rjmp	.+174    	; 0x148 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	55 c0       	rjmp	.+170    	; 0x148 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	53 c0       	rjmp	.+166    	; 0x148 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	51 c0       	rjmp	.+162    	; 0x148 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4f c0       	rjmp	.+158    	; 0x148 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4d c0       	rjmp	.+154    	; 0x148 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	4b c0       	rjmp	.+150    	; 0x148 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	49 c0       	rjmp	.+146    	; 0x148 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	47 c0       	rjmp	.+142    	; 0x148 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	45 c0       	rjmp	.+138    	; 0x148 <__bad_interrupt>
  be:	00 00       	nop
  c0:	43 c0       	rjmp	.+134    	; 0x148 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	41 c0       	rjmp	.+130    	; 0x148 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3f c0       	rjmp	.+126    	; 0x148 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3d c0       	rjmp	.+122    	; 0x148 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	3b c0       	rjmp	.+118    	; 0x148 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	39 c0       	rjmp	.+114    	; 0x148 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	37 c0       	rjmp	.+110    	; 0x148 <__bad_interrupt>
  da:	00 00       	nop
  dc:	35 c0       	rjmp	.+106    	; 0x148 <__bad_interrupt>
  de:	00 00       	nop
  e0:	33 c0       	rjmp	.+102    	; 0x148 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	31 c0       	rjmp	.+98     	; 0x148 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	2f c0       	rjmp	.+94     	; 0x148 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	2d c0       	rjmp	.+90     	; 0x148 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	2b c0       	rjmp	.+86     	; 0x148 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	29 c0       	rjmp	.+82     	; 0x148 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	27 c0       	rjmp	.+78     	; 0x148 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	25 c0       	rjmp	.+74     	; 0x148 <__bad_interrupt>
  fe:	00 00       	nop
 100:	23 c0       	rjmp	.+70     	; 0x148 <__bad_interrupt>
 102:	00 00       	nop
 104:	21 c0       	rjmp	.+66     	; 0x148 <__bad_interrupt>
 106:	00 00       	nop
 108:	1f c0       	rjmp	.+62     	; 0x148 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	1d c0       	rjmp	.+58     	; 0x148 <__bad_interrupt>
 10e:	00 00       	nop
 110:	1b c0       	rjmp	.+54     	; 0x148 <__bad_interrupt>
 112:	00 00       	nop
 114:	19 c0       	rjmp	.+50     	; 0x148 <__bad_interrupt>
 116:	00 00       	nop
 118:	17 c0       	rjmp	.+46     	; 0x148 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	15 c0       	rjmp	.+42     	; 0x148 <__bad_interrupt>
 11e:	00 00       	nop
 120:	13 c0       	rjmp	.+38     	; 0x148 <__bad_interrupt>
 122:	00 00       	nop
 124:	11 c0       	rjmp	.+34     	; 0x148 <__bad_interrupt>
 126:	00 00       	nop
 128:	0f c0       	rjmp	.+30     	; 0x148 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	0d c0       	rjmp	.+26     	; 0x148 <__bad_interrupt>
 12e:	00 00       	nop
 130:	0b c0       	rjmp	.+22     	; 0x148 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60
 144:	26 d0       	rcall	.+76     	; 0x192 <main>
 146:	30 c0       	rjmp	.+96     	; 0x1a8 <_exit>

00000148 <__bad_interrupt>:
 148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	1f 92       	push	r1
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
 15a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
 15e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	69 f0       	breq	.+26     	; 0x180 <sysclk_init+0x36>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 166:	8f b7       	in	r24, 0x3f	; 63
 168:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 16a:	f8 94       	cli
	return flags;
 16c:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
 16e:	5f 93       	push	r21
 170:	50 e8       	ldi	r21, 0x80	; 128
 172:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
 176:	53 e0       	ldi	r21, 0x03	; 3
 178:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
 17c:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 17e:	8f bf       	out	0x3f, r24	; 63
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
 180:	0f 90       	pop	r0
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 188:	2c 9a       	sbi	0x05, 4	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 18a:	24 9a       	sbi	0x04, 4	; 4
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 18c:	6c 98       	cbi	0x0d, 4	; 13
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 18e:	74 9a       	sbi	0x0e, 4	; 14
 190:	08 95       	ret

00000192 <main>:
#include <asf.h>
#include "conf_example.h"

int main(void)
{
	sysclk_init();
 192:	db df       	rcall	.-74     	; 0x14a <sysclk_init>
	board_init();
 194:	f9 df       	rcall	.-14     	; 0x188 <board_init>
 196:	24 9a       	sbi	0x04, 4	; 4
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 198:	6c 98       	cbi	0x0d, 4	; 13
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 19a:	74 9a       	sbi	0x0e, 4	; 14
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
 19c:	64 9b       	sbis	0x0c, 4	; 12
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <main+0x12>
 1a0:	2c 9a       	sbi	0x05, 4	; 5
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 1a2:	fc cf       	rjmp	.-8      	; 0x19c <main+0xa>
 1a4:	2c 98       	cbi	0x05, 4	; 5
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 1a6:	fa cf       	rjmp	.-12     	; 0x19c <main+0xa>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
