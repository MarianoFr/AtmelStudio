
TryingLWMesh.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000031e8  0000327c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cf2  00800204  00800204  00003280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000032b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006e0  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000aafc  00000000  00000000  000039d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000042a8  00000000  00000000  0000e4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000964a  00000000  00000000  00012774  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001730  00000000  00000000  0001bdc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001ccb8  00000000  00000000  0001d4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005dbd  00000000  00000000  0003a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000718  00000000  00000000  0003ff65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000091dd  00000000  00000000  0004067d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b8 c0       	rjmp	.+368    	; 0x176 <__bad_interrupt>
       6:	00 00       	nop
       8:	b6 c0       	rjmp	.+364    	; 0x176 <__bad_interrupt>
       a:	00 00       	nop
       c:	b4 c0       	rjmp	.+360    	; 0x176 <__bad_interrupt>
       e:	00 00       	nop
      10:	b2 c0       	rjmp	.+356    	; 0x176 <__bad_interrupt>
      12:	00 00       	nop
      14:	b0 c0       	rjmp	.+352    	; 0x176 <__bad_interrupt>
      16:	00 00       	nop
      18:	ae c0       	rjmp	.+348    	; 0x176 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ac c0       	rjmp	.+344    	; 0x176 <__bad_interrupt>
      1e:	00 00       	nop
      20:	aa c0       	rjmp	.+340    	; 0x176 <__bad_interrupt>
      22:	00 00       	nop
      24:	a8 c0       	rjmp	.+336    	; 0x176 <__bad_interrupt>
      26:	00 00       	nop
      28:	a6 c0       	rjmp	.+332    	; 0x176 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a4 c0       	rjmp	.+328    	; 0x176 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a2 c0       	rjmp	.+324    	; 0x176 <__bad_interrupt>
      32:	00 00       	nop
      34:	a0 c0       	rjmp	.+320    	; 0x176 <__bad_interrupt>
      36:	00 00       	nop
      38:	9e c0       	rjmp	.+316    	; 0x176 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9c c0       	rjmp	.+312    	; 0x176 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9a c0       	rjmp	.+308    	; 0x176 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c2       	rjmp	.+1408   	; 0x5c6 <__vector_17>
      46:	00 00       	nop
      48:	eb c2       	rjmp	.+1494   	; 0x620 <__vector_18>
      4a:	00 00       	nop
      4c:	16 c3       	rjmp	.+1580   	; 0x67a <__vector_19>
      4e:	00 00       	nop
      50:	8d c2       	rjmp	.+1306   	; 0x56c <__vector_20>
      52:	00 00       	nop
      54:	90 c0       	rjmp	.+288    	; 0x176 <__bad_interrupt>
      56:	00 00       	nop
      58:	8e c0       	rjmp	.+284    	; 0x176 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8c c0       	rjmp	.+280    	; 0x176 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8a c0       	rjmp	.+276    	; 0x176 <__bad_interrupt>
      62:	00 00       	nop
      64:	88 c0       	rjmp	.+272    	; 0x176 <__bad_interrupt>
      66:	00 00       	nop
      68:	86 c0       	rjmp	.+268    	; 0x176 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	84 c0       	rjmp	.+264    	; 0x176 <__bad_interrupt>
      6e:	00 00       	nop
      70:	82 c0       	rjmp	.+260    	; 0x176 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__vector_29>
      78:	7e c0       	rjmp	.+252    	; 0x176 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7c c0       	rjmp	.+248    	; 0x176 <__bad_interrupt>
      7e:	00 00       	nop
      80:	56 c3       	rjmp	.+1708   	; 0x72e <__vector_32>
      82:	00 00       	nop
      84:	81 c3       	rjmp	.+1794   	; 0x788 <__vector_33>
      86:	00 00       	nop
      88:	ac c3       	rjmp	.+1880   	; 0x7e2 <__vector_34>
      8a:	00 00       	nop
      8c:	23 c3       	rjmp	.+1606   	; 0x6d4 <__vector_35>
      8e:	00 00       	nop
      90:	25 c2       	rjmp	.+1098   	; 0x4dc <__vector_36>
      92:	00 00       	nop
      94:	70 c0       	rjmp	.+224    	; 0x176 <__bad_interrupt>
      96:	00 00       	nop
      98:	6e c0       	rjmp	.+220    	; 0x176 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6c c0       	rjmp	.+216    	; 0x176 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6a c0       	rjmp	.+212    	; 0x176 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	68 c0       	rjmp	.+208    	; 0x176 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f6 c3       	rjmp	.+2028   	; 0x896 <__vector_42>
      aa:	00 00       	nop
      ac:	21 c4       	rjmp	.+2114   	; 0x8f0 <__vector_43>
      ae:	00 00       	nop
      b0:	4c c4       	rjmp	.+2200   	; 0x94a <__vector_44>
      b2:	00 00       	nop
      b4:	c3 c3       	rjmp	.+1926   	; 0x83c <__vector_45>
      b6:	00 00       	nop
      b8:	5e c0       	rjmp	.+188    	; 0x176 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a0 c4       	rjmp	.+2368   	; 0x9fe <__vector_47>
      be:	00 00       	nop
      c0:	cb c4       	rjmp	.+2454   	; 0xa58 <__vector_48>
      c2:	00 00       	nop
      c4:	f6 c4       	rjmp	.+2540   	; 0xab2 <__vector_49>
      c6:	00 00       	nop
      c8:	6d c4       	rjmp	.+2266   	; 0x9a4 <__vector_50>
      ca:	00 00       	nop
      cc:	54 c0       	rjmp	.+168    	; 0x176 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	52 c0       	rjmp	.+164    	; 0x176 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	50 c0       	rjmp	.+160    	; 0x176 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4e c0       	rjmp	.+156    	; 0x176 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4c c0       	rjmp	.+152    	; 0x176 <__bad_interrupt>
      de:	00 00       	nop
      e0:	4a c0       	rjmp	.+148    	; 0x176 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	48 c0       	rjmp	.+144    	; 0x176 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	46 c0       	rjmp	.+140    	; 0x176 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	44 c0       	rjmp	.+136    	; 0x176 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	42 c0       	rjmp	.+132    	; 0x176 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	40 c0       	rjmp	.+128    	; 0x176 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3e c0       	rjmp	.+124    	; 0x176 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3c c0       	rjmp	.+120    	; 0x176 <__bad_interrupt>
      fe:	00 00       	nop
     100:	3a c0       	rjmp	.+116    	; 0x176 <__bad_interrupt>
     102:	00 00       	nop
     104:	38 c0       	rjmp	.+112    	; 0x176 <__bad_interrupt>
     106:	00 00       	nop
     108:	36 c0       	rjmp	.+108    	; 0x176 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	34 c0       	rjmp	.+104    	; 0x176 <__bad_interrupt>
     10e:	00 00       	nop
     110:	32 c0       	rjmp	.+100    	; 0x176 <__bad_interrupt>
     112:	00 00       	nop
     114:	30 c0       	rjmp	.+96     	; 0x176 <__bad_interrupt>
     116:	00 00       	nop
     118:	2e c0       	rjmp	.+92     	; 0x176 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2c c0       	rjmp	.+88     	; 0x176 <__bad_interrupt>
     11e:	00 00       	nop
     120:	2a c0       	rjmp	.+84     	; 0x176 <__bad_interrupt>
     122:	00 00       	nop
     124:	28 c0       	rjmp	.+80     	; 0x176 <__bad_interrupt>
     126:	00 00       	nop
     128:	26 c0       	rjmp	.+76     	; 0x176 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	24 c0       	rjmp	.+72     	; 0x176 <__bad_interrupt>
     12e:	00 00       	nop
     130:	22 c0       	rjmp	.+68     	; 0x176 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e8 ee       	ldi	r30, 0xE8	; 232
     14c:	f1 e3       	ldi	r31, 0x31	; 49
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a4 30       	cpi	r26, 0x04	; 4
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2e e0       	ldi	r18, 0x0E	; 14
     160:	a4 e0       	ldi	r26, 0x04	; 4
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a6 3f       	cpi	r26, 0xF6	; 246
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <main>
     172:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <_exit>

00000176 <__bad_interrupt>:
     176:	44 cf       	rjmp	.-376    	; 0x0 <__vectors>

00000178 <common_tc_read_count>:
     178:	e1 d5       	rcall	.+3010   	; 0xd3c <tmr_read_count>
     17a:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <timer_mul_var>
     17e:	22 23       	and	r18, r18
     180:	d9 f0       	breq	.+54     	; 0x1b8 <common_tc_read_count+0x40>
     182:	40 91 f5 0e 	lds	r20, 0x0EF5	; 0x800ef5 <timer_multiplier>
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <timer_mul_var>
     18c:	64 2f       	mov	r22, r20
     18e:	73 2f       	mov	r23, r19
     190:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodhi4>
     194:	fb 01       	movw	r30, r22
     196:	8f ef       	ldi	r24, 0xFF	; 255
     198:	9f ef       	ldi	r25, 0xFF	; 255
     19a:	64 2f       	mov	r22, r20
     19c:	73 2f       	mov	r23, r19
     19e:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodhi4>
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	62 9f       	mul	r22, r18
     1a6:	c0 01       	movw	r24, r0
     1a8:	63 9f       	mul	r22, r19
     1aa:	90 0d       	add	r25, r0
     1ac:	72 9f       	mul	r23, r18
     1ae:	90 0d       	add	r25, r0
     1b0:	11 24       	eor	r1, r1
     1b2:	8e 0f       	add	r24, r30
     1b4:	9f 1f       	adc	r25, r31
     1b6:	08 95       	ret
     1b8:	60 91 f5 0e 	lds	r22, 0x0EF5	; 0x800ef5 <timer_multiplier>
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodhi4>
     1c2:	cb 01       	movw	r24, r22
     1c4:	08 95       	ret

000001c6 <common_tc_compare_stop>:
     1c6:	bf d5       	rcall	.+2942   	; 0xd46 <tmr_disable_cc_interrupt>
     1c8:	e2 d5       	rcall	.+3012   	; 0xd8e <save_cpu_interrupt>
     1ca:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
     1ce:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <__data_end+0x1>
     1d2:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end+0x2>
     1d6:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__data_end+0x3>
     1da:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <compare_value+0x1>
     1de:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <compare_value>
     1e2:	e2 c5       	rjmp	.+3012   	; 0xda8 <restore_cpu_interrupt>

000001e4 <common_tc_overflow_stop>:
     1e4:	be d5       	rcall	.+2940   	; 0xd62 <tmr_disable_ovf_interrupt>
     1e6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <timer_mul_var>
     1ea:	08 95       	ret

000001ec <common_tc_stop>:
     1ec:	ec df       	rcall	.-40     	; 0x1c6 <common_tc_compare_stop>
     1ee:	fa df       	rcall	.-12     	; 0x1e4 <common_tc_overflow_stop>
     1f0:	bf c5       	rjmp	.+2942   	; 0xd70 <tmr_stop>

000001f2 <common_tc_delay>:
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	ec 01       	movw	r28, r24
     1fc:	9f d5       	rcall	.+2878   	; 0xd3c <tmr_read_count>
     1fe:	8c 01       	movw	r16, r24
     200:	be 01       	movw	r22, r28
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	20 91 f5 0e 	lds	r18, 0x0EF5	; 0x800ef5 <timer_multiplier>
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e0       	ldi	r20, 0x00	; 0
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	0e 94 14 18 	call	0x3028	; 0x3028 <__mulsi3>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
     218:	a8 01       	movw	r20, r16
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	48 0f       	add	r20, r24
     220:	59 1f       	adc	r21, r25
     222:	6a 1f       	adc	r22, r26
     224:	7b 1f       	adc	r23, r27
     226:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <__data_end>
     22a:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <__data_end+0x1>
     22e:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <__data_end+0x2>
     232:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <__data_end+0x3>
     236:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__data_end>
     23a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__data_end+0x1>
     23e:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__data_end+0x2>
     242:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__data_end+0x3>
     246:	ab 01       	movw	r20, r22
     248:	66 27       	eor	r22, r22
     24a:	77 27       	eor	r23, r23
     24c:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <__data_end>
     250:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <__data_end+0x1>
     254:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <__data_end+0x2>
     258:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <__data_end+0x3>
     25c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__data_end>
     260:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__data_end+0x1>
     264:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__data_end+0x2>
     268:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__data_end+0x3>
     26c:	41 15       	cp	r20, r1
     26e:	51 05       	cpc	r21, r1
     270:	61 05       	cpc	r22, r1
     272:	71 05       	cpc	r23, r1
     274:	89 f0       	breq	.+34     	; 0x298 <common_tc_delay+0xa6>
     276:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__data_end>
     27a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__data_end+0x1>
     27e:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__data_end+0x2>
     282:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__data_end+0x3>
     286:	01 96       	adiw	r24, 0x01	; 1
     288:	08 0f       	add	r16, r24
     28a:	19 1f       	adc	r17, r25
     28c:	10 93 0a 02 	sts	0x020A, r17	; 0x80020a <compare_value+0x1>
     290:	00 93 09 02 	sts	0x0209, r16	; 0x800209 <compare_value>
     294:	58 d5       	rcall	.+2736   	; 0xd46 <tmr_disable_cc_interrupt>
     296:	07 c0       	rjmp	.+14     	; 0x2a6 <common_tc_delay+0xb4>
     298:	08 0f       	add	r16, r24
     29a:	19 1f       	adc	r17, r25
     29c:	10 93 0a 02 	sts	0x020A, r17	; 0x80020a <compare_value+0x1>
     2a0:	00 93 09 02 	sts	0x0209, r16	; 0x800209 <compare_value>
     2a4:	57 d5       	rcall	.+2734   	; 0xd54 <tmr_enable_cc_interrupt>
     2a6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <compare_value>
     2aa:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <compare_value+0x1>
     2ae:	84 36       	cpi	r24, 0x64	; 100
     2b0:	91 05       	cpc	r25, r1
     2b2:	30 f4       	brcc	.+12     	; 0x2c0 <common_tc_delay+0xce>
     2b4:	8c 59       	subi	r24, 0x9C	; 156
     2b6:	9f 4f       	sbci	r25, 0xFF	; 255
     2b8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <compare_value+0x1>
     2bc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <compare_value>
     2c0:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <compare_value>
     2c4:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <compare_value+0x1>
     2c8:	57 d5       	rcall	.+2734   	; 0xd78 <tmr_write_cmpreg>
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	08 95       	ret

000002d4 <common_tc_init>:
     2d4:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <timer_mul_var>
     2d8:	69 d5       	rcall	.+2770   	; 0xdac <tmr_init>
     2da:	80 93 f5 0e 	sts	0x0EF5, r24	; 0x800ef5 <timer_multiplier>
     2de:	08 95       	ret

000002e0 <tmr_ovf_callback>:
     2e0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     2e4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
     2e8:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <__data_end+0x2>
     2ec:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <__data_end+0x3>
     2f0:	00 97       	sbiw	r24, 0x00	; 0
     2f2:	a1 05       	cpc	r26, r1
     2f4:	b1 05       	cpc	r27, r1
     2f6:	c1 f0       	breq	.+48     	; 0x328 <tmr_ovf_callback+0x48>
     2f8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     2fc:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
     300:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <__data_end+0x2>
     304:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <__data_end+0x3>
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	a1 09       	sbc	r26, r1
     30c:	b1 09       	sbc	r27, r1
     30e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
     312:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__data_end+0x1>
     316:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <__data_end+0x2>
     31a:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <__data_end+0x3>
     31e:	00 97       	sbiw	r24, 0x00	; 0
     320:	a1 05       	cpc	r26, r1
     322:	b1 05       	cpc	r27, r1
     324:	09 f4       	brne	.+2      	; 0x328 <tmr_ovf_callback+0x48>
     326:	16 d5       	rcall	.+2604   	; 0xd54 <tmr_enable_cc_interrupt>
     328:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <timer_mul_var>
     32c:	8f 5f       	subi	r24, 0xFF	; 255
     32e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <timer_mul_var>
     332:	90 91 f5 0e 	lds	r25, 0x0EF5	; 0x800ef5 <timer_multiplier>
     336:	89 17       	cp	r24, r25
     338:	48 f0       	brcs	.+18     	; 0x34c <tmr_ovf_callback+0x6c>
     33a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <timer_mul_var>
     33e:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <common_tc_ovf_callback>
     342:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <common_tc_ovf_callback+0x1>
     346:	30 97       	sbiw	r30, 0x00	; 0
     348:	09 f0       	breq	.+2      	; 0x34c <tmr_ovf_callback+0x6c>
     34a:	19 95       	eicall
     34c:	08 95       	ret

0000034e <tmr_cca_callback>:
     34e:	fb d4       	rcall	.+2550   	; 0xd46 <tmr_disable_cc_interrupt>
     350:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <common_tc_cca_callback>
     354:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <common_tc_cca_callback+0x1>
     358:	30 97       	sbiw	r30, 0x00	; 0
     35a:	09 f0       	breq	.+2      	; 0x35e <tmr_cca_callback+0x10>
     35c:	19 95       	eicall
     35e:	08 95       	ret

00000360 <set_common_tc_overflow_callback>:
     360:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <common_tc_ovf_callback+0x1>
     364:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <common_tc_ovf_callback>
     368:	08 95       	ret

0000036a <set_common_tc_expiry_callback>:
     36a:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <common_tc_cca_callback+0x1>
     36e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <common_tc_cca_callback>
     372:	08 95       	ret

00000374 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	1f 92       	push	r1
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     37e:	8f ef       	ldi	r24, 0xFF	; 255
     380:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     384:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
     388:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
     38c:	83 30       	cpi	r24, 0x03	; 3
     38e:	69 f0       	breq	.+26     	; 0x3aa <sysclk_init+0x36>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     390:	8f b7       	in	r24, 0x3f	; 63
     392:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     394:	f8 94       	cli
	return flags;
     396:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     398:	5f 93       	push	r21
     39a:	50 e8       	ldi	r21, 0x80	; 128
     39c:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     3a0:	53 e0       	ldi	r21, 0x03	; 3
     3a2:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     3a6:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3a8:	8f bf       	out	0x3f, r24	; 63
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     3aa:	0f 90       	pop	r0
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	1f 92       	push	r1
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3bc:	9f b7       	in	r25, 0x3f	; 63
     3be:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     3c0:	f8 94       	cli
	return flags;
     3c2:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     3c4:	82 30       	cpi	r24, 0x02	; 2
     3c6:	40 f4       	brcc	.+16     	; 0x3d8 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     3c8:	e8 2f       	mov	r30, r24
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	ec 59       	subi	r30, 0x9C	; 156
     3ce:	ff 4f       	sbci	r31, 0xFF	; 255
     3d0:	60 95       	com	r22
     3d2:	80 81       	ld	r24, Z
     3d4:	68 23       	and	r22, r24
     3d6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3d8:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     3da:	0f 90       	pop	r0
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	1f 92       	push	r1
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3ec:	9f b7       	in	r25, 0x3f	; 63
     3ee:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     3f0:	f8 94       	cli
	return flags;
     3f2:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     3f4:	82 30       	cpi	r24, 0x02	; 2
     3f6:	38 f4       	brcc	.+14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		*(reg + port) |= id;
     3f8:	e8 2f       	mov	r30, r24
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	ec 59       	subi	r30, 0x9C	; 156
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	80 81       	ld	r24, Z
     402:	68 2b       	or	r22, r24
     404:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     406:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     408:	0f 90       	pop	r0
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	7c 01       	movw	r14, r24
     41e:	8b 01       	movw	r16, r22
     420:	ea 01       	movw	r28, r20
	while (len) {
     422:	20 97       	sbiw	r28, 0x00	; 0
     424:	39 f0       	breq	.+14     	; 0x434 <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     426:	f8 01       	movw	r30, r16
     428:	61 91       	ld	r22, Z+
     42a:	8f 01       	movw	r16, r30
     42c:	c7 01       	movw	r24, r14
     42e:	24 d0       	rcall	.+72     	; 0x478 <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
     430:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
     432:	c9 f7       	brne	.-14     	; 0x426 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	08 95       	ret

00000444 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	7c 01       	movw	r14, r24
     452:	8b 01       	movw	r16, r22
     454:	ea 01       	movw	r28, r20
	while (len) {
     456:	20 97       	sbiw	r28, 0x00	; 0
     458:	39 f0       	breq	.+14     	; 0x468 <usart_serial_read_packet+0x24>
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
     45a:	c7 01       	movw	r24, r14
     45c:	14 d0       	rcall	.+40     	; 0x486 <usart_getchar>
     45e:	f8 01       	movw	r30, r16
     460:	81 93       	st	Z+, r24
     462:	8f 01       	movw	r16, r30
		usart_serial_getchar(usart, data);
		len--;
     464:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
     466:	c9 f7       	brne	.-14     	; 0x45a <usart_serial_read_packet+0x16>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	ff 90       	pop	r15
     474:	ef 90       	pop	r14
     476:	08 95       	ret

00000478 <usart_putchar>:
 * \param c The data to send.
 *
 * \return STATUS_OK
 */
status_code_t usart_putchar(USART_t *usart, uint8_t c)
{
     478:	fc 01       	movw	r30, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t *usart)
{
	return (usart)->UCSRnA & USART_DRE_bm;
     47a:	90 81       	ld	r25, Z
	while (usart_data_register_is_empty(usart) == false) {
     47c:	95 ff       	sbrs	r25, 5
     47e:	fd cf       	rjmp	.-6      	; 0x47a <usart_putchar+0x2>
	}

	usart->UDR = c;
     480:	66 83       	std	Z+6, r22	; 0x06
	return STATUS_OK;
}
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	08 95       	ret

00000486 <usart_getchar>:
 * \param usart The USART module.
 *
 * \return The received data.
 */
uint8_t usart_getchar(USART_t *usart)
{
     486:	fc 01       	movw	r30, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t *usart)
{
	return (usart)->UCSRnA & USART_RXC_bm;
     488:	90 81       	ld	r25, Z
	while (usart_rx_is_complete(usart) == false) {
     48a:	99 23       	and	r25, r25
     48c:	ec f7       	brge	.-6      	; 0x488 <usart_getchar+0x2>
	}

	return ((uint8_t)usart->UDR);
     48e:	86 81       	ldd	r24, Z+6	; 0x06
}
     490:	08 95       	ret

00000492 <sio2host_tx>:
	if (back >= 1) {
		return c;
	} else {
		return (-1);
	}
}
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	8c 01       	movw	r16, r24
     49e:	f6 2e       	mov	r15, r22
     4a0:	c6 2f       	mov	r28, r22
     4a2:	d0 e0       	ldi	r29, 0x00	; 0
     4a4:	ae 01       	movw	r20, r28
     4a6:	b8 01       	movw	r22, r16
     4a8:	88 ec       	ldi	r24, 0xC8	; 200
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	b1 df       	rcall	.-158    	; 0x410 <usart_serial_write_packet>
     4ae:	81 11       	cpse	r24, r1
     4b0:	f9 cf       	rjmp	.-14     	; 0x4a4 <sio2host_tx+0x12>
     4b2:	8f 2d       	mov	r24, r15
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	1f 91       	pop	r17
     4ba:	0f 91       	pop	r16
     4bc:	ff 90       	pop	r15
     4be:	08 95       	ret

000004c0 <sio2host_putchar>:
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	1f 92       	push	r1
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
     4ca:	89 83       	std	Y+1, r24	; 0x01
     4cc:	61 e0       	ldi	r22, 0x01	; 1
     4ce:	ce 01       	movw	r24, r28
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	df df       	rcall	.-66     	; 0x492 <sio2host_tx>
     4d4:	0f 90       	pop	r0
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <__vector_36>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
     4dc:	1f 92       	push	r1
     4de:	0f 92       	push	r0
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	0f 92       	push	r0
     4e4:	11 24       	eor	r1, r1
     4e6:	0b b6       	in	r0, 0x3b	; 59
     4e8:	0f 92       	push	r0
     4ea:	2f 93       	push	r18
     4ec:	3f 93       	push	r19
     4ee:	4f 93       	push	r20
     4f0:	5f 93       	push	r21
     4f2:	6f 93       	push	r22
     4f4:	7f 93       	push	r23
     4f6:	8f 93       	push	r24
     4f8:	9f 93       	push	r25
     4fa:	af 93       	push	r26
     4fc:	bf 93       	push	r27
     4fe:	ef 93       	push	r30
     500:	ff 93       	push	r31
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	1f 92       	push	r1
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
     50c:	41 e0       	ldi	r20, 0x01	; 1
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	be 01       	movw	r22, r28
     512:	6f 5f       	subi	r22, 0xFF	; 255
     514:	7f 4f       	sbci	r23, 0xFF	; 255
     516:	88 ec       	ldi	r24, 0xC8	; 200
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	94 df       	rcall	.-216    	; 0x444 <usart_serial_read_packet>
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     51c:	f8 94       	cli

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
     51e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <serial_rx_buf_tail>
     522:	e8 2f       	mov	r30, r24
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	e0 5f       	subi	r30, 0xF0	; 240
     528:	fd 4f       	sbci	r31, 0xFD	; 253
     52a:	99 81       	ldd	r25, Y+1	; 0x01
     52c:	90 83       	st	Z, r25

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
     52e:	8b 39       	cpi	r24, 0x9B	; 155
     530:	19 f4       	brne	.+6      	; 0x538 <__vector_36+0x5c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
     532:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <serial_rx_buf_tail>
     536:	03 c0       	rjmp	.+6      	; 0x53e <__vector_36+0x62>
	} else {
		serial_rx_buf_tail++;
     538:	8f 5f       	subi	r24, 0xFF	; 255
     53a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <serial_rx_buf_tail>
	}

	cpu_irq_enable();
     53e:	78 94       	sei
}
     540:	0f 90       	pop	r0
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	ff 91       	pop	r31
     548:	ef 91       	pop	r30
     54a:	bf 91       	pop	r27
     54c:	af 91       	pop	r26
     54e:	9f 91       	pop	r25
     550:	8f 91       	pop	r24
     552:	7f 91       	pop	r23
     554:	6f 91       	pop	r22
     556:	5f 91       	pop	r21
     558:	4f 91       	pop	r20
     55a:	3f 91       	pop	r19
     55c:	2f 91       	pop	r18
     55e:	0f 90       	pop	r0
     560:	0b be       	out	0x3b, r0	; 59
     562:	0f 90       	pop	r0
     564:	0f be       	out	0x3f, r0	; 63
     566:	0f 90       	pop	r0
     568:	1f 90       	pop	r1
     56a:	18 95       	reti

0000056c <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
     56c:	1f 92       	push	r1
     56e:	0f 92       	push	r0
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	0f 92       	push	r0
     574:	11 24       	eor	r1, r1
     576:	0b b6       	in	r0, 0x3b	; 59
     578:	0f 92       	push	r0
     57a:	2f 93       	push	r18
     57c:	3f 93       	push	r19
     57e:	4f 93       	push	r20
     580:	5f 93       	push	r21
     582:	6f 93       	push	r22
     584:	7f 93       	push	r23
     586:	8f 93       	push	r24
     588:	9f 93       	push	r25
     58a:	af 93       	push	r26
     58c:	bf 93       	push	r27
     58e:	ef 93       	push	r30
     590:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
     592:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <tc_tccr1_ovf_callback>
     596:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <tc_tccr1_ovf_callback+0x1>
     59a:	30 97       	sbiw	r30, 0x00	; 0
     59c:	09 f0       	breq	.+2      	; 0x5a0 <__vector_20+0x34>
		tc_tccr1_ovf_callback();
     59e:	19 95       	eicall
	}
}
     5a0:	ff 91       	pop	r31
     5a2:	ef 91       	pop	r30
     5a4:	bf 91       	pop	r27
     5a6:	af 91       	pop	r26
     5a8:	9f 91       	pop	r25
     5aa:	8f 91       	pop	r24
     5ac:	7f 91       	pop	r23
     5ae:	6f 91       	pop	r22
     5b0:	5f 91       	pop	r21
     5b2:	4f 91       	pop	r20
     5b4:	3f 91       	pop	r19
     5b6:	2f 91       	pop	r18
     5b8:	0f 90       	pop	r0
     5ba:	0b be       	out	0x3b, r0	; 59
     5bc:	0f 90       	pop	r0
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	0f 90       	pop	r0
     5c2:	1f 90       	pop	r1
     5c4:	18 95       	reti

000005c6 <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
     5c6:	1f 92       	push	r1
     5c8:	0f 92       	push	r0
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	0f 92       	push	r0
     5ce:	11 24       	eor	r1, r1
     5d0:	0b b6       	in	r0, 0x3b	; 59
     5d2:	0f 92       	push	r0
     5d4:	2f 93       	push	r18
     5d6:	3f 93       	push	r19
     5d8:	4f 93       	push	r20
     5da:	5f 93       	push	r21
     5dc:	6f 93       	push	r22
     5de:	7f 93       	push	r23
     5e0:	8f 93       	push	r24
     5e2:	9f 93       	push	r25
     5e4:	af 93       	push	r26
     5e6:	bf 93       	push	r27
     5e8:	ef 93       	push	r30
     5ea:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
     5ec:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <tc_tccr1_compa_callback>
     5f0:	f0 91 c9 02 	lds	r31, 0x02C9	; 0x8002c9 <tc_tccr1_compa_callback+0x1>
     5f4:	30 97       	sbiw	r30, 0x00	; 0
     5f6:	09 f0       	breq	.+2      	; 0x5fa <__vector_17+0x34>
		tc_tccr1_compa_callback();
     5f8:	19 95       	eicall
	}
}
     5fa:	ff 91       	pop	r31
     5fc:	ef 91       	pop	r30
     5fe:	bf 91       	pop	r27
     600:	af 91       	pop	r26
     602:	9f 91       	pop	r25
     604:	8f 91       	pop	r24
     606:	7f 91       	pop	r23
     608:	6f 91       	pop	r22
     60a:	5f 91       	pop	r21
     60c:	4f 91       	pop	r20
     60e:	3f 91       	pop	r19
     610:	2f 91       	pop	r18
     612:	0f 90       	pop	r0
     614:	0b be       	out	0x3b, r0	; 59
     616:	0f 90       	pop	r0
     618:	0f be       	out	0x3f, r0	; 63
     61a:	0f 90       	pop	r0
     61c:	1f 90       	pop	r1
     61e:	18 95       	reti

00000620 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
     620:	1f 92       	push	r1
     622:	0f 92       	push	r0
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	0f 92       	push	r0
     628:	11 24       	eor	r1, r1
     62a:	0b b6       	in	r0, 0x3b	; 59
     62c:	0f 92       	push	r0
     62e:	2f 93       	push	r18
     630:	3f 93       	push	r19
     632:	4f 93       	push	r20
     634:	5f 93       	push	r21
     636:	6f 93       	push	r22
     638:	7f 93       	push	r23
     63a:	8f 93       	push	r24
     63c:	9f 93       	push	r25
     63e:	af 93       	push	r26
     640:	bf 93       	push	r27
     642:	ef 93       	push	r30
     644:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
     646:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <tc_tccr1_compb_callback>
     64a:	f0 91 c7 02 	lds	r31, 0x02C7	; 0x8002c7 <tc_tccr1_compb_callback+0x1>
     64e:	30 97       	sbiw	r30, 0x00	; 0
     650:	09 f0       	breq	.+2      	; 0x654 <__vector_18+0x34>
		tc_tccr1_compb_callback();
     652:	19 95       	eicall
	}
}
     654:	ff 91       	pop	r31
     656:	ef 91       	pop	r30
     658:	bf 91       	pop	r27
     65a:	af 91       	pop	r26
     65c:	9f 91       	pop	r25
     65e:	8f 91       	pop	r24
     660:	7f 91       	pop	r23
     662:	6f 91       	pop	r22
     664:	5f 91       	pop	r21
     666:	4f 91       	pop	r20
     668:	3f 91       	pop	r19
     66a:	2f 91       	pop	r18
     66c:	0f 90       	pop	r0
     66e:	0b be       	out	0x3b, r0	; 59
     670:	0f 90       	pop	r0
     672:	0f be       	out	0x3f, r0	; 63
     674:	0f 90       	pop	r0
     676:	1f 90       	pop	r1
     678:	18 95       	reti

0000067a <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
     67a:	1f 92       	push	r1
     67c:	0f 92       	push	r0
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	0f 92       	push	r0
     682:	11 24       	eor	r1, r1
     684:	0b b6       	in	r0, 0x3b	; 59
     686:	0f 92       	push	r0
     688:	2f 93       	push	r18
     68a:	3f 93       	push	r19
     68c:	4f 93       	push	r20
     68e:	5f 93       	push	r21
     690:	6f 93       	push	r22
     692:	7f 93       	push	r23
     694:	8f 93       	push	r24
     696:	9f 93       	push	r25
     698:	af 93       	push	r26
     69a:	bf 93       	push	r27
     69c:	ef 93       	push	r30
     69e:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
     6a0:	e0 91 c4 02 	lds	r30, 0x02C4	; 0x8002c4 <tc_tccr1_compc_callback>
     6a4:	f0 91 c5 02 	lds	r31, 0x02C5	; 0x8002c5 <tc_tccr1_compc_callback+0x1>
     6a8:	30 97       	sbiw	r30, 0x00	; 0
     6aa:	09 f0       	breq	.+2      	; 0x6ae <__vector_19+0x34>
		tc_tccr1_compc_callback();
     6ac:	19 95       	eicall
	}
}
     6ae:	ff 91       	pop	r31
     6b0:	ef 91       	pop	r30
     6b2:	bf 91       	pop	r27
     6b4:	af 91       	pop	r26
     6b6:	9f 91       	pop	r25
     6b8:	8f 91       	pop	r24
     6ba:	7f 91       	pop	r23
     6bc:	6f 91       	pop	r22
     6be:	5f 91       	pop	r21
     6c0:	4f 91       	pop	r20
     6c2:	3f 91       	pop	r19
     6c4:	2f 91       	pop	r18
     6c6:	0f 90       	pop	r0
     6c8:	0b be       	out	0x3b, r0	; 59
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
     6d4:	1f 92       	push	r1
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	0b b6       	in	r0, 0x3b	; 59
     6e0:	0f 92       	push	r0
     6e2:	2f 93       	push	r18
     6e4:	3f 93       	push	r19
     6e6:	4f 93       	push	r20
     6e8:	5f 93       	push	r21
     6ea:	6f 93       	push	r22
     6ec:	7f 93       	push	r23
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	af 93       	push	r26
     6f4:	bf 93       	push	r27
     6f6:	ef 93       	push	r30
     6f8:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
     6fa:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <tc_tccr3_ovf_callback>
     6fe:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <tc_tccr3_ovf_callback+0x1>
     702:	30 97       	sbiw	r30, 0x00	; 0
     704:	09 f0       	breq	.+2      	; 0x708 <__vector_35+0x34>
		tc_tccr3_ovf_callback();
     706:	19 95       	eicall
	}
}
     708:	ff 91       	pop	r31
     70a:	ef 91       	pop	r30
     70c:	bf 91       	pop	r27
     70e:	af 91       	pop	r26
     710:	9f 91       	pop	r25
     712:	8f 91       	pop	r24
     714:	7f 91       	pop	r23
     716:	6f 91       	pop	r22
     718:	5f 91       	pop	r21
     71a:	4f 91       	pop	r20
     71c:	3f 91       	pop	r19
     71e:	2f 91       	pop	r18
     720:	0f 90       	pop	r0
     722:	0b be       	out	0x3b, r0	; 59
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	0b b6       	in	r0, 0x3b	; 59
     73a:	0f 92       	push	r0
     73c:	2f 93       	push	r18
     73e:	3f 93       	push	r19
     740:	4f 93       	push	r20
     742:	5f 93       	push	r21
     744:	6f 93       	push	r22
     746:	7f 93       	push	r23
     748:	8f 93       	push	r24
     74a:	9f 93       	push	r25
     74c:	af 93       	push	r26
     74e:	bf 93       	push	r27
     750:	ef 93       	push	r30
     752:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
     754:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <tc_tccr3_compa_callback>
     758:	f0 91 c1 02 	lds	r31, 0x02C1	; 0x8002c1 <tc_tccr3_compa_callback+0x1>
     75c:	30 97       	sbiw	r30, 0x00	; 0
     75e:	09 f0       	breq	.+2      	; 0x762 <__vector_32+0x34>
		tc_tccr3_compa_callback();
     760:	19 95       	eicall
	}
}
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	bf 91       	pop	r27
     768:	af 91       	pop	r26
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	7f 91       	pop	r23
     770:	6f 91       	pop	r22
     772:	5f 91       	pop	r21
     774:	4f 91       	pop	r20
     776:	3f 91       	pop	r19
     778:	2f 91       	pop	r18
     77a:	0f 90       	pop	r0
     77c:	0b be       	out	0x3b, r0	; 59
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
     788:	1f 92       	push	r1
     78a:	0f 92       	push	r0
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	0f 92       	push	r0
     790:	11 24       	eor	r1, r1
     792:	0b b6       	in	r0, 0x3b	; 59
     794:	0f 92       	push	r0
     796:	2f 93       	push	r18
     798:	3f 93       	push	r19
     79a:	4f 93       	push	r20
     79c:	5f 93       	push	r21
     79e:	6f 93       	push	r22
     7a0:	7f 93       	push	r23
     7a2:	8f 93       	push	r24
     7a4:	9f 93       	push	r25
     7a6:	af 93       	push	r26
     7a8:	bf 93       	push	r27
     7aa:	ef 93       	push	r30
     7ac:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
     7ae:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <tc_tccr3_compb_callback>
     7b2:	f0 91 bf 02 	lds	r31, 0x02BF	; 0x8002bf <tc_tccr3_compb_callback+0x1>
     7b6:	30 97       	sbiw	r30, 0x00	; 0
     7b8:	09 f0       	breq	.+2      	; 0x7bc <__vector_33+0x34>
		tc_tccr3_compb_callback();
     7ba:	19 95       	eicall
	}
}
     7bc:	ff 91       	pop	r31
     7be:	ef 91       	pop	r30
     7c0:	bf 91       	pop	r27
     7c2:	af 91       	pop	r26
     7c4:	9f 91       	pop	r25
     7c6:	8f 91       	pop	r24
     7c8:	7f 91       	pop	r23
     7ca:	6f 91       	pop	r22
     7cc:	5f 91       	pop	r21
     7ce:	4f 91       	pop	r20
     7d0:	3f 91       	pop	r19
     7d2:	2f 91       	pop	r18
     7d4:	0f 90       	pop	r0
     7d6:	0b be       	out	0x3b, r0	; 59
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
     7e2:	1f 92       	push	r1
     7e4:	0f 92       	push	r0
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	0b b6       	in	r0, 0x3b	; 59
     7ee:	0f 92       	push	r0
     7f0:	2f 93       	push	r18
     7f2:	3f 93       	push	r19
     7f4:	4f 93       	push	r20
     7f6:	5f 93       	push	r21
     7f8:	6f 93       	push	r22
     7fa:	7f 93       	push	r23
     7fc:	8f 93       	push	r24
     7fe:	9f 93       	push	r25
     800:	af 93       	push	r26
     802:	bf 93       	push	r27
     804:	ef 93       	push	r30
     806:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
     808:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <tc_tccr3_compc_callback>
     80c:	f0 91 bd 02 	lds	r31, 0x02BD	; 0x8002bd <tc_tccr3_compc_callback+0x1>
     810:	30 97       	sbiw	r30, 0x00	; 0
     812:	09 f0       	breq	.+2      	; 0x816 <__vector_34+0x34>
		tc_tccr3_compc_callback();
     814:	19 95       	eicall
	}
}
     816:	ff 91       	pop	r31
     818:	ef 91       	pop	r30
     81a:	bf 91       	pop	r27
     81c:	af 91       	pop	r26
     81e:	9f 91       	pop	r25
     820:	8f 91       	pop	r24
     822:	7f 91       	pop	r23
     824:	6f 91       	pop	r22
     826:	5f 91       	pop	r21
     828:	4f 91       	pop	r20
     82a:	3f 91       	pop	r19
     82c:	2f 91       	pop	r18
     82e:	0f 90       	pop	r0
     830:	0b be       	out	0x3b, r0	; 59
     832:	0f 90       	pop	r0
     834:	0f be       	out	0x3f, r0	; 63
     836:	0f 90       	pop	r0
     838:	1f 90       	pop	r1
     83a:	18 95       	reti

0000083c <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
     83c:	1f 92       	push	r1
     83e:	0f 92       	push	r0
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	0f 92       	push	r0
     844:	11 24       	eor	r1, r1
     846:	0b b6       	in	r0, 0x3b	; 59
     848:	0f 92       	push	r0
     84a:	2f 93       	push	r18
     84c:	3f 93       	push	r19
     84e:	4f 93       	push	r20
     850:	5f 93       	push	r21
     852:	6f 93       	push	r22
     854:	7f 93       	push	r23
     856:	8f 93       	push	r24
     858:	9f 93       	push	r25
     85a:	af 93       	push	r26
     85c:	bf 93       	push	r27
     85e:	ef 93       	push	r30
     860:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
     862:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <tc_tccr4_ovf_callback>
     866:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <tc_tccr4_ovf_callback+0x1>
     86a:	30 97       	sbiw	r30, 0x00	; 0
     86c:	09 f0       	breq	.+2      	; 0x870 <__vector_45+0x34>
		tc_tccr4_ovf_callback();
     86e:	19 95       	eicall
	}
}
     870:	ff 91       	pop	r31
     872:	ef 91       	pop	r30
     874:	bf 91       	pop	r27
     876:	af 91       	pop	r26
     878:	9f 91       	pop	r25
     87a:	8f 91       	pop	r24
     87c:	7f 91       	pop	r23
     87e:	6f 91       	pop	r22
     880:	5f 91       	pop	r21
     882:	4f 91       	pop	r20
     884:	3f 91       	pop	r19
     886:	2f 91       	pop	r18
     888:	0f 90       	pop	r0
     88a:	0b be       	out	0x3b, r0	; 59
     88c:	0f 90       	pop	r0
     88e:	0f be       	out	0x3f, r0	; 63
     890:	0f 90       	pop	r0
     892:	1f 90       	pop	r1
     894:	18 95       	reti

00000896 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
     896:	1f 92       	push	r1
     898:	0f 92       	push	r0
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	0f 92       	push	r0
     89e:	11 24       	eor	r1, r1
     8a0:	0b b6       	in	r0, 0x3b	; 59
     8a2:	0f 92       	push	r0
     8a4:	2f 93       	push	r18
     8a6:	3f 93       	push	r19
     8a8:	4f 93       	push	r20
     8aa:	5f 93       	push	r21
     8ac:	6f 93       	push	r22
     8ae:	7f 93       	push	r23
     8b0:	8f 93       	push	r24
     8b2:	9f 93       	push	r25
     8b4:	af 93       	push	r26
     8b6:	bf 93       	push	r27
     8b8:	ef 93       	push	r30
     8ba:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
     8bc:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <tc_tccr4_compa_callback>
     8c0:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <tc_tccr4_compa_callback+0x1>
     8c4:	30 97       	sbiw	r30, 0x00	; 0
     8c6:	09 f0       	breq	.+2      	; 0x8ca <__vector_42+0x34>
		tc_tccr4_compa_callback();
     8c8:	19 95       	eicall
	}
}
     8ca:	ff 91       	pop	r31
     8cc:	ef 91       	pop	r30
     8ce:	bf 91       	pop	r27
     8d0:	af 91       	pop	r26
     8d2:	9f 91       	pop	r25
     8d4:	8f 91       	pop	r24
     8d6:	7f 91       	pop	r23
     8d8:	6f 91       	pop	r22
     8da:	5f 91       	pop	r21
     8dc:	4f 91       	pop	r20
     8de:	3f 91       	pop	r19
     8e0:	2f 91       	pop	r18
     8e2:	0f 90       	pop	r0
     8e4:	0b be       	out	0x3b, r0	; 59
     8e6:	0f 90       	pop	r0
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	0f 90       	pop	r0
     8ec:	1f 90       	pop	r1
     8ee:	18 95       	reti

000008f0 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
     8f0:	1f 92       	push	r1
     8f2:	0f 92       	push	r0
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	0f 92       	push	r0
     8f8:	11 24       	eor	r1, r1
     8fa:	0b b6       	in	r0, 0x3b	; 59
     8fc:	0f 92       	push	r0
     8fe:	2f 93       	push	r18
     900:	3f 93       	push	r19
     902:	4f 93       	push	r20
     904:	5f 93       	push	r21
     906:	6f 93       	push	r22
     908:	7f 93       	push	r23
     90a:	8f 93       	push	r24
     90c:	9f 93       	push	r25
     90e:	af 93       	push	r26
     910:	bf 93       	push	r27
     912:	ef 93       	push	r30
     914:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
     916:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <tc_tccr4_compb_callback>
     91a:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <tc_tccr4_compb_callback+0x1>
     91e:	30 97       	sbiw	r30, 0x00	; 0
     920:	09 f0       	breq	.+2      	; 0x924 <__vector_43+0x34>
		tc_tccr4_compb_callback();
     922:	19 95       	eicall
	}
}
     924:	ff 91       	pop	r31
     926:	ef 91       	pop	r30
     928:	bf 91       	pop	r27
     92a:	af 91       	pop	r26
     92c:	9f 91       	pop	r25
     92e:	8f 91       	pop	r24
     930:	7f 91       	pop	r23
     932:	6f 91       	pop	r22
     934:	5f 91       	pop	r21
     936:	4f 91       	pop	r20
     938:	3f 91       	pop	r19
     93a:	2f 91       	pop	r18
     93c:	0f 90       	pop	r0
     93e:	0b be       	out	0x3b, r0	; 59
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
     94a:	1f 92       	push	r1
     94c:	0f 92       	push	r0
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	0f 92       	push	r0
     952:	11 24       	eor	r1, r1
     954:	0b b6       	in	r0, 0x3b	; 59
     956:	0f 92       	push	r0
     958:	2f 93       	push	r18
     95a:	3f 93       	push	r19
     95c:	4f 93       	push	r20
     95e:	5f 93       	push	r21
     960:	6f 93       	push	r22
     962:	7f 93       	push	r23
     964:	8f 93       	push	r24
     966:	9f 93       	push	r25
     968:	af 93       	push	r26
     96a:	bf 93       	push	r27
     96c:	ef 93       	push	r30
     96e:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
     970:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <tc_tccr4_compc_callback>
     974:	f0 91 b5 02 	lds	r31, 0x02B5	; 0x8002b5 <tc_tccr4_compc_callback+0x1>
     978:	30 97       	sbiw	r30, 0x00	; 0
     97a:	09 f0       	breq	.+2      	; 0x97e <__vector_44+0x34>
		tc_tccr4_compc_callback();
     97c:	19 95       	eicall
	}
}
     97e:	ff 91       	pop	r31
     980:	ef 91       	pop	r30
     982:	bf 91       	pop	r27
     984:	af 91       	pop	r26
     986:	9f 91       	pop	r25
     988:	8f 91       	pop	r24
     98a:	7f 91       	pop	r23
     98c:	6f 91       	pop	r22
     98e:	5f 91       	pop	r21
     990:	4f 91       	pop	r20
     992:	3f 91       	pop	r19
     994:	2f 91       	pop	r18
     996:	0f 90       	pop	r0
     998:	0b be       	out	0x3b, r0	; 59
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	0f 90       	pop	r0
     9a0:	1f 90       	pop	r1
     9a2:	18 95       	reti

000009a4 <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
     9a4:	1f 92       	push	r1
     9a6:	0f 92       	push	r0
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	0f 92       	push	r0
     9ac:	11 24       	eor	r1, r1
     9ae:	0b b6       	in	r0, 0x3b	; 59
     9b0:	0f 92       	push	r0
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	4f 93       	push	r20
     9b8:	5f 93       	push	r21
     9ba:	6f 93       	push	r22
     9bc:	7f 93       	push	r23
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	af 93       	push	r26
     9c4:	bf 93       	push	r27
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
     9ca:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <tc_tccr5_ovf_callback>
     9ce:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <tc_tccr5_ovf_callback+0x1>
     9d2:	30 97       	sbiw	r30, 0x00	; 0
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <__vector_50+0x34>
		tc_tccr5_ovf_callback();
     9d6:	19 95       	eicall
	}
}
     9d8:	ff 91       	pop	r31
     9da:	ef 91       	pop	r30
     9dc:	bf 91       	pop	r27
     9de:	af 91       	pop	r26
     9e0:	9f 91       	pop	r25
     9e2:	8f 91       	pop	r24
     9e4:	7f 91       	pop	r23
     9e6:	6f 91       	pop	r22
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	0f 90       	pop	r0
     9f2:	0b be       	out	0x3b, r0	; 59
     9f4:	0f 90       	pop	r0
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	0f 90       	pop	r0
     9fa:	1f 90       	pop	r1
     9fc:	18 95       	reti

000009fe <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
     9fe:	1f 92       	push	r1
     a00:	0f 92       	push	r0
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	0b b6       	in	r0, 0x3b	; 59
     a0a:	0f 92       	push	r0
     a0c:	2f 93       	push	r18
     a0e:	3f 93       	push	r19
     a10:	4f 93       	push	r20
     a12:	5f 93       	push	r21
     a14:	6f 93       	push	r22
     a16:	7f 93       	push	r23
     a18:	8f 93       	push	r24
     a1a:	9f 93       	push	r25
     a1c:	af 93       	push	r26
     a1e:	bf 93       	push	r27
     a20:	ef 93       	push	r30
     a22:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
     a24:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <tc_tccr5_compa_callback>
     a28:	f0 91 b1 02 	lds	r31, 0x02B1	; 0x8002b1 <tc_tccr5_compa_callback+0x1>
     a2c:	30 97       	sbiw	r30, 0x00	; 0
     a2e:	09 f0       	breq	.+2      	; 0xa32 <__vector_47+0x34>
		tc_tccr5_compa_callback();
     a30:	19 95       	eicall
	}
}
     a32:	ff 91       	pop	r31
     a34:	ef 91       	pop	r30
     a36:	bf 91       	pop	r27
     a38:	af 91       	pop	r26
     a3a:	9f 91       	pop	r25
     a3c:	8f 91       	pop	r24
     a3e:	7f 91       	pop	r23
     a40:	6f 91       	pop	r22
     a42:	5f 91       	pop	r21
     a44:	4f 91       	pop	r20
     a46:	3f 91       	pop	r19
     a48:	2f 91       	pop	r18
     a4a:	0f 90       	pop	r0
     a4c:	0b be       	out	0x3b, r0	; 59
     a4e:	0f 90       	pop	r0
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	0f 90       	pop	r0
     a54:	1f 90       	pop	r1
     a56:	18 95       	reti

00000a58 <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
     a58:	1f 92       	push	r1
     a5a:	0f 92       	push	r0
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	0f 92       	push	r0
     a60:	11 24       	eor	r1, r1
     a62:	0b b6       	in	r0, 0x3b	; 59
     a64:	0f 92       	push	r0
     a66:	2f 93       	push	r18
     a68:	3f 93       	push	r19
     a6a:	4f 93       	push	r20
     a6c:	5f 93       	push	r21
     a6e:	6f 93       	push	r22
     a70:	7f 93       	push	r23
     a72:	8f 93       	push	r24
     a74:	9f 93       	push	r25
     a76:	af 93       	push	r26
     a78:	bf 93       	push	r27
     a7a:	ef 93       	push	r30
     a7c:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
     a7e:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <tc_tccr5_compb_callback>
     a82:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <tc_tccr5_compb_callback+0x1>
     a86:	30 97       	sbiw	r30, 0x00	; 0
     a88:	09 f0       	breq	.+2      	; 0xa8c <__vector_48+0x34>
		tc_tccr5_compb_callback();
     a8a:	19 95       	eicall
	}
}
     a8c:	ff 91       	pop	r31
     a8e:	ef 91       	pop	r30
     a90:	bf 91       	pop	r27
     a92:	af 91       	pop	r26
     a94:	9f 91       	pop	r25
     a96:	8f 91       	pop	r24
     a98:	7f 91       	pop	r23
     a9a:	6f 91       	pop	r22
     a9c:	5f 91       	pop	r21
     a9e:	4f 91       	pop	r20
     aa0:	3f 91       	pop	r19
     aa2:	2f 91       	pop	r18
     aa4:	0f 90       	pop	r0
     aa6:	0b be       	out	0x3b, r0	; 59
     aa8:	0f 90       	pop	r0
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	0f 90       	pop	r0
     aae:	1f 90       	pop	r1
     ab0:	18 95       	reti

00000ab2 <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
     ab2:	1f 92       	push	r1
     ab4:	0f 92       	push	r0
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	0f 92       	push	r0
     aba:	11 24       	eor	r1, r1
     abc:	0b b6       	in	r0, 0x3b	; 59
     abe:	0f 92       	push	r0
     ac0:	2f 93       	push	r18
     ac2:	3f 93       	push	r19
     ac4:	4f 93       	push	r20
     ac6:	5f 93       	push	r21
     ac8:	6f 93       	push	r22
     aca:	7f 93       	push	r23
     acc:	8f 93       	push	r24
     ace:	9f 93       	push	r25
     ad0:	af 93       	push	r26
     ad2:	bf 93       	push	r27
     ad4:	ef 93       	push	r30
     ad6:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
     ad8:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <tc_tccr5_compc_callback>
     adc:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <tc_tccr5_compc_callback+0x1>
     ae0:	30 97       	sbiw	r30, 0x00	; 0
     ae2:	09 f0       	breq	.+2      	; 0xae6 <__vector_49+0x34>
		tc_tccr5_compc_callback();
     ae4:	19 95       	eicall
	}
}
     ae6:	ff 91       	pop	r31
     ae8:	ef 91       	pop	r30
     aea:	bf 91       	pop	r27
     aec:	af 91       	pop	r26
     aee:	9f 91       	pop	r25
     af0:	8f 91       	pop	r24
     af2:	7f 91       	pop	r23
     af4:	6f 91       	pop	r22
     af6:	5f 91       	pop	r21
     af8:	4f 91       	pop	r20
     afa:	3f 91       	pop	r19
     afc:	2f 91       	pop	r18
     afe:	0f 90       	pop	r0
     b00:	0b be       	out	0x3b, r0	; 59
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	0f 90       	pop	r0
     b08:	1f 90       	pop	r1
     b0a:	18 95       	reti

00000b0c <tc_enable>:

void tc_enable(volatile void *tc)
{
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	1f 92       	push	r1
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b18:	2f b7       	in	r18, 0x3f	; 63
     b1a:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     b1c:	f8 94       	cli
	return flags;
     b1e:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     b20:	00 97       	sbiw	r24, 0x00	; 0
     b22:	09 f4       	brne	.+2      	; 0xb26 <tc_enable+0x1a>
     b24:	57 c0       	rjmp	.+174    	; 0xbd4 <tc_enable+0xc8>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
     b26:	88 37       	cpi	r24, 0x78	; 120
     b28:	91 05       	cpc	r25, r1
     b2a:	39 f4       	brne	.+14     	; 0xb3a <tc_enable+0x2e>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
     b2c:	61 e0       	ldi	r22, 0x01	; 1
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	40 dc       	rcall	.-1920   	; 0x3b2 <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
     b32:	60 e1       	ldi	r22, 0x10	; 16
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	3d dc       	rcall	.-1926   	; 0x3b2 <sysclk_enable_module>
     b38:	4d c0       	rjmp	.+154    	; 0xbd4 <tc_enable+0xc8>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
     b3a:	80 3c       	cpi	r24, 0xC0	; 192
     b3c:	91 05       	cpc	r25, r1
     b3e:	21 f4       	brne	.+8      	; 0xb48 <tc_enable+0x3c>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     b40:	62 e0       	ldi	r22, 0x02	; 2
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	36 dc       	rcall	.-1940   	; 0x3b2 <sysclk_enable_module>
     b46:	46 c0       	rjmp	.+140    	; 0xbd4 <tc_enable+0xc8>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
     b48:	8c 34       	cpi	r24, 0x4C	; 76
     b4a:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
     b4c:	21 f4       	brne	.+8      	; 0xb56 <tc_enable+0x4a>
     b4e:	64 e0       	ldi	r22, 0x04	; 4
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	2f dc       	rcall	.-1954   	; 0x3b2 <sysclk_enable_module>
     b54:	3f c0       	rjmp	.+126    	; 0xbd4 <tc_enable+0xc8>
	}
#endif

	else if (module == &TCCR1A) {
     b56:	80 38       	cpi	r24, 0x80	; 128
     b58:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
     b5a:	21 f4       	brne	.+8      	; 0xb64 <tc_enable+0x58>
     b5c:	68 e0       	ldi	r22, 0x08	; 8
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	28 dc       	rcall	.-1968   	; 0x3b2 <sysclk_enable_module>
     b62:	38 c0       	rjmp	.+112    	; 0xbd4 <tc_enable+0xc8>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
     b64:	84 34       	cpi	r24, 0x44	; 68
     b66:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
     b68:	21 f4       	brne	.+8      	; 0xb72 <tc_enable+0x66>
     b6a:	60 e2       	ldi	r22, 0x20	; 32
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	21 dc       	rcall	.-1982   	; 0x3b2 <sysclk_enable_module>
	} else if (module == &TCCR2A) {
     b70:	31 c0       	rjmp	.+98     	; 0xbd4 <tc_enable+0xc8>
     b72:	80 3b       	cpi	r24, 0xB0	; 176
     b74:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
     b76:	21 f4       	brne	.+8      	; 0xb80 <tc_enable+0x74>
     b78:	60 e4       	ldi	r22, 0x40	; 64
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	1a dc       	rcall	.-1996   	; 0x3b2 <sysclk_enable_module>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
     b7e:	2a c0       	rjmp	.+84     	; 0xbd4 <tc_enable+0xc8>
     b80:	88 3b       	cpi	r24, 0xB8	; 184
     b82:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
     b84:	21 f4       	brne	.+8      	; 0xb8e <tc_enable+0x82>
     b86:	60 e8       	ldi	r22, 0x80	; 128
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	13 dc       	rcall	.-2010   	; 0x3b2 <sysclk_enable_module>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
     b8c:	23 c0       	rjmp	.+70     	; 0xbd4 <tc_enable+0xc8>
     b8e:	88 3c       	cpi	r24, 0xC8	; 200
     b90:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
     b92:	21 f4       	brne	.+8      	; 0xb9c <tc_enable+0x90>
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	0c dc       	rcall	.-2024   	; 0x3b2 <sysclk_enable_module>
	} else if (module == &TCCR3A) {
     b9a:	1c c0       	rjmp	.+56     	; 0xbd4 <tc_enable+0xc8>
     b9c:	80 39       	cpi	r24, 0x90	; 144
     b9e:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
     ba0:	21 f4       	brne	.+8      	; 0xbaa <tc_enable+0x9e>
     ba2:	68 e0       	ldi	r22, 0x08	; 8
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	05 dc       	rcall	.-2038   	; 0x3b2 <sysclk_enable_module>
	} else if (module == &TCCR4A) {
     ba8:	15 c0       	rjmp	.+42     	; 0xbd4 <tc_enable+0xc8>
     baa:	80 3a       	cpi	r24, 0xA0	; 160
     bac:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
     bae:	21 f4       	brne	.+8      	; 0xbb8 <tc_enable+0xac>
     bb0:	60 e1       	ldi	r22, 0x10	; 16
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	fe db       	rcall	.-2052   	; 0x3b2 <sysclk_enable_module>
	} else if (module == &TCCR5A) {
     bb6:	0e c0       	rjmp	.+28     	; 0xbd4 <tc_enable+0xc8>
     bb8:	80 32       	cpi	r24, 0x20	; 32
     bba:	21 e0       	ldi	r18, 0x01	; 1
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
     bbc:	92 07       	cpc	r25, r18
     bbe:	21 f4       	brne	.+8      	; 0xbc8 <tc_enable+0xbc>
     bc0:	60 e2       	ldi	r22, 0x20	; 32
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	f6 db       	rcall	.-2068   	; 0x3b2 <sysclk_enable_module>
	} else if (module == &TRX_CTRL_0) {
     bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <tc_enable+0xc8>
     bc8:	83 34       	cpi	r24, 0x43	; 67
     bca:	91 40       	sbci	r25, 0x01	; 1
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
     bcc:	19 f4       	brne	.+6      	; 0xbd4 <tc_enable+0xc8>
     bce:	60 e4       	ldi	r22, 0x40	; 64
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	ef db       	rcall	.-2082   	; 0x3b2 <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bd4:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
     bd6:	0f 90       	pop	r0
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	08 95       	ret

00000be0 <tc_disable>:

void tc_disable(volatile void *tc)
{
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	1f 92       	push	r1
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     bec:	2f b7       	in	r18, 0x3f	; 63
     bee:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     bf0:	f8 94       	cli
	return flags;
     bf2:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	09 f4       	brne	.+2      	; 0xbfa <tc_disable+0x1a>
     bf8:	57 c0       	rjmp	.+174    	; 0xca8 <tc_disable+0xc8>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
     bfa:	88 37       	cpi	r24, 0x78	; 120
     bfc:	91 05       	cpc	r25, r1
     bfe:	39 f4       	brne	.+14     	; 0xc0e <tc_disable+0x2e>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	ee db       	rcall	.-2084   	; 0x3e2 <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
     c06:	60 e1       	ldi	r22, 0x10	; 16
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	eb db       	rcall	.-2090   	; 0x3e2 <sysclk_disable_module>
     c0c:	4d c0       	rjmp	.+154    	; 0xca8 <tc_disable+0xc8>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
     c0e:	80 3c       	cpi	r24, 0xC0	; 192
     c10:	91 05       	cpc	r25, r1
     c12:	21 f4       	brne	.+8      	; 0xc1c <tc_disable+0x3c>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
     c14:	62 e0       	ldi	r22, 0x02	; 2
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	e4 db       	rcall	.-2104   	; 0x3e2 <sysclk_disable_module>
     c1a:	46 c0       	rjmp	.+140    	; 0xca8 <tc_disable+0xc8>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
     c1c:	8c 34       	cpi	r24, 0x4C	; 76
     c1e:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
     c20:	21 f4       	brne	.+8      	; 0xc2a <tc_disable+0x4a>
     c22:	64 e0       	ldi	r22, 0x04	; 4
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	dd db       	rcall	.-2118   	; 0x3e2 <sysclk_disable_module>
     c28:	3f c0       	rjmp	.+126    	; 0xca8 <tc_disable+0xc8>
	}
#endif
	else if (module == &TCCR1A) {
     c2a:	80 38       	cpi	r24, 0x80	; 128
     c2c:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
     c2e:	21 f4       	brne	.+8      	; 0xc38 <tc_disable+0x58>
     c30:	68 e0       	ldi	r22, 0x08	; 8
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	d6 db       	rcall	.-2132   	; 0x3e2 <sysclk_disable_module>
     c36:	38 c0       	rjmp	.+112    	; 0xca8 <tc_disable+0xc8>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
     c38:	84 34       	cpi	r24, 0x44	; 68
     c3a:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
     c3c:	21 f4       	brne	.+8      	; 0xc46 <tc_disable+0x66>
     c3e:	60 e2       	ldi	r22, 0x20	; 32
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	cf db       	rcall	.-2146   	; 0x3e2 <sysclk_disable_module>
	} else if (module == &TCCR2A) {
     c44:	31 c0       	rjmp	.+98     	; 0xca8 <tc_disable+0xc8>
     c46:	80 3b       	cpi	r24, 0xB0	; 176
     c48:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
     c4a:	21 f4       	brne	.+8      	; 0xc54 <tc_disable+0x74>
     c4c:	60 e4       	ldi	r22, 0x40	; 64
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	c8 db       	rcall	.-2160   	; 0x3e2 <sysclk_disable_module>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
     c52:	2a c0       	rjmp	.+84     	; 0xca8 <tc_disable+0xc8>
     c54:	88 3b       	cpi	r24, 0xB8	; 184
     c56:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
     c58:	21 f4       	brne	.+8      	; 0xc62 <tc_disable+0x82>
     c5a:	60 e8       	ldi	r22, 0x80	; 128
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	c1 db       	rcall	.-2174   	; 0x3e2 <sysclk_disable_module>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
     c60:	23 c0       	rjmp	.+70     	; 0xca8 <tc_disable+0xc8>
     c62:	88 3c       	cpi	r24, 0xC8	; 200
     c64:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
     c66:	21 f4       	brne	.+8      	; 0xc70 <tc_disable+0x90>
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	ba db       	rcall	.-2188   	; 0x3e2 <sysclk_disable_module>
	} else if (module == &TCCR3A) {
     c6e:	1c c0       	rjmp	.+56     	; 0xca8 <tc_disable+0xc8>
     c70:	80 39       	cpi	r24, 0x90	; 144
     c72:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
     c74:	21 f4       	brne	.+8      	; 0xc7e <tc_disable+0x9e>
     c76:	68 e0       	ldi	r22, 0x08	; 8
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	b3 db       	rcall	.-2202   	; 0x3e2 <sysclk_disable_module>
	} else if (module == &TCCR4A) {
     c7c:	15 c0       	rjmp	.+42     	; 0xca8 <tc_disable+0xc8>
     c7e:	80 3a       	cpi	r24, 0xA0	; 160
     c80:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
     c82:	21 f4       	brne	.+8      	; 0xc8c <tc_disable+0xac>
     c84:	60 e1       	ldi	r22, 0x10	; 16
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	ac db       	rcall	.-2216   	; 0x3e2 <sysclk_disable_module>
	} else if (module == &TCCR5A) {
     c8a:	0e c0       	rjmp	.+28     	; 0xca8 <tc_disable+0xc8>
     c8c:	80 32       	cpi	r24, 0x20	; 32
     c8e:	21 e0       	ldi	r18, 0x01	; 1
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
     c90:	92 07       	cpc	r25, r18
     c92:	21 f4       	brne	.+8      	; 0xc9c <tc_disable+0xbc>
     c94:	60 e2       	ldi	r22, 0x20	; 32
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	a4 db       	rcall	.-2232   	; 0x3e2 <sysclk_disable_module>
	} else if (module == &TRX_CTRL_0) {
     c9a:	06 c0       	rjmp	.+12     	; 0xca8 <tc_disable+0xc8>
     c9c:	83 34       	cpi	r24, 0x43	; 67
     c9e:	91 40       	sbci	r25, 0x01	; 1
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
     ca0:	19 f4       	brne	.+6      	; 0xca8 <tc_disable+0xc8>
     ca2:	60 e4       	ldi	r22, 0x40	; 64
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	9d db       	rcall	.-2246   	; 0x3e2 <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ca8:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
     caa:	0f 90       	pop	r0
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	08 95       	ret

00000cb4 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
     cb4:	80 38       	cpi	r24, 0x80	; 128
     cb6:	91 05       	cpc	r25, r1
     cb8:	29 f4       	brne	.+10     	; 0xcc4 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
     cba:	70 93 cb 02 	sts	0x02CB, r23	; 0x8002cb <tc_tccr1_ovf_callback+0x1>
     cbe:	60 93 ca 02 	sts	0x02CA, r22	; 0x8002ca <tc_tccr1_ovf_callback>
     cc2:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
     cc4:	80 39       	cpi	r24, 0x90	; 144
     cc6:	91 05       	cpc	r25, r1
     cc8:	29 f4       	brne	.+10     	; 0xcd4 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
     cca:	70 93 c3 02 	sts	0x02C3, r23	; 0x8002c3 <tc_tccr3_ovf_callback+0x1>
     cce:	60 93 c2 02 	sts	0x02C2, r22	; 0x8002c2 <tc_tccr3_ovf_callback>
     cd2:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
     cd4:	80 3a       	cpi	r24, 0xA0	; 160
     cd6:	91 05       	cpc	r25, r1
     cd8:	29 f4       	brne	.+10     	; 0xce4 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
     cda:	70 93 bb 02 	sts	0x02BB, r23	; 0x8002bb <tc_tccr4_ovf_callback+0x1>
     cde:	60 93 ba 02 	sts	0x02BA, r22	; 0x8002ba <tc_tccr4_ovf_callback>
     ce2:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
     ce4:	80 32       	cpi	r24, 0x20	; 32
     ce6:	91 40       	sbci	r25, 0x01	; 1
     ce8:	21 f4       	brne	.+8      	; 0xcf2 <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
     cea:	70 93 b3 02 	sts	0x02B3, r23	; 0x8002b3 <tc_tccr5_ovf_callback+0x1>
     cee:	60 93 b2 02 	sts	0x02B2, r22	; 0x8002b2 <tc_tccr5_ovf_callback>
     cf2:	08 95       	ret

00000cf4 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
     cf4:	80 38       	cpi	r24, 0x80	; 128
     cf6:	91 05       	cpc	r25, r1
     cf8:	29 f4       	brne	.+10     	; 0xd04 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
     cfa:	70 93 c9 02 	sts	0x02C9, r23	; 0x8002c9 <tc_tccr1_compa_callback+0x1>
     cfe:	60 93 c8 02 	sts	0x02C8, r22	; 0x8002c8 <tc_tccr1_compa_callback>
     d02:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
     d04:	80 39       	cpi	r24, 0x90	; 144
     d06:	91 05       	cpc	r25, r1
     d08:	29 f4       	brne	.+10     	; 0xd14 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
     d0a:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <tc_tccr3_compa_callback+0x1>
     d0e:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <tc_tccr3_compa_callback>
     d12:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
     d14:	80 3a       	cpi	r24, 0xA0	; 160
     d16:	91 05       	cpc	r25, r1
     d18:	29 f4       	brne	.+10     	; 0xd24 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
     d1a:	70 93 b9 02 	sts	0x02B9, r23	; 0x8002b9 <tc_tccr4_compa_callback+0x1>
     d1e:	60 93 b8 02 	sts	0x02B8, r22	; 0x8002b8 <tc_tccr4_compa_callback>
     d22:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
     d24:	80 32       	cpi	r24, 0x20	; 32
     d26:	91 40       	sbci	r25, 0x01	; 1
     d28:	21 f4       	brne	.+8      	; 0xd32 <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
     d2a:	70 93 b1 02 	sts	0x02B1, r23	; 0x8002b1 <tc_tccr5_compa_callback+0x1>
     d2e:	60 93 b0 02 	sts	0x02B0, r22	; 0x8002b0 <tc_tccr5_compa_callback>
     d32:	08 95       	ret

00000d34 <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
     d34:	d5 ca       	rjmp	.-2646   	; 0x2e0 <tmr_ovf_callback>
     d36:	08 95       	ret

00000d38 <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
     d38:	0a cb       	rjmp	.-2540   	; 0x34e <tmr_cca_callback>
     d3a:	08 95       	ret

00000d3c <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
     d3c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     d40:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
     d44:	08 95       	ret

00000d46 <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
     d46:	ef e6       	ldi	r30, 0x6F	; 111
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8d 7f       	andi	r24, 0xFD	; 253
     d4e:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
     d50:	b1 9a       	sbi	0x16, 1	; 22
     d52:	08 95       	ret

00000d54 <tmr_enable_cc_interrupt>:
     d54:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
     d56:	ef e6       	ldi	r30, 0x6F	; 111
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	82 60       	ori	r24, 0x02	; 2
     d5e:	80 83       	st	Z, r24
     d60:	08 95       	ret

00000d62 <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
     d62:	ef e6       	ldi	r30, 0x6F	; 111
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	81 60       	ori	r24, 0x01	; 1
     d6a:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
     d6c:	b0 9a       	sbi	0x16, 0	; 22
     d6e:	08 95       	ret

00000d70 <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
     d70:	80 e8       	ldi	r24, 0x80	; 128
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	35 cf       	rjmp	.-406    	; 0xbe0 <tc_disable>
     d76:	08 95       	ret

00000d78 <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
     d78:	e9 e8       	ldi	r30, 0x89	; 137
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	20 81       	ld	r18, Z
     d7e:	92 2b       	or	r25, r18
     d80:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
     d82:	e8 e8       	ldi	r30, 0x88	; 136
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	90 81       	ld	r25, Z
     d88:	89 2b       	or	r24, r25
     d8a:	80 83       	st	Z, r24
     d8c:	08 95       	ret

00000d8e <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	1f 92       	push	r1
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d98:	8f b7       	in	r24, 0x3f	; 63
     d9a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     d9c:	f8 94       	cli
	return flags;
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
     da0:	0f 90       	pop	r0
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     da8:	8f bf       	out	0x3f, r24	; 63
     daa:	08 95       	ret

00000dac <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
     db0:	80 e8       	ldi	r24, 0x80	; 128
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	ab de       	rcall	.-682    	; 0xb0c <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
     db6:	6a e9       	ldi	r22, 0x9A	; 154
     db8:	76 e0       	ldi	r23, 0x06	; 6
     dba:	80 e8       	ldi	r24, 0x80	; 128
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	7a df       	rcall	.-268    	; 0xcb4 <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
     dc0:	cf e6       	ldi	r28, 0x6F	; 111
     dc2:	d0 e0       	ldi	r29, 0x00	; 0
     dc4:	88 81       	ld	r24, Y
     dc6:	81 60       	ori	r24, 0x01	; 1
     dc8:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
     dca:	6c e9       	ldi	r22, 0x9C	; 156
     dcc:	76 e0       	ldi	r23, 0x06	; 6
     dce:	80 e8       	ldi	r24, 0x80	; 128
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	90 df       	rcall	.-224    	; 0xcf4 <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
     dd4:	88 81       	ld	r24, Y
     dd6:	8d 7f       	andi	r24, 0xFD	; 253
     dd8:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
     dda:	e1 e8       	ldi	r30, 0x81	; 129
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	81 60       	ori	r24, 0x01	; 1
     de2:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
	SYS_TimerInit();
     dec:	9f d1       	rcall	.+830    	; 0x112c <SYS_TimerInit>
#if SYS_SECURITY_MODE == 0
	sal_init();
#endif
	/*Initiates Physical and Network layers of the stack*/
	PHY_Init();
     dee:	b9 d2       	rcall	.+1394   	; 0x1362 <PHY_Init>
	NWK_Init();
     df0:	aa c3       	rjmp	.+1876   	; 0x1546 <NWK_Init>
     df2:	08 95       	ret

00000df4 <SYS_TaskHandler>:
     df4:	2c d3       	rcall	.+1624   	; 0x144e <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
	PHY_TaskHandler();
	NWK_TaskHandler();
     df6:	d7 d3       	rcall	.+1966   	; 0x15a6 <NWK_TaskHandler>
	SYS_TimerTaskHandler();
     df8:	09 c2       	rjmp	.+1042   	; 0x120c <SYS_TimerTaskHandler>
     dfa:	08 95       	ret

00000dfc <xtea>:
     dfc:	4f 92       	push	r4
#if SYS_SECURITY_MODE == 1

/*************************************************************************//**
*****************************************************************************/
static void xtea(uint32_t text[2], uint32_t const key[4])
{
     dfe:	5f 92       	push	r5
     e00:	6f 92       	push	r6
     e02:	7f 92       	push	r7
     e04:	8f 92       	push	r8
     e06:	9f 92       	push	r9
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	2e 97       	sbiw	r28, 0x0e	; 14
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	8c 01       	movw	r16, r24
     e2e:	9b 01       	movw	r18, r22
	uint32_t t0 = text[0];
     e30:	dc 01       	movw	r26, r24
     e32:	8d 90       	ld	r8, X+
     e34:	9d 90       	ld	r9, X+
     e36:	ad 90       	ld	r10, X+
     e38:	bc 90       	ld	r11, X
     e3a:	13 97       	sbiw	r26, 0x03	; 3
	uint32_t t1 = text[1];
     e3c:	14 96       	adiw	r26, 0x04	; 4
     e3e:	cd 90       	ld	r12, X+
     e40:	dd 90       	ld	r13, X+
     e42:	ed 90       	ld	r14, X+
     e44:	fc 90       	ld	r15, X
     e46:	17 97       	sbiw	r26, 0x07	; 7
	uint32_t sum = 0;
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	ba 01       	movw	r22, r20
	uint32_t delta = 0x9e3779b9;

	for (uint8_t i = 0; i < 32; i++) {
		t0 += (((t1 << 4) ^ (t1 >> 5)) + t1) ^ (sum + key[sum & 3]);
     e4e:	fa 01       	movw	r30, r20
     e50:	e3 70       	andi	r30, 0x03	; 3
     e52:	ff 27       	eor	r31, r31
     e54:	ee 0f       	add	r30, r30
     e56:	ff 1f       	adc	r31, r31
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	e2 0f       	add	r30, r18
     e5e:	f3 1f       	adc	r31, r19
     e60:	40 80       	ld	r4, Z
     e62:	51 80       	ldd	r5, Z+1	; 0x01
     e64:	62 80       	ldd	r6, Z+2	; 0x02
     e66:	73 80       	ldd	r7, Z+3	; 0x03
     e68:	d3 01       	movw	r26, r6
     e6a:	c2 01       	movw	r24, r4
     e6c:	84 0f       	add	r24, r20
     e6e:	95 1f       	adc	r25, r21
     e70:	a6 1f       	adc	r26, r22
     e72:	b7 1f       	adc	r27, r23
     e74:	8b 87       	std	Y+11, r24	; 0x0b
     e76:	9c 87       	std	Y+12, r25	; 0x0c
     e78:	ad 87       	std	Y+13, r26	; 0x0d
     e7a:	be 87       	std	Y+14, r27	; 0x0e
     e7c:	26 01       	movw	r4, r12
     e7e:	37 01       	movw	r6, r14
     e80:	44 0c       	add	r4, r4
     e82:	55 1c       	adc	r5, r5
     e84:	66 1c       	adc	r6, r6
     e86:	77 1c       	adc	r7, r7
     e88:	44 0c       	add	r4, r4
     e8a:	55 1c       	adc	r5, r5
     e8c:	66 1c       	adc	r6, r6
     e8e:	77 1c       	adc	r7, r7
     e90:	d3 01       	movw	r26, r6
     e92:	c2 01       	movw	r24, r4
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	aa 1f       	adc	r26, r26
     e9a:	bb 1f       	adc	r27, r27
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	aa 1f       	adc	r26, r26
     ea2:	bb 1f       	adc	r27, r27
     ea4:	26 01       	movw	r4, r12
     ea6:	37 01       	movw	r6, r14
     ea8:	68 94       	set
     eaa:	14 f8       	bld	r1, 4
     eac:	76 94       	lsr	r7
     eae:	67 94       	ror	r6
     eb0:	57 94       	ror	r5
     eb2:	47 94       	ror	r4
     eb4:	16 94       	lsr	r1
     eb6:	d1 f7       	brne	.-12     	; 0xeac <xtea+0xb0>
     eb8:	48 26       	eor	r4, r24
     eba:	59 26       	eor	r5, r25
     ebc:	6a 26       	eor	r6, r26
     ebe:	7b 26       	eor	r7, r27
     ec0:	d3 01       	movw	r26, r6
     ec2:	c2 01       	movw	r24, r4
     ec4:	8c 0d       	add	r24, r12
     ec6:	9d 1d       	adc	r25, r13
     ec8:	ae 1d       	adc	r26, r14
     eca:	bf 1d       	adc	r27, r15
     ecc:	4b 84       	ldd	r4, Y+11	; 0x0b
     ece:	5c 84       	ldd	r5, Y+12	; 0x0c
     ed0:	6d 84       	ldd	r6, Y+13	; 0x0d
     ed2:	7e 84       	ldd	r7, Y+14	; 0x0e
     ed4:	48 26       	eor	r4, r24
     ed6:	59 26       	eor	r5, r25
     ed8:	6a 26       	eor	r6, r26
     eda:	7b 26       	eor	r7, r27
     edc:	84 0c       	add	r8, r4
     ede:	95 1c       	adc	r9, r5
     ee0:	a6 1c       	adc	r10, r6
     ee2:	b7 1c       	adc	r11, r7
		sum += delta;
     ee4:	47 54       	subi	r20, 0x47	; 71
     ee6:	56 48       	sbci	r21, 0x86	; 134
     ee8:	68 4c       	sbci	r22, 0xC8	; 200
     eea:	71 46       	sbci	r23, 0x61	; 97
		t1
			+= (((t0 <<
				4) ^
				(t0 >> 5)) + t0) ^ (sum + key[(sum >> 11) & 3]);
     eec:	db 01       	movw	r26, r22
     eee:	ca 01       	movw	r24, r20
     ef0:	07 2e       	mov	r0, r23
     ef2:	7b e0       	ldi	r23, 0x0B	; 11
     ef4:	b6 95       	lsr	r27
     ef6:	a7 95       	ror	r26
     ef8:	97 95       	ror	r25
     efa:	87 95       	ror	r24
     efc:	7a 95       	dec	r23
     efe:	d1 f7       	brne	.-12     	; 0xef4 <xtea+0xf8>
     f00:	70 2d       	mov	r23, r0
     f02:	fc 01       	movw	r30, r24
     f04:	e3 70       	andi	r30, 0x03	; 3
     f06:	ff 27       	eor	r31, r31
     f08:	ee 0f       	add	r30, r30
     f0a:	ff 1f       	adc	r31, r31
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	e2 0f       	add	r30, r18
     f12:	f3 1f       	adc	r31, r19

	for (uint8_t i = 0; i < 32; i++) {
		t0 += (((t1 << 4) ^ (t1 >> 5)) + t1) ^ (sum + key[sum & 3]);
		sum += delta;
		t1
			+= (((t0 <<
     f14:	40 80       	ld	r4, Z
     f16:	51 80       	ldd	r5, Z+1	; 0x01
     f18:	62 80       	ldd	r6, Z+2	; 0x02
     f1a:	73 80       	ldd	r7, Z+3	; 0x03
     f1c:	d3 01       	movw	r26, r6
     f1e:	c2 01       	movw	r24, r4
     f20:	84 0f       	add	r24, r20
     f22:	95 1f       	adc	r25, r21
     f24:	a6 1f       	adc	r26, r22
     f26:	b7 1f       	adc	r27, r23
     f28:	8b 87       	std	Y+11, r24	; 0x0b
     f2a:	9c 87       	std	Y+12, r25	; 0x0c
     f2c:	ad 87       	std	Y+13, r26	; 0x0d
     f2e:	be 87       	std	Y+14, r27	; 0x0e
     f30:	24 01       	movw	r4, r8
     f32:	35 01       	movw	r6, r10
     f34:	44 0c       	add	r4, r4
     f36:	55 1c       	adc	r5, r5
     f38:	66 1c       	adc	r6, r6
     f3a:	77 1c       	adc	r7, r7
     f3c:	44 0c       	add	r4, r4
     f3e:	55 1c       	adc	r5, r5
     f40:	66 1c       	adc	r6, r6
     f42:	77 1c       	adc	r7, r7
     f44:	d3 01       	movw	r26, r6
     f46:	c2 01       	movw	r24, r4
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	aa 1f       	adc	r26, r26
     f4e:	bb 1f       	adc	r27, r27
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	aa 1f       	adc	r26, r26
     f56:	bb 1f       	adc	r27, r27
     f58:	24 01       	movw	r4, r8
     f5a:	35 01       	movw	r6, r10
     f5c:	68 94       	set
     f5e:	14 f8       	bld	r1, 4
     f60:	76 94       	lsr	r7
     f62:	67 94       	ror	r6
     f64:	57 94       	ror	r5
     f66:	47 94       	ror	r4
     f68:	16 94       	lsr	r1
     f6a:	d1 f7       	brne	.-12     	; 0xf60 <xtea+0x164>
     f6c:	48 26       	eor	r4, r24
     f6e:	59 26       	eor	r5, r25
     f70:	6a 26       	eor	r6, r26
     f72:	7b 26       	eor	r7, r27
     f74:	d3 01       	movw	r26, r6
     f76:	c2 01       	movw	r24, r4
     f78:	88 0d       	add	r24, r8
     f7a:	99 1d       	adc	r25, r9
     f7c:	aa 1d       	adc	r26, r10
     f7e:	bb 1d       	adc	r27, r11
     f80:	4b 84       	ldd	r4, Y+11	; 0x0b
     f82:	5c 84       	ldd	r5, Y+12	; 0x0c
     f84:	6d 84       	ldd	r6, Y+13	; 0x0d
     f86:	7e 84       	ldd	r7, Y+14	; 0x0e
     f88:	48 26       	eor	r4, r24
     f8a:	59 26       	eor	r5, r25
     f8c:	6a 26       	eor	r6, r26
     f8e:	7b 26       	eor	r7, r27
     f90:	c4 0c       	add	r12, r4
     f92:	d5 1c       	adc	r13, r5
     f94:	e6 1c       	adc	r14, r6
     f96:	f7 1c       	adc	r15, r7
	uint32_t t0 = text[0];
	uint32_t t1 = text[1];
	uint32_t sum = 0;
	uint32_t delta = 0x9e3779b9;

	for (uint8_t i = 0; i < 32; i++) {
     f98:	40 32       	cpi	r20, 0x20	; 32
     f9a:	87 e3       	ldi	r24, 0x37	; 55
     f9c:	58 07       	cpc	r21, r24
     f9e:	8f ee       	ldi	r24, 0xEF	; 239
     fa0:	68 07       	cpc	r22, r24
     fa2:	86 ec       	ldi	r24, 0xC6	; 198
     fa4:	78 07       	cpc	r23, r24
     fa6:	09 f0       	breq	.+2      	; 0xfaa <xtea+0x1ae>
     fa8:	52 cf       	rjmp	.-348    	; 0xe4e <xtea+0x52>
		t1
			+= (((t0 <<
				4) ^
				(t0 >> 5)) + t0) ^ (sum + key[(sum >> 11) & 3]);
	}
	text[0] = t0;
     faa:	d8 01       	movw	r26, r16
     fac:	8d 92       	st	X+, r8
     fae:	9d 92       	st	X+, r9
     fb0:	ad 92       	st	X+, r10
     fb2:	bc 92       	st	X, r11
     fb4:	13 97       	sbiw	r26, 0x03	; 3
	text[1] = t1;
     fb6:	f8 01       	movw	r30, r16
     fb8:	c4 82       	std	Z+4, r12	; 0x04
     fba:	d5 82       	std	Z+5, r13	; 0x05
     fbc:	e6 82       	std	Z+6, r14	; 0x06
     fbe:	f7 82       	std	Z+7, r15	; 0x07
}
     fc0:	2e 96       	adiw	r28, 0x0e	; 14
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	df 90       	pop	r13
     fda:	cf 90       	pop	r12
     fdc:	bf 90       	pop	r11
     fde:	af 90       	pop	r10
     fe0:	9f 90       	pop	r9
     fe2:	8f 90       	pop	r8
     fe4:	7f 90       	pop	r7
     fe6:	6f 90       	pop	r6
     fe8:	5f 90       	pop	r5
     fea:	4f 90       	pop	r4
     fec:	08 95       	ret

00000fee <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	ec 01       	movw	r28, r24
     ff8:	8b 01       	movw	r16, r22
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);

#elif SYS_SECURITY_MODE == 1
	xtea(&text[0], key);
     ffa:	00 df       	rcall	.-512    	; 0xdfc <xtea>
	text[2] ^= text[0];
     ffc:	48 85       	ldd	r20, Y+8	; 0x08
     ffe:	59 85       	ldd	r21, Y+9	; 0x09
    1000:	6a 85       	ldd	r22, Y+10	; 0x0a
    1002:	7b 85       	ldd	r23, Y+11	; 0x0b
    1004:	88 81       	ld	r24, Y
    1006:	99 81       	ldd	r25, Y+1	; 0x01
    1008:	aa 81       	ldd	r26, Y+2	; 0x02
    100a:	bb 81       	ldd	r27, Y+3	; 0x03
    100c:	84 27       	eor	r24, r20
    100e:	95 27       	eor	r25, r21
    1010:	a6 27       	eor	r26, r22
    1012:	b7 27       	eor	r27, r23
    1014:	88 87       	std	Y+8, r24	; 0x08
    1016:	99 87       	std	Y+9, r25	; 0x09
    1018:	aa 87       	std	Y+10, r26	; 0x0a
    101a:	bb 87       	std	Y+11, r27	; 0x0b
	text[3] ^= text[1];
    101c:	4c 85       	ldd	r20, Y+12	; 0x0c
    101e:	5d 85       	ldd	r21, Y+13	; 0x0d
    1020:	6e 85       	ldd	r22, Y+14	; 0x0e
    1022:	7f 85       	ldd	r23, Y+15	; 0x0f
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	9d 81       	ldd	r25, Y+5	; 0x05
    1028:	ae 81       	ldd	r26, Y+6	; 0x06
    102a:	bf 81       	ldd	r27, Y+7	; 0x07
    102c:	84 27       	eor	r24, r20
    102e:	95 27       	eor	r25, r21
    1030:	a6 27       	eor	r26, r22
    1032:	b7 27       	eor	r27, r23
    1034:	8c 87       	std	Y+12, r24	; 0x0c
    1036:	9d 87       	std	Y+13, r25	; 0x0d
    1038:	ae 87       	std	Y+14, r26	; 0x0e
    103a:	bf 87       	std	Y+15, r27	; 0x0f
	xtea(&text[2], key);
    103c:	b8 01       	movw	r22, r16
    103e:	ce 01       	movw	r24, r28
    1040:	08 96       	adiw	r24, 0x08	; 8
    1042:	dc de       	rcall	.-584    	; 0xdfc <xtea>
#endif

	SYS_EncryptConf();
    1044:	0e 94 59 13 	call	0x26b2	; 0x26b2 <SYS_EncryptConf>
}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	08 95       	ret

00001052 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	ec 01       	movw	r28, r24
	if (timers) {
    105c:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <timers>
    1060:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <timers+0x1>
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	09 f4       	brne	.+2      	; 0x106a <placeTimer+0x18>
    1068:	45 c0       	rjmp	.+138    	; 0x10f4 <placeTimer+0xa2>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    106a:	4e 81       	ldd	r20, Y+6	; 0x06
    106c:	5f 81       	ldd	r21, Y+7	; 0x07
    106e:	68 85       	ldd	r22, Y+8	; 0x08
    1070:	79 85       	ldd	r23, Y+9	; 0x09

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    1072:	fc 01       	movw	r30, r24
    1074:	02 81       	ldd	r16, Z+2	; 0x02
    1076:	13 81       	ldd	r17, Z+3	; 0x03
    1078:	24 81       	ldd	r18, Z+4	; 0x04
    107a:	35 81       	ldd	r19, Z+5	; 0x05
    107c:	40 17       	cp	r20, r16
    107e:	51 07       	cpc	r21, r17
    1080:	62 07       	cpc	r22, r18
    1082:	73 07       	cpc	r23, r19
    1084:	60 f0       	brcs	.+24     	; 0x109e <placeTimer+0x4c>
    1086:	dc 01       	movw	r26, r24
    1088:	17 c0       	rjmp	.+46     	; 0x10b8 <placeTimer+0x66>
    108a:	02 81       	ldd	r16, Z+2	; 0x02
    108c:	13 81       	ldd	r17, Z+3	; 0x03
    108e:	24 81       	ldd	r18, Z+4	; 0x04
    1090:	35 81       	ldd	r19, Z+5	; 0x05
    1092:	40 17       	cp	r20, r16
    1094:	51 07       	cpc	r21, r17
    1096:	62 07       	cpc	r22, r18
    1098:	73 07       	cpc	r23, r19
    109a:	68 f4       	brcc	.+26     	; 0x10b6 <placeTimer+0x64>
    109c:	03 c0       	rjmp	.+6      	; 0x10a4 <placeTimer+0x52>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    109e:	fc 01       	movw	r30, r24
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    10a0:	a0 e0       	ldi	r26, 0x00	; 0
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    10a4:	04 1b       	sub	r16, r20
    10a6:	15 0b       	sbc	r17, r21
    10a8:	26 0b       	sbc	r18, r22
    10aa:	37 0b       	sbc	r19, r23
    10ac:	02 83       	std	Z+2, r16	; 0x02
    10ae:	13 83       	std	Z+3, r17	; 0x03
    10b0:	24 83       	std	Z+4, r18	; 0x04
    10b2:	35 83       	std	Z+5, r19	; 0x05
				break;
    10b4:	0a c0       	rjmp	.+20     	; 0x10ca <placeTimer+0x78>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    10b6:	df 01       	movw	r26, r30
			if (timeout < t->timeout) {
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    10b8:	40 1b       	sub	r20, r16
    10ba:	51 0b       	sbc	r21, r17
    10bc:	62 0b       	sbc	r22, r18
    10be:	73 0b       	sbc	r23, r19
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    10c0:	ed 91       	ld	r30, X+
    10c2:	fc 91       	ld	r31, X
    10c4:	11 97       	sbiw	r26, 0x01	; 1
    10c6:	30 97       	sbiw	r30, 0x00	; 0
    10c8:	01 f7       	brne	.-64     	; 0x108a <placeTimer+0x38>
			}

			prev = t;
		}

		timer->timeout = timeout;
    10ca:	4a 83       	std	Y+2, r20	; 0x02
    10cc:	5b 83       	std	Y+3, r21	; 0x03
    10ce:	6c 83       	std	Y+4, r22	; 0x04
    10d0:	7d 83       	std	Y+5, r23	; 0x05

		if (prev) {
    10d2:	10 97       	sbiw	r26, 0x00	; 0
    10d4:	41 f0       	breq	.+16     	; 0x10e6 <placeTimer+0x94>
			timer->next = prev->next;
    10d6:	8d 91       	ld	r24, X+
    10d8:	9c 91       	ld	r25, X
    10da:	11 97       	sbiw	r26, 0x01	; 1
    10dc:	99 83       	std	Y+1, r25	; 0x01
    10de:	88 83       	st	Y, r24
			prev->next = timer;
    10e0:	cd 93       	st	X+, r28
    10e2:	dc 93       	st	X, r29
    10e4:	15 c0       	rjmp	.+42     	; 0x1110 <placeTimer+0xbe>
		} else {
			timer->next = timers;
    10e6:	99 83       	std	Y+1, r25	; 0x01
    10e8:	88 83       	st	Y, r24
			timers = timer;
    10ea:	d0 93 cd 02 	sts	0x02CD, r29	; 0x8002cd <timers+0x1>
    10ee:	c0 93 cc 02 	sts	0x02CC, r28	; 0x8002cc <timers>
    10f2:	0e c0       	rjmp	.+28     	; 0x1110 <placeTimer+0xbe>
		}
	} else {
		timer->next = NULL;
    10f4:	19 82       	std	Y+1, r1	; 0x01
    10f6:	18 82       	st	Y, r1
		timer->timeout = timer->interval;
    10f8:	8e 81       	ldd	r24, Y+6	; 0x06
    10fa:	9f 81       	ldd	r25, Y+7	; 0x07
    10fc:	a8 85       	ldd	r26, Y+8	; 0x08
    10fe:	b9 85       	ldd	r27, Y+9	; 0x09
    1100:	8a 83       	std	Y+2, r24	; 0x02
    1102:	9b 83       	std	Y+3, r25	; 0x03
    1104:	ac 83       	std	Y+4, r26	; 0x04
    1106:	bd 83       	std	Y+5, r27	; 0x05
		timers = timer;
    1108:	d0 93 cd 02 	sts	0x02CD, r29	; 0x8002cd <timers+0x1>
    110c:	c0 93 cc 02 	sts	0x02CC, r28	; 0x8002cc <timers>
	}
}
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

0000111a <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
	SysTimerIrqCount++;
    111a:	80 91 bb 0e 	lds	r24, 0x0EBB	; 0x800ebb <SysTimerIrqCount>
    111e:	8f 5f       	subi	r24, 0xFF	; 255
    1120:	80 93 bb 0e 	sts	0x0EBB, r24	; 0x800ebb <SysTimerIrqCount>
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1124:	80 e1       	ldi	r24, 0x10	; 16
    1126:	97 e2       	ldi	r25, 0x27	; 39
    1128:	64 c8       	rjmp	.-3896   	; 0x1f2 <common_tc_delay>
    112a:	08 95       	ret

0000112c <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
	SysTimerIrqCount = 0;
    112c:	10 92 bb 0e 	sts	0x0EBB, r1	; 0x800ebb <SysTimerIrqCount>
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    1130:	8d e8       	ldi	r24, 0x8D	; 141
    1132:	98 e0       	ldi	r25, 0x08	; 8
    1134:	1a d9       	rcall	.-3532   	; 0x36a <set_common_tc_expiry_callback>
	common_tc_init();
    1136:	ce d8       	rcall	.-3684   	; 0x2d4 <common_tc_init>
    1138:	80 e1       	ldi	r24, 0x10	; 16
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    113a:	97 e2       	ldi	r25, 0x27	; 39
    113c:	5a d8       	rcall	.-3916   	; 0x1f2 <common_tc_delay>
    113e:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <timers+0x1>
	timers = NULL;
    1142:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <timers>
    1146:	08 95       	ret

00001148 <SYS_TimerStop>:
    1148:	cf 93       	push	r28
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    114a:	df 93       	push	r29
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    114c:	a0 91 cc 02 	lds	r26, 0x02CC	; 0x8002cc <timers>
    1150:	b0 91 cd 02 	lds	r27, 0x02CD	; 0x8002cd <timers+0x1>
    1154:	10 97       	sbiw	r26, 0x00	; 0
    1156:	91 f1       	breq	.+100    	; 0x11bc <SYS_TimerStop+0x74>
		if (t == timer) {
    1158:	a8 17       	cp	r26, r24
    115a:	b9 07       	cpc	r27, r25
    115c:	51 f5       	brne	.+84     	; 0x11b2 <SYS_TimerStop+0x6a>
    115e:	0a c0       	rjmp	.+20     	; 0x1174 <SYS_TimerStop+0x2c>
    1160:	8e 17       	cp	r24, r30
    1162:	9f 07       	cpc	r25, r31
    1164:	29 f5       	brne	.+74     	; 0x11b0 <SYS_TimerStop+0x68>
			if (prev) {
    1166:	10 97       	sbiw	r26, 0x00	; 0
    1168:	31 f0       	breq	.+12     	; 0x1176 <SYS_TimerStop+0x2e>
				prev->next = t->next;
    116a:	20 81       	ld	r18, Z
    116c:	31 81       	ldd	r19, Z+1	; 0x01
    116e:	2d 93       	st	X+, r18
    1170:	3c 93       	st	X, r19
    1172:	07 c0       	rjmp	.+14     	; 0x1182 <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1174:	fc 01       	movw	r30, r24
		if (t == timer) {
			if (prev) {
				prev->next = t->next;
			} else {
				timers = t->next;
    1176:	20 81       	ld	r18, Z
    1178:	31 81       	ldd	r19, Z+1	; 0x01
    117a:	30 93 cd 02 	sts	0x02CD, r19	; 0x8002cd <timers+0x1>
    117e:	20 93 cc 02 	sts	0x02CC, r18	; 0x8002cc <timers>
			}

			if (t->next) {
    1182:	01 90       	ld	r0, Z+
    1184:	f0 81       	ld	r31, Z
    1186:	e0 2d       	mov	r30, r0
    1188:	30 97       	sbiw	r30, 0x00	; 0
    118a:	c1 f0       	breq	.+48     	; 0x11bc <SYS_TimerStop+0x74>
				t->next->timeout += timer->timeout;
    118c:	42 81       	ldd	r20, Z+2	; 0x02
    118e:	53 81       	ldd	r21, Z+3	; 0x03
    1190:	64 81       	ldd	r22, Z+4	; 0x04
    1192:	75 81       	ldd	r23, Z+5	; 0x05
    1194:	ec 01       	movw	r28, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	9b 81       	ldd	r25, Y+3	; 0x03
    119a:	ac 81       	ldd	r26, Y+4	; 0x04
    119c:	bd 81       	ldd	r27, Y+5	; 0x05
    119e:	84 0f       	add	r24, r20
    11a0:	95 1f       	adc	r25, r21
    11a2:	a6 1f       	adc	r26, r22
    11a4:	b7 1f       	adc	r27, r23
    11a6:	82 83       	std	Z+2, r24	; 0x02
    11a8:	93 83       	std	Z+3, r25	; 0x03
    11aa:	a4 83       	std	Z+4, r26	; 0x04
    11ac:	b5 83       	std	Z+5, r27	; 0x05
    11ae:	06 c0       	rjmp	.+12     	; 0x11bc <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    11b0:	df 01       	movw	r26, r30
    11b2:	ed 91       	ld	r30, X+
    11b4:	fc 91       	ld	r31, X
    11b6:	11 97       	sbiw	r26, 0x01	; 1
    11b8:	30 97       	sbiw	r30, 0x00	; 0
    11ba:	91 f6       	brne	.-92     	; 0x1160 <SYS_TimerStop+0x18>
			break;
		}

		prev = t;
	}
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	08 95       	ret

000011c2 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    11c2:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <timers>
    11c6:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <timers+0x1>
    11ca:	30 97       	sbiw	r30, 0x00	; 0
    11cc:	71 f0       	breq	.+28     	; 0x11ea <SYS_TimerStarted+0x28>
		if (t == timer) {
    11ce:	e8 17       	cp	r30, r24
    11d0:	f9 07       	cpc	r31, r25
    11d2:	21 f4       	brne	.+8      	; 0x11dc <SYS_TimerStarted+0x1a>
    11d4:	0c c0       	rjmp	.+24     	; 0x11ee <SYS_TimerStarted+0x2c>
    11d6:	8e 17       	cp	r24, r30
    11d8:	9f 07       	cpc	r25, r31
    11da:	59 f0       	breq	.+22     	; 0x11f2 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    11dc:	01 90       	ld	r0, Z+
    11de:	f0 81       	ld	r31, Z
    11e0:	e0 2d       	mov	r30, r0
    11e2:	30 97       	sbiw	r30, 0x00	; 0
    11e4:	c1 f7       	brne	.-16     	; 0x11d6 <SYS_TimerStarted+0x14>
		if (t == timer) {
			return true;
		}
	}
	return false;
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	08 95       	ret
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	08 95       	ret
    11f2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return false;
}
    11f4:	08 95       	ret

000011f6 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	ec 01       	movw	r28, r24
	if (!SYS_TimerStarted(timer)) {
    11fc:	e2 df       	rcall	.-60     	; 0x11c2 <SYS_TimerStarted>
    11fe:	81 11       	cpse	r24, r1
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <SYS_TimerStart+0x10>
		placeTimer(timer);
    1202:	ce 01       	movw	r24, r28
    1204:	26 df       	rcall	.-436    	; 0x1052 <placeTimer>
	}
}
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    120c:	cf 92       	push	r12
    120e:	df 92       	push	r13
    1210:	ef 92       	push	r14
    1212:	ff 92       	push	r15
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	1f 92       	push	r1
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    1222:	80 91 bb 0e 	lds	r24, 0x0EBB	; 0x800ebb <SysTimerIrqCount>
    1226:	88 23       	and	r24, r24
    1228:	09 f4       	brne	.+2      	; 0x122c <SYS_TimerTaskHandler+0x20>
    122a:	53 c0       	rjmp	.+166    	; 0x12d2 <SYS_TimerTaskHandler+0xc6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    122c:	8f b7       	in	r24, 0x3f	; 63
    122e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1230:	f8 94       	cli
	return flags;
    1232:	89 81       	ldd	r24, Y+1	; 0x01
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    1234:	c0 90 bb 0e 	lds	r12, 0x0EBB	; 0x800ebb <SysTimerIrqCount>
	SysTimerIrqCount = 0;
    1238:	10 92 bb 0e 	sts	0x0EBB, r1	; 0x800ebb <SysTimerIrqCount>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    123c:	8f bf       	out	0x3f, r24	; 63
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    123e:	d1 2c       	mov	r13, r1
    1240:	e1 2c       	mov	r14, r1
    1242:	f1 2c       	mov	r15, r1
    1244:	cc 0c       	add	r12, r12
    1246:	dd 1c       	adc	r13, r13
    1248:	ee 1c       	adc	r14, r14
    124a:	ff 1c       	adc	r15, r15
    124c:	d7 01       	movw	r26, r14
    124e:	c6 01       	movw	r24, r12
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	aa 1f       	adc	r26, r26
    1256:	bb 1f       	adc	r27, r27
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	aa 1f       	adc	r26, r26
    125e:	bb 1f       	adc	r27, r27
    1260:	c8 0e       	add	r12, r24
    1262:	d9 1e       	adc	r13, r25
    1264:	ea 1e       	adc	r14, r26
    1266:	fb 1e       	adc	r15, r27

	while (timers && (timers->timeout <= elapsed)) {
    1268:	1b c0       	rjmp	.+54     	; 0x12a0 <SYS_TimerTaskHandler+0x94>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    126a:	c8 1a       	sub	r12, r24
    126c:	d9 0a       	sbc	r13, r25
    126e:	ea 0a       	sbc	r14, r26
    1270:	fb 0a       	sbc	r15, r27
		timers = timers->next;
    1272:	d8 01       	movw	r26, r16
    1274:	8d 91       	ld	r24, X+
    1276:	9c 91       	ld	r25, X
    1278:	11 97       	sbiw	r26, 0x01	; 1
    127a:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <timers+0x1>
    127e:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <timers>
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    1282:	1a 96       	adiw	r26, 0x0a	; 10
    1284:	8c 91       	ld	r24, X
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	11 f4       	brne	.+4      	; 0x128e <SYS_TimerTaskHandler+0x82>
			placeTimer(timer);
    128a:	c8 01       	movw	r24, r16
    128c:	e2 de       	rcall	.-572    	; 0x1052 <placeTimer>
		}

		if (timer->handler) {
    128e:	d8 01       	movw	r26, r16
    1290:	1b 96       	adiw	r26, 0x0b	; 11
    1292:	ed 91       	ld	r30, X+
    1294:	fc 91       	ld	r31, X
    1296:	1c 97       	sbiw	r26, 0x0c	; 12
    1298:	30 97       	sbiw	r30, 0x00	; 0
    129a:	11 f0       	breq	.+4      	; 0x12a0 <SYS_TimerTaskHandler+0x94>
			timer->handler(timer);
    129c:	c8 01       	movw	r24, r16
    129e:	19 95       	eicall
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    12a0:	00 91 cc 02 	lds	r16, 0x02CC	; 0x8002cc <timers>
    12a4:	10 91 cd 02 	lds	r17, 0x02CD	; 0x8002cd <timers+0x1>
    12a8:	01 15       	cp	r16, r1
    12aa:	11 05       	cpc	r17, r1
    12ac:	91 f0       	breq	.+36     	; 0x12d2 <SYS_TimerTaskHandler+0xc6>
    12ae:	f8 01       	movw	r30, r16
    12b0:	82 81       	ldd	r24, Z+2	; 0x02
    12b2:	93 81       	ldd	r25, Z+3	; 0x03
    12b4:	a4 81       	ldd	r26, Z+4	; 0x04
    12b6:	b5 81       	ldd	r27, Z+5	; 0x05
    12b8:	c8 16       	cp	r12, r24
    12ba:	d9 06       	cpc	r13, r25
    12bc:	ea 06       	cpc	r14, r26
    12be:	fb 06       	cpc	r15, r27
    12c0:	a0 f6       	brcc	.-88     	; 0x126a <SYS_TimerTaskHandler+0x5e>
			timer->handler(timer);
		}
	}

	if (timers) {
		timers->timeout -= elapsed;
    12c2:	8c 19       	sub	r24, r12
    12c4:	9d 09       	sbc	r25, r13
    12c6:	ae 09       	sbc	r26, r14
    12c8:	bf 09       	sbc	r27, r15
    12ca:	82 83       	std	Z+2, r24	; 0x02
    12cc:	93 83       	std	Z+3, r25	; 0x03
    12ce:	a4 83       	std	Z+4, r26	; 0x04
    12d0:	b5 83       	std	Z+5, r27	; 0x05
	}
}
    12d2:	0f 90       	pop	r0
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	df 90       	pop	r13
    12e2:	cf 90       	pop	r12
    12e4:	08 95       	ret

000012e6 <phySetChannel>:
	IEEE_ADDR_2_REG = *ptr_to_reg++;
	IEEE_ADDR_3_REG = *ptr_to_reg++;
	IEEE_ADDR_4_REG = *ptr_to_reg++;
	IEEE_ADDR_5_REG = *ptr_to_reg++;
	IEEE_ADDR_6_REG = *ptr_to_reg++;
	IEEE_ADDR_7_REG = *ptr_to_reg;
    12e6:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <phyBand>
    12ea:	98 2f       	mov	r25, r24
    12ec:	9f 70       	andi	r25, 0x0F	; 15
    12ee:	e4 e5       	ldi	r30, 0x54	; 84
    12f0:	f1 e0       	ldi	r31, 0x01	; 1
    12f2:	80 81       	ld	r24, Z
    12f4:	80 7f       	andi	r24, 0xF0	; 240
    12f6:	89 2b       	or	r24, r25
    12f8:	80 83       	st	Z, r24
    12fa:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <phyBand>
    12fe:	88 23       	and	r24, r24
    1300:	29 f0       	breq	.+10     	; 0x130c <phySetChannel+0x26>
    1302:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <phyChannel>
    1306:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
    130a:	08 95       	ret
    130c:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <phyChannel>
    1310:	98 2f       	mov	r25, r24
    1312:	9f 71       	andi	r25, 0x1F	; 31
    1314:	e8 e4       	ldi	r30, 0x48	; 72
    1316:	f1 e0       	ldi	r31, 0x01	; 1
    1318:	80 81       	ld	r24, Z
    131a:	80 7e       	andi	r24, 0xE0	; 224
    131c:	89 2b       	or	r24, r25
    131e:	80 83       	st	Z, r24
    1320:	08 95       	ret

00001322 <phyTrxSetState>:
    1322:	a2 e4       	ldi	r26, 0x42	; 66
    1324:	b1 e0       	ldi	r27, 0x01	; 1
    1326:	23 e0       	ldi	r18, 0x03	; 3
    1328:	e1 e4       	ldi	r30, 0x41	; 65
    132a:	f1 e0       	ldi	r31, 0x01	; 1
    132c:	2c 93       	st	X, r18
    132e:	90 81       	ld	r25, Z
    1330:	9f 71       	andi	r25, 0x1F	; 31
    1332:	98 30       	cpi	r25, 0x08	; 8
    1334:	d9 f7       	brne	.-10     	; 0x132c <phyTrxSetState+0xa>
    1336:	a2 e4       	ldi	r26, 0x42	; 66
    1338:	b1 e0       	ldi	r27, 0x01	; 1
    133a:	e1 e4       	ldi	r30, 0x41	; 65
    133c:	f1 e0       	ldi	r31, 0x01	; 1
    133e:	8c 93       	st	X, r24
    1340:	90 81       	ld	r25, Z
    1342:	9f 71       	andi	r25, 0x1F	; 31
    1344:	89 13       	cpse	r24, r25
    1346:	fb cf       	rjmp	.-10     	; 0x133e <phyTrxSetState+0x1c>
    1348:	08 95       	ret

0000134a <phySetRxState>:
    134a:	88 e0       	ldi	r24, 0x08	; 8
    134c:	ea df       	rcall	.-44     	; 0x1322 <phyTrxSetState>
    134e:	8f ef       	ldi	r24, 0xFF	; 255
    1350:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1354:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <phyRxState>
    1358:	88 23       	and	r24, r24
    135a:	11 f0       	breq	.+4      	; 0x1360 <phySetRxState+0x16>
    135c:	86 e1       	ldi	r24, 0x16	; 22
    135e:	e1 cf       	rjmp	.-62     	; 0x1322 <phyTrxSetState>
    1360:	08 95       	ret

00001362 <PHY_Init>:
    1362:	60 e4       	ldi	r22, 0x40	; 64
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	25 d8       	rcall	.-4022   	; 0x3b2 <sysclk_enable_module>
    1368:	e9 e3       	ldi	r30, 0x39	; 57
    136a:	f1 e0       	ldi	r31, 0x01	; 1
    136c:	80 81       	ld	r24, Z
    136e:	81 60       	ori	r24, 0x01	; 1
    1370:	80 83       	st	Z, r24
    1372:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <phyRxState>
    1376:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <phyBand>
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <phyState>
    1380:	88 e0       	ldi	r24, 0x08	; 8
    1382:	cf df       	rcall	.-98     	; 0x1322 <phyTrxSetState>
    1384:	8b ee       	ldi	r24, 0xEB	; 235
    1386:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x700156>
    138a:	ec e4       	ldi	r30, 0x4C	; 76
    138c:	f1 e0       	ldi	r31, 0x01	; 1
    138e:	80 81       	ld	r24, Z
    1390:	80 68       	ori	r24, 0x80	; 128
    1392:	80 83       	st	Z, r24
    1394:	80 81       	ld	r24, Z
    1396:	83 60       	ori	r24, 0x03	; 3
    1398:	80 83       	st	Z, r24
    139a:	08 95       	ret

0000139c <PHY_SetRxState>:
    139c:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <phyRxState>
    13a0:	d4 cf       	rjmp	.-88     	; 0x134a <phySetRxState>
    13a2:	08 95       	ret

000013a4 <PHY_SetChannel>:
    13a4:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <phyChannel>
    13a8:	9e cf       	rjmp	.-196    	; 0x12e6 <phySetChannel>
    13aa:	08 95       	ret

000013ac <PHY_SetPanId>:
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	1f 92       	push	r1
    13b2:	1f 92       	push	r1
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x700162>
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x700163>
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	08 95       	ret

000013d0 <PHY_SetShortAddr>:
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	1f 92       	push	r1
    13d6:	1f 92       	push	r1
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x700160>
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x700161>
    13ea:	99 81       	ldd	r25, Y+1	; 0x01
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	89 0f       	add	r24, r25
    13f0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x70016d>
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	08 95       	ret

000013fe <PHY_DataReq>:
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	ec 01       	movw	r28, r24
    1404:	89 e1       	ldi	r24, 0x19	; 25
    1406:	8d df       	rcall	.-230    	; 0x1322 <phyTrxSetState>
    1408:	8f ef       	ldi	r24, 0xFF	; 255
    140a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    140e:	88 81       	ld	r24, Y
    1410:	8e 5f       	subi	r24, 0xFE	; 254
    1412:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
    1416:	88 81       	ld	r24, Y
    1418:	88 23       	and	r24, r24
    141a:	81 f0       	breq	.+32     	; 0x143c <PHY_DataReq+0x3e>
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	82 2f       	mov	r24, r18
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	fc 01       	movw	r30, r24
    1424:	ef 57       	subi	r30, 0x7F	; 127
    1426:	fe 4f       	sbci	r31, 0xFE	; 254
    1428:	de 01       	movw	r26, r28
    142a:	a8 0f       	add	r26, r24
    142c:	b9 1f       	adc	r27, r25
    142e:	11 96       	adiw	r26, 0x01	; 1
    1430:	8c 91       	ld	r24, X
    1432:	80 83       	st	Z, r24
    1434:	2f 5f       	subi	r18, 0xFF	; 255
    1436:	88 81       	ld	r24, Y
    1438:	28 17       	cp	r18, r24
    143a:	88 f3       	brcs	.-30     	; 0x141e <PHY_DataReq+0x20>
    143c:	83 e0       	ldi	r24, 0x03	; 3
    143e:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <phyState>
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	00 d0       	rcall	.+0      	; 0x1456 <PHY_TaskHandler+0x8>
    1456:	1f 92       	push	r1
    1458:	1f 92       	push	r1
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
	if (PHY_STATE_SLEEP == phyState) {
    145e:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <phyState>
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	09 f4       	brne	.+2      	; 0x1468 <PHY_TaskHandler+0x1a>
    1466:	66 c0       	rjmp	.+204    	; 0x1534 <PHY_TaskHandler+0xe6>
		return;
	}

	if (IRQ_STATUS_REG_s.rxEnd) {
    1468:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    146c:	83 ff       	sbrs	r24, 3
    146e:	3e c0       	rjmp	.+124    	; 0x14ec <PHY_TaskHandler+0x9e>
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;
    1470:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x70017b>

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    1474:	6a 2f       	mov	r22, r26
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	ab 01       	movw	r20, r22
    147a:	4f 5f       	subi	r20, 0xFF	; 255
    147c:	5f 4f       	sbci	r21, 0xFF	; 255
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	20 e0       	ldi	r18, 0x00	; 0
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1484:	fc 01       	movw	r30, r24
    1486:	e0 58       	subi	r30, 0x80	; 128
    1488:	fe 4f       	sbci	r31, 0xFE	; 254
    148a:	30 81       	ld	r19, Z
    148c:	fc 01       	movw	r30, r24
    148e:	ef 52       	subi	r30, 0x2F	; 47
    1490:	fd 4f       	sbci	r31, 0xFD	; 253
    1492:	30 83       	st	Z, r19

	if (IRQ_STATUS_REG_s.rxEnd) {
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    1494:	2f 5f       	subi	r18, 0xFF	; 255
    1496:	82 2f       	mov	r24, r18
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	84 17       	cp	r24, r20
    149c:	95 07       	cpc	r25, r21
    149e:	94 f3       	brlt	.-28     	; 0x1484 <PHY_TaskHandler+0x36>
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
		}

		ind.data = phyRxBuffer;
    14a0:	81 ed       	ldi	r24, 0xD1	; 209
    14a2:	92 e0       	ldi	r25, 0x02	; 2
    14a4:	9a 83       	std	Y+2, r25	; 0x02
    14a6:	89 83       	std	Y+1, r24	; 0x01
		ind.size = size - PHY_CRC_SIZE;
    14a8:	a2 50       	subi	r26, 0x02	; 2
    14aa:	ab 83       	std	Y+3, r26	; 0x03
		ind.lqi  = phyRxBuffer[size];
    14ac:	fb 01       	movw	r30, r22
    14ae:	ef 52       	subi	r30, 0x2F	; 47
    14b0:	fd 4f       	sbci	r31, 0xFD	; 253
    14b2:	80 81       	ld	r24, Z
    14b4:	8c 83       	std	Y+4, r24	; 0x04
		ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    14b6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    14ba:	8a 55       	subi	r24, 0x5A	; 90
    14bc:	8d 83       	std	Y+5, r24	; 0x05
		PHY_DataInd(&ind);
    14be:	ce 01       	movw	r24, r28
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	5b d6       	rcall	.+3254   	; 0x217a <PHY_DataInd>

		while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus) {
    14c4:	e1 e4       	ldi	r30, 0x41	; 65
    14c6:	f1 e0       	ldi	r31, 0x01	; 1
    14c8:	80 81       	ld	r24, Z
    14ca:	8f 71       	andi	r24, 0x1F	; 31
    14cc:	86 31       	cpi	r24, 0x16	; 22
    14ce:	e1 f7       	brne	.-8      	; 0x14c8 <PHY_TaskHandler+0x7a>
		}

		IRQ_STATUS_REG_s.rxEnd = 1;
    14d0:	ef e4       	ldi	r30, 0x4F	; 79
    14d2:	f1 e0       	ldi	r31, 0x01	; 1
    14d4:	80 81       	ld	r24, Z
    14d6:	88 60       	ori	r24, 0x08	; 8
    14d8:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 0;
    14da:	ec e4       	ldi	r30, 0x4C	; 76
    14dc:	f1 e0       	ldi	r31, 0x01	; 1
    14de:	80 81       	ld	r24, Z
    14e0:	8f 77       	andi	r24, 0x7F	; 127
    14e2:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 1;
    14e4:	80 81       	ld	r24, Z
    14e6:	80 68       	ori	r24, 0x80	; 128
    14e8:	80 83       	st	Z, r24
    14ea:	24 c0       	rjmp	.+72     	; 0x1534 <PHY_TaskHandler+0xe6>
	} else if (IRQ_STATUS_REG_s.txEnd) {
    14ec:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    14f0:	86 ff       	sbrs	r24, 6
    14f2:	20 c0       	rjmp	.+64     	; 0x1534 <PHY_TaskHandler+0xe6>
		if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus) {
    14f4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    14f8:	8f 71       	andi	r24, 0x1F	; 31
    14fa:	89 31       	cpi	r24, 0x19	; 25
    14fc:	b1 f4       	brne	.+44     	; 0x152a <PHY_TaskHandler+0xdc>
			uint8_t status = TRX_STATE_REG_s.tracStatus;
    14fe:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1502:	12 95       	swap	r17
    1504:	16 95       	lsr	r17
    1506:	17 70       	andi	r17, 0x07	; 7

			if (TRAC_STATUS_SUCCESS == status) {
    1508:	49 f0       	breq	.+18     	; 0x151c <PHY_TaskHandler+0xce>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    150a:	13 30       	cpi	r17, 0x03	; 3
    150c:	21 f0       	breq	.+8      	; 0x1516 <PHY_TaskHandler+0xc8>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
    150e:	15 30       	cpi	r17, 0x05	; 5
    1510:	21 f0       	breq	.+8      	; 0x151a <PHY_TaskHandler+0xcc>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
    1512:	13 e0       	ldi	r17, 0x03	; 3
    1514:	03 c0       	rjmp	.+6      	; 0x151c <PHY_TaskHandler+0xce>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1516:	11 e0       	ldi	r17, 0x01	; 1
    1518:	01 c0       	rjmp	.+2      	; 0x151c <PHY_TaskHandler+0xce>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    151a:	12 e0       	ldi	r17, 0x02	; 2
    151c:	16 df       	rcall	.-468    	; 0x134a <phySetRxState>
			phyState = PHY_STATE_IDLE;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <phyState>

			PHY_DataConf(status);
    1524:	81 2f       	mov	r24, r17
    1526:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <PHY_DataConf>
		}

		IRQ_STATUS_REG_s.txEnd = 1;
    152a:	ef e4       	ldi	r30, 0x4F	; 79
    152c:	f1 e0       	ldi	r31, 0x01	; 1
    152e:	80 81       	ld	r24, Z
    1530:	80 64       	ori	r24, 0x40	; 64
    1532:	80 83       	st	Z, r24
	}
}
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	08 95       	ret

00001546 <NWK_Init>:

		cl += 25;
	}

	return 255;
}
    1546:	ec eb       	ldi	r30, 0xBC	; 188
    1548:	fe e0       	ldi	r31, 0x0E	; 14
    154a:	14 82       	std	Z+4, r1	; 0x04
    154c:	15 82       	std	Z+5, r1	; 0x05
    154e:	11 82       	std	Z+1, r1	; 0x01
    1550:	10 82       	st	Z, r1
    1552:	17 aa       	std	Z+55, r1	; 0x37
    1554:	16 aa       	std	Z+54, r1	; 0x36
    1556:	e2 ec       	ldi	r30, 0xC2	; 194
    1558:	fe e0       	ldi	r31, 0x0E	; 14
    155a:	82 ee       	ldi	r24, 0xE2	; 226
    155c:	9e e0       	ldi	r25, 0x0E	; 14
    155e:	11 92       	st	Z+, r1
    1560:	11 92       	st	Z+, r1
    1562:	e8 17       	cp	r30, r24
    1564:	f9 07       	cpc	r31, r25
    1566:	d9 f7       	brne	.-10     	; 0x155e <NWK_Init+0x18>
    1568:	0e 94 ed 14 	call	0x29da	; 0x29da <nwkTxInit>
    156c:	e9 d5       	rcall	.+3026   	; 0x2140 <nwkRxInit>
    156e:	1a d1       	rcall	.+564    	; 0x17a4 <nwkFrameInit>
    1570:	44 d0       	rcall	.+136    	; 0x15fa <nwkDataReqInit>
    1572:	9d d1       	rcall	.+826    	; 0x18ae <nwkRouteInit>
    1574:	0e 94 43 13 	call	0x2686	; 0x2686 <nwkSecurityInit>
    1578:	69 c4       	rjmp	.+2258   	; 0x1e4c <nwkRouteDiscoveryInit>
    157a:	08 95       	ret

0000157c <NWK_SetAddr>:
    157c:	90 93 bd 0e 	sts	0x0EBD, r25	; 0x800ebd <nwkIb+0x1>
    1580:	80 93 bc 0e 	sts	0x0EBC, r24	; 0x800ebc <nwkIb>
    1584:	25 cf       	rjmp	.-438    	; 0x13d0 <PHY_SetShortAddr>
    1586:	08 95       	ret

00001588 <NWK_SetPanId>:
    1588:	90 93 bf 0e 	sts	0x0EBF, r25	; 0x800ebf <nwkIb+0x3>
    158c:	80 93 be 0e 	sts	0x0EBE, r24	; 0x800ebe <nwkIb+0x2>
    1590:	0d cf       	rjmp	.-486    	; 0x13ac <PHY_SetPanId>
    1592:	08 95       	ret

00001594 <NWK_OpenEndpoint>:
    1594:	e8 2f       	mov	r30, r24
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	ee 0f       	add	r30, r30
    159a:	ff 1f       	adc	r31, r31
    159c:	ee 53       	subi	r30, 0x3E	; 62
    159e:	f1 4f       	sbci	r31, 0xF1	; 241
    15a0:	71 83       	std	Z+1, r23	; 0x01
    15a2:	60 83       	st	Z, r22
    15a4:	08 95       	ret

000015a6 <NWK_TaskHandler>:
/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
	nwkRxTaskHandler();
    15a6:	1d d6       	rcall	.+3130   	; 0x21e2 <nwkRxTaskHandler>
	nwkTxTaskHandler();
    15a8:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <nwkTxTaskHandler>
	nwkDataReqTaskHandler();
    15ac:	4f d0       	rcall	.+158    	; 0x164c <nwkDataReqTaskHandler>
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    15ae:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <nwkSecurityTaskHandler>
    15b2:	08 95       	ret

000015b4 <nwkDataReqTxConf>:
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    15b4:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <nwkDataReqQueue>
    15b8:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <nwkDataReqQueue+0x1>
    15bc:	30 97       	sbiw	r30, 0x00	; 0
    15be:	d9 f0       	breq	.+54     	; 0x15f6 <nwkDataReqTxConf+0x42>
		if (req->frame == frame) {
    15c0:	22 81       	ldd	r18, Z+2	; 0x02
    15c2:	33 81       	ldd	r19, Z+3	; 0x03
    15c4:	82 17       	cp	r24, r18
    15c6:	93 07       	cpc	r25, r19
    15c8:	89 f4       	brne	.+34     	; 0x15ec <nwkDataReqTxConf+0x38>
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <nwkDataReqTxConf+0x22>
    15cc:	22 81       	ldd	r18, Z+2	; 0x02
    15ce:	33 81       	ldd	r19, Z+3	; 0x03
    15d0:	28 17       	cp	r18, r24
    15d2:	39 07       	cpc	r19, r25
    15d4:	59 f4       	brne	.+22     	; 0x15ec <nwkDataReqTxConf+0x38>
			req->status = frame->tx.status;
    15d6:	dc 01       	movw	r26, r24
    15d8:	ad 57       	subi	r26, 0x7D	; 125
    15da:	bf 4f       	sbci	r27, 0xFF	; 255
    15dc:	2c 91       	ld	r18, X
    15de:	27 87       	std	Z+15, r18	; 0x0f
			req->control = frame->tx.control;
    15e0:	13 96       	adiw	r26, 0x03	; 3
    15e2:	2c 91       	ld	r18, X
    15e4:	20 8b       	std	Z+16, r18	; 0x10
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    15e6:	22 e0       	ldi	r18, 0x02	; 2
    15e8:	24 83       	std	Z+4, r18	; 0x04
			break;
    15ea:	05 c0       	rjmp	.+10     	; 0x15f6 <nwkDataReqTxConf+0x42>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    15ec:	01 90       	ld	r0, Z+
    15ee:	f0 81       	ld	r31, Z
    15f0:	e0 2d       	mov	r30, r0
    15f2:	30 97       	sbiw	r30, 0x00	; 0
    15f4:	59 f7       	brne	.-42     	; 0x15cc <nwkDataReqTxConf+0x18>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    15f6:	18 c1       	rjmp	.+560    	; 0x1828 <nwkFrameFree>
    15f8:	08 95       	ret

000015fa <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    15fa:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <nwkDataReqQueue+0x1>
    15fe:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <nwkDataReqQueue>
    1602:	08 95       	ret

00001604 <NWK_DataReq>:
/*************************************************************************//**
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    1604:	fc 01       	movw	r30, r24
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    1606:	14 82       	std	Z+4, r1	; 0x04
	req->status = NWK_SUCCESS_STATUS;
    1608:	17 86       	std	Z+15, r1	; 0x0f
	req->frame = NULL;
    160a:	13 82       	std	Z+3, r1	; 0x03
    160c:	12 82       	std	Z+2, r1	; 0x02

	nwkIb.lock++;
    160e:	ac eb       	ldi	r26, 0xBC	; 188
    1610:	be e0       	ldi	r27, 0x0E	; 14
    1612:	d6 96       	adiw	r26, 0x36	; 54
    1614:	8d 91       	ld	r24, X+
    1616:	9c 91       	ld	r25, X
    1618:	d7 97       	sbiw	r26, 0x37	; 55
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	d7 96       	adiw	r26, 0x37	; 55
    161e:	9c 93       	st	X, r25
    1620:	8e 93       	st	-X, r24
    1622:	d6 97       	sbiw	r26, 0x36	; 54

	if (NULL == nwkDataReqQueue) {
    1624:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <nwkDataReqQueue>
    1628:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <nwkDataReqQueue+0x1>
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	39 f4       	brne	.+14     	; 0x163e <NWK_DataReq+0x3a>
		req->next = NULL;
    1630:	11 82       	std	Z+1, r1	; 0x01
    1632:	10 82       	st	Z, r1
		nwkDataReqQueue = req;
    1634:	f0 93 53 03 	sts	0x0353, r31	; 0x800353 <nwkDataReqQueue+0x1>
    1638:	e0 93 52 03 	sts	0x0352, r30	; 0x800352 <nwkDataReqQueue>
    163c:	08 95       	ret
	} else {
		req->next = nwkDataReqQueue;
    163e:	91 83       	std	Z+1, r25	; 0x01
    1640:	80 83       	st	Z, r24
		nwkDataReqQueue = req;
    1642:	f0 93 53 03 	sts	0x0353, r31	; 0x800353 <nwkDataReqQueue+0x1>
    1646:	e0 93 52 03 	sts	0x0352, r30	; 0x800352 <nwkDataReqQueue>
    164a:	08 95       	ret

0000164c <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1654:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <nwkDataReqQueue>
    1658:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <nwkDataReqQueue+0x1>
    165c:	30 97       	sbiw	r30, 0x00	; 0
    165e:	09 f4       	brne	.+2      	; 0x1662 <nwkDataReqTaskHandler+0x16>
    1660:	9c c0       	rjmp	.+312    	; 0x179a <nwkDataReqTaskHandler+0x14e>
    1662:	ef 01       	movw	r28, r30
		switch (req->state) {
    1664:	8c 81       	ldd	r24, Y+4	; 0x04
    1666:	88 23       	and	r24, r24
    1668:	21 f0       	breq	.+8      	; 0x1672 <nwkDataReqTaskHandler+0x26>
    166a:	82 30       	cpi	r24, 0x02	; 2
    166c:	09 f4       	brne	.+2      	; 0x1670 <nwkDataReqTaskHandler+0x24>
    166e:	6f c0       	rjmp	.+222    	; 0x174e <nwkDataReqTaskHandler+0x102>
    1670:	8e c0       	rjmp	.+284    	; 0x178e <nwkDataReqTaskHandler+0x142>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    1672:	a3 d0       	rcall	.+326    	; 0x17ba <nwkFrameAlloc>
    1674:	8c 01       	movw	r16, r24
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	21 f4       	brne	.+8      	; 0x1682 <nwkDataReqTaskHandler+0x36>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	8c 83       	std	Y+4, r24	; 0x04
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    167e:	8f 87       	std	Y+15, r24	; 0x0f
    1680:	8c c0       	rjmp	.+280    	; 0x179a <nwkDataReqTaskHandler+0x14e>
		return;
	}

	req->frame = frame;
    1682:	9b 83       	std	Y+3, r25	; 0x03
    1684:	8a 83       	std	Y+2, r24	; 0x02
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	8c 83       	std	Y+4, r24	; 0x04

	frame->tx.confirm = nwkDataReqTxConf;
    168a:	f8 01       	movw	r30, r16
    168c:	e9 57       	subi	r30, 0x79	; 121
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	8a ed       	ldi	r24, 0xDA	; 218
    1692:	9a e0       	ldi	r25, 0x0A	; 10
    1694:	91 83       	std	Z+1, r25	; 0x01
    1696:	80 83       	st	Z, r24
	frame->tx.control = req->options &
    1698:	31 97       	sbiw	r30, 0x01	; 1
    169a:	89 85       	ldd	r24, Y+9	; 0x09
    169c:	82 fb       	bst	r24, 2
    169e:	88 27       	eor	r24, r24
    16a0:	80 f9       	bld	r24, 0
    16a2:	80 83       	st	Z, r24
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    16a4:	99 85       	ldd	r25, Y+9	; 0x09
    16a6:	d8 01       	movw	r26, r16
    16a8:	1b 96       	adiw	r26, 0x0b	; 11
    16aa:	8c 91       	ld	r24, X
    16ac:	1b 97       	sbiw	r26, 0x0b	; 11
    16ae:	90 fb       	bst	r25, 0
    16b0:	80 f9       	bld	r24, 0
    16b2:	1b 96       	adiw	r26, 0x0b	; 11
    16b4:	8c 93       	st	X, r24
    16b6:	1b 97       	sbiw	r26, 0x0b	; 11
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    16b8:	99 85       	ldd	r25, Y+9	; 0x09
    16ba:	93 fb       	bst	r25, 3
    16bc:	99 27       	eor	r25, r25
    16be:	90 f9       	bld	r25, 0
    16c0:	90 fb       	bst	r25, 0
    16c2:	82 f9       	bld	r24, 2
    16c4:	1b 96       	adiw	r26, 0x0b	; 11
    16c6:	8c 93       	st	X, r24
    16c8:	1b 97       	sbiw	r26, 0x0b	; 11
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    16ca:	99 85       	ldd	r25, Y+9	; 0x09
    16cc:	96 95       	lsr	r25
    16ce:	91 70       	andi	r25, 0x01	; 1
    16d0:	90 fb       	bst	r25, 0
    16d2:	81 f9       	bld	r24, 1
    16d4:	1b 96       	adiw	r26, 0x0b	; 11
    16d6:	8c 93       	st	X, r24
    16d8:	1b 97       	sbiw	r26, 0x0b	; 11
		frame->payload += sizeof(NwkFrameMulticastHeader_t);
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}
#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    16da:	ec eb       	ldi	r30, 0xBC	; 188
    16dc:	fe e0       	ldi	r31, 0x0E	; 14
    16de:	84 81       	ldd	r24, Z+4	; 0x04
    16e0:	8f 5f       	subi	r24, 0xFF	; 255
    16e2:	84 83       	std	Z+4, r24	; 0x04
    16e4:	1c 96       	adiw	r26, 0x0c	; 12
    16e6:	8c 93       	st	X, r24
    16e8:	1c 97       	sbiw	r26, 0x0c	; 12
	frame->header.nwkSrcAddr = nwkIb.addr;
    16ea:	80 81       	ld	r24, Z
    16ec:	91 81       	ldd	r25, Z+1	; 0x01
    16ee:	1e 96       	adiw	r26, 0x0e	; 14
    16f0:	9c 93       	st	X, r25
    16f2:	8e 93       	st	-X, r24
    16f4:	1d 97       	sbiw	r26, 0x0d	; 13
	frame->header.nwkDstAddr = req->dstAddr;
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	9e 81       	ldd	r25, Y+6	; 0x06
    16fa:	50 96       	adiw	r26, 0x10	; 16
    16fc:	9c 93       	st	X, r25
    16fe:	8e 93       	st	-X, r24
    1700:	1f 97       	sbiw	r26, 0x0f	; 15
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    1702:	88 85       	ldd	r24, Y+8	; 0x08
    1704:	98 2f       	mov	r25, r24
    1706:	9f 70       	andi	r25, 0x0F	; 15
    1708:	51 96       	adiw	r26, 0x11	; 17
    170a:	8c 91       	ld	r24, X
    170c:	51 97       	sbiw	r26, 0x11	; 17
    170e:	80 7f       	andi	r24, 0xF0	; 240
    1710:	89 2b       	or	r24, r25
    1712:	51 96       	adiw	r26, 0x11	; 17
    1714:	8c 93       	st	X, r24
    1716:	51 97       	sbiw	r26, 0x11	; 17
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    1718:	9f 81       	ldd	r25, Y+7	; 0x07
    171a:	92 95       	swap	r25
    171c:	90 7f       	andi	r25, 0xF0	; 240
    171e:	8f 70       	andi	r24, 0x0F	; 15
    1720:	89 2b       	or	r24, r25
    1722:	51 96       	adiw	r26, 0x11	; 17
    1724:	8c 93       	st	X, r24

	memcpy(frame->payload, req->data, req->size);
    1726:	f8 01       	movw	r30, r16
    1728:	ef 57       	subi	r30, 0x7F	; 127
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	4c 85       	ldd	r20, Y+12	; 0x0c
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	6a 85       	ldd	r22, Y+10	; 0x0a
    1732:	7b 85       	ldd	r23, Y+11	; 0x0b
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	0e 94 c7 18 	call	0x318e	; 0x318e <memcpy>
	frame->size += req->size;
    173c:	f8 01       	movw	r30, r16
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	8c 85       	ldd	r24, Y+12	; 0x0c
    1742:	89 0f       	add	r24, r25
    1744:	81 83       	std	Z+1, r24	; 0x01

	nwkTxFrame(frame);
    1746:	c8 01       	movw	r24, r16
    1748:	0e 94 10 15 	call	0x2a20	; 0x2a20 <nwkTxFrame>
    174c:	26 c0       	rjmp	.+76     	; 0x179a <nwkDataReqTaskHandler+0x14e>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    174e:	ec 17       	cp	r30, r28
    1750:	fd 07       	cpc	r31, r29
    1752:	41 f4       	brne	.+16     	; 0x1764 <nwkDataReqTaskHandler+0x118>
		nwkDataReqQueue = nwkDataReqQueue->next;
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <nwkDataReqQueue+0x1>
    175c:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <nwkDataReqQueue>
    1760:	0a c0       	rjmp	.+20     	; 0x1776 <nwkDataReqTaskHandler+0x12a>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
			prev = prev->next;
    1762:	fc 01       	movw	r30, r24
{
	if (nwkDataReqQueue == req) {
		nwkDataReqQueue = nwkDataReqQueue->next;
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    1764:	80 81       	ld	r24, Z
    1766:	91 81       	ldd	r25, Z+1	; 0x01
    1768:	8c 17       	cp	r24, r28
    176a:	9d 07       	cpc	r25, r29
    176c:	d1 f7       	brne	.-12     	; 0x1762 <nwkDataReqTaskHandler+0x116>
			prev = prev->next;
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    176e:	88 81       	ld	r24, Y
    1770:	99 81       	ldd	r25, Y+1	; 0x01
    1772:	91 83       	std	Z+1, r25	; 0x01
    1774:	80 83       	st	Z, r24
	}

	nwkIb.lock--;
    1776:	ec eb       	ldi	r30, 0xBC	; 188
    1778:	fe e0       	ldi	r31, 0x0E	; 14
    177a:	86 a9       	ldd	r24, Z+54	; 0x36
    177c:	97 a9       	ldd	r25, Z+55	; 0x37
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	97 ab       	std	Z+55, r25	; 0x37
    1782:	86 ab       	std	Z+54, r24	; 0x36
	req->confirm(req);
    1784:	ed 85       	ldd	r30, Y+13	; 0x0d
    1786:	fe 85       	ldd	r31, Y+14	; 0x0e
    1788:	ce 01       	movw	r24, r28
    178a:	19 95       	eicall
    178c:	06 c0       	rjmp	.+12     	; 0x179a <nwkDataReqTaskHandler+0x14e>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    178e:	09 90       	ld	r0, Y+
    1790:	d8 81       	ld	r29, Y
    1792:	c0 2d       	mov	r28, r0
    1794:	20 97       	sbiw	r28, 0x00	; 0
    1796:	09 f0       	breq	.+2      	; 0x179a <nwkDataReqTaskHandler+0x14e>
    1798:	65 cf       	rjmp	.-310    	; 0x1664 <nwkDataReqTaskHandler+0x18>

		default:
			break;
		}
	}
}
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	08 95       	ret

000017a4 <nwkFrameInit>:

/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    17a4:	e4 e5       	ldi	r30, 0x54	; 84
    17a6:	f3 e0       	ldi	r31, 0x03	; 3
    17a8:	8e ea       	ldi	r24, 0xAE	; 174
    17aa:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    17ac:	10 82       	st	Z, r1
    17ae:	e7 57       	subi	r30, 0x77	; 119
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    17b2:	e8 17       	cp	r30, r24
    17b4:	f9 07       	cpc	r31, r25
    17b6:	d1 f7       	brne	.-12     	; 0x17ac <nwkFrameInit+0x8>
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
	}
}
    17b8:	08 95       	ret

000017ba <nwkFrameAlloc>:
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    17ba:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <nwkFrameFrames>
    17be:	88 23       	and	r24, r24
    17c0:	49 f0       	breq	.+18     	; 0x17d4 <nwkFrameAlloc+0x1a>
    17c2:	ed ed       	ldi	r30, 0xDD	; 221
    17c4:	f3 e0       	ldi	r31, 0x03	; 3
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	ac 01       	movw	r20, r24
    17cc:	20 81       	ld	r18, Z
    17ce:	21 11       	cpse	r18, r1
    17d0:	22 c0       	rjmp	.+68     	; 0x1816 <nwkFrameAlloc+0x5c>
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <nwkFrameAlloc+0x1e>
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	50 e0       	ldi	r21, 0x00	; 0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    17d8:	69 e8       	ldi	r22, 0x89	; 137
    17da:	64 9f       	mul	r22, r20
    17dc:	90 01       	movw	r18, r0
    17de:	65 9f       	mul	r22, r21
    17e0:	30 0d       	add	r19, r0
    17e2:	11 24       	eor	r1, r1
    17e4:	c9 01       	movw	r24, r18
    17e6:	8c 5a       	subi	r24, 0xAC	; 172
    17e8:	9c 4f       	sbci	r25, 0xFC	; 252
    17ea:	fc 01       	movw	r30, r24
    17ec:	11 92       	st	Z+, r1
    17ee:	6a 95       	dec	r22
    17f0:	e9 f7       	brne	.-6      	; 0x17ec <nwkFrameAlloc+0x32>
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    17f2:	40 e1       	ldi	r20, 0x10	; 16
    17f4:	fc 01       	movw	r30, r24
    17f6:	41 83       	std	Z+1, r20	; 0x01
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    17f8:	ef 57       	subi	r30, 0x7F	; 127
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	2a 59       	subi	r18, 0x9A	; 154
    17fe:	3c 4f       	sbci	r19, 0xFC	; 252
    1800:	31 83       	std	Z+1, r19	; 0x01
    1802:	20 83       	st	Z, r18
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    1804:	ec eb       	ldi	r30, 0xBC	; 188
    1806:	fe e0       	ldi	r31, 0x0E	; 14
    1808:	26 a9       	ldd	r18, Z+54	; 0x36
    180a:	37 a9       	ldd	r19, Z+55	; 0x37
    180c:	2f 5f       	subi	r18, 0xFF	; 255
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	37 ab       	std	Z+55, r19	; 0x37
    1812:	26 ab       	std	Z+54, r18	; 0x36
			return &nwkFrameFrames[i];
    1814:	08 95       	ret
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	e7 57       	subi	r30, 0x77	; 119
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    181c:	8a 30       	cpi	r24, 0x0A	; 10
    181e:	91 05       	cpc	r25, r1
    1820:	a1 f6       	brne	.-88     	; 0x17ca <nwkFrameAlloc+0x10>
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
}
    1826:	08 95       	ret

00001828 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    1828:	fc 01       	movw	r30, r24
    182a:	10 82       	st	Z, r1
	nwkIb.lock--;
    182c:	ec eb       	ldi	r30, 0xBC	; 188
    182e:	fe e0       	ldi	r31, 0x0E	; 14
    1830:	86 a9       	ldd	r24, Z+54	; 0x36
    1832:	97 a9       	ldd	r25, Z+55	; 0x37
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	97 ab       	std	Z+55, r25	; 0x37
    1838:	86 ab       	std	Z+54, r24	; 0x36
    183a:	08 95       	ret

0000183c <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	41 f0       	breq	.+16     	; 0x1850 <nwkFrameNext+0x14>
		frame = nwkFrameFrames;
	} else {
		frame++;
    1840:	fc 01       	movw	r30, r24
    1842:	e7 57       	subi	r30, 0x77	; 119
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1846:	88 e0       	ldi	r24, 0x08	; 8
    1848:	ee 3a       	cpi	r30, 0xAE	; 174
    184a:	f8 07       	cpc	r31, r24
    184c:	18 f0       	brcs	.+6      	; 0x1854 <nwkFrameNext+0x18>
    184e:	12 c0       	rjmp	.+36     	; 0x1874 <nwkFrameNext+0x38>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    1850:	e4 e5       	ldi	r30, 0x54	; 84
    1852:	f3 e0       	ldi	r31, 0x03	; 3
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    1854:	80 81       	ld	r24, Z
    1856:	88 23       	and	r24, r24
    1858:	21 f0       	breq	.+8      	; 0x1862 <nwkFrameNext+0x26>
    185a:	0f c0       	rjmp	.+30     	; 0x187a <nwkFrameNext+0x3e>
    185c:	80 81       	ld	r24, Z
    185e:	81 11       	cpse	r24, r1
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <nwkFrameNext+0x44>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1862:	e7 57       	subi	r30, 0x77	; 119
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	88 e0       	ldi	r24, 0x08	; 8
    1868:	ee 3a       	cpi	r30, 0xAE	; 174
    186a:	f8 07       	cpc	r31, r24
    186c:	b8 f3       	brcs	.-18     	; 0x185c <nwkFrameNext+0x20>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	08 95       	ret
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	08 95       	ret
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    187a:	8e 2f       	mov	r24, r30
    187c:	9f 2f       	mov	r25, r31
    187e:	08 95       	ret
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1880:	8e 2f       	mov	r24, r30
    1882:	9f 2f       	mov	r25, r31
			return frame;
		}
	}

	return NULL;
}
    1884:	08 95       	ret

00001886 <nwkFrameCommandInit>:
/*************************************************************************//**
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    1886:	fc 01       	movw	r30, r24
	frame->tx.status = NWK_SUCCESS_STATUS;
    1888:	dc 01       	movw	r26, r24
    188a:	ad 57       	subi	r26, 0x7D	; 125
    188c:	bf 4f       	sbci	r27, 0xFF	; 255
    188e:	1c 92       	st	X, r1
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1890:	ac eb       	ldi	r26, 0xBC	; 188
    1892:	be e0       	ldi	r27, 0x0E	; 14
    1894:	14 96       	adiw	r26, 0x04	; 4
    1896:	9c 91       	ld	r25, X
    1898:	14 97       	sbiw	r26, 0x04	; 4
    189a:	9f 5f       	subi	r25, 0xFF	; 255
    189c:	14 96       	adiw	r26, 0x04	; 4
    189e:	9c 93       	st	X, r25
    18a0:	14 97       	sbiw	r26, 0x04	; 4
    18a2:	94 87       	std	Z+12, r25	; 0x0c
	frame->header.nwkSrcAddr = nwkIb.addr;
    18a4:	8d 91       	ld	r24, X+
    18a6:	9c 91       	ld	r25, X
    18a8:	96 87       	std	Z+14, r25	; 0x0e
    18aa:	85 87       	std	Z+13, r24	; 0x0d
    18ac:	08 95       	ret

000018ae <nwkRouteInit>:
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteTable(void)
{
	return nwkRouteTable;
}
    18ae:	af ea       	ldi	r26, 0xAF	; 175
    18b0:	b8 e0       	ldi	r27, 0x08	; 8
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	4f ef       	ldi	r20, 0xFF	; 255
    18b8:	5f ef       	ldi	r21, 0xFF	; 255
    18ba:	11 96       	adiw	r26, 0x01	; 1
    18bc:	5c 93       	st	X, r21
    18be:	4e 93       	st	-X, r20
    18c0:	fc 01       	movw	r30, r24
    18c2:	ee 0f       	add	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	ee 0f       	add	r30, r30
    18c8:	ff 1f       	adc	r31, r31
    18ca:	ee 0f       	add	r30, r30
    18cc:	ff 1f       	adc	r31, r31
    18ce:	e8 1b       	sub	r30, r24
    18d0:	f9 0b       	sbc	r31, r25
    18d2:	e2 55       	subi	r30, 0x52	; 82
    18d4:	f7 4f       	sbci	r31, 0xF7	; 247
    18d6:	20 81       	ld	r18, Z
    18d8:	2e 7f       	andi	r18, 0xFE	; 254
    18da:	20 83       	st	Z, r18
    18dc:	14 96       	adiw	r26, 0x04	; 4
    18de:	1c 92       	st	X, r1
    18e0:	14 97       	sbiw	r26, 0x04	; 4
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	17 96       	adiw	r26, 0x07	; 7
    18e6:	84 36       	cpi	r24, 0x64	; 100
    18e8:	91 05       	cpc	r25, r1
    18ea:	39 f7       	brne	.-50     	; 0x18ba <nwkRouteInit+0xc>
    18ec:	08 95       	ret

000018ee <NWK_RouteFindEntry>:
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	ef ea       	ldi	r30, 0xAF	; 175
    18f8:	f8 e0       	ldi	r31, 0x08	; 8
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	06 2f       	mov	r16, r22
    1900:	10 e0       	ldi	r17, 0x00	; 0
    1902:	40 81       	ld	r20, Z
    1904:	51 81       	ldd	r21, Z+1	; 0x01
    1906:	48 17       	cp	r20, r24
    1908:	59 07       	cpc	r21, r25
    190a:	b1 f4       	brne	.+44     	; 0x1938 <NWK_RouteFindEntry+0x4a>
    190c:	d9 01       	movw	r26, r18
    190e:	aa 0f       	add	r26, r26
    1910:	bb 1f       	adc	r27, r27
    1912:	aa 0f       	add	r26, r26
    1914:	bb 1f       	adc	r27, r27
    1916:	aa 0f       	add	r26, r26
    1918:	bb 1f       	adc	r27, r27
    191a:	a2 1b       	sub	r26, r18
    191c:	b3 0b       	sbc	r27, r19
    191e:	a2 55       	subi	r26, 0x52	; 82
    1920:	b7 4f       	sbci	r27, 0xF7	; 247
    1922:	4c 91       	ld	r20, X
    1924:	46 95       	lsr	r20
    1926:	41 70       	andi	r20, 0x01	; 1
    1928:	c4 2f       	mov	r28, r20
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	d4 2f       	mov	r29, r20
    192e:	c0 17       	cp	r28, r16
    1930:	d1 07       	cpc	r29, r17
    1932:	11 f4       	brne	.+4      	; 0x1938 <NWK_RouteFindEntry+0x4a>
    1934:	cd 01       	movw	r24, r26
    1936:	08 c0       	rjmp	.+16     	; 0x1948 <NWK_RouteFindEntry+0x5a>
    1938:	2f 5f       	subi	r18, 0xFF	; 255
    193a:	3f 4f       	sbci	r19, 0xFF	; 255
    193c:	37 96       	adiw	r30, 0x07	; 7
    193e:	24 36       	cpi	r18, 0x64	; 100
    1940:	31 05       	cpc	r19, r1
    1942:	f9 f6       	brne	.-66     	; 0x1902 <NWK_RouteFindEntry+0x14>
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	08 95       	ret

00001952 <NWK_RouteNewEntry>:
    1952:	a0 e0       	ldi	r26, 0x00	; 0
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ee ea       	ldi	r30, 0xAE	; 174
    1958:	f8 e0       	ldi	r31, 0x08	; 8
    195a:	80 81       	ld	r24, Z
    195c:	80 fd       	sbrc	r24, 0
    195e:	0d c0       	rjmp	.+26     	; 0x197a <NWK_RouteNewEntry+0x28>
    1960:	85 81       	ldd	r24, Z+5	; 0x05
    1962:	88 23       	and	r24, r24
    1964:	81 f0       	breq	.+32     	; 0x1986 <NWK_RouteNewEntry+0x34>
    1966:	10 97       	sbiw	r26, 0x00	; 0
    1968:	39 f0       	breq	.+14     	; 0x1978 <NWK_RouteNewEntry+0x26>
    196a:	15 96       	adiw	r26, 0x05	; 5
    196c:	9c 91       	ld	r25, X
    196e:	15 97       	sbiw	r26, 0x05	; 5
    1970:	89 17       	cp	r24, r25
    1972:	18 f4       	brcc	.+6      	; 0x197a <NWK_RouteNewEntry+0x28>
    1974:	df 01       	movw	r26, r30
    1976:	01 c0       	rjmp	.+2      	; 0x197a <NWK_RouteNewEntry+0x28>
    1978:	df 01       	movw	r26, r30
    197a:	37 96       	adiw	r30, 0x07	; 7
    197c:	8b e0       	ldi	r24, 0x0B	; 11
    197e:	ea 36       	cpi	r30, 0x6A	; 106
    1980:	f8 07       	cpc	r31, r24
    1982:	59 f7       	brne	.-42     	; 0x195a <NWK_RouteNewEntry+0x8>
    1984:	fd 01       	movw	r30, r26
    1986:	80 81       	ld	r24, Z
    1988:	8d 70       	andi	r24, 0x0D	; 13
    198a:	80 63       	ori	r24, 0x30	; 48
    198c:	80 83       	st	Z, r24
    198e:	80 e8       	ldi	r24, 0x80	; 128
    1990:	85 83       	std	Z+5, r24	; 0x05
    1992:	cf 01       	movw	r24, r30
    1994:	08 95       	ret

00001996 <NWK_RouteFreeEntry>:
    1996:	fc 01       	movw	r30, r24
    1998:	80 81       	ld	r24, Z
    199a:	80 fd       	sbrc	r24, 0
    199c:	05 c0       	rjmp	.+10     	; 0x19a8 <NWK_RouteFreeEntry+0x12>
    199e:	8f ef       	ldi	r24, 0xFF	; 255
    19a0:	9f ef       	ldi	r25, 0xFF	; 255
    19a2:	92 83       	std	Z+2, r25	; 0x02
    19a4:	81 83       	std	Z+1, r24	; 0x01
    19a6:	15 82       	std	Z+5, r1	; 0x05
    19a8:	08 95       	ret

000019aa <NWK_RouteNextHop>:
    19aa:	a1 df       	rcall	.-190    	; 0x18ee <NWK_RouteFindEntry>
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	21 f0       	breq	.+8      	; 0x19b8 <NWK_RouteNextHop+0xe>
    19b0:	fc 01       	movw	r30, r24
    19b2:	83 81       	ldd	r24, Z+3	; 0x03
    19b4:	94 81       	ldd	r25, Z+4	; 0x04
    19b6:	08 95       	ret
    19b8:	8f ef       	ldi	r24, 0xFF	; 255
    19ba:	9f ef       	ldi	r25, 0xFF	; 255
    19bc:	08 95       	ret

000019be <nwkRouteUpdateEntry>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteUpdateEntry(uint16_t dst, uint8_t multicast, uint16_t nextHop,
		uint8_t lqi)
{
    19be:	ef 92       	push	r14
    19c0:	ff 92       	push	r15
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	8c 01       	movw	r16, r24
    19cc:	c6 2f       	mov	r28, r22
    19ce:	7a 01       	movw	r14, r20
    19d0:	d2 2f       	mov	r29, r18
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    19d2:	8d df       	rcall	.-230    	; 0x18ee <NWK_RouteFindEntry>
    19d4:	fc 01       	movw	r30, r24

	if (NULL == entry) {
    19d6:	89 2b       	or	r24, r25
		entry = NWK_RouteNewEntry();
    19d8:	11 f4       	brne	.+4      	; 0x19de <nwkRouteUpdateEntry+0x20>
    19da:	bb df       	rcall	.-138    	; 0x1952 <NWK_RouteNewEntry>
    19dc:	fc 01       	movw	r30, r24
	}

	entry->dstAddr = dst;
    19de:	12 83       	std	Z+2, r17	; 0x02
    19e0:	01 83       	std	Z+1, r16	; 0x01
	entry->nextHopAddr = nextHop;
    19e2:	f4 82       	std	Z+4, r15	; 0x04
    19e4:	e3 82       	std	Z+3, r14	; 0x03
	entry->multicast = multicast;
    19e6:	80 81       	ld	r24, Z
    19e8:	c0 fb       	bst	r28, 0
    19ea:	81 f9       	bld	r24, 1
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    19ec:	8f 70       	andi	r24, 0x0F	; 15
    19ee:	80 63       	ori	r24, 0x30	; 48
    19f0:	80 83       	st	Z, r24
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    19f2:	80 e8       	ldi	r24, 0x80	; 128
    19f4:	85 83       	std	Z+5, r24	; 0x05
	entry->lqi = lqi;
    19f6:	d6 83       	std	Z+6, r29	; 0x06
}
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	1f 91       	pop	r17
    19fe:	0f 91       	pop	r16
    1a00:	ff 90       	pop	r15
    1a02:	ef 90       	pop	r14
    1a04:	08 95       	ret

00001a06 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    1a06:	73 df       	rcall	.-282    	; 0x18ee <NWK_RouteFindEntry>
	if (entry) {
    1a08:	00 97       	sbiw	r24, 0x00	; 0
		NWK_RouteFreeEntry(entry);
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <nwkRouteRemove+0x8>
    1a0c:	c4 cf       	rjmp	.-120    	; 0x1996 <NWK_RouteFreeEntry>
    1a0e:	08 95       	ret

00001a10 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    1a10:	08 95       	ret

00001a12 <nwkRouteFrameSent>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	fc 01       	movw	r30, r24
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    1a18:	87 85       	ldd	r24, Z+15	; 0x0f
    1a1a:	90 89       	ldd	r25, Z+16	; 0x10
    1a1c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a1e:	2f ef       	ldi	r18, 0xFF	; 255
    1a20:	92 07       	cpc	r25, r18
    1a22:	d9 f1       	breq	.+118    	; 0x1a9a <nwkRouteFrameSent+0x88>
    1a24:	ef 01       	movw	r28, r30
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    1a26:	63 85       	ldd	r22, Z+11	; 0x0b
    1a28:	63 fb       	bst	r22, 3
    1a2a:	66 27       	eor	r22, r22
    1a2c:	60 f9       	bld	r22, 0

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    1a2e:	5f df       	rcall	.-322    	; 0x18ee <NWK_RouteFindEntry>
    1a30:	dc 01       	movw	r26, r24
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    1a32:	89 2b       	or	r24, r25
    1a34:	91 f1       	breq	.+100    	; 0x1a9a <nwkRouteFrameSent+0x88>
    1a36:	8c 91       	ld	r24, X
    1a38:	80 fd       	sbrc	r24, 0
    1a3a:	2f c0       	rjmp	.+94     	; 0x1a9a <nwkRouteFrameSent+0x88>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	ed 57       	subi	r30, 0x7D	; 125
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	80 81       	ld	r24, Z
    1a44:	81 11       	cpse	r24, r1
    1a46:	19 c0       	rjmp	.+50     	; 0x1a7a <nwkRouteFrameSent+0x68>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1a48:	8c 91       	ld	r24, X
    1a4a:	8f 70       	andi	r24, 0x0F	; 15
    1a4c:	80 63       	ori	r24, 0x30	; 48
    1a4e:	8c 93       	st	X, r24

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    1a50:	15 96       	adiw	r26, 0x05	; 5
    1a52:	8c 91       	ld	r24, X
    1a54:	15 97       	sbiw	r26, 0x05	; 5
    1a56:	8f 5f       	subi	r24, 0xFF	; 255
    1a58:	15 96       	adiw	r26, 0x05	; 5
    1a5a:	8c 93       	st	X, r24
    1a5c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a5e:	e9 f4       	brne	.+58     	; 0x1a9a <nwkRouteFrameSent+0x88>
    1a60:	e3 eb       	ldi	r30, 0xB3	; 179
    1a62:	f8 e0       	ldi	r31, 0x08	; 8
    1a64:	2f e6       	ldi	r18, 0x6F	; 111
    1a66:	3b e0       	ldi	r19, 0x0B	; 11
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    1a68:	80 81       	ld	r24, Z
    1a6a:	86 95       	lsr	r24
    1a6c:	8f 5f       	subi	r24, 0xFF	; 255
    1a6e:	80 83       	st	Z, r24
    1a70:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    1a72:	e2 17       	cp	r30, r18
    1a74:	f3 07       	cpc	r31, r19
    1a76:	c1 f7       	brne	.-16     	; 0x1a68 <nwkRouteFrameSent+0x56>
    1a78:	10 c0       	rjmp	.+32     	; 0x1a9a <nwkRouteFrameSent+0x88>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    1a7a:	9c 91       	ld	r25, X
    1a7c:	89 2f       	mov	r24, r25
    1a7e:	82 95       	swap	r24
    1a80:	8f 70       	andi	r24, 0x0F	; 15
    1a82:	81 5f       	subi	r24, 0xF1	; 241
    1a84:	8f 70       	andi	r24, 0x0F	; 15
    1a86:	28 2f       	mov	r18, r24
    1a88:	22 95       	swap	r18
    1a8a:	20 7f       	andi	r18, 0xF0	; 240
    1a8c:	9f 70       	andi	r25, 0x0F	; 15
    1a8e:	92 2b       	or	r25, r18
    1a90:	9c 93       	st	X, r25
    1a92:	81 11       	cpse	r24, r1
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <nwkRouteFrameSent+0x88>
			NWK_RouteFreeEntry(entry);
    1a96:	cd 01       	movw	r24, r26
    1a98:	7e df       	rcall	.-260    	; 0x1996 <NWK_RouteFreeEntry>
		}
	}
}
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	08 95       	ret

00001aa0 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	fc 01       	movw	r30, r24
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    1aa6:	87 85       	ldd	r24, Z+15	; 0x0f
    1aa8:	90 89       	ldd	r25, Z+16	; 0x10
    1aaa:	8f 3f       	cpi	r24, 0xFF	; 255
    1aac:	2f ef       	ldi	r18, 0xFF	; 255
    1aae:	92 07       	cpc	r25, r18
    1ab0:	29 f4       	brne	.+10     	; 0x1abc <nwkRoutePrepareTx+0x1c>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    1ab2:	8f ef       	ldi	r24, 0xFF	; 255
    1ab4:	9f ef       	ldi	r25, 0xFF	; 255
    1ab6:	90 87       	std	Z+8, r25	; 0x08
    1ab8:	87 83       	std	Z+7, r24	; 0x07
    1aba:	12 c0       	rjmp	.+36     	; 0x1ae0 <nwkRoutePrepareTx+0x40>
	} else if (header->nwkFcf.linkLocal) {
    1abc:	23 85       	ldd	r18, Z+11	; 0x0b
    1abe:	22 ff       	sbrs	r18, 2
    1ac0:	03 c0       	rjmp	.+6      	; 0x1ac8 <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
    1ac2:	90 87       	std	Z+8, r25	; 0x08
    1ac4:	87 83       	std	Z+7, r24	; 0x07
    1ac6:	0c c0       	rjmp	.+24     	; 0x1ae0 <nwkRoutePrepareTx+0x40>
    1ac8:	ef 01       	movw	r28, r30
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    1aca:	63 85       	ldd	r22, Z+11	; 0x0b
    1acc:	63 fb       	bst	r22, 3
    1ace:	66 27       	eor	r22, r22
    1ad0:	60 f9       	bld	r22, 0
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    1ad2:	6b df       	rcall	.-298    	; 0x19aa <NWK_RouteNextHop>
    1ad4:	98 87       	std	Y+8, r25	; 0x08
    1ad6:	8f 83       	std	Y+7, r24	; 0x07
				header->nwkFcf.multicast);

  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
    1ad8:	01 96       	adiw	r24, 0x01	; 1
    1ada:	11 f4       	brne	.+4      	; 0x1ae0 <nwkRoutePrepareTx+0x40>
			nwkRouteDiscoveryRequest(frame);
    1adc:	ce 01       	movw	r24, r28
    1ade:	d2 d1       	rcall	.+932    	; 0x1e84 <nwkRouteDiscoveryRequest>
		}
  #endif
	}
}
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	08 95       	ret

00001ae6 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    1ae6:	af 92       	push	r10
    1ae8:	bf 92       	push	r11
    1aea:	cf 92       	push	r12
    1aec:	df 92       	push	r13
    1aee:	ef 92       	push	r14
    1af0:	ff 92       	push	r15
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	ec 01       	movw	r28, r24
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
    1afa:	1b 85       	ldd	r17, Y+11	; 0x0b
    1afc:	13 fb       	bst	r17, 3
    1afe:	11 27       	eor	r17, r17
    1b00:	10 f9       	bld	r17, 0
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    1b02:	cf 84       	ldd	r12, Y+15	; 0x0f
    1b04:	d8 88       	ldd	r13, Y+16	; 0x10
    1b06:	61 2f       	mov	r22, r17
    1b08:	c6 01       	movw	r24, r12
    1b0a:	4f df       	rcall	.-354    	; 0x19aa <NWK_RouteNextHop>
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	59 f0       	breq	.+22     	; 0x1b26 <nwkRouteFrame+0x40>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    1b10:	fe 01       	movw	r30, r28
    1b12:	e9 57       	subi	r30, 0x79	; 121
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	11 82       	std	Z+1, r1	; 0x01
    1b18:	10 82       	st	Z, r1
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    1b1a:	31 97       	sbiw	r30, 0x01	; 1
    1b1c:	82 e0       	ldi	r24, 0x02	; 2
    1b1e:	80 83       	st	Z, r24
		nwkTxFrame(frame);
    1b20:	ce 01       	movw	r24, r28
    1b22:	7e d7       	rcall	.+3836   	; 0x2a20 <nwkTxFrame>
    1b24:	22 c0       	rjmp	.+68     	; 0x1b6a <nwkRouteFrame+0x84>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    1b26:	ad 84       	ldd	r10, Y+13	; 0x0d
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    1b28:	be 84       	ldd	r11, Y+14	; 0x0e
    1b2a:	47 de       	rcall	.-882    	; 0x17ba <nwkFrameAlloc>
    1b2c:	7c 01       	movw	r14, r24
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}

	nwkFrameCommandInit(frame);
    1b30:	d1 f0       	breq	.+52     	; 0x1b66 <nwkRouteFrame+0x80>
    1b32:	a9 de       	rcall	.-686    	; 0x1886 <nwkFrameCommandInit>

	frame->size += sizeof(NwkCommandRouteError_t);
    1b34:	f7 01       	movw	r30, r14
    1b36:	81 81       	ldd	r24, Z+1	; 0x01
    1b38:	8a 5f       	subi	r24, 0xFA	; 250
    1b3a:	81 83       	std	Z+1, r24	; 0x01
	frame->tx.confirm = NULL;
    1b3c:	e9 57       	subi	r30, 0x79	; 121
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	11 82       	std	Z+1, r1	; 0x01
    1b42:	10 82       	st	Z, r1

	frame->header.nwkDstAddr = src;
    1b44:	f7 01       	movw	r30, r14
    1b46:	b0 8a       	std	Z+16, r11	; 0x10
    1b48:	a7 86       	std	Z+15, r10	; 0x0f

	command = (NwkCommandRouteError_t *)frame->payload;
    1b4a:	ef 57       	subi	r30, 0x7F	; 127
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	01 90       	ld	r0, Z+
    1b50:	f0 81       	ld	r31, Z
    1b52:	e0 2d       	mov	r30, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	80 83       	st	Z, r24
	command->srcAddr = src;
    1b58:	b2 82       	std	Z+2, r11	; 0x02
    1b5a:	a1 82       	std	Z+1, r10	; 0x01
	command->dstAddr = dst;
    1b5c:	d4 82       	std	Z+4, r13	; 0x04
	command->multicast = multicast;

	nwkTxFrame(frame);
    1b5e:	c3 82       	std	Z+3, r12	; 0x03
    1b60:	15 83       	std	Z+5, r17	; 0x05
    1b62:	c7 01       	movw	r24, r14
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    1b64:	5d d7       	rcall	.+3770   	; 0x2a20 <nwkTxFrame>
    1b66:	ce 01       	movw	r24, r28
    1b68:	5f de       	rcall	.-834    	; 0x1828 <nwkFrameFree>
	}
}
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	1f 91       	pop	r17
    1b70:	ff 90       	pop	r15
    1b72:	ef 90       	pop	r14
    1b74:	df 90       	pop	r13
    1b76:	cf 90       	pop	r12
    1b78:	bf 90       	pop	r11
    1b7a:	af 90       	pop	r10
    1b7c:	08 95       	ret

00001b7e <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    1b7e:	fc 01       	movw	r30, r24
    1b80:	21 85       	ldd	r18, Z+9	; 0x09
    1b82:	26 30       	cpi	r18, 0x06	; 6
    1b84:	49 f4       	brne	.+18     	; 0x1b98 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    1b86:	07 80       	ldd	r0, Z+7	; 0x07
    1b88:	f0 85       	ldd	r31, Z+8	; 0x08
    1b8a:	e0 2d       	mov	r30, r0

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    1b8c:	65 81       	ldd	r22, Z+5	; 0x05
    1b8e:	83 81       	ldd	r24, Z+3	; 0x03
    1b90:	94 81       	ldd	r25, Z+4	; 0x04
    1b92:	39 df       	rcall	.-398    	; 0x1a06 <nwkRouteRemove>

	return true;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
    1b98:	80 e0       	ldi	r24, 0x00	; 0
	}

	nwkRouteRemove(command->dstAddr, command->multicast);

	return true;
}
    1b9a:	08 95       	ret

00001b9c <nwkRouteDiscoveryFindEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	e7 e7       	ldi	r30, 0x77	; 119
    1ba6:	fb e0       	ldi	r31, 0x0B	; 11
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (nwkRouteDiscoveryTable[i].timeout > 0 &&
    1bac:	89 01       	movw	r16, r18
    1bae:	a1 85       	ldd	r26, Z+9	; 0x09
    1bb0:	b2 85       	ldd	r27, Z+10	; 0x0a
    1bb2:	ab 2b       	or	r26, r27
    1bb4:	b1 f0       	breq	.+44     	; 0x1be2 <nwkRouteDiscoveryFindEntry+0x46>
    1bb6:	a0 81       	ld	r26, Z
    1bb8:	b1 81       	ldd	r27, Z+1	; 0x01
    1bba:	a8 17       	cp	r26, r24
    1bbc:	b9 07       	cpc	r27, r25
    1bbe:	89 f4       	brne	.+34     	; 0x1be2 <nwkRouteDiscoveryFindEntry+0x46>
				nwkRouteDiscoveryTable[i].srcAddr == src &&
    1bc0:	a2 81       	ldd	r26, Z+2	; 0x02
    1bc2:	b3 81       	ldd	r27, Z+3	; 0x03
    1bc4:	a6 17       	cp	r26, r22
    1bc6:	b7 07       	cpc	r27, r23
    1bc8:	61 f4       	brne	.+24     	; 0x1be2 <nwkRouteDiscoveryFindEntry+0x46>
				nwkRouteDiscoveryTable[i].dstAddr == dst &&
    1bca:	54 81       	ldd	r21, Z+4	; 0x04
    1bcc:	54 13       	cpse	r21, r20
    1bce:	09 c0       	rjmp	.+18     	; 0x1be2 <nwkRouteDiscoveryFindEntry+0x46>
				nwkRouteDiscoveryTable[i].multicast ==
				multicast) {
			return &nwkRouteDiscoveryTable[i];
    1bd0:	2b e0       	ldi	r18, 0x0B	; 11
    1bd2:	20 9f       	mul	r18, r16
    1bd4:	c0 01       	movw	r24, r0
    1bd6:	21 9f       	mul	r18, r17
    1bd8:	90 0d       	add	r25, r0
    1bda:	11 24       	eor	r1, r1
    1bdc:	89 58       	subi	r24, 0x89	; 137
    1bde:	94 4f       	sbci	r25, 0xF4	; 244
    1be0:	08 c0       	rjmp	.+16     	; 0x1bf2 <nwkRouteDiscoveryFindEntry+0x56>
    1be2:	2f 5f       	subi	r18, 0xFF	; 255
    1be4:	3f 4f       	sbci	r19, 0xFF	; 255
    1be6:	3b 96       	adiw	r30, 0x0b	; 11
/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    1be8:	25 30       	cpi	r18, 0x05	; 5
    1bea:	31 05       	cpc	r19, r1
    1bec:	f9 f6       	brne	.-66     	; 0x1bac <nwkRouteDiscoveryFindEntry+0x10>
				multicast) {
			return &nwkRouteDiscoveryTable[i];
		}
	}

	return NULL;
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
}
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	08 95       	ret

00001bfc <nwkRouteDiscoveryNewEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
	NwkRouteDiscoveryTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (0 == nwkRouteDiscoveryTable[i].timeout) {
    1c00:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <nwkRouteDiscoveryTable+0x9>
    1c04:	90 91 81 0b 	lds	r25, 0x0B81	; 0x800b81 <nwkRouteDiscoveryTable+0xa>
    1c08:	89 2b       	or	r24, r25
    1c0a:	51 f0       	breq	.+20     	; 0x1c20 <nwkRouteDiscoveryNewEntry+0x24>
    1c0c:	eb e8       	ldi	r30, 0x8B	; 139
    1c0e:	fb e0       	ldi	r31, 0x0B	; 11
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	ac 01       	movw	r20, r24
    1c16:	20 81       	ld	r18, Z
    1c18:	31 81       	ldd	r19, Z+1	; 0x01
    1c1a:	23 2b       	or	r18, r19
    1c1c:	a9 f4       	brne	.+42     	; 0x1c48 <nwkRouteDiscoveryNewEntry+0x4c>
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <nwkRouteDiscoveryNewEntry+0x28>
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	50 e0       	ldi	r21, 0x00	; 0
			entry = &nwkRouteDiscoveryTable[i];
    1c24:	8b e0       	ldi	r24, 0x0B	; 11
    1c26:	84 9f       	mul	r24, r20
    1c28:	e0 01       	movw	r28, r0
    1c2a:	85 9f       	mul	r24, r21
    1c2c:	d0 0d       	add	r29, r0
    1c2e:	11 24       	eor	r1, r1
    1c30:	c9 58       	subi	r28, 0x89	; 137
    1c32:	d4 4f       	sbci	r29, 0xF4	; 244
			break;
		}
	}

	if (entry) {
		entry->forwardLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    1c34:	1f 82       	std	Y+7, r1	; 0x07
		entry->reverseLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    1c36:	18 86       	std	Y+8, r1	; 0x08
		entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
    1c38:	88 ee       	ldi	r24, 0xE8	; 232
    1c3a:	93 e0       	ldi	r25, 0x03	; 3
    1c3c:	9a 87       	std	Y+10, r25	; 0x0a
    1c3e:	89 87       	std	Y+9, r24	; 0x09
		SYS_TimerStart(&nwkRouteDiscoveryTimer);
    1c40:	8a e6       	ldi	r24, 0x6A	; 106
    1c42:	9b e0       	ldi	r25, 0x0B	; 11
    1c44:	d8 da       	rcall	.-2640   	; 0x11f6 <SYS_TimerStart>
    1c46:	07 c0       	rjmp	.+14     	; 0x1c56 <nwkRouteDiscoveryNewEntry+0x5a>
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	3b 96       	adiw	r30, 0x0b	; 11
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
	NwkRouteDiscoveryTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    1c4c:	85 30       	cpi	r24, 0x05	; 5
    1c4e:	91 05       	cpc	r25, r1
    1c50:	09 f7       	brne	.-62     	; 0x1c14 <nwkRouteDiscoveryNewEntry+0x18>

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
	NwkRouteDiscoveryTableEntry_t *entry = NULL;
    1c52:	c0 e0       	ldi	r28, 0x00	; 0
    1c54:	d0 e0       	ldi	r29, 0x00	; 0
		entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
		SYS_TimerStart(&nwkRouteDiscoveryTimer);
	}

	return entry;
}
    1c56:	ce 01       	movw	r24, r28
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	08 95       	ret

00001c5e <nwkRouteDiscoveryTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
    1c5e:	3f 92       	push	r3
    1c60:	4f 92       	push	r4
    1c62:	5f 92       	push	r5
    1c64:	6f 92       	push	r6
    1c66:	7f 92       	push	r7
    1c68:	8f 92       	push	r8
    1c6a:	9f 92       	push	r9
    1c6c:	af 92       	push	r10
    1c6e:	bf 92       	push	r11
    1c70:	cf 92       	push	r12
    1c72:	df 92       	push	r13
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	5c 01       	movw	r10, r24
    1c82:	c7 e7       	ldi	r28, 0x77	; 119
    1c84:	db e0       	ldi	r29, 0x0B	; 11
    1c86:	0f 2e       	mov	r0, r31
    1c88:	fe ea       	ldi	r31, 0xAE	; 174
    1c8a:	ef 2e       	mov	r14, r31
    1c8c:	fb e0       	ldi	r31, 0x0B	; 11
    1c8e:	ff 2e       	mov	r15, r31
    1c90:	f0 2d       	mov	r31, r0
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;
    1c92:	41 2c       	mov	r4, r1
			entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
			restart = true;
		} else {
			entry->timeout = 0;

			if (entry->srcAddr == nwkIb.addr) {
    1c94:	0f 2e       	mov	r0, r31
    1c96:	fc eb       	ldi	r31, 0xBC	; 188
    1c98:	cf 2e       	mov	r12, r31
    1c9a:	fe e0       	ldi	r31, 0x0E	; 14
    1c9c:	df 2e       	mov	r13, r31
    1c9e:	f0 2d       	mov	r31, r0
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;
    1ca0:	51 2c       	mov	r5, r1
    1ca2:	61 2c       	mov	r6, r1
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		entry = &nwkRouteDiscoveryTable[i];

		if (entry->timeout > NWK_ROUTE_DISCOVERY_TIMER_INTERVAL) {
			entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
			restart = true;
    1ca4:	77 24       	eor	r7, r7
    1ca6:	73 94       	inc	r7
    1ca8:	8e 01       	movw	r16, r28
	bool restart = false;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		entry = &nwkRouteDiscoveryTable[i];

		if (entry->timeout > NWK_ROUTE_DISCOVERY_TIMER_INTERVAL) {
    1caa:	89 85       	ldd	r24, Y+9	; 0x09
    1cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cae:	85 36       	cpi	r24, 0x65	; 101
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	30 f0       	brcs	.+12     	; 0x1cc0 <nwkRouteDiscoveryTimerHandler+0x62>
			entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    1cb4:	84 56       	subi	r24, 0x64	; 100
    1cb6:	91 09       	sbc	r25, r1
    1cb8:	9a 87       	std	Y+10, r25	; 0x0a
    1cba:	89 87       	std	Y+9, r24	; 0x09
			restart = true;
    1cbc:	47 2c       	mov	r4, r7
    1cbe:	30 c0       	rjmp	.+96     	; 0x1d20 <nwkRouteDiscoveryTimerHandler+0xc2>
		} else {
			entry->timeout = 0;
    1cc0:	1a 86       	std	Y+10, r1	; 0x0a
    1cc2:	19 86       	std	Y+9, r1	; 0x09

			if (entry->srcAddr == nwkIb.addr) {
    1cc4:	28 81       	ld	r18, Y
    1cc6:	39 81       	ldd	r19, Y+1	; 0x01
    1cc8:	f6 01       	movw	r30, r12
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
    1cce:	28 17       	cp	r18, r24
    1cd0:	39 07       	cpc	r19, r25
    1cd2:	31 f5       	brne	.+76     	; 0x1d20 <nwkRouteDiscoveryTimerHandler+0xc2>
				nwkRouteDiscoveryDone(entry,
						entry->reverseLinkQuality >
    1cd4:	38 84       	ldd	r3, Y+8	; 0x08
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;
    1cd6:	85 2c       	mov	r8, r5
    1cd8:	96 2c       	mov	r9, r6
    1cda:	1d c0       	rjmp	.+58     	; 0x1d16 <nwkRouteDiscoveryTimerHandler+0xb8>

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
    1cdc:	f4 01       	movw	r30, r8
    1cde:	80 81       	ld	r24, Z
    1ce0:	80 34       	cpi	r24, 0x40	; 64
    1ce2:	c9 f4       	brne	.+50     	; 0x1d16 <nwkRouteDiscoveryTimerHandler+0xb8>
			continue;
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	22 81       	ldd	r18, Z+2	; 0x02
    1ce8:	33 81       	ldd	r19, Z+3	; 0x03
    1cea:	f4 01       	movw	r30, r8
    1cec:	87 85       	ldd	r24, Z+15	; 0x0f
    1cee:	90 89       	ldd	r25, Z+16	; 0x10
    1cf0:	28 17       	cp	r18, r24
    1cf2:	39 07       	cpc	r19, r25
    1cf4:	81 f4       	brne	.+32     	; 0x1d16 <nwkRouteDiscoveryTimerHandler+0xb8>
				entry->multicast !=
				frame->header.nwkFcf.multicast) {
    1cf6:	83 85       	ldd	r24, Z+11	; 0x0b
    1cf8:	83 fb       	bst	r24, 3
    1cfa:	88 27       	eor	r24, r24
    1cfc:	80 f9       	bld	r24, 0
	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
			continue;
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    1cfe:	f8 01       	movw	r30, r16
    1d00:	94 81       	ldd	r25, Z+4	; 0x04
    1d02:	98 13       	cpse	r25, r24
    1d04:	08 c0       	rjmp	.+16     	; 0x1d16 <nwkRouteDiscoveryTimerHandler+0xb8>
				entry->multicast !=
				frame->header.nwkFcf.multicast) {
			continue;
		}

		if (status) {
    1d06:	33 20       	and	r3, r3
    1d08:	19 f0       	breq	.+6      	; 0x1d10 <nwkRouteDiscoveryTimerHandler+0xb2>
			nwkTxFrame(frame);
    1d0a:	c4 01       	movw	r24, r8
    1d0c:	89 d6       	rcall	.+3346   	; 0x2a20 <nwkTxFrame>
    1d0e:	03 c0       	rjmp	.+6      	; 0x1d16 <nwkRouteDiscoveryTimerHandler+0xb8>
		} else {
			nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    1d10:	61 e1       	ldi	r22, 0x11	; 17
    1d12:	c4 01       	movw	r24, r8
    1d14:	43 d7       	rcall	.+3718   	; 0x2b9c <nwkTxConfirm>
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1d16:	c4 01       	movw	r24, r8
    1d18:	91 dd       	rcall	.-1246   	; 0x183c <nwkFrameNext>
    1d1a:	4c 01       	movw	r8, r24
    1d1c:	89 2b       	or	r24, r25
    1d1e:	f1 f6       	brne	.-68     	; 0x1cdc <nwkRouteDiscoveryTimerHandler+0x7e>
    1d20:	2b 96       	adiw	r28, 0x0b	; 11
    1d22:	ce 15       	cp	r28, r14
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    1d24:	df 05       	cpc	r29, r15
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <nwkRouteDiscoveryTimerHandler+0xcc>
    1d28:	bf cf       	rjmp	.-130    	; 0x1ca8 <nwkRouteDiscoveryTimerHandler+0x4a>
    1d2a:	44 20       	and	r4, r4
						0);
			}
		}
	}

	if (restart) {
    1d2c:	11 f0       	breq	.+4      	; 0x1d32 <nwkRouteDiscoveryTimerHandler+0xd4>
		SYS_TimerStart(timer);
    1d2e:	c5 01       	movw	r24, r10
    1d30:	62 da       	rcall	.-2876   	; 0x11f6 <SYS_TimerStart>
    1d32:	df 91       	pop	r29
	}
}
    1d34:	cf 91       	pop	r28
    1d36:	1f 91       	pop	r17
    1d38:	0f 91       	pop	r16
    1d3a:	ff 90       	pop	r15
    1d3c:	ef 90       	pop	r14
    1d3e:	df 90       	pop	r13
    1d40:	cf 90       	pop	r12
    1d42:	bf 90       	pop	r11
    1d44:	af 90       	pop	r10
    1d46:	9f 90       	pop	r9
    1d48:	8f 90       	pop	r8
    1d4a:	7f 90       	pop	r7
    1d4c:	6f 90       	pop	r6
    1d4e:	5f 90       	pop	r5
    1d50:	4f 90       	pop	r4
    1d52:	3f 90       	pop	r3
    1d54:	08 95       	ret

00001d56 <nwkRouteDiscoverySendRequest>:
    1d56:	ff 92       	push	r15

/*************************************************************************//**
*****************************************************************************/
static bool nwkRouteDiscoverySendRequest(NwkRouteDiscoveryTableEntry_t *entry,
		uint8_t lq)
{
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	8c 01       	movw	r16, r24
    1d62:	f6 2e       	mov	r15, r22
	NwkFrame_t *req;
	NwkCommandRouteRequest_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
    1d64:	2a dd       	rcall	.-1452   	; 0x17ba <nwkFrameAlloc>
    1d66:	ec 01       	movw	r28, r24
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	51 f1       	breq	.+84     	; 0x1dc0 <nwkRouteDiscoverySendRequest+0x6a>
		return false;
	}

	nwkFrameCommandInit(req);
    1d6c:	8c dd       	rcall	.-1256   	; 0x1886 <nwkFrameCommandInit>
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01

	req->size += sizeof(NwkCommandRouteRequest_t);
    1d70:	89 5f       	subi	r24, 0xF9	; 249
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	fe 01       	movw	r30, r28
	req->tx.confirm = NULL;
    1d76:	e9 57       	subi	r30, 0x79	; 121
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	11 82       	std	Z+1, r1	; 0x01
    1d7c:	10 82       	st	Z, r1
    1d7e:	8b 85       	ldd	r24, Y+11	; 0x0b

	req->header.nwkFcf.linkLocal = 1;
    1d80:	84 60       	ori	r24, 0x04	; 4
    1d82:	8b 87       	std	Y+11, r24	; 0x0b
    1d84:	8f ef       	ldi	r24, 0xFF	; 255
	req->header.nwkDstAddr = NWK_BROADCAST_ADDR;
    1d86:	9f ef       	ldi	r25, 0xFF	; 255
    1d88:	98 8b       	std	Y+16, r25	; 0x10
    1d8a:	8f 87       	std	Y+15, r24	; 0x0f
    1d8c:	36 97       	sbiw	r30, 0x06	; 6

	command = (NwkCommandRouteRequest_t *)req->payload;
    1d8e:	01 90       	ld	r0, Z+
    1d90:	f0 81       	ld	r31, Z
    1d92:	e0 2d       	mov	r30, r0
    1d94:	82 e0       	ldi	r24, 0x02	; 2
	command->id = NWK_COMMAND_ROUTE_REQUEST;
    1d96:	80 83       	st	Z, r24
    1d98:	d8 01       	movw	r26, r16
	command->srcAddr = entry->srcAddr;
    1d9a:	8d 91       	ld	r24, X+
    1d9c:	9c 91       	ld	r25, X
    1d9e:	11 97       	sbiw	r26, 0x01	; 1
    1da0:	92 83       	std	Z+2, r25	; 0x02
    1da2:	81 83       	std	Z+1, r24	; 0x01
    1da4:	12 96       	adiw	r26, 0x02	; 2
	command->dstAddr = entry->dstAddr;
    1da6:	8d 91       	ld	r24, X+
    1da8:	9c 91       	ld	r25, X
    1daa:	13 97       	sbiw	r26, 0x03	; 3
    1dac:	94 83       	std	Z+4, r25	; 0x04
    1dae:	83 83       	std	Z+3, r24	; 0x03
    1db0:	14 96       	adiw	r26, 0x04	; 4
	command->multicast = entry->multicast;
    1db2:	8c 91       	ld	r24, X
    1db4:	85 83       	std	Z+5, r24	; 0x05
    1db6:	f6 82       	std	Z+6, r15	; 0x06
	command->linkQuality = lq;

	nwkTxFrame(req);
    1db8:	ce 01       	movw	r24, r28
    1dba:	32 d6       	rcall	.+3172   	; 0x2a20 <nwkTxFrame>
    1dbc:	81 e0       	ldi	r24, 0x01	; 1

	return true;
    1dbe:	01 c0       	rjmp	.+2      	; 0x1dc2 <nwkRouteDiscoverySendRequest+0x6c>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
{
	NwkFrame_t *req;
	NwkCommandRouteRequest_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
		return false;
    1dc2:	df 91       	pop	r29
	command->linkQuality = lq;

	nwkTxFrame(req);

	return true;
}
    1dc4:	cf 91       	pop	r28
    1dc6:	1f 91       	pop	r17
    1dc8:	0f 91       	pop	r16
    1dca:	ff 90       	pop	r15
    1dcc:	08 95       	ret

00001dce <nwkRouteDiscoverySendReply>:
    1dce:	ef 92       	push	r14

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoverySendReply(NwkRouteDiscoveryTableEntry_t *entry,
		uint8_t flq, uint8_t rlq)
{
    1dd0:	ff 92       	push	r15
    1dd2:	0f 93       	push	r16
    1dd4:	1f 93       	push	r17
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	8c 01       	movw	r16, r24
    1ddc:	e6 2e       	mov	r14, r22
    1dde:	f4 2e       	mov	r15, r20
	NwkFrame_t *req;
	NwkCommandRouteReply_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
    1de0:	ec dc       	rcall	.-1576   	; 0x17ba <nwkFrameAlloc>
    1de2:	ec 01       	movw	r28, r24
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	59 f1       	breq	.+86     	; 0x1e3e <nwkRouteDiscoverySendReply+0x70>
		return;
	}

	nwkFrameCommandInit(req);
    1de8:	4e dd       	rcall	.-1380   	; 0x1886 <nwkFrameCommandInit>
    1dea:	89 81       	ldd	r24, Y+1	; 0x01

	req->size += sizeof(NwkCommandRouteReply_t);
    1dec:	88 5f       	subi	r24, 0xF8	; 248
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	fe 01       	movw	r30, r28
	req->tx.confirm = NULL;
    1df2:	e9 57       	subi	r30, 0x79	; 121
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	11 82       	std	Z+1, r1	; 0x01
    1df8:	10 82       	st	Z, r1
    1dfa:	31 97       	sbiw	r30, 0x01	; 1
	req->tx.control = NWK_TX_CONTROL_DIRECT_LINK;
    1dfc:	84 e0       	ldi	r24, 0x04	; 4
    1dfe:	80 83       	st	Z, r24
    1e00:	d8 01       	movw	r26, r16

	req->header.nwkDstAddr = entry->senderAddr;
    1e02:	15 96       	adiw	r26, 0x05	; 5
    1e04:	8d 91       	ld	r24, X+
    1e06:	9c 91       	ld	r25, X
    1e08:	16 97       	sbiw	r26, 0x06	; 6
    1e0a:	98 8b       	std	Y+16, r25	; 0x10
    1e0c:	8f 87       	std	Y+15, r24	; 0x0f
    1e0e:	35 97       	sbiw	r30, 0x05	; 5

	command = (NwkCommandRouteReply_t *)req->payload;
    1e10:	01 90       	ld	r0, Z+
    1e12:	f0 81       	ld	r31, Z
    1e14:	e0 2d       	mov	r30, r0
    1e16:	83 e0       	ldi	r24, 0x03	; 3
	command->id = NWK_COMMAND_ROUTE_REPLY;
    1e18:	80 83       	st	Z, r24
    1e1a:	8d 91       	ld	r24, X+
	command->srcAddr = entry->srcAddr;
    1e1c:	9c 91       	ld	r25, X
    1e1e:	11 97       	sbiw	r26, 0x01	; 1
    1e20:	92 83       	std	Z+2, r25	; 0x02
    1e22:	81 83       	std	Z+1, r24	; 0x01
    1e24:	12 96       	adiw	r26, 0x02	; 2
	command->dstAddr = entry->dstAddr;
    1e26:	8d 91       	ld	r24, X+
    1e28:	9c 91       	ld	r25, X
    1e2a:	13 97       	sbiw	r26, 0x03	; 3
    1e2c:	94 83       	std	Z+4, r25	; 0x04
    1e2e:	83 83       	std	Z+3, r24	; 0x03
    1e30:	14 96       	adiw	r26, 0x04	; 4
	command->multicast = entry->multicast;
    1e32:	8c 91       	ld	r24, X
    1e34:	85 83       	std	Z+5, r24	; 0x05
    1e36:	e6 82       	std	Z+6, r14	; 0x06
	command->forwardLinkQuality = flq;
    1e38:	f7 82       	std	Z+7, r15	; 0x07
	command->reverseLinkQuality = rlq;

	nwkTxFrame(req);
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	f1 d5       	rcall	.+3042   	; 0x2a20 <nwkTxFrame>
    1e3e:	df 91       	pop	r29
}
    1e40:	cf 91       	pop	r28
    1e42:	1f 91       	pop	r17
    1e44:	0f 91       	pop	r16
    1e46:	ff 90       	pop	r15
    1e48:	ef 90       	pop	r14
    1e4a:	08 95       	ret

00001e4c <nwkRouteDiscoveryInit>:
    1e4c:	e7 e7       	ldi	r30, 0x77	; 119
*  @brief Initializes the Route Discovery module
*****************************************************************************/
void nwkRouteDiscoveryInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		nwkRouteDiscoveryTable[i].timeout = 0;
    1e4e:	fb e0       	ldi	r31, 0x0B	; 11
    1e50:	12 86       	std	Z+10, r1	; 0x0a
    1e52:	11 86       	std	Z+9, r1	; 0x09
    1e54:	15 8a       	std	Z+21, r1	; 0x15
    1e56:	14 8a       	std	Z+20, r1	; 0x14
    1e58:	10 a2       	std	Z+32, r1	; 0x20
    1e5a:	17 8e       	std	Z+31, r1	; 0x1f
    1e5c:	13 a6       	std	Z+43, r1	; 0x2b
    1e5e:	12 a6       	std	Z+42, r1	; 0x2a
    1e60:	16 aa       	std	Z+54, r1	; 0x36
    1e62:	15 aa       	std	Z+53, r1	; 0x35
	}

	nwkRouteDiscoveryTimer.interval = NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    1e64:	ea e6       	ldi	r30, 0x6A	; 106
    1e66:	fb e0       	ldi	r31, 0x0B	; 11
    1e68:	84 e6       	ldi	r24, 0x64	; 100
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e0       	ldi	r26, 0x00	; 0
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	86 83       	std	Z+6, r24	; 0x06
    1e72:	97 83       	std	Z+7, r25	; 0x07
    1e74:	a0 87       	std	Z+8, r26	; 0x08
    1e76:	b1 87       	std	Z+9, r27	; 0x09
	nwkRouteDiscoveryTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1e78:	12 86       	std	Z+10, r1	; 0x0a
	nwkRouteDiscoveryTimer.handler = nwkRouteDiscoveryTimerHandler;
    1e7a:	8f e2       	ldi	r24, 0x2F	; 47
    1e7c:	9e e0       	ldi	r25, 0x0E	; 14
    1e7e:	94 87       	std	Z+12, r25	; 0x0c
    1e80:	83 87       	std	Z+11, r24	; 0x0b
    1e82:	08 95       	ret

00001e84 <nwkRouteDiscoveryRequest>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	ec 01       	movw	r28, r24
	NwkFrameHeader_t *header = &frame->header;
	NwkRouteDiscoveryTableEntry_t *entry;

	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
			header->nwkFcf.multicast);
    1e8a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e8c:	43 fb       	bst	r20, 3
    1e8e:	44 27       	eor	r20, r20
    1e90:	40 f9       	bld	r20, 0
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NwkRouteDiscoveryTableEntry_t *entry;

	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
    1e92:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e94:	78 89       	ldd	r23, Y+16	; 0x10
    1e96:	80 91 bc 0e 	lds	r24, 0x0EBC	; 0x800ebc <nwkIb>
    1e9a:	90 91 bd 0e 	lds	r25, 0x0EBD	; 0x800ebd <nwkIb+0x1>
    1e9e:	7e de       	rcall	.-772    	; 0x1b9c <nwkRouteDiscoveryFindEntry>
			header->nwkFcf.multicast);

	if (entry) {
    1ea0:	89 2b       	or	r24, r25
    1ea2:	19 f0       	breq	.+6      	; 0x1eaa <nwkRouteDiscoveryRequest+0x26>
		frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    1ea4:	80 e4       	ldi	r24, 0x40	; 64
    1ea6:	88 83       	st	Y, r24
		return;
	}

	entry = nwkRouteDiscoveryNewEntry();
    1ea8:	21 c0       	rjmp	.+66     	; 0x1eec <nwkRouteDiscoveryRequest+0x68>
    1eaa:	a8 de       	rcall	.-688    	; 0x1bfc <nwkRouteDiscoveryNewEntry>

	if (entry) {
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	d9 f0       	breq	.+54     	; 0x1ee6 <nwkRouteDiscoveryRequest+0x62>
		entry->srcAddr = nwkIb.addr;
    1eb0:	20 91 bc 0e 	lds	r18, 0x0EBC	; 0x800ebc <nwkIb>
    1eb4:	30 91 bd 0e 	lds	r19, 0x0EBD	; 0x800ebd <nwkIb+0x1>
    1eb8:	fc 01       	movw	r30, r24
    1eba:	31 83       	std	Z+1, r19	; 0x01
    1ebc:	20 83       	st	Z, r18
		entry->dstAddr = header->nwkDstAddr;
    1ebe:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ec0:	38 89       	ldd	r19, Y+16	; 0x10
    1ec2:	33 83       	std	Z+3, r19	; 0x03
    1ec4:	22 83       	std	Z+2, r18	; 0x02
		entry->multicast = header->nwkFcf.multicast;
    1ec6:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ec8:	23 fb       	bst	r18, 3
    1eca:	22 27       	eor	r18, r18
    1ecc:	20 f9       	bld	r18, 0
    1ece:	24 83       	std	Z+4, r18	; 0x04
		entry->senderAddr = NWK_BROADCAST_ADDR;
    1ed0:	2f ef       	ldi	r18, 0xFF	; 255
    1ed2:	3f ef       	ldi	r19, 0xFF	; 255
    1ed4:	36 83       	std	Z+6, r19	; 0x06

		if (nwkRouteDiscoverySendRequest(entry,
    1ed6:	25 83       	std	Z+5, r18	; 0x05
    1ed8:	6f ef       	ldi	r22, 0xFF	; 255
    1eda:	3d df       	rcall	.-390    	; 0x1d56 <nwkRouteDiscoverySendRequest>
    1edc:	88 23       	and	r24, r24
    1ede:	19 f0       	breq	.+6      	; 0x1ee6 <nwkRouteDiscoveryRequest+0x62>
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY)) {
			frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    1ee0:	80 e4       	ldi	r24, 0x40	; 64
    1ee2:	88 83       	st	Y, r24
			return;
		}
	}

	nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    1ee4:	03 c0       	rjmp	.+6      	; 0x1eec <nwkRouteDiscoveryRequest+0x68>
    1ee6:	61 e1       	ldi	r22, 0x11	; 17
    1ee8:	ce 01       	movw	r24, r28
    1eea:	58 d6       	rcall	.+3248   	; 0x2b9c <nwkTxConfirm>
}
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	08 95       	ret

00001ef2 <nwkRouteDiscoveryRequestReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryRequestReceived(NWK_DataInd_t *ind)
{
    1ef2:	af 92       	push	r10
    1ef4:	bf 92       	push	r11
    1ef6:	cf 92       	push	r12
    1ef8:	df 92       	push	r13
    1efa:	ef 92       	push	r14
    1efc:	ff 92       	push	r15
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;

	if (sizeof(NwkCommandRouteRequest_t) != ind->size) {
    1f06:	dc 01       	movw	r26, r24
    1f08:	19 96       	adiw	r26, 0x09	; 9
    1f0a:	2c 91       	ld	r18, X
    1f0c:	19 97       	sbiw	r26, 0x09	; 9
    1f0e:	27 30       	cpi	r18, 0x07	; 7
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <nwkRouteDiscoveryRequestReceived+0x22>
    1f12:	62 c0       	rjmp	.+196    	; 0x1fd8 <nwkRouteDiscoveryRequestReceived+0xe6>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryRequestReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteRequest_t *command
    1f14:	17 96       	adiw	r26, 0x07	; 7
    1f16:	cd 91       	ld	r28, X+
    1f18:	dc 91       	ld	r29, X
    1f1a:	18 97       	sbiw	r26, 0x08	; 8
	if (1 == command->multicast && NWK_GroupIsMember(command->dstAddr)) {
		reply = true;
	}
#endif

	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
    1f1c:	4d 81       	ldd	r20, Y+5	; 0x05
    1f1e:	41 11       	cpse	r20, r1
    1f20:	67 c0       	rjmp	.+206    	; 0x1ff0 <nwkRouteDiscoveryRequestReceived+0xfe>
    1f22:	6b 81       	ldd	r22, Y+3	; 0x03
    1f24:	7c 81       	ldd	r23, Y+4	; 0x04
    1f26:	20 91 bc 0e 	lds	r18, 0x0EBC	; 0x800ebc <nwkIb>
    1f2a:	30 91 bd 0e 	lds	r19, 0x0EBD	; 0x800ebd <nwkIb+0x1>
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
    1f2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f30:	fa 81       	ldd	r31, Y+2	; 0x02
    1f32:	2e 17       	cp	r18, r30
    1f34:	3f 07       	cpc	r19, r31
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <nwkRouteDiscoveryRequestReceived+0x48>
    1f38:	51 c0       	rjmp	.+162    	; 0x1fdc <nwkRouteDiscoveryRequestReceived+0xea>
		return true;
	}

	if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING) {
    1f3a:	62 17       	cp	r22, r18
    1f3c:	73 07       	cpc	r23, r19
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <nwkRouteDiscoveryRequestReceived+0x58>
    1f40:	33 23       	and	r19, r19
    1f42:	0c f4       	brge	.+2      	; 0x1f46 <nwkRouteDiscoveryRequestReceived+0x54>
    1f44:	4d c0       	rjmp	.+154    	; 0x1fe0 <nwkRouteDiscoveryRequestReceived+0xee>
    1f46:	b1 2c       	mov	r11, r1
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <nwkRouteDiscoveryRequestReceived+0x5c>
{
	NwkCommandRouteRequest_t *command
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;
    1f4a:	bb 24       	eor	r11, r11
    1f4c:	b3 94       	inc	r11
    1f4e:	8c 01       	movw	r16, r24

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
	return ((uint16_t)lqa * lqb) >> 8;
    1f50:	ce 80       	ldd	r12, Y+6	; 0x06
    1f52:	dc 01       	movw	r26, r24
    1f54:	1a 96       	adiw	r26, 0x0a	; 10
    1f56:	8c 91       	ld	r24, X
    1f58:	c8 9e       	mul	r12, r24
    1f5a:	60 01       	movw	r12, r0
    1f5c:	11 24       	eor	r1, r1
		return true;
	}

	linkQuality = nwkRouteDiscoveryUpdateLq(command->linkQuality, ind->lqi);

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    1f5e:	6b 81       	ldd	r22, Y+3	; 0x03
    1f60:	7c 81       	ldd	r23, Y+4	; 0x04
    1f62:	cf 01       	movw	r24, r30
    1f64:	1b de       	rcall	.-970    	; 0x1b9c <nwkRouteDiscoveryFindEntry>
    1f66:	7c 01       	movw	r14, r24
			command->multicast);

	if (entry) {
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	29 f0       	breq	.+10     	; 0x1f76 <nwkRouteDiscoveryRequestReceived+0x84>
		if (linkQuality <= entry->forwardLinkQuality) {
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	87 81       	ldd	r24, Z+7	; 0x07
    1f70:	8d 15       	cp	r24, r13
    1f72:	28 f0       	brcs	.+10     	; 0x1f7e <nwkRouteDiscoveryRequestReceived+0x8c>
			return true;
		}
	} else {
		if (NULL == (entry = nwkRouteDiscoveryNewEntry())) {
    1f74:	37 c0       	rjmp	.+110    	; 0x1fe4 <nwkRouteDiscoveryRequestReceived+0xf2>
    1f76:	42 de       	rcall	.-892    	; 0x1bfc <nwkRouteDiscoveryNewEntry>
    1f78:	7c 01       	movw	r14, r24
    1f7a:	89 2b       	or	r24, r25
    1f7c:	a9 f1       	breq	.+106    	; 0x1fe8 <nwkRouteDiscoveryRequestReceived+0xf6>
			return true;
		}
	}

	entry->srcAddr = command->srcAddr;
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	d7 01       	movw	r26, r14
    1f84:	11 96       	adiw	r26, 0x01	; 1
    1f86:	9c 93       	st	X, r25
    1f88:	8e 93       	st	-X, r24
	entry->dstAddr = command->dstAddr;
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	13 96       	adiw	r26, 0x03	; 3
    1f90:	9c 93       	st	X, r25
    1f92:	8e 93       	st	-X, r24
    1f94:	12 97       	sbiw	r26, 0x02	; 2
	entry->multicast = command->multicast;
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	14 96       	adiw	r26, 0x04	; 4
    1f9a:	8c 93       	st	X, r24
    1f9c:	14 97       	sbiw	r26, 0x04	; 4
	entry->senderAddr = ind->srcAddr;
    1f9e:	f8 01       	movw	r30, r16
    1fa0:	80 81       	ld	r24, Z
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	16 96       	adiw	r26, 0x06	; 6
    1fa6:	9c 93       	st	X, r25
    1fa8:	8e 93       	st	-X, r24
    1faa:	15 97       	sbiw	r26, 0x05	; 5
	entry->forwardLinkQuality = linkQuality;
    1fac:	17 96       	adiw	r26, 0x07	; 7
    1fae:	dc 92       	st	X, r13

	if (reply) {
    1fb0:	bb 20       	and	r11, r11
    1fb2:	69 f0       	breq	.+26     	; 0x1fce <nwkRouteDiscoveryRequestReceived+0xdc>
		nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr,
    1fb4:	40 81       	ld	r20, Z
    1fb6:	51 81       	ldd	r21, Z+1	; 0x01
    1fb8:	2d 2d       	mov	r18, r13
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc0:	fe dc       	rcall	.-1540   	; 0x19be <nwkRouteUpdateEntry>
				linkQuality);
		nwkRouteDiscoverySendReply(entry, linkQuality,
    1fc2:	4f ef       	ldi	r20, 0xFF	; 255
    1fc4:	6d 2d       	mov	r22, r13
    1fc6:	c7 01       	movw	r24, r14
    1fc8:	02 df       	rcall	.-508    	; 0x1dce <nwkRouteDiscoverySendReply>
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY);
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
	}

	return true;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
		nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr,
				linkQuality);
		nwkRouteDiscoverySendReply(entry, linkQuality,
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY);
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
    1fcc:	1c c0       	rjmp	.+56     	; 0x2006 <nwkRouteDiscoveryRequestReceived+0x114>
    1fce:	6d 2d       	mov	r22, r13
    1fd0:	c7 01       	movw	r24, r14
    1fd2:	c1 de       	rcall	.-638    	; 0x1d56 <nwkRouteDiscoverySendRequest>
	}

	return true;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	17 c0       	rjmp	.+46     	; 0x2006 <nwkRouteDiscoveryRequestReceived+0x114>
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;

	if (sizeof(NwkCommandRouteRequest_t) != ind->size) {
		return false;
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	15 c0       	rjmp	.+42     	; 0x2006 <nwkRouteDiscoveryRequestReceived+0x114>
	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
		return true;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	13 c0       	rjmp	.+38     	; 0x2006 <nwkRouteDiscoveryRequestReceived+0x114>
	}

	if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING) {
		return true;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	11 c0       	rjmp	.+34     	; 0x2006 <nwkRouteDiscoveryRequestReceived+0x114>
	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
			command->multicast);

	if (entry) {
		if (linkQuality <= entry->forwardLinkQuality) {
			return true;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <nwkRouteDiscoveryRequestReceived+0x114>
		}
	} else {
		if (NULL == (entry = nwkRouteDiscoveryNewEntry())) {
			return true;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	0d c0       	rjmp	.+26     	; 0x2006 <nwkRouteDiscoveryRequestReceived+0x114>
	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
		return true;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	0b c0       	rjmp	.+22     	; 0x2006 <nwkRouteDiscoveryRequestReceived+0x114>

	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
    1ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff4:	20 91 bc 0e 	lds	r18, 0x0EBC	; 0x800ebc <nwkIb>
    1ff8:	30 91 bd 0e 	lds	r19, 0x0EBD	; 0x800ebd <nwkIb+0x1>
    1ffc:	e2 17       	cp	r30, r18
    1ffe:	f3 07       	cpc	r31, r19
    2000:	09 f0       	breq	.+2      	; 0x2004 <nwkRouteDiscoveryRequestReceived+0x112>
    2002:	9e cf       	rjmp	.-196    	; 0x1f40 <nwkRouteDiscoveryRequestReceived+0x4e>
    2004:	f3 cf       	rjmp	.-26     	; 0x1fec <nwkRouteDiscoveryRequestReceived+0xfa>
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
	}

	return true;
}
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	ff 90       	pop	r15
    2010:	ef 90       	pop	r14
    2012:	df 90       	pop	r13
    2014:	cf 90       	pop	r12
    2016:	bf 90       	pop	r11
    2018:	af 90       	pop	r10
    201a:	08 95       	ret

0000201c <nwkRouteDiscoveryReplyReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryReplyReceived(NWK_DataInd_t *ind)
{
    201c:	cf 92       	push	r12
    201e:	df 92       	push	r13
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;

	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
    202c:	fc 01       	movw	r30, r24
    202e:	21 85       	ldd	r18, Z+9	; 0x09
    2030:	28 30       	cpi	r18, 0x08	; 8
    2032:	09 f0       	breq	.+2      	; 0x2036 <nwkRouteDiscoveryReplyReceived+0x1a>
    2034:	42 c0       	rjmp	.+132    	; 0x20ba <nwkRouteDiscoveryReplyReceived+0x9e>
    2036:	8c 01       	movw	r16, r24

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryReplyReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
    2038:	c7 81       	ldd	r28, Z+7	; 0x07
    203a:	d0 85       	ldd	r29, Z+8	; 0x08

	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
		return false;
	}

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    203c:	6b 81       	ldd	r22, Y+3	; 0x03
    203e:	7c 81       	ldd	r23, Y+4	; 0x04
    2040:	4d 81       	ldd	r20, Y+5	; 0x05
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	aa dd       	rcall	.-1196   	; 0x1b9c <nwkRouteDiscoveryFindEntry>
    2048:	7c 01       	movw	r14, r24
			command->multicast);

	linkQuality = nwkRouteDiscoveryUpdateLq(command->reverseLinkQuality,
			ind->lqi);

	if (entry && command->forwardLinkQuality > entry->reverseLinkQuality) {
    204a:	89 2b       	or	r24, r25
    204c:	c1 f1       	breq	.+112    	; 0x20be <nwkRouteDiscoveryReplyReceived+0xa2>
    204e:	8e 81       	ldd	r24, Y+6	; 0x06
    2050:	f7 01       	movw	r30, r14
    2052:	90 85       	ldd	r25, Z+8	; 0x08
    2054:	98 17       	cp	r25, r24
    2056:	a8 f5       	brcc	.+106    	; 0x20c2 <nwkRouteDiscoveryReplyReceived+0xa6>
	}

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
			command->multicast);

	linkQuality = nwkRouteDiscoveryUpdateLq(command->reverseLinkQuality,
    2058:	f8 01       	movw	r30, r16
    205a:	c2 84       	ldd	r12, Z+10	; 0x0a
    205c:	9f 81       	ldd	r25, Y+7	; 0x07
			ind->lqi);

	if (entry && command->forwardLinkQuality > entry->reverseLinkQuality) {
		entry->reverseLinkQuality = command->forwardLinkQuality;
    205e:	f7 01       	movw	r30, r14
    2060:	80 87       	std	Z+8, r24	; 0x08

		if (command->srcAddr == nwkIb.addr) {
    2062:	49 81       	ldd	r20, Y+1	; 0x01
    2064:	5a 81       	ldd	r21, Y+2	; 0x02
    2066:	20 91 bc 0e 	lds	r18, 0x0EBC	; 0x800ebc <nwkIb>
    206a:	30 91 bd 0e 	lds	r19, 0x0EBD	; 0x800ebd <nwkIb+0x1>
    206e:	42 17       	cp	r20, r18
    2070:	53 07       	cpc	r21, r19
    2072:	51 f4       	brne	.+20     	; 0x2088 <nwkRouteDiscoveryReplyReceived+0x6c>
			nwkRouteUpdateEntry(command->dstAddr,
    2074:	f8 01       	movw	r30, r16
    2076:	40 81       	ld	r20, Z
    2078:	51 81       	ldd	r21, Z+1	; 0x01
    207a:	2e 81       	ldd	r18, Y+6	; 0x06
    207c:	6d 81       	ldd	r22, Y+5	; 0x05
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	9c 81       	ldd	r25, Y+4	; 0x04
    2082:	9d dc       	rcall	.-1734   	; 0x19be <nwkRouteUpdateEntry>
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	1e c0       	rjmp	.+60     	; 0x20c4 <nwkRouteDiscoveryReplyReceived+0xa8>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
	return ((uint16_t)lqa * lqb) >> 8;
    2088:	9c 9d       	mul	r25, r12
    208a:	60 01       	movw	r12, r0
    208c:	11 24       	eor	r1, r1
			nwkRouteUpdateEntry(command->dstAddr,
					command->multicast, ind->srcAddr,
					command->forwardLinkQuality);
			/* nwkRouteDiscoveryDone(entry, true); */
		} else {
			nwkRouteUpdateEntry(command->dstAddr,
    208e:	f8 01       	movw	r30, r16
    2090:	40 81       	ld	r20, Z
    2092:	51 81       	ldd	r21, Z+1	; 0x01
    2094:	2d 2d       	mov	r18, r13
    2096:	6d 81       	ldd	r22, Y+5	; 0x05
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	90 dc       	rcall	.-1760   	; 0x19be <nwkRouteUpdateEntry>
					command->multicast, ind->srcAddr,
					linkQuality);
			nwkRouteUpdateEntry(command->srcAddr, 0,
    209e:	f7 01       	movw	r30, r14
    20a0:	45 81       	ldd	r20, Z+5	; 0x05
    20a2:	56 81       	ldd	r21, Z+6	; 0x06
    20a4:	27 81       	ldd	r18, Z+7	; 0x07
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	9a 81       	ldd	r25, Y+2	; 0x02
    20ac:	88 dc       	rcall	.-1776   	; 0x19be <nwkRouteUpdateEntry>
					entry->senderAddr,
					entry->forwardLinkQuality);
			nwkRouteDiscoverySendReply(entry,
    20ae:	4d 2d       	mov	r20, r13
    20b0:	6e 81       	ldd	r22, Y+6	; 0x06
    20b2:	c7 01       	movw	r24, r14
    20b4:	8c de       	rcall	.-744    	; 0x1dce <nwkRouteDiscoverySendReply>
    20b6:	81 e0       	ldi	r24, 0x01	; 1
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    20b8:	05 c0       	rjmp	.+10     	; 0x20c4 <nwkRouteDiscoveryReplyReceived+0xa8>
    20ba:	80 e0       	ldi	r24, 0x00	; 0
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;

	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
		return false;
    20bc:	03 c0       	rjmp	.+6      	; 0x20c4 <nwkRouteDiscoveryReplyReceived+0xa8>
    20be:	81 e0       	ldi	r24, 0x01	; 1
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    20c0:	01 c0       	rjmp	.+2      	; 0x20c4 <nwkRouteDiscoveryReplyReceived+0xa8>
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	df 91       	pop	r29
}
    20c6:	cf 91       	pop	r28
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	ff 90       	pop	r15
    20ce:	ef 90       	pop	r14
    20d0:	df 90       	pop	r13
    20d2:	cf 90       	pop	r12
    20d4:	08 95       	ret

000020d6 <nwkRxSeriveDataInd>:
    20d6:	dc 01       	movw	r26, r24

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
	nwkRxAckControl = control;
    20d8:	19 96       	adiw	r26, 0x09	; 9
    20da:	2c 91       	ld	r18, X
    20dc:	19 97       	sbiw	r26, 0x09	; 9
    20de:	22 23       	and	r18, r18
    20e0:	a9 f0       	breq	.+42     	; 0x210c <nwkRxSeriveDataInd+0x36>
    20e2:	17 96       	adiw	r26, 0x07	; 7
    20e4:	ed 91       	ld	r30, X+
    20e6:	fc 91       	ld	r31, X
    20e8:	18 97       	sbiw	r26, 0x08	; 8
    20ea:	20 81       	ld	r18, Z
    20ec:	21 30       	cpi	r18, 0x01	; 1
    20ee:	41 f0       	breq	.+16     	; 0x2100 <nwkRxSeriveDataInd+0x2a>
    20f0:	28 f0       	brcs	.+10     	; 0x20fc <nwkRxSeriveDataInd+0x26>
    20f2:	22 30       	cpi	r18, 0x02	; 2
    20f4:	39 f0       	breq	.+14     	; 0x2104 <nwkRxSeriveDataInd+0x2e>
    20f6:	23 30       	cpi	r18, 0x03	; 3
    20f8:	39 f0       	breq	.+14     	; 0x2108 <nwkRxSeriveDataInd+0x32>
    20fa:	0a c0       	rjmp	.+20     	; 0x2110 <nwkRxSeriveDataInd+0x3a>
    20fc:	29 c5       	rjmp	.+2642   	; 0x2b50 <nwkTxAckReceived>
    20fe:	08 95       	ret
    2100:	3e cd       	rjmp	.-1412   	; 0x1b7e <nwkRouteErrorReceived>
    2102:	08 95       	ret
    2104:	f6 ce       	rjmp	.-532    	; 0x1ef2 <nwkRouteDiscoveryRequestReceived>
    2106:	08 95       	ret
    2108:	89 cf       	rjmp	.-238    	; 0x201c <nwkRouteDiscoveryReplyReceived>
    210a:	08 95       	ret
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	08 95       	ret
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	08 95       	ret

00002114 <nwkRxDuplicateRejectionTimerHandler>:
    2114:	bc 01       	movw	r22, r24
    2116:	e0 ec       	ldi	r30, 0xC0	; 192
    2118:	fb e0       	ldi	r31, 0x0B	; 11
    211a:	2a eb       	ldi	r18, 0xBA	; 186
    211c:	3c e0       	ldi	r19, 0x0C	; 12
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	51 e0       	ldi	r21, 0x01	; 1
    2122:	90 81       	ld	r25, Z
    2124:	99 23       	and	r25, r25
    2126:	19 f0       	breq	.+6      	; 0x212e <nwkRxDuplicateRejectionTimerHandler+0x1a>
    2128:	91 50       	subi	r25, 0x01	; 1
    212a:	90 83       	st	Z, r25
    212c:	45 2f       	mov	r20, r21
    212e:	35 96       	adiw	r30, 0x05	; 5
    2130:	e2 17       	cp	r30, r18
    2132:	f3 07       	cpc	r31, r19
    2134:	b1 f7       	brne	.-20     	; 0x2122 <nwkRxDuplicateRejectionTimerHandler+0xe>
    2136:	44 23       	and	r20, r20
    2138:	11 f0       	breq	.+4      	; 0x213e <nwkRxDuplicateRejectionTimerHandler+0x2a>
    213a:	cb 01       	movw	r24, r22
    213c:	5c c8       	rjmp	.-3912   	; 0x11f6 <SYS_TimerStart>
    213e:	08 95       	ret

00002140 <nwkRxInit>:
    2140:	e0 ec       	ldi	r30, 0xC0	; 192
    2142:	fb e0       	ldi	r31, 0x0B	; 11
    2144:	8a eb       	ldi	r24, 0xBA	; 186
    2146:	9c e0       	ldi	r25, 0x0C	; 12
    2148:	10 82       	st	Z, r1
    214a:	35 96       	adiw	r30, 0x05	; 5
    214c:	e8 17       	cp	r30, r24
    214e:	f9 07       	cpc	r31, r25
    2150:	d9 f7       	brne	.-10     	; 0x2148 <nwkRxInit+0x8>
    2152:	ee ea       	ldi	r30, 0xAE	; 174
    2154:	fb e0       	ldi	r31, 0x0B	; 11
    2156:	84 e6       	ldi	r24, 0x64	; 100
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	a0 e0       	ldi	r26, 0x00	; 0
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	86 83       	std	Z+6, r24	; 0x06
    2160:	97 83       	std	Z+7, r25	; 0x07
    2162:	a0 87       	std	Z+8, r26	; 0x08
    2164:	b1 87       	std	Z+9, r27	; 0x09
    2166:	12 86       	std	Z+10, r1	; 0x0a
    2168:	8a e8       	ldi	r24, 0x8A	; 138
    216a:	90 e1       	ldi	r25, 0x10	; 16
    216c:	94 87       	std	Z+12, r25	; 0x0c
    216e:	83 87       	std	Z+11, r24	; 0x0b
    2170:	6b e6       	ldi	r22, 0x6B	; 107
    2172:	70 e1       	ldi	r23, 0x10	; 16
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	0e ca       	rjmp	.-3044   	; 0x1594 <NWK_OpenEndpoint>
    2178:	08 95       	ret

0000217a <PHY_DataInd>:
    217a:	cf 93       	push	r28
    217c:	df 93       	push	r29
    217e:	dc 01       	movw	r26, r24
    2180:	ed 91       	ld	r30, X+
    2182:	fc 91       	ld	r31, X
    2184:	11 97       	sbiw	r26, 0x01	; 1
    2186:	21 81       	ldd	r18, Z+1	; 0x01
    2188:	28 38       	cpi	r18, 0x88	; 136
    218a:	f1 f4       	brne	.+60     	; 0x21c8 <PHY_DataInd+0x4e>
    218c:	20 81       	ld	r18, Z
    218e:	2f 7d       	andi	r18, 0xDF	; 223
    2190:	21 34       	cpi	r18, 0x41	; 65
    2192:	d1 f4       	brne	.+52     	; 0x21c8 <PHY_DataInd+0x4e>
    2194:	12 96       	adiw	r26, 0x02	; 2
    2196:	2c 91       	ld	r18, X
    2198:	20 31       	cpi	r18, 0x10	; 16
    219a:	b0 f0       	brcs	.+44     	; 0x21c8 <PHY_DataInd+0x4e>
    219c:	ec 01       	movw	r28, r24
    219e:	0d db       	rcall	.-2534   	; 0x17ba <nwkFrameAlloc>
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	91 f0       	breq	.+36     	; 0x21c8 <PHY_DataInd+0x4e>
    21a4:	20 e2       	ldi	r18, 0x20	; 32
    21a6:	fc 01       	movw	r30, r24
    21a8:	20 83       	st	Z, r18
    21aa:	2a 81       	ldd	r18, Y+2	; 0x02
    21ac:	21 83       	std	Z+1, r18	; 0x01
    21ae:	2b 81       	ldd	r18, Y+3	; 0x03
    21b0:	ed 57       	subi	r30, 0x7D	; 125
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	20 83       	st	Z, r18
    21b6:	2c 81       	ldd	r18, Y+4	; 0x04
    21b8:	31 96       	adiw	r30, 0x01	; 1
    21ba:	20 83       	st	Z, r18
    21bc:	4a 81       	ldd	r20, Y+2	; 0x02
    21be:	50 e0       	ldi	r21, 0x00	; 0
    21c0:	68 81       	ld	r22, Y
    21c2:	79 81       	ldd	r23, Y+1	; 0x01
    21c4:	02 96       	adiw	r24, 0x02	; 2
    21c6:	e3 d7       	rcall	.+4038   	; 0x318e <memcpy>
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	08 95       	ret

000021ce <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    21ce:	66 23       	and	r22, r22
    21d0:	21 f0       	breq	.+8      	; 0x21da <nwkRxDecryptConf+0xc>
		frame->state = NWK_RX_STATE_INDICATE;
    21d2:	22 e2       	ldi	r18, 0x22	; 34
    21d4:	fc 01       	movw	r30, r24
    21d6:	20 83       	st	Z, r18
    21d8:	08 95       	ret
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    21da:	24 e2       	ldi	r18, 0x24	; 36
    21dc:	fc 01       	movw	r30, r24
    21de:	20 83       	st	Z, r18
    21e0:	08 95       	ret

000021e2 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    21e2:	2f 92       	push	r2
    21e4:	3f 92       	push	r3
    21e6:	4f 92       	push	r4
    21e8:	5f 92       	push	r5
    21ea:	6f 92       	push	r6
    21ec:	7f 92       	push	r7
    21ee:	8f 92       	push	r8
    21f0:	9f 92       	push	r9
    21f2:	af 92       	push	r10
    21f4:	bf 92       	push	r11
    21f6:	cf 92       	push	r12
    21f8:	df 92       	push	r13
    21fa:	ef 92       	push	r14
    21fc:	ff 92       	push	r15
    21fe:	0f 93       	push	r16
    2200:	1f 93       	push	r17
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	2c 97       	sbiw	r28, 0x0c	; 12
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
	NwkFrame_t *frame = NULL;
    2216:	00 e0       	ldi	r16, 0x00	; 0
    2218:	10 e0       	ldi	r17, 0x00	; 0

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    221a:	0f 2e       	mov	r0, r31
    221c:	f4 e2       	ldi	r31, 0x24	; 36
    221e:	bf 2e       	mov	r11, r31
    2220:	f0 2d       	mov	r31, r0

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    2222:	0f 2e       	mov	r0, r31
    2224:	fc eb       	ldi	r31, 0xBC	; 188
    2226:	ef 2e       	mov	r14, r31
    2228:	fe e0       	ldi	r31, 0x0E	; 14
    222a:	ff 2e       	mov	r15, r31
    222c:	f0 2d       	mov	r31, r0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    222e:	44 24       	eor	r4, r4
    2230:	43 94       	inc	r4
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    2232:	68 94       	set
    2234:	77 24       	eor	r7, r7
    2236:	74 f8       	bld	r7, 4
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    2238:	68 94       	set
    223a:	66 24       	eor	r6, r6
    223c:	63 f8       	bld	r6, 3
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    223e:	68 94       	set
    2240:	55 24       	eor	r5, r5
    2242:	52 f8       	bld	r5, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    2244:	21 2c       	mov	r2, r1
    2246:	31 2c       	mov	r3, r1
	}

	freeEntry->src = header->nwkSrcAddr;
	freeEntry->seq = header->nwkSeq;
	freeEntry->mask = 1;
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2248:	0f 2e       	mov	r0, r31
    224a:	f5 e1       	ldi	r31, 0x15	; 21
    224c:	af 2e       	mov	r10, r31
    224e:	f0 2d       	mov	r31, r0
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    2250:	cc 24       	eor	r12, r12
    2252:	c3 94       	inc	r12
    2254:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2256:	f0 c1       	rjmp	.+992    	; 0x2638 <nwkRxTaskHandler+0x456>
		switch (frame->state) {
    2258:	d8 01       	movw	r26, r16
    225a:	8c 91       	ld	r24, X
    225c:	82 32       	cpi	r24, 0x22	; 34
    225e:	09 f4       	brne	.+2      	; 0x2262 <nwkRxTaskHandler+0x80>
    2260:	1b c1       	rjmp	.+566    	; 0x2498 <nwkRxTaskHandler+0x2b6>
    2262:	30 f4       	brcc	.+12     	; 0x2270 <nwkRxTaskHandler+0x8e>
    2264:	80 32       	cpi	r24, 0x20	; 32
    2266:	59 f0       	breq	.+22     	; 0x227e <nwkRxTaskHandler+0x9c>
    2268:	81 32       	cpi	r24, 0x21	; 33
    226a:	09 f4       	brne	.+2      	; 0x226e <nwkRxTaskHandler+0x8c>
    226c:	11 c1       	rjmp	.+546    	; 0x2490 <nwkRxTaskHandler+0x2ae>
    226e:	e4 c1       	rjmp	.+968    	; 0x2638 <nwkRxTaskHandler+0x456>
    2270:	83 32       	cpi	r24, 0x23	; 35
    2272:	09 f4       	brne	.+2      	; 0x2276 <nwkRxTaskHandler+0x94>
    2274:	dc c1       	rjmp	.+952    	; 0x262e <nwkRxTaskHandler+0x44c>
    2276:	84 32       	cpi	r24, 0x24	; 36
    2278:	09 f4       	brne	.+2      	; 0x227c <nwkRxTaskHandler+0x9a>
    227a:	dc c1       	rjmp	.+952    	; 0x2634 <nwkRxTaskHandler+0x452>
    227c:	dd c1       	rjmp	.+954    	; 0x2638 <nwkRxTaskHandler+0x456>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    227e:	f8 01       	movw	r30, r16
    2280:	b0 82       	st	Z, r11
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    2282:	83 85       	ldd	r24, Z+11	; 0x0b
    2284:	83 fd       	sbrc	r24, 3
    2286:	d8 c1       	rjmp	.+944    	; 0x2638 <nwkRxTaskHandler+0x456>
		return;
	}
#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    2288:	25 81       	ldd	r18, Z+5	; 0x05
    228a:	36 81       	ldd	r19, Z+6	; 0x06
    228c:	2f 3f       	cpi	r18, 0xFF	; 255
    228e:	3f 4f       	sbci	r19, 0xFF	; 255
    2290:	c9 f4       	brne	.+50     	; 0x22c4 <nwkRxTaskHandler+0xe2>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2292:	d8 01       	movw	r26, r16
    2294:	1f 96       	adiw	r26, 0x0f	; 15
    2296:	2d 91       	ld	r18, X+
    2298:	3c 91       	ld	r19, X
    229a:	50 97       	sbiw	r26, 0x10	; 16
    229c:	f7 01       	movw	r30, r14
    229e:	40 81       	ld	r20, Z
    22a0:	51 81       	ldd	r21, Z+1	; 0x01
    22a2:	42 17       	cp	r20, r18
    22a4:	53 07       	cpc	r21, r19
    22a6:	21 f0       	breq	.+8      	; 0x22b0 <nwkRxTaskHandler+0xce>
    22a8:	2f 3f       	cpi	r18, 0xFF	; 255
    22aa:	3f 4f       	sbci	r19, 0xFF	; 255
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <nwkRxTaskHandler+0xce>
    22ae:	c4 c1       	rjmp	.+904    	; 0x2638 <nwkRxTaskHandler+0x456>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    22b0:	81 ff       	sbrs	r24, 1
    22b2:	04 c0       	rjmp	.+8      	; 0x22bc <nwkRxTaskHandler+0xda>
				frame->state = NWK_RX_STATE_DECRYPT;
    22b4:	e1 e2       	ldi	r30, 0x21	; 33
    22b6:	d8 01       	movw	r26, r16
    22b8:	ec 93       	st	X, r30
    22ba:	be c1       	rjmp	.+892    	; 0x2638 <nwkRxTaskHandler+0x456>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    22bc:	e2 e2       	ldi	r30, 0x22	; 34
    22be:	d8 01       	movw	r26, r16
    22c0:	ec 93       	st	X, r30
    22c2:	ba c1       	rjmp	.+884    	; 0x2638 <nwkRxTaskHandler+0x456>
	if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi)) {
		return;
	}
#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    22c4:	d8 01       	movw	r26, r16
    22c6:	1f 96       	adiw	r26, 0x0f	; 15
    22c8:	2d 91       	ld	r18, X+
    22ca:	3c 91       	ld	r19, X
    22cc:	50 97       	sbiw	r26, 0x10	; 16
    22ce:	2f 3f       	cpi	r18, 0xFF	; 255
    22d0:	3f 4f       	sbci	r19, 0xFF	; 255
    22d2:	11 f4       	brne	.+4      	; 0x22d8 <nwkRxTaskHandler+0xf6>
    22d4:	80 fd       	sbrc	r24, 0
    22d6:	b0 c1       	rjmp	.+864    	; 0x2638 <nwkRxTaskHandler+0x456>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    22d8:	f7 01       	movw	r30, r14
    22da:	20 81       	ld	r18, Z
    22dc:	31 81       	ldd	r19, Z+1	; 0x01
    22de:	d8 01       	movw	r26, r16
    22e0:	1d 96       	adiw	r26, 0x0d	; 13
    22e2:	8d 91       	ld	r24, X+
    22e4:	9c 91       	ld	r25, X
    22e6:	1e 97       	sbiw	r26, 0x0e	; 14
    22e8:	28 17       	cp	r18, r24
    22ea:	39 07       	cpc	r19, r25
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <nwkRxTaskHandler+0x10e>
    22ee:	a4 c1       	rjmp	.+840    	; 0x2638 <nwkRxTaskHandler+0x456>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    22f0:	c8 01       	movw	r24, r16
    22f2:	8e db       	rcall	.-2276   	; 0x1a10 <nwkRouteFrameReceived>
    22f4:	ec eb       	ldi	r30, 0xBC	; 188
    22f6:	fb e0       	ldi	r31, 0x0B	; 11
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    22fc:	82 2c       	mov	r8, r2
    22fe:	93 2c       	mov	r9, r3

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2300:	9c 01       	movw	r18, r24

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2302:	44 81       	ldd	r20, Z+4	; 0x04
    2304:	44 23       	and	r20, r20
    2306:	09 f4       	brne	.+2      	; 0x230a <nwkRxTaskHandler+0x128>
    2308:	74 c0       	rjmp	.+232    	; 0x23f2 <nwkRxTaskHandler+0x210>
    230a:	d8 01       	movw	r26, r16
    230c:	1d 96       	adiw	r26, 0x0d	; 13
    230e:	6d 91       	ld	r22, X+
    2310:	7c 91       	ld	r23, X
    2312:	1e 97       	sbiw	r26, 0x0e	; 14
    2314:	40 81       	ld	r20, Z
    2316:	51 81       	ldd	r21, Z+1	; 0x01
    2318:	64 17       	cp	r22, r20
    231a:	75 07       	cpc	r23, r21
    231c:	09 f0       	breq	.+2      	; 0x2320 <nwkRxTaskHandler+0x13e>
    231e:	6a c0       	rjmp	.+212    	; 0x23f4 <nwkRxTaskHandler+0x212>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    2320:	1c 96       	adiw	r26, 0x0c	; 12
    2322:	8c 91       	ld	r24, X
    2324:	1c 97       	sbiw	r26, 0x0c	; 12
    2326:	f9 01       	movw	r30, r18
    2328:	ee 0f       	add	r30, r30
    232a:	ff 1f       	adc	r31, r31
    232c:	ee 0f       	add	r30, r30
    232e:	ff 1f       	adc	r31, r31
    2330:	e2 0f       	add	r30, r18
    2332:	f3 1f       	adc	r31, r19
    2334:	e4 54       	subi	r30, 0x44	; 68
    2336:	f4 4f       	sbci	r31, 0xF4	; 244
    2338:	92 81       	ldd	r25, Z+2	; 0x02
    233a:	98 1b       	sub	r25, r24

			if (diff < 8) {
    233c:	98 30       	cpi	r25, 0x08	; 8
    233e:	08 f0       	brcs	.+2      	; 0x2342 <nwkRxTaskHandler+0x160>
    2340:	3e c0       	rjmp	.+124    	; 0x23be <nwkRxTaskHandler+0x1dc>
				if (entry->mask & (1 << diff)) {
    2342:	f9 01       	movw	r30, r18
    2344:	ee 0f       	add	r30, r30
    2346:	ff 1f       	adc	r31, r31
    2348:	ee 0f       	add	r30, r30
    234a:	ff 1f       	adc	r31, r31
    234c:	e2 0f       	add	r30, r18
    234e:	f3 1f       	adc	r31, r19
    2350:	e4 54       	subi	r30, 0x44	; 68
    2352:	f4 4f       	sbci	r31, 0xF4	; 244
    2354:	83 81       	ldd	r24, Z+3	; 0x03
    2356:	48 2f       	mov	r20, r24
    2358:	50 e0       	ldi	r21, 0x00	; 0
    235a:	09 2e       	mov	r0, r25
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <nwkRxTaskHandler+0x180>
    235e:	55 95       	asr	r21
    2360:	47 95       	ror	r20
    2362:	0a 94       	dec	r0
    2364:	e2 f7       	brpl	.-8      	; 0x235e <nwkRxTaskHandler+0x17c>
    2366:	40 ff       	sbrs	r20, 0
    2368:	17 c0       	rjmp	.+46     	; 0x2398 <nwkRxTaskHandler+0x1b6>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    236a:	f7 01       	movw	r30, r14
    236c:	20 81       	ld	r18, Z
    236e:	31 81       	ldd	r19, Z+1	; 0x01
    2370:	17 96       	adiw	r26, 0x07	; 7
    2372:	8d 91       	ld	r24, X+
    2374:	9c 91       	ld	r25, X
    2376:	18 97       	sbiw	r26, 0x08	; 8
    2378:	28 17       	cp	r18, r24
    237a:	39 07       	cpc	r19, r25
    237c:	09 f0       	breq	.+2      	; 0x2380 <nwkRxTaskHandler+0x19e>
    237e:	5c c1       	rjmp	.+696    	; 0x2638 <nwkRxTaskHandler+0x456>
						nwkRouteRemove(
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    2380:	1b 96       	adiw	r26, 0x0b	; 11
    2382:	6c 91       	ld	r22, X
    2384:	1b 97       	sbiw	r26, 0x0b	; 11
    2386:	63 fb       	bst	r22, 3
    2388:	66 27       	eor	r22, r22
    238a:	60 f9       	bld	r22, 0

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    238c:	1f 96       	adiw	r26, 0x0f	; 15
    238e:	8d 91       	ld	r24, X+
    2390:	9c 91       	ld	r25, X
    2392:	50 97       	sbiw	r26, 0x10	; 16
    2394:	38 db       	rcall	.-2448   	; 0x1a06 <nwkRouteRemove>
    2396:	50 c1       	rjmp	.+672    	; 0x2638 <nwkRxTaskHandler+0x456>
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    2398:	f9 01       	movw	r30, r18
    239a:	ee 0f       	add	r30, r30
    239c:	ff 1f       	adc	r31, r31
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31
    23a2:	2e 0f       	add	r18, r30
    23a4:	3f 1f       	adc	r19, r31
    23a6:	f9 01       	movw	r30, r18
    23a8:	e4 54       	subi	r30, 0x44	; 68
    23aa:	f4 4f       	sbci	r31, 0xF4	; 244
    23ac:	96 01       	movw	r18, r12
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <nwkRxTaskHandler+0x1d2>
    23b0:	22 0f       	add	r18, r18
    23b2:	33 1f       	adc	r19, r19
    23b4:	9a 95       	dec	r25
    23b6:	e2 f7       	brpl	.-8      	; 0x23b0 <nwkRxTaskHandler+0x1ce>
    23b8:	82 2b       	or	r24, r18
    23ba:	83 83       	std	Z+3, r24	; 0x03
    23bc:	44 c1       	rjmp	.+648    	; 0x2646 <nwkRxTaskHandler+0x464>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    23be:	f9 01       	movw	r30, r18
    23c0:	ee 0f       	add	r30, r30
    23c2:	ff 1f       	adc	r31, r31
    23c4:	ee 0f       	add	r30, r30
    23c6:	ff 1f       	adc	r31, r31
    23c8:	2e 0f       	add	r18, r30
    23ca:	3f 1f       	adc	r19, r31
    23cc:	f9 01       	movw	r30, r18
    23ce:	e4 54       	subi	r30, 0x44	; 68
    23d0:	f4 4f       	sbci	r31, 0xF4	; 244
    23d2:	82 83       	std	Z+2, r24	; 0x02
				entry->mask = (entry->mask << shift) | 1;
    23d4:	83 81       	ldd	r24, Z+3	; 0x03
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	91 95       	neg	r25
    23dc:	a9 01       	movw	r20, r18
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <nwkRxTaskHandler+0x202>
    23e0:	44 0f       	add	r20, r20
    23e2:	55 1f       	adc	r21, r21
    23e4:	9a 95       	dec	r25
    23e6:	e2 f7       	brpl	.-8      	; 0x23e0 <nwkRxTaskHandler+0x1fe>
    23e8:	ca 01       	movw	r24, r20
    23ea:	81 60       	ori	r24, 0x01	; 1
    23ec:	83 83       	std	Z+3, r24	; 0x03
				entry->ttl = DUPLICATE_REJECTION_TTL;
    23ee:	a4 82       	std	Z+4, r10	; 0x04
    23f0:	2a c1       	rjmp	.+596    	; 0x2646 <nwkRxTaskHandler+0x464>
				return false;
			}
		}

		if (0 == entry->ttl) {
			freeEntry = entry;
    23f2:	4f 01       	movw	r8, r30
    23f4:	01 96       	adiw	r24, 0x01	; 1
    23f6:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    23f8:	82 33       	cpi	r24, 0x32	; 50
    23fa:	91 05       	cpc	r25, r1
    23fc:	09 f0       	breq	.+2      	; 0x2400 <nwkRxTaskHandler+0x21e>
    23fe:	80 cf       	rjmp	.-256    	; 0x2300 <nwkRxTaskHandler+0x11e>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    2400:	81 14       	cp	r8, r1
    2402:	91 04       	cpc	r9, r1
    2404:	09 f4       	brne	.+2      	; 0x2408 <nwkRxTaskHandler+0x226>
    2406:	18 c1       	rjmp	.+560    	; 0x2638 <nwkRxTaskHandler+0x456>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    2408:	d8 01       	movw	r26, r16
    240a:	1d 96       	adiw	r26, 0x0d	; 13
    240c:	8d 91       	ld	r24, X+
    240e:	9c 91       	ld	r25, X
    2410:	1e 97       	sbiw	r26, 0x0e	; 14
    2412:	f4 01       	movw	r30, r8
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	80 83       	st	Z, r24
	freeEntry->seq = header->nwkSeq;
    2418:	1c 96       	adiw	r26, 0x0c	; 12
    241a:	8c 91       	ld	r24, X
    241c:	82 83       	std	Z+2, r24	; 0x02
	freeEntry->mask = 1;
    241e:	43 82       	std	Z+3, r4	; 0x03
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2420:	a4 82       	std	Z+4, r10	; 0x04

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    2422:	8e ea       	ldi	r24, 0xAE	; 174
    2424:	9b e0       	ldi	r25, 0x0B	; 11
    2426:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <SYS_TimerStart>
    242a:	0d c1       	rjmp	.+538    	; 0x2646 <nwkRxTaskHandler+0x464>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    242c:	d7 01       	movw	r26, r14
    242e:	2d 91       	ld	r18, X+
    2430:	3c 91       	ld	r19, X
				header->nwkDstAddr &&
    2432:	f8 01       	movw	r30, r16
    2434:	87 85       	ldd	r24, Z+15	; 0x0f
    2436:	90 89       	ldd	r25, Z+16	; 0x10
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2438:	28 17       	cp	r18, r24
    243a:	39 07       	cpc	r19, r25
    243c:	81 f0       	breq	.+32     	; 0x245e <nwkRxTaskHandler+0x27c>
				header->nwkDstAddr &&
    243e:	43 85       	ldd	r20, Z+11	; 0x0b
    2440:	42 fd       	sbrc	r20, 2
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    2442:	0b c0       	rjmp	.+22     	; 0x245a <nwkRxTaskHandler+0x278>
    2444:	c8 01       	movw	r24, r16
    2446:	40 d3       	rcall	.+1664   	; 0x2ac8 <nwkTxBroadcastFrame>
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2448:	d7 01       	movw	r26, r14
    244a:	2d 91       	ld	r18, X+
    244c:	3c 91       	ld	r19, X
    244e:	f8 01       	movw	r30, r16
    2450:	87 85       	ldd	r24, Z+15	; 0x0f
    2452:	90 89       	ldd	r25, Z+16	; 0x10
    2454:	28 17       	cp	r18, r24
    2456:	39 07       	cpc	r19, r25
    2458:	11 f0       	breq	.+4      	; 0x245e <nwkRxTaskHandler+0x27c>
    245a:	01 96       	adiw	r24, 0x01	; 1
    245c:	69 f4       	brne	.+26     	; 0x2478 <nwkRxTaskHandler+0x296>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    245e:	d8 01       	movw	r26, r16
    2460:	1b 96       	adiw	r26, 0x0b	; 11
    2462:	8c 91       	ld	r24, X
    2464:	1b 97       	sbiw	r26, 0x0b	; 11
    2466:	81 ff       	sbrs	r24, 1
    2468:	03 c0       	rjmp	.+6      	; 0x2470 <nwkRxTaskHandler+0x28e>
				frame->state = NWK_RX_STATE_DECRYPT;
    246a:	e1 e2       	ldi	r30, 0x21	; 33
    246c:	ec 93       	st	X, r30
    246e:	e4 c0       	rjmp	.+456    	; 0x2638 <nwkRxTaskHandler+0x456>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    2470:	e2 e2       	ldi	r30, 0x22	; 34
    2472:	d8 01       	movw	r26, r16
    2474:	ec 93       	st	X, r30
    2476:	e0 c0       	rjmp	.+448    	; 0x2638 <nwkRxTaskHandler+0x456>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    2478:	d8 01       	movw	r26, r16
    247a:	17 96       	adiw	r26, 0x07	; 7
    247c:	8d 91       	ld	r24, X+
    247e:	9c 91       	ld	r25, X
    2480:	18 97       	sbiw	r26, 0x08	; 8
    2482:	82 17       	cp	r24, r18
    2484:	93 07       	cpc	r25, r19
    2486:	09 f0       	breq	.+2      	; 0x248a <nwkRxTaskHandler+0x2a8>
    2488:	d7 c0       	rjmp	.+430    	; 0x2638 <nwkRxTaskHandler+0x456>
			frame->state = NWK_RX_STATE_ROUTE;
    248a:	e3 e2       	ldi	r30, 0x23	; 35
    248c:	ec 93       	st	X, r30
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    248e:	d4 c0       	rjmp	.+424    	; 0x2638 <nwkRxTaskHandler+0x456>
    2490:	60 e0       	ldi	r22, 0x00	; 0
    2492:	c8 01       	movw	r24, r16
    2494:	ff d0       	rcall	.+510    	; 0x2694 <nwkSecurityProcess>
		}
		break;
    2496:	d0 c0       	rjmp	.+416    	; 0x2638 <nwkRxTaskHandler+0x456>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    2498:	10 92 bb 0b 	sts	0x0BBB, r1	; 0x800bbb <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    249c:	d8 01       	movw	r26, r16
    249e:	51 96       	adiw	r26, 0x11	; 17
    24a0:	8c 91       	ld	r24, X
    24a2:	51 97       	sbiw	r26, 0x11	; 17
    24a4:	82 95       	swap	r24
    24a6:	8f 70       	andi	r24, 0x0F	; 15
    24a8:	e8 2f       	mov	r30, r24
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	ee 0f       	add	r30, r30
    24ae:	ff 1f       	adc	r31, r31
    24b0:	ee 53       	subi	r30, 0x3E	; 62
    24b2:	f1 4f       	sbci	r31, 0xF1	; 241
    24b4:	01 90       	ld	r0, Z+
    24b6:	f0 81       	ld	r31, Z
    24b8:	e0 2d       	mov	r30, r0
    24ba:	30 97       	sbiw	r30, 0x00	; 0
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <nwkRxTaskHandler+0x2de>
    24be:	60 c0       	rjmp	.+192    	; 0x2580 <nwkRxTaskHandler+0x39e>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    24c0:	1d 96       	adiw	r26, 0x0d	; 13
    24c2:	2d 91       	ld	r18, X+
    24c4:	3c 91       	ld	r19, X
    24c6:	1e 97       	sbiw	r26, 0x0e	; 14
    24c8:	3a 83       	std	Y+2, r19	; 0x02
    24ca:	29 83       	std	Y+1, r18	; 0x01
	ind.dstAddr = header->nwkDstAddr;
    24cc:	1f 96       	adiw	r26, 0x0f	; 15
    24ce:	4d 91       	ld	r20, X+
    24d0:	5c 91       	ld	r21, X
    24d2:	50 97       	sbiw	r26, 0x10	; 16
    24d4:	5c 83       	std	Y+4, r21	; 0x04
    24d6:	4b 83       	std	Y+3, r20	; 0x03
	ind.srcEndpoint = header->nwkSrcEndpoint;
    24d8:	51 96       	adiw	r26, 0x11	; 17
    24da:	9c 91       	ld	r25, X
    24dc:	51 97       	sbiw	r26, 0x11	; 17
    24de:	9f 70       	andi	r25, 0x0F	; 15
    24e0:	9d 83       	std	Y+5, r25	; 0x05
	ind.dstEndpoint = header->nwkDstEndpoint;
    24e2:	8e 83       	std	Y+6, r24	; 0x06
	ind.data = frame->payload;
    24e4:	af 57       	subi	r26, 0x7F	; 127
    24e6:	bf 4f       	sbci	r27, 0xFF	; 255
    24e8:	8d 91       	ld	r24, X+
    24ea:	9c 91       	ld	r25, X
    24ec:	99 87       	std	Y+9, r25	; 0x09
    24ee:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    24f0:	b8 01       	movw	r22, r16
    24f2:	6e 5f       	subi	r22, 0xFE	; 254
    24f4:	7f 4f       	sbci	r23, 0xFF	; 255
	ind.size = nwkFramePayloadSize(frame);
    24f6:	86 1b       	sub	r24, r22
    24f8:	97 0b       	sbc	r25, r23
    24fa:	d8 01       	movw	r26, r16
    24fc:	11 96       	adiw	r26, 0x01	; 1
    24fe:	9c 91       	ld	r25, X
    2500:	11 97       	sbiw	r26, 0x01	; 1
    2502:	98 1b       	sub	r25, r24
    2504:	9a 87       	std	Y+10, r25	; 0x0a
	ind.lqi = frame->rx.lqi;
    2506:	ad 57       	subi	r26, 0x7D	; 125
    2508:	bf 4f       	sbci	r27, 0xFF	; 255
    250a:	8c 91       	ld	r24, X
    250c:	8b 87       	std	Y+11, r24	; 0x0b
	ind.rssi = frame->rx.rssi;
    250e:	11 96       	adiw	r26, 0x01	; 1
    2510:	8c 91       	ld	r24, X
    2512:	8c 87       	std	Y+12, r24	; 0x0c

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    2514:	d8 01       	movw	r26, r16
    2516:	1b 96       	adiw	r26, 0x0b	; 11
    2518:	9c 91       	ld	r25, X
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    251a:	69 2f       	mov	r22, r25
    251c:	63 70       	andi	r22, 0x03	; 3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    251e:	92 fd       	sbrc	r25, 2
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <nwkRxTaskHandler+0x344>
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <nwkRxTaskHandler+0x346>
    2526:	80 e2       	ldi	r24, 0x20	; 32
    2528:	86 2b       	or	r24, r22
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    252a:	93 fd       	sbrc	r25, 3
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <nwkRxTaskHandler+0x350>
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	01 c0       	rjmp	.+2      	; 0x2534 <nwkRxTaskHandler+0x352>
    2532:	90 e4       	ldi	r25, 0x40	; 64
    2534:	89 2b       	or	r24, r25
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    2536:	4f 3f       	cpi	r20, 0xFF	; 255
    2538:	5f 4f       	sbci	r21, 0xFF	; 255
    253a:	11 f0       	breq	.+4      	; 0x2540 <nwkRxTaskHandler+0x35e>
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	01 c0       	rjmp	.+2      	; 0x2542 <nwkRxTaskHandler+0x360>
    2540:	95 2d       	mov	r25, r5
    2542:	89 2b       	or	r24, r25
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    2544:	d8 01       	movw	r26, r16
    2546:	19 96       	adiw	r26, 0x09	; 9
    2548:	4d 91       	ld	r20, X+
    254a:	5c 91       	ld	r21, X
    254c:	1a 97       	sbiw	r26, 0x0a	; 10
    254e:	24 17       	cp	r18, r20
    2550:	35 07       	cpc	r19, r21
    2552:	11 f0       	breq	.+4      	; 0x2558 <nwkRxTaskHandler+0x376>
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	01 c0       	rjmp	.+2      	; 0x255a <nwkRxTaskHandler+0x378>
    2558:	96 2d       	mov	r25, r6
    255a:	89 2b       	or	r24, r25
    255c:	8f 83       	std	Y+7, r24	; 0x07
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    255e:	d8 01       	movw	r26, r16
    2560:	15 96       	adiw	r26, 0x05	; 5
    2562:	2d 91       	ld	r18, X+
    2564:	3c 91       	ld	r19, X
    2566:	16 97       	sbiw	r26, 0x06	; 6
    2568:	2f 3f       	cpi	r18, 0xFF	; 255
    256a:	3f 4f       	sbci	r19, 0xFF	; 255
    256c:	11 f0       	breq	.+4      	; 0x2572 <nwkRxTaskHandler+0x390>
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	01 c0       	rjmp	.+2      	; 0x2574 <nwkRxTaskHandler+0x392>
    2572:	97 2d       	mov	r25, r7
    2574:	89 2b       	or	r24, r25
    2576:	8f 83       	std	Y+7, r24	; 0x07
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    2578:	ce 01       	movw	r24, r28
    257a:	01 96       	adiw	r24, 0x01	; 1
    257c:	19 95       	eicall
    257e:	01 c0       	rjmp	.+2      	; 0x2582 <nwkRxTaskHandler+0x3a0>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    2580:	80 e0       	ldi	r24, 0x00	; 0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    2582:	f8 01       	movw	r30, r16
    2584:	93 85       	ldd	r25, Z+11	; 0x0b
    2586:	90 ff       	sbrs	r25, 0
		ack = false;
    2588:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    258a:	d8 01       	movw	r26, r16
    258c:	17 96       	adiw	r26, 0x07	; 7
    258e:	2d 91       	ld	r18, X+
    2590:	3c 91       	ld	r19, X
    2592:	18 97       	sbiw	r26, 0x08	; 8
    2594:	2f 3f       	cpi	r18, 0xFF	; 255
    2596:	3f 4f       	sbci	r19, 0xFF	; 255
    2598:	69 f4       	brne	.+26     	; 0x25b4 <nwkRxTaskHandler+0x3d2>
    259a:	f7 01       	movw	r30, r14
    259c:	40 81       	ld	r20, Z
    259e:	51 81       	ldd	r21, Z+1	; 0x01
    25a0:	d8 01       	movw	r26, r16
    25a2:	1f 96       	adiw	r26, 0x0f	; 15
    25a4:	2d 91       	ld	r18, X+
    25a6:	3c 91       	ld	r19, X
    25a8:	50 97       	sbiw	r26, 0x10	; 16
    25aa:	42 17       	cp	r20, r18
    25ac:	53 07       	cpc	r21, r19
    25ae:	11 f4       	brne	.+4      	; 0x25b4 <nwkRxTaskHandler+0x3d2>
			nwkIb.addr == frame->header.nwkDstAddr &&
    25b0:	93 ff       	sbrs	r25, 3
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    25b2:	84 2d       	mov	r24, r4
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    25b4:	f8 01       	movw	r30, r16
    25b6:	25 81       	ldd	r18, Z+5	; 0x05
    25b8:	36 81       	ldd	r19, Z+6	; 0x06
    25ba:	2f 3f       	cpi	r18, 0xFF	; 255
    25bc:	3f 4f       	sbci	r19, 0xFF	; 255
    25be:	a1 f1       	breq	.+104    	; 0x2628 <nwkRxTaskHandler+0x446>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    25c0:	d7 01       	movw	r26, r14
    25c2:	2d 91       	ld	r18, X+
    25c4:	3c 91       	ld	r19, X
    25c6:	2f 3f       	cpi	r18, 0xFF	; 255
    25c8:	3f 4f       	sbci	r19, 0xFF	; 255
		ack = false;
	}

	if (ack) {
    25ca:	71 f1       	breq	.+92     	; 0x2628 <nwkRxTaskHandler+0x446>
    25cc:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    25ce:	61 f1       	breq	.+88     	; 0x2628 <nwkRxTaskHandler+0x446>
    25d0:	f4 d8       	rcall	.-3608   	; 0x17ba <nwkFrameAlloc>
    25d2:	4c 01       	movw	r8, r24
    25d4:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}

	nwkFrameCommandInit(ack);
    25d6:	41 f1       	breq	.+80     	; 0x2628 <nwkRxTaskHandler+0x446>
    25d8:	56 d9       	rcall	.-3412   	; 0x1886 <nwkFrameCommandInit>

	ack->size += sizeof(NwkCommandAck_t);
    25da:	f4 01       	movw	r30, r8
    25dc:	81 81       	ldd	r24, Z+1	; 0x01
    25de:	8d 5f       	subi	r24, 0xFD	; 253
    25e0:	81 83       	std	Z+1, r24	; 0x01
	ack->tx.confirm = NULL;
    25e2:	e9 57       	subi	r30, 0x79	; 121
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	11 82       	std	Z+1, r1	; 0x01
    25e8:	10 82       	st	Z, r1

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    25ea:	d8 01       	movw	r26, r16
    25ec:	1b 96       	adiw	r26, 0x0b	; 11
    25ee:	8c 91       	ld	r24, X
    25f0:	1b 97       	sbiw	r26, 0x0b	; 11
    25f2:	86 95       	lsr	r24
    25f4:	81 70       	andi	r24, 0x01	; 1
    25f6:	f4 01       	movw	r30, r8
    25f8:	93 85       	ldd	r25, Z+11	; 0x0b
    25fa:	80 fb       	bst	r24, 0
    25fc:	91 f9       	bld	r25, 1
    25fe:	93 87       	std	Z+11, r25	; 0x0b
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    2600:	1d 96       	adiw	r26, 0x0d	; 13
    2602:	8d 91       	ld	r24, X+
    2604:	9c 91       	ld	r25, X
    2606:	1e 97       	sbiw	r26, 0x0e	; 14
    2608:	90 8b       	std	Z+16, r25	; 0x10
    260a:	87 87       	std	Z+15, r24	; 0x0f

	command = (NwkCommandAck_t *)ack->payload;
    260c:	ef 57       	subi	r30, 0x7F	; 127
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	01 90       	ld	r0, Z+
    2612:	f0 81       	ld	r31, Z
    2614:	e0 2d       	mov	r30, r0
	command->id = NWK_COMMAND_ACK;
    2616:	10 82       	st	Z, r1
	command->control = nwkRxAckControl;
    2618:	80 91 bb 0b 	lds	r24, 0x0BBB	; 0x800bbb <nwkRxAckControl>
	command->seq = frame->header.nwkSeq;
    261c:	82 83       	std	Z+2, r24	; 0x02
    261e:	1c 96       	adiw	r26, 0x0c	; 12
    2620:	8c 91       	ld	r24, X

	nwkTxFrame(ack);
    2622:	81 83       	std	Z+1, r24	; 0x01
    2624:	c4 01       	movw	r24, r8

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    2626:	fc d1       	rcall	.+1016   	; 0x2a20 <nwkTxFrame>
    2628:	d8 01       	movw	r26, r16
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    262a:	bc 92       	st	X, r11
    262c:	05 c0       	rjmp	.+10     	; 0x2638 <nwkRxTaskHandler+0x456>
    262e:	c8 01       	movw	r24, r16
		}
		break;
    2630:	5a da       	rcall	.-2892   	; 0x1ae6 <nwkRouteFrame>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <nwkRxTaskHandler+0x456>
    2634:	c8 01       	movw	r24, r16
    2636:	f8 d8       	rcall	.-3600   	; 0x1828 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2638:	c8 01       	movw	r24, r16
    263a:	00 d9       	rcall	.-3584   	; 0x183c <nwkFrameNext>
    263c:	8c 01       	movw	r16, r24
    263e:	89 2b       	or	r24, r25
    2640:	09 f0       	breq	.+2      	; 0x2644 <nwkRxTaskHandler+0x462>
    2642:	0a ce       	rjmp	.-1004   	; 0x2258 <nwkRxTaskHandler+0x76>
    2644:	07 c0       	rjmp	.+14     	; 0x2654 <nwkRxTaskHandler+0x472>
    2646:	f8 01       	movw	r30, r16
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2648:	87 81       	ldd	r24, Z+7	; 0x07
    264a:	90 85       	ldd	r25, Z+8	; 0x08
    264c:	01 96       	adiw	r24, 0x01	; 1
    264e:	09 f0       	breq	.+2      	; 0x2652 <nwkRxTaskHandler+0x470>
    2650:	fb ce       	rjmp	.-522    	; 0x2448 <nwkRxTaskHandler+0x266>
    2652:	ec ce       	rjmp	.-552    	; 0x242c <nwkRxTaskHandler+0x24a>
    2654:	2c 96       	adiw	r28, 0x0c	; 12
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	1f 91       	pop	r17
    2666:	0f 91       	pop	r16
    2668:	ff 90       	pop	r15
    266a:	ef 90       	pop	r14
    266c:	df 90       	pop	r13
    266e:	cf 90       	pop	r12
    2670:	bf 90       	pop	r11
    2672:	af 90       	pop	r10
    2674:	9f 90       	pop	r9
    2676:	8f 90       	pop	r8
    2678:	7f 90       	pop	r7
    267a:	6f 90       	pop	r6
    267c:	5f 90       	pop	r5
    267e:	4f 90       	pop	r4
    2680:	3f 90       	pop	r3
    2682:	2f 90       	pop	r2
    2684:	08 95       	ret

00002686 <nwkSecurityInit>:
    2686:	10 92 cb 0c 	sts	0x0CCB, r1	; 0x800ccb <nwkSecurityActiveFrames>

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    268a:	10 92 ca 0c 	sts	0x0CCA, r1	; 0x800cca <nwkSecurityActiveFrame+0x1>
    268e:	10 92 c9 0c 	sts	0x0CC9, r1	; 0x800cc9 <nwkSecurityActiveFrame>
    2692:	08 95       	ret

00002694 <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    2694:	66 23       	and	r22, r22
    2696:	21 f0       	breq	.+8      	; 0x26a0 <nwkSecurityProcess+0xc>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    2698:	20 e3       	ldi	r18, 0x30	; 48
    269a:	fc 01       	movw	r30, r24
    269c:	20 83       	st	Z, r18
    269e:	03 c0       	rjmp	.+6      	; 0x26a6 <nwkSecurityProcess+0x12>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    26a0:	21 e3       	ldi	r18, 0x31	; 49
    26a2:	fc 01       	movw	r30, r24
    26a4:	20 83       	st	Z, r18
	}

	++nwkSecurityActiveFrames;
    26a6:	80 91 cb 0c 	lds	r24, 0x0CCB	; 0x800ccb <nwkSecurityActiveFrames>
    26aa:	8f 5f       	subi	r24, 0xFF	; 255
    26ac:	80 93 cb 0c 	sts	0x0CCB, r24	; 0x800ccb <nwkSecurityActiveFrames>
    26b0:	08 95       	ret

000026b2 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    26b2:	cf 93       	push	r28
    26b4:	df 93       	push	r29
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    26b6:	c0 91 c9 0c 	lds	r28, 0x0CC9	; 0x800cc9 <nwkSecurityActiveFrame>
    26ba:	d0 91 ca 0c 	lds	r29, 0x0CCA	; 0x800cca <nwkSecurityActiveFrame+0x1>
    26be:	fe 01       	movw	r30, r28
    26c0:	ef 57       	subi	r30, 0x7F	; 127
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	a0 81       	ld	r26, Z
    26c6:	b1 81       	ldd	r27, Z+1	; 0x01
    26c8:	70 91 c7 0c 	lds	r23, 0x0CC7	; 0x800cc7 <nwkSecurityOffset>
    26cc:	87 2f       	mov	r24, r23
    26ce:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t block;

	block
		= (nwkSecuritySize <
    26d0:	50 91 c8 0c 	lds	r21, 0x0CC8	; 0x800cc8 <nwkSecuritySize>
    26d4:	65 2f       	mov	r22, r21
    26d6:	51 31       	cpi	r21, 0x11	; 17
    26d8:	08 f0       	brcs	.+2      	; 0x26dc <SYS_EncryptConf+0x2a>
    26da:	60 e1       	ldi	r22, 0x10	; 16
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    26dc:	66 23       	and	r22, r22
    26de:	d1 f0       	breq	.+52     	; 0x2714 <SYS_EncryptConf+0x62>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    26e0:	40 91 c6 0c 	lds	r20, 0x0CC6	; 0x800cc6 <nwkSecurityEncrypt>
    26e4:	e6 eb       	ldi	r30, 0xB6	; 182
    26e6:	fc e0       	ldi	r31, 0x0C	; 12
    26e8:	a8 0f       	add	r26, r24
    26ea:	b9 1f       	adc	r27, r25
    26ec:	2f ef       	ldi	r18, 0xFF	; 255
    26ee:	26 0f       	add	r18, r22
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	29 54       	subi	r18, 0x49	; 73
    26f4:	33 4f       	sbci	r19, 0xF3	; 243
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    26f6:	9c 91       	ld	r25, X
    26f8:	80 81       	ld	r24, Z
    26fa:	89 27       	eor	r24, r25
    26fc:	8d 93       	st	X+, r24

		if (nwkSecurityEncrypt) {
    26fe:	44 23       	and	r20, r20
    2700:	11 f0       	breq	.+4      	; 0x2706 <SYS_EncryptConf+0x54>
			vector[i] = text[i];
    2702:	80 83       	st	Z, r24
    2704:	03 c0       	rjmp	.+6      	; 0x270c <SYS_EncryptConf+0x5a>
		} else {
			vector[i] ^= text[i];
    2706:	90 81       	ld	r25, Z
    2708:	89 27       	eor	r24, r25
    270a:	80 83       	st	Z, r24
    270c:	31 96       	adiw	r30, 0x01	; 1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    270e:	e2 17       	cp	r30, r18
    2710:	f3 07       	cpc	r31, r19
    2712:	89 f7       	brne	.-30     	; 0x26f6 <SYS_EncryptConf+0x44>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    2714:	76 0f       	add	r23, r22
    2716:	70 93 c7 0c 	sts	0x0CC7, r23	; 0x800cc7 <nwkSecurityOffset>
	nwkSecuritySize -= block;
    271a:	56 1b       	sub	r21, r22
    271c:	50 93 c8 0c 	sts	0x0CC8, r21	; 0x800cc8 <nwkSecuritySize>

	if (nwkSecuritySize > 0) {
    2720:	55 23       	and	r21, r21
    2722:	19 f0       	breq	.+6      	; 0x272a <SYS_EncryptConf+0x78>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    2724:	82 e3       	ldi	r24, 0x32	; 50
    2726:	88 83       	st	Y, r24
    2728:	02 c0       	rjmp	.+4      	; 0x272e <SYS_EncryptConf+0x7c>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    272a:	84 e3       	ldi	r24, 0x34	; 52
    272c:	88 83       	st	Y, r24
	}
}
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	08 95       	ret

00002734 <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    273c:	80 91 cb 0c 	lds	r24, 0x0CCB	; 0x800ccb <nwkSecurityActiveFrames>
    2740:	88 23       	and	r24, r24
    2742:	09 f4       	brne	.+2      	; 0x2746 <nwkSecurityTaskHandler+0x12>
    2744:	e3 c0       	rjmp	.+454    	; 0x290c <nwkSecurityTaskHandler+0x1d8>
		return;
	}

	if (nwkSecurityActiveFrame) {
    2746:	e0 91 c9 0c 	lds	r30, 0x0CC9	; 0x800cc9 <nwkSecurityActiveFrame>
    274a:	f0 91 ca 0c 	lds	r31, 0x0CCA	; 0x800cca <nwkSecurityActiveFrame+0x1>
    274e:	30 97       	sbiw	r30, 0x00	; 0
    2750:	09 f4       	brne	.+2      	; 0x2754 <nwkSecurityTaskHandler+0x20>
    2752:	d5 c0       	rjmp	.+426    	; 0x28fe <nwkSecurityTaskHandler+0x1ca>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    2754:	80 81       	ld	r24, Z
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    2756:	84 33       	cpi	r24, 0x34	; 52
    2758:	09 f0       	breq	.+2      	; 0x275c <nwkSecurityTaskHandler+0x28>
    275a:	55 c0       	rjmp	.+170    	; 0x2806 <nwkSecurityTaskHandler+0xd2>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    275c:	80 91 c7 0c 	lds	r24, 0x0CC7	; 0x800cc7 <nwkSecurityOffset>
    2760:	df 01       	movw	r26, r30
    2762:	af 57       	subi	r26, 0x7F	; 127
    2764:	bf 4f       	sbci	r27, 0xFF	; 255
    2766:	cd 91       	ld	r28, X+
    2768:	dc 91       	ld	r29, X
    276a:	c8 0f       	add	r28, r24
    276c:	d1 1d       	adc	r29, r1
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    276e:	a6 eb       	ldi	r26, 0xB6	; 182
    2770:	bc e0       	ldi	r27, 0x0C	; 12
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    2772:	0d 91       	ld	r16, X+
    2774:	1d 91       	ld	r17, X+
    2776:	2d 91       	ld	r18, X+
    2778:	3c 91       	ld	r19, X
    277a:	13 97       	sbiw	r26, 0x03	; 3
    277c:	14 96       	adiw	r26, 0x04	; 4
    277e:	4d 91       	ld	r20, X+
    2780:	5d 91       	ld	r21, X+
    2782:	6d 91       	ld	r22, X+
    2784:	7c 91       	ld	r23, X
    2786:	17 97       	sbiw	r26, 0x07	; 7
    2788:	04 27       	eor	r16, r20
    278a:	15 27       	eor	r17, r21
    278c:	26 27       	eor	r18, r22
    278e:	37 27       	eor	r19, r23
    2790:	18 96       	adiw	r26, 0x08	; 8
    2792:	4d 91       	ld	r20, X+
    2794:	5d 91       	ld	r21, X+
    2796:	6d 91       	ld	r22, X+
    2798:	7c 91       	ld	r23, X
    279a:	1b 97       	sbiw	r26, 0x0b	; 11
    279c:	04 27       	eor	r16, r20
    279e:	15 27       	eor	r17, r21
    27a0:	26 27       	eor	r18, r22
    27a2:	37 27       	eor	r19, r23
    27a4:	1c 96       	adiw	r26, 0x0c	; 12
    27a6:	4d 91       	ld	r20, X+
    27a8:	5d 91       	ld	r21, X+
    27aa:	6d 91       	ld	r22, X+
    27ac:	7c 91       	ld	r23, X
    27ae:	1f 97       	sbiw	r26, 0x0f	; 15
    27b0:	d9 01       	movw	r26, r18
    27b2:	c8 01       	movw	r24, r16
    27b4:	84 27       	eor	r24, r20
    27b6:	95 27       	eor	r25, r21
    27b8:	a6 27       	eor	r26, r22
    27ba:	b7 27       	eor	r27, r23
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    27bc:	20 91 c6 0c 	lds	r18, 0x0CC6	; 0x800cc6 <nwkSecurityEncrypt>
    27c0:	22 23       	and	r18, r18
    27c2:	51 f0       	breq	.+20     	; 0x27d8 <nwkSecurityTaskHandler+0xa4>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    27c4:	88 83       	st	Y, r24
    27c6:	99 83       	std	Y+1, r25	; 0x01
    27c8:	aa 83       	std	Y+2, r26	; 0x02
    27ca:	bb 83       	std	Y+3, r27	; 0x03
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    27cc:	81 81       	ldd	r24, Z+1	; 0x01
    27ce:	8c 5f       	subi	r24, 0xFC	; 252
    27d0:	81 83       	std	Z+1, r24	; 0x01
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    27d2:	cf 01       	movw	r24, r30
    27d4:	ea d1       	rcall	.+980    	; 0x2baa <nwkTxEncryptConf>
    27d6:	0d c0       	rjmp	.+26     	; 0x27f2 <nwkSecurityTaskHandler+0xbe>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    27d8:	61 e0       	ldi	r22, 0x01	; 1
    27da:	08 81       	ld	r16, Y
    27dc:	19 81       	ldd	r17, Y+1	; 0x01
    27de:	2a 81       	ldd	r18, Y+2	; 0x02
    27e0:	3b 81       	ldd	r19, Y+3	; 0x03
    27e2:	08 17       	cp	r16, r24
    27e4:	19 07       	cpc	r17, r25
    27e6:	2a 07       	cpc	r18, r26
    27e8:	3b 07       	cpc	r19, r27
    27ea:	09 f0       	breq	.+2      	; 0x27ee <nwkSecurityTaskHandler+0xba>
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	cf 01       	movw	r24, r30
    27f0:	ee dc       	rcall	.-1572   	; 0x21ce <nwkRxDecryptConf>
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    27f2:	10 92 ca 0c 	sts	0x0CCA, r1	; 0x800cca <nwkSecurityActiveFrame+0x1>
    27f6:	10 92 c9 0c 	sts	0x0CC9, r1	; 0x800cc9 <nwkSecurityActiveFrame>
			--nwkSecurityActiveFrames;
    27fa:	80 91 cb 0c 	lds	r24, 0x0CCB	; 0x800ccb <nwkSecurityActiveFrames>
    27fe:	81 50       	subi	r24, 0x01	; 1
    2800:	80 93 cb 0c 	sts	0x0CCB, r24	; 0x800ccb <nwkSecurityActiveFrames>
    2804:	83 c0       	rjmp	.+262    	; 0x290c <nwkSecurityTaskHandler+0x1d8>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    2806:	82 33       	cpi	r24, 0x32	; 50
    2808:	09 f0       	breq	.+2      	; 0x280c <nwkSecurityTaskHandler+0xd8>
    280a:	80 c0       	rjmp	.+256    	; 0x290c <nwkSecurityTaskHandler+0x1d8>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    280c:	83 e3       	ldi	r24, 0x33	; 51
    280e:	80 83       	st	Z, r24
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    2810:	62 ee       	ldi	r22, 0xE2	; 226
    2812:	7e e0       	ldi	r23, 0x0E	; 14
    2814:	86 eb       	ldi	r24, 0xB6	; 182
    2816:	9c e0       	ldi	r25, 0x0C	; 12
    2818:	0e 94 f7 07 	call	0xfee	; 0xfee <SYS_EncryptReq>
    281c:	77 c0       	rjmp	.+238    	; 0x290c <nwkSecurityTaskHandler+0x1d8>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    281e:	dc 01       	movw	r26, r24
    2820:	2c 91       	ld	r18, X
    2822:	20 53       	subi	r18, 0x30	; 48
    2824:	22 30       	cpi	r18, 0x02	; 2
    2826:	08 f0       	brcs	.+2      	; 0x282a <nwkSecurityTaskHandler+0xf6>
    2828:	6c c0       	rjmp	.+216    	; 0x2902 <nwkSecurityTaskHandler+0x1ce>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    282a:	90 93 ca 0c 	sts	0x0CCA, r25	; 0x800cca <nwkSecurityActiveFrame+0x1>
    282e:	80 93 c9 0c 	sts	0x0CC9, r24	; 0x800cc9 <nwkSecurityActiveFrame>
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    2832:	e6 eb       	ldi	r30, 0xB6	; 182
    2834:	fc e0       	ldi	r31, 0x0C	; 12
    2836:	1c 96       	adiw	r26, 0x0c	; 12
    2838:	4c 91       	ld	r20, X
    283a:	1c 97       	sbiw	r26, 0x0c	; 12
    283c:	50 e0       	ldi	r21, 0x00	; 0
    283e:	60 e0       	ldi	r22, 0x00	; 0
    2840:	70 e0       	ldi	r23, 0x00	; 0
    2842:	40 83       	st	Z, r20
    2844:	51 83       	std	Z+1, r21	; 0x01
    2846:	62 83       	std	Z+2, r22	; 0x02
    2848:	73 83       	std	Z+3, r23	; 0x03
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    284a:	1f 96       	adiw	r26, 0x0f	; 15
    284c:	4d 91       	ld	r20, X+
    284e:	5c 91       	ld	r21, X
    2850:	50 97       	sbiw	r26, 0x10	; 16
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	ba 01       	movw	r22, r20
    2858:	55 27       	eor	r21, r21
    285a:	44 27       	eor	r20, r20
			16) | header->nwkDstEndpoint;
    285c:	51 96       	adiw	r26, 0x11	; 17
    285e:	2c 91       	ld	r18, X
    2860:	51 97       	sbiw	r26, 0x11	; 17
    2862:	22 95       	swap	r18
    2864:	2f 70       	andi	r18, 0x0F	; 15
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    2866:	42 2b       	or	r20, r18
    2868:	44 83       	std	Z+4, r20	; 0x04
    286a:	55 83       	std	Z+5, r21	; 0x05
    286c:	66 83       	std	Z+6, r22	; 0x06
    286e:	77 83       	std	Z+7, r23	; 0x07
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    2870:	1d 96       	adiw	r26, 0x0d	; 13
    2872:	4d 91       	ld	r20, X+
    2874:	5c 91       	ld	r21, X
    2876:	1e 97       	sbiw	r26, 0x0e	; 14
    2878:	60 e0       	ldi	r22, 0x00	; 0
    287a:	70 e0       	ldi	r23, 0x00	; 0
    287c:	ba 01       	movw	r22, r20
    287e:	55 27       	eor	r21, r21
    2880:	44 27       	eor	r20, r20
			16) | header->nwkSrcEndpoint;
    2882:	51 96       	adiw	r26, 0x11	; 17
    2884:	2c 91       	ld	r18, X
    2886:	51 97       	sbiw	r26, 0x11	; 17
    2888:	2f 70       	andi	r18, 0x0F	; 15
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    288a:	42 2b       	or	r20, r18
    288c:	40 87       	std	Z+8, r20	; 0x08
    288e:	51 87       	std	Z+9, r21	; 0x09
    2890:	62 87       	std	Z+10, r22	; 0x0a
    2892:	73 87       	std	Z+11, r23	; 0x0b
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    2894:	15 96       	adiw	r26, 0x05	; 5
    2896:	4d 91       	ld	r20, X+
    2898:	5c 91       	ld	r21, X
    289a:	16 97       	sbiw	r26, 0x06	; 6
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	ba 01       	movw	r22, r20
    28a2:	55 27       	eor	r21, r21
    28a4:	44 27       	eor	r20, r20
    28a6:	1b 96       	adiw	r26, 0x0b	; 11
    28a8:	2c 91       	ld	r18, X
    28aa:	1b 97       	sbiw	r26, 0x0b	; 11
    28ac:	42 2b       	or	r20, r18
    28ae:	44 87       	std	Z+12, r20	; 0x0c
    28b0:	55 87       	std	Z+13, r21	; 0x0d
    28b2:	66 87       	std	Z+14, r22	; 0x0e
    28b4:	77 87       	std	Z+15, r23	; 0x0f
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
			nwkSecurityActiveFrame->state) {
    28b6:	6c 91       	ld	r22, X
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    28b8:	61 33       	cpi	r22, 0x31	; 49
    28ba:	31 f4       	brne	.+12     	; 0x28c8 <nwkSecurityTaskHandler+0x194>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    28bc:	11 96       	adiw	r26, 0x01	; 1
    28be:	2c 91       	ld	r18, X
    28c0:	11 97       	sbiw	r26, 0x01	; 1
    28c2:	24 50       	subi	r18, 0x04	; 4
    28c4:	11 96       	adiw	r26, 0x01	; 1
    28c6:	2c 93       	st	X, r18
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    28c8:	fc 01       	movw	r30, r24
    28ca:	ef 57       	subi	r30, 0x7F	; 127
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	40 81       	ld	r20, Z
    28d0:	51 81       	ldd	r21, Z+1	; 0x01
    28d2:	9c 01       	movw	r18, r24
    28d4:	2e 5f       	subi	r18, 0xFE	; 254
    28d6:	3f 4f       	sbci	r19, 0xFF	; 255
    28d8:	42 1b       	sub	r20, r18
    28da:	53 0b       	sbc	r21, r19
    28dc:	fc 01       	movw	r30, r24
    28de:	21 81       	ldd	r18, Z+1	; 0x01
    28e0:	24 1b       	sub	r18, r20
    28e2:	20 93 c8 0c 	sts	0x0CC8, r18	; 0x800cc8 <nwkSecuritySize>
	nwkSecurityOffset = 0;
    28e6:	10 92 c7 0c 	sts	0x0CC7, r1	; 0x800cc7 <nwkSecurityOffset>
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    28ea:	21 e0       	ldi	r18, 0x01	; 1
    28ec:	60 33       	cpi	r22, 0x30	; 48
    28ee:	09 f0       	breq	.+2      	; 0x28f2 <nwkSecurityTaskHandler+0x1be>
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	20 93 c6 0c 	sts	0x0CC6, r18	; 0x800cc6 <nwkSecurityEncrypt>
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    28f6:	22 e3       	ldi	r18, 0x32	; 50
    28f8:	dc 01       	movw	r26, r24
    28fa:	2c 93       	st	X, r18
    28fc:	07 c0       	rjmp	.+14     	; 0x290c <nwkSecurityTaskHandler+0x1d8>
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	90 e0       	ldi	r25, 0x00	; 0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2902:	0e 94 1e 0c 	call	0x183c	; 0x183c <nwkFrameNext>
    2906:	00 97       	sbiw	r24, 0x00	; 0
    2908:	09 f0       	breq	.+2      	; 0x290c <nwkSecurityTaskHandler+0x1d8>
    290a:	89 cf       	rjmp	.-238    	; 0x281e <nwkSecurityTaskHandler+0xea>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    290c:	df 91       	pop	r29
    290e:	cf 91       	pop	r28
    2910:	1f 91       	pop	r17
    2912:	0f 91       	pop	r16
    2914:	08 95       	ret

00002916 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2916:	ef 92       	push	r14
    2918:	ff 92       	push	r15
    291a:	0f 93       	push	r16
    291c:	1f 93       	push	r17
    291e:	cf 93       	push	r28
    2920:	7c 01       	movw	r14, r24
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2922:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	90 e0       	ldi	r25, 0x00	; 0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    2928:	01 e0       	ldi	r16, 0x01	; 1

			if (0 == --frame->tx.timeout) {
				frame->state = NWK_TX_STATE_SEND;
    292a:	c3 e1       	ldi	r28, 0x13	; 19
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    292c:	13 c0       	rjmp	.+38     	; 0x2954 <nwkTxDelayTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    292e:	fc 01       	movw	r30, r24
    2930:	20 81       	ld	r18, Z
    2932:	21 31       	cpi	r18, 0x11	; 17
    2934:	79 f4       	brne	.+30     	; 0x2954 <nwkTxDelayTimerHandler+0x3e>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2936:	ec 57       	subi	r30, 0x7C	; 124
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	20 81       	ld	r18, Z
    293c:	31 81       	ldd	r19, Z+1	; 0x01
    293e:	21 50       	subi	r18, 0x01	; 1
    2940:	31 09       	sbc	r19, r1
    2942:	31 83       	std	Z+1, r19	; 0x01
    2944:	20 83       	st	Z, r18
    2946:	23 2b       	or	r18, r19
    2948:	21 f4       	brne	.+8      	; 0x2952 <nwkTxDelayTimerHandler+0x3c>
				frame->state = NWK_TX_STATE_SEND;
    294a:	fc 01       	movw	r30, r24
    294c:	c0 83       	st	Z, r28
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    294e:	10 2f       	mov	r17, r16
    2950:	01 c0       	rjmp	.+2      	; 0x2954 <nwkTxDelayTimerHandler+0x3e>
    2952:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2954:	0e 94 1e 0c 	call	0x183c	; 0x183c <nwkFrameNext>
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	49 f7       	brne	.-46     	; 0x292e <nwkTxDelayTimerHandler+0x18>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    295c:	11 23       	and	r17, r17
    295e:	19 f0       	breq	.+6      	; 0x2966 <nwkTxDelayTimerHandler+0x50>
		SYS_TimerStart(timer);
    2960:	c7 01       	movw	r24, r14
    2962:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <SYS_TimerStart>
	}
}
    2966:	cf 91       	pop	r28
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	ff 90       	pop	r15
    296e:	ef 90       	pop	r14
    2970:	08 95       	ret

00002972 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    2972:	ef 92       	push	r14
    2974:	ff 92       	push	r15
    2976:	0f 93       	push	r16
    2978:	1f 93       	push	r17
    297a:	cf 93       	push	r28
    297c:	df 93       	push	r29
    297e:	7c 01       	movw	r14, r24
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2980:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	90 e0       	ldi	r25, 0x00	; 0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    2986:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    2988:	d7 e1       	ldi	r29, 0x17	; 23
	frame->tx.status = status;
    298a:	c0 e1       	ldi	r28, 0x10	; 16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    298c:	16 c0       	rjmp	.+44     	; 0x29ba <nwkTxAckWaitTimerHandler+0x48>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    298e:	fc 01       	movw	r30, r24
    2990:	20 81       	ld	r18, Z
    2992:	26 31       	cpi	r18, 0x16	; 22
    2994:	91 f4       	brne	.+36     	; 0x29ba <nwkTxAckWaitTimerHandler+0x48>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2996:	ec 57       	subi	r30, 0x7C	; 124
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	20 81       	ld	r18, Z
    299c:	31 81       	ldd	r19, Z+1	; 0x01
    299e:	21 50       	subi	r18, 0x01	; 1
    29a0:	31 09       	sbc	r19, r1
    29a2:	31 83       	std	Z+1, r19	; 0x01
    29a4:	20 83       	st	Z, r18
    29a6:	23 2b       	or	r18, r19
    29a8:	39 f4       	brne	.+14     	; 0x29b8 <nwkTxAckWaitTimerHandler+0x46>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    29aa:	fc 01       	movw	r30, r24
    29ac:	d0 83       	st	Z, r29
	frame->tx.status = status;
    29ae:	ed 57       	subi	r30, 0x7D	; 125
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	c0 83       	st	Z, r28
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    29b4:	10 2f       	mov	r17, r16
    29b6:	01 c0       	rjmp	.+2      	; 0x29ba <nwkTxAckWaitTimerHandler+0x48>
    29b8:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    29ba:	0e 94 1e 0c 	call	0x183c	; 0x183c <nwkFrameNext>
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	31 f7       	brne	.-52     	; 0x298e <nwkTxAckWaitTimerHandler+0x1c>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    29c2:	11 23       	and	r17, r17
    29c4:	19 f0       	breq	.+6      	; 0x29cc <nwkTxAckWaitTimerHandler+0x5a>
		SYS_TimerStart(timer);
    29c6:	c7 01       	movw	r24, r14
    29c8:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <SYS_TimerStart>
	}
}
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28
    29d0:	1f 91       	pop	r17
    29d2:	0f 91       	pop	r16
    29d4:	ff 90       	pop	r15
    29d6:	ef 90       	pop	r14
    29d8:	08 95       	ret

000029da <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    29da:	10 92 e7 0c 	sts	0x0CE7, r1	; 0x800ce7 <nwkTxPhyActiveFrame+0x1>
    29de:	10 92 e6 0c 	sts	0x0CE6, r1	; 0x800ce6 <nwkTxPhyActiveFrame>

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    29e2:	e9 ed       	ldi	r30, 0xD9	; 217
    29e4:	fc e0       	ldi	r31, 0x0C	; 12
    29e6:	82 e3       	ldi	r24, 0x32	; 50
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	a0 e0       	ldi	r26, 0x00	; 0
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	86 83       	std	Z+6, r24	; 0x06
    29f0:	97 83       	std	Z+7, r25	; 0x07
    29f2:	a0 87       	std	Z+8, r26	; 0x08
    29f4:	b1 87       	std	Z+9, r27	; 0x09
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    29f6:	12 86       	std	Z+10, r1	; 0x0a
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    29f8:	89 eb       	ldi	r24, 0xB9	; 185
    29fa:	94 e1       	ldi	r25, 0x14	; 20
    29fc:	94 87       	std	Z+12, r25	; 0x0c
    29fe:	83 87       	std	Z+11, r24	; 0x0b

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2a00:	ec ec       	ldi	r30, 0xCC	; 204
    2a02:	fc e0       	ldi	r31, 0x0C	; 12
    2a04:	8a e0       	ldi	r24, 0x0A	; 10
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	a0 e0       	ldi	r26, 0x00	; 0
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	86 83       	std	Z+6, r24	; 0x06
    2a0e:	97 83       	std	Z+7, r25	; 0x07
    2a10:	a0 87       	std	Z+8, r26	; 0x08
    2a12:	b1 87       	std	Z+9, r27	; 0x09
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2a14:	12 86       	std	Z+10, r1	; 0x0a
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2a16:	8b e8       	ldi	r24, 0x8B	; 139
    2a18:	94 e1       	ldi	r25, 0x14	; 20
    2a1a:	94 87       	std	Z+12, r25	; 0x0c
    2a1c:	83 87       	std	Z+11, r24	; 0x0b
    2a1e:	08 95       	ret

00002a20 <nwkTxFrame>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    2a20:	cf 93       	push	r28
    2a22:	df 93       	push	r29
    2a24:	ec 01       	movw	r28, r24
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    2a26:	fc 01       	movw	r30, r24
    2a28:	ea 57       	subi	r30, 0x7A	; 122
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 81       	ld	r24, Z
    2a2e:	81 ff       	sbrs	r24, 1
    2a30:	03 c0       	rjmp	.+6      	; 0x2a38 <nwkTxFrame+0x18>
		frame->state = NWK_TX_STATE_DELAY;
    2a32:	92 e1       	ldi	r25, 0x12	; 18
    2a34:	98 83       	st	Y, r25
    2a36:	08 c0       	rjmp	.+16     	; 0x2a48 <nwkTxFrame+0x28>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    2a38:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a3a:	91 ff       	sbrs	r25, 1
    2a3c:	03 c0       	rjmp	.+6      	; 0x2a44 <nwkTxFrame+0x24>
			frame->state = NWK_TX_STATE_ENCRYPT;
    2a3e:	90 e1       	ldi	r25, 0x10	; 16
    2a40:	98 83       	st	Y, r25
    2a42:	02 c0       	rjmp	.+4      	; 0x2a48 <nwkTxFrame+0x28>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    2a44:	92 e1       	ldi	r25, 0x12	; 18
    2a46:	98 83       	st	Y, r25
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    2a48:	fe 01       	movw	r30, r28
    2a4a:	ed 57       	subi	r30, 0x7D	; 125
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	10 82       	st	Z, r1

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    2a50:	80 ff       	sbrs	r24, 0
    2a52:	05 c0       	rjmp	.+10     	; 0x2a5e <nwkTxFrame+0x3e>
		header->macDstPanId = NWK_BROADCAST_PANID;
    2a54:	2f ef       	ldi	r18, 0xFF	; 255
    2a56:	3f ef       	ldi	r19, 0xFF	; 255
    2a58:	3e 83       	std	Y+6, r19	; 0x06
    2a5a:	2d 83       	std	Y+5, r18	; 0x05
    2a5c:	06 c0       	rjmp	.+12     	; 0x2a6a <nwkTxFrame+0x4a>
	} else {
		header->macDstPanId = nwkIb.panId;
    2a5e:	20 91 be 0e 	lds	r18, 0x0EBE	; 0x800ebe <nwkIb+0x2>
    2a62:	30 91 bf 0e 	lds	r19, 0x0EBF	; 0x800ebf <nwkIb+0x3>
    2a66:	3e 83       	std	Y+6, r19	; 0x06
    2a68:	2d 83       	std	Y+5, r18	; 0x05
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    2a6a:	85 70       	andi	r24, 0x05	; 5
    2a6c:	19 f4       	brne	.+6      	; 0x2a74 <nwkTxFrame+0x54>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    2a6e:	ce 01       	movw	r24, r28
    2a70:	17 d8       	rcall	.-4050   	; 0x1aa0 <nwkRoutePrepareTx>
    2a72:	04 c0       	rjmp	.+8      	; 0x2a7c <nwkTxFrame+0x5c>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    2a74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a76:	98 89       	ldd	r25, Y+16	; 0x10
    2a78:	98 87       	std	Y+8, r25	; 0x08
    2a7a:	8f 83       	std	Y+7, r24	; 0x07

	header->macSrcAddr = nwkIb.addr;
    2a7c:	ec eb       	ldi	r30, 0xBC	; 188
    2a7e:	fe e0       	ldi	r31, 0x0E	; 14
    2a80:	80 81       	ld	r24, Z
    2a82:	91 81       	ldd	r25, Z+1	; 0x01
    2a84:	9a 87       	std	Y+10, r25	; 0x0a
    2a86:	89 87       	std	Y+9, r24	; 0x09
	header->macSeq = ++nwkIb.macSeqNum;
    2a88:	85 81       	ldd	r24, Z+5	; 0x05
    2a8a:	8f 5f       	subi	r24, 0xFF	; 255
    2a8c:	85 83       	std	Z+5, r24	; 0x05
    2a8e:	8c 83       	std	Y+4, r24	; 0x04

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    2a90:	8f 81       	ldd	r24, Y+7	; 0x07
    2a92:	98 85       	ldd	r25, Y+8	; 0x08
    2a94:	01 96       	adiw	r24, 0x01	; 1
    2a96:	69 f4       	brne	.+26     	; 0x2ab2 <nwkTxFrame+0x92>
		header->macFcf = 0x8841;
    2a98:	81 e4       	ldi	r24, 0x41	; 65
    2a9a:	98 e8       	ldi	r25, 0x88	; 136
    2a9c:	9b 83       	std	Y+3, r25	; 0x03
    2a9e:	8a 83       	std	Y+2, r24	; 0x02
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2aa0:	68 d3       	rcall	.+1744   	; 0x3172 <rand>
    2aa2:	cc 57       	subi	r28, 0x7C	; 124
    2aa4:	df 4f       	sbci	r29, 0xFF	; 255
    2aa6:	87 70       	andi	r24, 0x07	; 7
    2aa8:	99 27       	eor	r25, r25
    2aaa:	01 96       	adiw	r24, 0x01	; 1
    2aac:	99 83       	std	Y+1, r25	; 0x01
    2aae:	88 83       	st	Y, r24
    2ab0:	08 c0       	rjmp	.+16     	; 0x2ac2 <nwkTxFrame+0xa2>
	} else {
		header->macFcf = 0x8861;
    2ab2:	81 e6       	ldi	r24, 0x61	; 97
    2ab4:	98 e8       	ldi	r25, 0x88	; 136
    2ab6:	9b 83       	std	Y+3, r25	; 0x03
    2ab8:	8a 83       	std	Y+2, r24	; 0x02
		frame->tx.timeout = 0;
    2aba:	cc 57       	subi	r28, 0x7C	; 124
    2abc:	df 4f       	sbci	r29, 0xFF	; 255
    2abe:	19 82       	std	Y+1, r1	; 0x01
    2ac0:	18 82       	st	Y, r1
	}
}
    2ac2:	df 91       	pop	r29
    2ac4:	cf 91       	pop	r28
    2ac6:	08 95       	ret

00002ac8 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    2ac8:	0f 93       	push	r16
    2aca:	1f 93       	push	r17
    2acc:	cf 93       	push	r28
    2ace:	df 93       	push	r29
    2ad0:	8c 01       	movw	r16, r24
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    2ad2:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <nwkFrameAlloc>
    2ad6:	ec 01       	movw	r28, r24
    2ad8:	89 2b       	or	r24, r25
    2ada:	a9 f1       	breq	.+106    	; 0x2b46 <nwkTxBroadcastFrame+0x7e>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    2adc:	82 e1       	ldi	r24, 0x12	; 18
    2ade:	88 83       	st	Y, r24
	newFrame->size = frame->size;
    2ae0:	f8 01       	movw	r30, r16
    2ae2:	81 81       	ldd	r24, Z+1	; 0x01
    2ae4:	89 83       	std	Y+1, r24	; 0x01
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	ed 57       	subi	r30, 0x7D	; 125
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	10 82       	st	Z, r1
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2aee:	41 d3       	rcall	.+1666   	; 0x3172 <rand>
    2af0:	fe 01       	movw	r30, r28
    2af2:	ec 57       	subi	r30, 0x7C	; 124
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	87 70       	andi	r24, 0x07	; 7
    2af8:	99 27       	eor	r25, r25
    2afa:	01 96       	adiw	r24, 0x01	; 1
    2afc:	91 83       	std	Z+1, r25	; 0x01
    2afe:	80 83       	st	Z, r24
	newFrame->tx.confirm = NULL;
    2b00:	33 96       	adiw	r30, 0x03	; 3
    2b02:	11 82       	std	Z+1, r1	; 0x01
    2b04:	10 82       	st	Z, r1
	memcpy(newFrame->data, frame->data, frame->size);
    2b06:	f8 01       	movw	r30, r16
    2b08:	41 81       	ldd	r20, Z+1	; 0x01
    2b0a:	50 e0       	ldi	r21, 0x00	; 0
    2b0c:	b8 01       	movw	r22, r16
    2b0e:	6e 5f       	subi	r22, 0xFE	; 254
    2b10:	7f 4f       	sbci	r23, 0xFF	; 255
    2b12:	ce 01       	movw	r24, r28
    2b14:	02 96       	adiw	r24, 0x02	; 2
    2b16:	3b d3       	rcall	.+1654   	; 0x318e <memcpy>

	newFrame->header.macFcf = 0x8841;
    2b18:	81 e4       	ldi	r24, 0x41	; 65
    2b1a:	98 e8       	ldi	r25, 0x88	; 136
    2b1c:	9b 83       	std	Y+3, r25	; 0x03
    2b1e:	8a 83       	std	Y+2, r24	; 0x02
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    2b20:	8f ef       	ldi	r24, 0xFF	; 255
    2b22:	9f ef       	ldi	r25, 0xFF	; 255
    2b24:	98 87       	std	Y+8, r25	; 0x08
    2b26:	8f 83       	std	Y+7, r24	; 0x07
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    2b28:	f8 01       	movw	r30, r16
    2b2a:	85 81       	ldd	r24, Z+5	; 0x05
    2b2c:	96 81       	ldd	r25, Z+6	; 0x06
    2b2e:	9e 83       	std	Y+6, r25	; 0x06
    2b30:	8d 83       	std	Y+5, r24	; 0x05
	newFrame->header.macSrcAddr = nwkIb.addr;
    2b32:	ec eb       	ldi	r30, 0xBC	; 188
    2b34:	fe e0       	ldi	r31, 0x0E	; 14
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	9a 87       	std	Y+10, r25	; 0x0a
    2b3c:	89 87       	std	Y+9, r24	; 0x09
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    2b3e:	85 81       	ldd	r24, Z+5	; 0x05
    2b40:	8f 5f       	subi	r24, 0xFF	; 255
    2b42:	85 83       	std	Z+5, r24	; 0x05
    2b44:	8c 83       	std	Y+4, r24	; 0x04
}
    2b46:	df 91       	pop	r29
    2b48:	cf 91       	pop	r28
    2b4a:	1f 91       	pop	r17
    2b4c:	0f 91       	pop	r16
    2b4e:	08 95       	ret

00002b50 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    2b50:	cf 93       	push	r28
    2b52:	df 93       	push	r29
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2b54:	fc 01       	movw	r30, r24
    2b56:	21 85       	ldd	r18, Z+9	; 0x09
    2b58:	23 30       	cpi	r18, 0x03	; 3
    2b5a:	e1 f4       	brne	.+56     	; 0x2b94 <nwkTxAckReceived+0x44>
    2b5c:	10 c0       	rjmp	.+32     	; 0x2b7e <nwkTxAckReceived+0x2e>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2b5e:	fc 01       	movw	r30, r24
    2b60:	20 81       	ld	r18, Z
    2b62:	26 31       	cpi	r18, 0x16	; 22
    2b64:	89 f4       	brne	.+34     	; 0x2b88 <nwkTxAckReceived+0x38>
    2b66:	34 85       	ldd	r19, Z+12	; 0x0c
    2b68:	29 81       	ldd	r18, Y+1	; 0x01
    2b6a:	32 13       	cpse	r19, r18
    2b6c:	0d c0       	rjmp	.+26     	; 0x2b88 <nwkTxAckReceived+0x38>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    2b6e:	27 e1       	ldi	r18, 0x17	; 23
    2b70:	20 83       	st	Z, r18
			frame->tx.control = command->control;
    2b72:	2a 81       	ldd	r18, Y+2	; 0x02
    2b74:	ea 57       	subi	r30, 0x7A	; 122
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	20 83       	st	Z, r18
			return true;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	0c c0       	rjmp	.+24     	; 0x2b96 <nwkTxAckReceived+0x46>
    2b7e:	fc 01       	movw	r30, r24

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2b80:	c7 81       	ldd	r28, Z+7	; 0x07
    2b82:	d0 85       	ldd	r29, Z+8	; 0x08
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	90 e0       	ldi	r25, 0x00	; 0

	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2b88:	0e 94 1e 0c 	call	0x183c	; 0x183c <nwkFrameNext>
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	39 f7       	brne	.-50     	; 0x2b5e <nwkTxAckReceived+0xe>
			frame->tx.control = command->control;
			return true;
		}
	}

	return false;
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	01 c0       	rjmp	.+2      	; 0x2b96 <nwkTxAckReceived+0x46>
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
    2b94:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}

	return false;
}
    2b96:	df 91       	pop	r29
    2b98:	cf 91       	pop	r28
    2b9a:	08 95       	ret

00002b9c <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    2b9c:	27 e1       	ldi	r18, 0x17	; 23
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	20 83       	st	Z, r18
	frame->tx.status = status;
    2ba2:	ed 57       	subi	r30, 0x7D	; 125
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	60 83       	st	Z, r22
    2ba8:	08 95       	ret

00002baa <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    2baa:	22 e1       	ldi	r18, 0x12	; 18
    2bac:	fc 01       	movw	r30, r24
    2bae:	20 83       	st	Z, r18
    2bb0:	08 95       	ret

00002bb2 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2bb2:	e0 91 e6 0c 	lds	r30, 0x0CE6	; 0x800ce6 <nwkTxPhyActiveFrame>
    2bb6:	f0 91 e7 0c 	lds	r31, 0x0CE7	; 0x800ce7 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    2bba:	81 30       	cpi	r24, 0x01	; 1
    2bbc:	21 f0       	breq	.+8      	; 0x2bc6 <PHY_DataConf+0x14>
    2bbe:	48 f0       	brcs	.+18     	; 0x2bd2 <PHY_DataConf+0x20>
    2bc0:	82 30       	cpi	r24, 0x02	; 2
    2bc2:	19 f0       	breq	.+6      	; 0x2bca <PHY_DataConf+0x18>
    2bc4:	04 c0       	rjmp	.+8      	; 0x2bce <PHY_DataConf+0x1c>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    2bc6:	80 e2       	ldi	r24, 0x20	; 32
    2bc8:	05 c0       	rjmp	.+10     	; 0x2bd4 <PHY_DataConf+0x22>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    2bca:	81 e2       	ldi	r24, 0x21	; 33
    2bcc:	03 c0       	rjmp	.+6      	; 0x2bd4 <PHY_DataConf+0x22>

	default:
		return NWK_ERROR_STATUS;
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	01 c0       	rjmp	.+2      	; 0x2bd4 <PHY_DataConf+0x22>
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    2bd2:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2bd4:	df 01       	movw	r26, r30
    2bd6:	ad 57       	subi	r26, 0x7D	; 125
    2bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bda:	8c 93       	st	X, r24
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    2bdc:	85 e1       	ldi	r24, 0x15	; 21
    2bde:	80 83       	st	Z, r24
	nwkTxPhyActiveFrame = NULL;
    2be0:	10 92 e7 0c 	sts	0x0CE7, r1	; 0x800ce7 <nwkTxPhyActiveFrame+0x1>
    2be4:	10 92 e6 0c 	sts	0x0CE6, r1	; 0x800ce6 <nwkTxPhyActiveFrame>
	nwkIb.lock--;
    2be8:	ec eb       	ldi	r30, 0xBC	; 188
    2bea:	fe e0       	ldi	r31, 0x0E	; 14
    2bec:	86 a9       	ldd	r24, Z+54	; 0x36
    2bee:	97 a9       	ldd	r25, Z+55	; 0x37
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	97 ab       	std	Z+55, r25	; 0x37
    2bf4:	86 ab       	std	Z+54, r24	; 0x36
    2bf6:	08 95       	ret

00002bf8 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    2bf8:	9f 92       	push	r9
    2bfa:	af 92       	push	r10
    2bfc:	bf 92       	push	r11
    2bfe:	cf 92       	push	r12
    2c00:	df 92       	push	r13
    2c02:	ef 92       	push	r14
    2c04:	ff 92       	push	r15
    2c06:	0f 93       	push	r16
    2c08:	1f 93       	push	r17
    2c0a:	cf 93       	push	r28
    2c0c:	df 93       	push	r29
	NwkFrame_t *frame = NULL;
    2c0e:	c0 e0       	ldi	r28, 0x00	; 0
    2c10:	d0 e0       	ldi	r29, 0x00	; 0

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
				nwkTxPhyActiveFrame = frame;
				frame->state = NWK_TX_STATE_WAIT_CONF;
    2c12:	0f 2e       	mov	r0, r31
    2c14:	f4 e1       	ldi	r31, 0x14	; 20
    2c16:	af 2e       	mov	r10, r31
    2c18:	f0 2d       	mov	r31, r0
				PHY_DataReq(&(frame->size));
				nwkIb.lock++;
    2c1a:	0c eb       	ldi	r16, 0xBC	; 188
    2c1c:	1e e0       	ldi	r17, 0x0E	; 14
					SYS_TimerStart(&nwkTxAckWaitTimer);
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    2c1e:	0f 2e       	mov	r0, r31
    2c20:	f7 e1       	ldi	r31, 0x17	; 23
    2c22:	df 2e       	mov	r13, r31
    2c24:	f0 2d       	mov	r31, r0
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    2c26:	0f 2e       	mov	r0, r31
    2c28:	f6 e1       	ldi	r31, 0x16	; 22
    2c2a:	9f 2e       	mov	r9, r31
    2c2c:	f0 2d       	mov	r31, r0
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    2c2e:	0f 2e       	mov	r0, r31
    2c30:	f5 e1       	ldi	r31, 0x15	; 21
    2c32:	ef 2e       	mov	r14, r31
    2c34:	f1 2c       	mov	r15, r1
    2c36:	f0 2d       	mov	r31, r0
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
				SYS_TimerStart(&nwkTxDelayTimer);
			} else {
				frame->state = NWK_TX_STATE_SEND;
    2c38:	0f 2e       	mov	r0, r31
    2c3a:	f3 e1       	ldi	r31, 0x13	; 19
    2c3c:	cf 2e       	mov	r12, r31
    2c3e:	f0 2d       	mov	r31, r0
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    2c40:	0f 2e       	mov	r0, r31
    2c42:	f1 e1       	ldi	r31, 0x11	; 17
    2c44:	bf 2e       	mov	r11, r31
    2c46:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c48:	6a c0       	rjmp	.+212    	; 0x2d1e <nwkTxTaskHandler+0x126>
		switch (frame->state) {
    2c4a:	88 81       	ld	r24, Y
    2c4c:	83 31       	cpi	r24, 0x13	; 19
    2c4e:	f9 f0       	breq	.+62     	; 0x2c8e <nwkTxTaskHandler+0x96>
    2c50:	28 f4       	brcc	.+10     	; 0x2c5c <nwkTxTaskHandler+0x64>
    2c52:	80 31       	cpi	r24, 0x10	; 16
    2c54:	49 f0       	breq	.+18     	; 0x2c68 <nwkTxTaskHandler+0x70>
    2c56:	82 31       	cpi	r24, 0x12	; 18
    2c58:	59 f0       	breq	.+22     	; 0x2c70 <nwkTxTaskHandler+0x78>
    2c5a:	61 c0       	rjmp	.+194    	; 0x2d1e <nwkTxTaskHandler+0x126>
    2c5c:	85 31       	cpi	r24, 0x15	; 21
    2c5e:	71 f1       	breq	.+92     	; 0x2cbc <nwkTxTaskHandler+0xc4>
    2c60:	87 31       	cpi	r24, 0x17	; 23
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <nwkTxTaskHandler+0x6e>
    2c64:	4b c0       	rjmp	.+150    	; 0x2cfc <nwkTxTaskHandler+0x104>
    2c66:	5b c0       	rjmp	.+182    	; 0x2d1e <nwkTxTaskHandler+0x126>
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    2c68:	61 e0       	ldi	r22, 0x01	; 1
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	13 dd       	rcall	.-1498   	; 0x2694 <nwkSecurityProcess>
		}
		break;
    2c6e:	57 c0       	rjmp	.+174    	; 0x2d1e <nwkTxTaskHandler+0x126>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    2c70:	fe 01       	movw	r30, r28
    2c72:	ec 57       	subi	r30, 0x7C	; 124
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	80 81       	ld	r24, Z
    2c78:	91 81       	ldd	r25, Z+1	; 0x01
    2c7a:	89 2b       	or	r24, r25
    2c7c:	31 f0       	breq	.+12     	; 0x2c8a <nwkTxTaskHandler+0x92>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    2c7e:	b8 82       	st	Y, r11
				SYS_TimerStart(&nwkTxDelayTimer);
    2c80:	8c ec       	ldi	r24, 0xCC	; 204
    2c82:	9c e0       	ldi	r25, 0x0C	; 12
    2c84:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <SYS_TimerStart>
    2c88:	4a c0       	rjmp	.+148    	; 0x2d1e <nwkTxTaskHandler+0x126>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    2c8a:	c8 82       	st	Y, r12
    2c8c:	48 c0       	rjmp	.+144    	; 0x2d1e <nwkTxTaskHandler+0x126>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    2c8e:	80 91 e6 0c 	lds	r24, 0x0CE6	; 0x800ce6 <nwkTxPhyActiveFrame>
    2c92:	90 91 e7 0c 	lds	r25, 0x0CE7	; 0x800ce7 <nwkTxPhyActiveFrame+0x1>
    2c96:	89 2b       	or	r24, r25
    2c98:	09 f0       	breq	.+2      	; 0x2c9c <nwkTxTaskHandler+0xa4>
    2c9a:	41 c0       	rjmp	.+130    	; 0x2d1e <nwkTxTaskHandler+0x126>
				nwkTxPhyActiveFrame = frame;
    2c9c:	d0 93 e7 0c 	sts	0x0CE7, r29	; 0x800ce7 <nwkTxPhyActiveFrame+0x1>
    2ca0:	c0 93 e6 0c 	sts	0x0CE6, r28	; 0x800ce6 <nwkTxPhyActiveFrame>
				frame->state = NWK_TX_STATE_WAIT_CONF;
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	a1 92       	st	Z+, r10
    2ca8:	cf 01       	movw	r24, r30
				PHY_DataReq(&(frame->size));
    2caa:	0e 94 ff 09 	call	0x13fe	; 0x13fe <PHY_DataReq>
				nwkIb.lock++;
    2cae:	f8 01       	movw	r30, r16
    2cb0:	86 a9       	ldd	r24, Z+54	; 0x36
    2cb2:	97 a9       	ldd	r25, Z+55	; 0x37
    2cb4:	01 96       	adiw	r24, 0x01	; 1
    2cb6:	97 ab       	std	Z+55, r25	; 0x37
    2cb8:	86 ab       	std	Z+54, r24	; 0x36
    2cba:	31 c0       	rjmp	.+98     	; 0x2d1e <nwkTxTaskHandler+0x126>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	ed 57       	subi	r30, 0x7D	; 125
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 81       	ld	r24, Z
    2cc4:	81 11       	cpse	r24, r1
    2cc6:	18 c0       	rjmp	.+48     	; 0x2cf8 <nwkTxTaskHandler+0x100>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    2cc8:	2d 85       	ldd	r18, Y+13	; 0x0d
    2cca:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ccc:	f8 01       	movw	r30, r16
    2cce:	80 81       	ld	r24, Z
    2cd0:	91 81       	ldd	r25, Z+1	; 0x01
    2cd2:	28 17       	cp	r18, r24
    2cd4:	39 07       	cpc	r19, r25
    2cd6:	71 f4       	brne	.+28     	; 0x2cf4 <nwkTxTaskHandler+0xfc>
    2cd8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cda:	80 ff       	sbrs	r24, 0
    2cdc:	0b c0       	rjmp	.+22     	; 0x2cf4 <nwkTxTaskHandler+0xfc>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    2cde:	98 82       	st	Y, r9
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	ec 57       	subi	r30, 0x7C	; 124
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	f1 82       	std	Z+1, r15	; 0x01
    2ce8:	e0 82       	st	Z, r14
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    2cea:	89 ed       	ldi	r24, 0xD9	; 217
    2cec:	9c e0       	ldi	r25, 0x0C	; 12
    2cee:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <SYS_TimerStart>
    2cf2:	15 c0       	rjmp	.+42     	; 0x2d1e <nwkTxTaskHandler+0x126>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    2cf4:	d8 82       	st	Y, r13
    2cf6:	13 c0       	rjmp	.+38     	; 0x2d1e <nwkTxTaskHandler+0x126>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    2cf8:	d8 82       	st	Y, r13
    2cfa:	11 c0       	rjmp	.+34     	; 0x2d1e <nwkTxTaskHandler+0x126>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nwkRouteFrameSent>
#endif
			if (NULL == frame->tx.confirm) {
    2d02:	fe 01       	movw	r30, r28
    2d04:	e9 57       	subi	r30, 0x79	; 121
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	01 90       	ld	r0, Z+
    2d0a:	f0 81       	ld	r31, Z
    2d0c:	e0 2d       	mov	r30, r0
    2d0e:	30 97       	sbiw	r30, 0x00	; 0
    2d10:	21 f4       	brne	.+8      	; 0x2d1a <nwkTxTaskHandler+0x122>
				nwkFrameFree(frame);
    2d12:	ce 01       	movw	r24, r28
    2d14:	0e 94 14 0c 	call	0x1828	; 0x1828 <nwkFrameFree>
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <nwkTxTaskHandler+0x126>
			} else {
				frame->tx.confirm(frame);
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	19 95       	eicall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2d1e:	ce 01       	movw	r24, r28
    2d20:	0e 94 1e 0c 	call	0x183c	; 0x183c <nwkFrameNext>
    2d24:	ec 01       	movw	r28, r24
    2d26:	89 2b       	or	r24, r25
    2d28:	09 f0       	breq	.+2      	; 0x2d2c <nwkTxTaskHandler+0x134>
    2d2a:	8f cf       	rjmp	.-226    	; 0x2c4a <nwkTxTaskHandler+0x52>

		default:
			break;
		}
	}
}
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	1f 91       	pop	r17
    2d32:	0f 91       	pop	r16
    2d34:	ff 90       	pop	r15
    2d36:	ef 90       	pop	r14
    2d38:	df 90       	pop	r13
    2d3a:	cf 90       	pop	r12
    2d3c:	bf 90       	pop	r11
    2d3e:	af 90       	pop	r10
    2d40:	9f 90       	pop	r9
    2d42:	08 95       	ret

00002d44 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
    2d44:	2c 9a       	sbi	0x05, 4	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
    2d46:	24 9a       	sbi	0x04, 4	; 4
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    2d48:	6c 98       	cbi	0x0d, 4	; 13
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
    2d4a:	74 9a       	sbi	0x0e, 4	; 14
    2d4c:	08 95       	ret

00002d4e <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
	appDataReqBusy = false;
    2d4e:	10 92 9b 0e 	sts	0x0E9B, r1	; 0x800e9b <appDataReqBusy>
    2d52:	08 95       	ret

00002d54 <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    2d54:	0f 93       	push	r16
    2d56:	1f 93       	push	r17
    2d58:	cf 93       	push	r28
	for (uint8_t i = 0; i < ind->size; i++) {
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	19 96       	adiw	r26, 0x09	; 9
    2d5e:	2c 91       	ld	r18, X
    2d60:	22 23       	and	r18, r18
    2d62:	89 f0       	breq	.+34     	; 0x2d86 <appDataInd+0x32>
    2d64:	8c 01       	movw	r16, r24
    2d66:	c0 e0       	ldi	r28, 0x00	; 0
		sio2host_putchar(ind->data[i]);
    2d68:	d8 01       	movw	r26, r16
    2d6a:	17 96       	adiw	r26, 0x07	; 7
    2d6c:	ed 91       	ld	r30, X+
    2d6e:	fc 91       	ld	r31, X
    2d70:	18 97       	sbiw	r26, 0x08	; 8
    2d72:	ec 0f       	add	r30, r28
    2d74:	f1 1d       	adc	r31, r1
    2d76:	80 81       	ld	r24, Z
    2d78:	0e 94 60 02 	call	0x4c0	; 0x4c0 <sio2host_putchar>

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	for (uint8_t i = 0; i < ind->size; i++) {
    2d7c:	cf 5f       	subi	r28, 0xFF	; 255
    2d7e:	f8 01       	movw	r30, r16
    2d80:	81 85       	ldd	r24, Z+9	; 0x09
    2d82:	c8 17       	cp	r28, r24
    2d84:	88 f3       	brcs	.-30     	; 0x2d68 <appDataInd+0x14>
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
    2d86:	80 e1       	ldi	r24, 0x10	; 16
    2d88:	83 b9       	out	0x03, r24	; 3
		sio2host_putchar(ind->data[i]);
	}
	LED_Toggle(LED0);
	return true;
}
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	cf 91       	pop	r28
    2d8e:	1f 91       	pop	r17
    2d90:	0f 91       	pop	r16
    2d92:	08 95       	ret

00002d94 <appSendData>:
}

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
	if (appDataReqBusy || 0 == appUartBufferPtr) {
    2d98:	80 91 9b 0e 	lds	r24, 0x0E9B	; 0x800e9b <appDataReqBusy>
    2d9c:	81 11       	cpse	r24, r1
    2d9e:	26 c0       	rjmp	.+76     	; 0x2dec <appSendData+0x58>
    2da0:	c0 91 c8 0d 	lds	r28, 0x0DC8	; 0x800dc8 <appUartBufferPtr>
    2da4:	cc 23       	and	r28, r28
    2da6:	11 f1       	breq	.+68     	; 0x2dec <appSendData+0x58>
		return;
	}

	memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
    2da8:	4c 2f       	mov	r20, r28
    2daa:	50 e0       	ldi	r21, 0x00	; 0
    2dac:	69 ec       	ldi	r22, 0xC9	; 201
    2dae:	7d e0       	ldi	r23, 0x0D	; 13
    2db0:	82 e3       	ldi	r24, 0x32	; 50
    2db2:	9e e0       	ldi	r25, 0x0E	; 14
    2db4:	ec d1       	rcall	.+984    	; 0x318e <memcpy>

	appDataReq.dstAddr = 1 - APP_ADDR;
    2db6:	ec e9       	ldi	r30, 0x9C	; 156
    2db8:	fe e0       	ldi	r31, 0x0E	; 14
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	96 83       	std	Z+6, r25	; 0x06
    2dc0:	85 83       	std	Z+5, r24	; 0x05
	appDataReq.dstEndpoint = APP_ENDPOINT;
    2dc2:	d1 e0       	ldi	r29, 0x01	; 1
    2dc4:	d7 83       	std	Z+7, r29	; 0x07
	appDataReq.srcEndpoint = APP_ENDPOINT;
    2dc6:	d0 87       	std	Z+8, r29	; 0x08
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    2dc8:	82 e0       	ldi	r24, 0x02	; 2
    2dca:	81 87       	std	Z+9, r24	; 0x09
	appDataReq.data = appDataReqBuffer;
    2dcc:	82 e3       	ldi	r24, 0x32	; 50
    2dce:	9e e0       	ldi	r25, 0x0E	; 14
    2dd0:	93 87       	std	Z+11, r25	; 0x0b
    2dd2:	82 87       	std	Z+10, r24	; 0x0a
	appDataReq.size = appUartBufferPtr;
    2dd4:	c4 87       	std	Z+12, r28	; 0x0c
	appDataReq.confirm = appDataConf;
    2dd6:	87 ea       	ldi	r24, 0xA7	; 167
    2dd8:	96 e1       	ldi	r25, 0x16	; 22
    2dda:	96 87       	std	Z+14, r25	; 0x0e
    2ddc:	85 87       	std	Z+13, r24	; 0x0d
	NWK_DataReq(&appDataReq);
    2dde:	cf 01       	movw	r24, r30
    2de0:	0e 94 02 0b 	call	0x1604	; 0x1604 <NWK_DataReq>

	appUartBufferPtr = 0;
    2de4:	10 92 c8 0d 	sts	0x0DC8, r1	; 0x800dc8 <appUartBufferPtr>
	appDataReqBusy = true;
    2de8:	d0 93 9b 0e 	sts	0x0E9B, r29	; 0x800e9b <appDataReqBusy>
	//LED_Toggle(LED0);
}
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	08 95       	ret

00002df2 <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
	appSendData();
    2df2:	d0 cf       	rjmp	.-96     	; 0x2d94 <appSendData>
    2df4:	08 95       	ret

00002df6 <adc_rx>:
		count = 0;
	}
}

uint8_t adc_rx(uint8_t *data, uint8_t max_length)
{
    2df6:	dc 01       	movw	r26, r24
	uint8_t data_received = 0;
	if(adc_rx_buf_tail >= adc_rx_buf_head)
    2df8:	80 91 ec 0c 	lds	r24, 0x0CEC	; 0x800cec <adc_rx_buf_tail>
    2dfc:	90 91 eb 0c 	lds	r25, 0x0CEB	; 0x800ceb <adc_rx_buf_head>
    2e00:	89 17       	cp	r24, r25
    2e02:	28 f0       	brcs	.+10     	; 0x2e0e <adc_rx+0x18>
	{
		adc_rx_count = adc_rx_buf_tail - adc_rx_buf_head;
    2e04:	28 2f       	mov	r18, r24
    2e06:	29 1b       	sub	r18, r25
    2e08:	20 93 ea 0c 	sts	0x0CEA, r18	; 0x800cea <adc_rx_count>
    2e0c:	05 c0       	rjmp	.+10     	; 0x2e18 <adc_rx+0x22>
	}
	else
	{
		adc_rx_count = adc_rx_buf_tail + (APP_RX_BUF_SIZE - adc_rx_buf_head);
    2e0e:	2d e6       	ldi	r18, 0x6D	; 109
    2e10:	28 0f       	add	r18, r24
    2e12:	29 1b       	sub	r18, r25
    2e14:	20 93 ea 0c 	sts	0x0CEA, r18	; 0x800cea <adc_rx_count>
	}
	
	if (0 == adc_rx_count) {
    2e18:	90 91 ea 0c 	lds	r25, 0x0CEA	; 0x800cea <adc_rx_count>
    2e1c:	99 23       	and	r25, r25
    2e1e:	31 f1       	breq	.+76     	; 0x2e6c <adc_rx+0x76>
		return 0;
	}

	if (APP_RX_BUF_SIZE <= adc_rx_count) {
    2e20:	9d 36       	cpi	r25, 0x6D	; 109
    2e22:	40 f0       	brcs	.+16     	; 0x2e34 <adc_rx+0x3e>
		/*
		 * Bytes between head and tail are overwritten by new data.
		 * The oldest data in buffer is the one to which the tail is
		 * pointing. So reading operation should start from the tail.
		 */
		adc_rx_buf_head = adc_rx_buf_tail;
    2e24:	80 93 eb 0c 	sts	0x0CEB, r24	; 0x800ceb <adc_rx_buf_head>
		/*
		 * This is a buffer overflow case. But still only the number of
		 * bytes equivalent to
		 * full buffer size are useful.
		 */
		adc_rx_count = APP_RX_BUF_SIZE;
    2e28:	8d e6       	ldi	r24, 0x6D	; 109
    2e2a:	80 93 ea 0c 	sts	0x0CEA, r24	; 0x800cea <adc_rx_count>

		/* Bytes received is more than or equal to buffer. */
		if (APP_RX_BUF_SIZE <= max_length) {
    2e2e:	6d 36       	cpi	r22, 0x6D	; 109
    2e30:	38 f4       	brcc	.+14     	; 0x2e40 <adc_rx+0x4a>
    2e32:	03 c0       	rjmp	.+6      	; 0x2e3a <adc_rx+0x44>
    2e34:	96 17       	cp	r25, r22
    2e36:	08 f4       	brcc	.+2      	; 0x2e3a <adc_rx+0x44>
    2e38:	69 2f       	mov	r22, r25
			max_length = adc_rx_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
    2e3a:	61 11       	cpse	r22, r1
    2e3c:	02 c0       	rjmp	.+4      	; 0x2e42 <adc_rx+0x4c>
    2e3e:	18 c0       	rjmp	.+48     	; 0x2e70 <adc_rx+0x7a>
			 * Requested receive length (max_length) is more than
			 * the
			 * max size of receive buffer, but at max the full
			 * buffer can be read.
			 */
			max_length = APP_RX_BUF_SIZE;
    2e40:	6d e6       	ldi	r22, 0x6D	; 109
    2e42:	90 91 eb 0c 	lds	r25, 0x0CEB	; 0x800ceb <adc_rx_buf_head>
    2e46:	26 2f       	mov	r18, r22
	}

	data_received = max_length;
	while (max_length > 0) {
		/* Start to copy from head. */
		*data = adc_rx_buffer[adc_rx_buf_head];
    2e48:	e9 2f       	mov	r30, r25
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	e3 51       	subi	r30, 0x13	; 19
    2e4e:	f3 4f       	sbci	r31, 0xF3	; 243
    2e50:	30 81       	ld	r19, Z
    2e52:	3d 93       	st	X+, r19
		data++;
		max_length--;
    2e54:	21 50       	subi	r18, 0x01	; 1
		if ((APP_RX_BUF_SIZE - 1) == adc_rx_buf_head) {
    2e56:	9c 36       	cpi	r25, 0x6C	; 108
    2e58:	11 f0       	breq	.+4      	; 0x2e5e <adc_rx+0x68>
			adc_rx_buf_head = 0;
		}
		else
		{
			adc_rx_buf_head++;
    2e5a:	9f 5f       	subi	r25, 0xFF	; 255
    2e5c:	01 c0       	rjmp	.+2      	; 0x2e60 <adc_rx+0x6a>
		/* Start to copy from head. */
		*data = adc_rx_buffer[adc_rx_buf_head];
		data++;
		max_length--;
		if ((APP_RX_BUF_SIZE - 1) == adc_rx_buf_head) {
			adc_rx_buf_head = 0;
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
			max_length = adc_rx_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
    2e60:	21 11       	cpse	r18, r1
    2e62:	f2 cf       	rjmp	.-28     	; 0x2e48 <adc_rx+0x52>
    2e64:	90 93 eb 0c 	sts	0x0CEB, r25	; 0x800ceb <adc_rx_buf_head>
    2e68:	86 2f       	mov	r24, r22
    2e6a:	08 95       	ret
	{
		adc_rx_count = adc_rx_buf_tail + (APP_RX_BUF_SIZE - adc_rx_buf_head);
	}
	
	if (0 == adc_rx_count) {
		return 0;
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	08 95       	ret
		else
		{
			adc_rx_buf_head++;
		}
	}
	return data_received;
    2e70:	80 e0       	ldi	r24, 0x00	; 0
}
    2e72:	08 95       	ret

00002e74 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
    2e74:	0e 94 ba 01 	call	0x374	; 0x374 <sysclk_init>
	board_init();
    2e78:	65 df       	rcall	.-310    	; 0x2d44 <board_init>
	/*Initiates the wireless system*/
	SYS_Init();
    2e7a:	0e 94 f6 06 	call	0xdec	; 0xdec <SYS_Init>
 * \param prescaler   ADC clock prescaler
 *					  ADC voltage reference
 */
static inline void adc_init(enum adc_prescaler prescaler, enum adc_voltage_reference vref, enum adc_mux_setting input, bool irq_e )
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    2e7e:	ea e7       	ldi	r30, 0x7A	; 122
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	87 e8       	ldi	r24, 0x87	; 135
    2e84:	80 83       	st	Z, r24
	if(irq_e){
		ADCSRA |= (1 << ADIE); //Enable ADC interrupt
    2e86:	80 81       	ld	r24, Z
    2e88:	88 60       	ori	r24, 0x08	; 8
    2e8a:	80 83       	st	Z, r24
 */
static inline void adc_set_voltage_reference(enum adc_voltage_reference vref)
{
	uint8_t temp;

	temp = (ADMUX & ~(ADC_VREF_MASK));
    2e8c:	ec e7       	ldi	r30, 0x7C	; 124
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
	temp |= (uint8_t)vref;
    2e92:	80 6c       	ori	r24, 0xC0	; 192
	ADMUX = temp;
    2e94:	80 83       	st	Z, r24
 */
static inline void adc_set_mux(enum adc_mux_setting input)
{
	uint8_t temp;

	temp = (ADMUX & ~(ADC_MUX_MASK));
    2e96:	80 81       	ld	r24, Z

#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
    2e98:	98 e0       	ldi	r25, 0x08	; 8
    2e9a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	} else {
		ADCSRB &= ~(1 << MUX5);
	}

	/* mask out MUX5 for ADMUX. */
	temp |= ((uint8_t)input & ADC_MUX_MASK);
    2e9e:	80 7e       	andi	r24, 0xE0	; 224
    2ea0:	89 60       	ori	r24, 0x09	; 9
#else
	temp |= (uint8_t)input;
#endif
	ADMUX = temp;
    2ea2:	80 83       	st	Z, r24
	/*Initiates internal ADC, select temp sensor to test 
	ADC functionality. By default, cont conversions*/
	adc_init( ADC_PRESCALER_DIV128, ADC_VREF_1V6, ADC_MUX_TEMP_SENSOR, true );
	cpu_irq_enable();
    2ea4:	78 94       	sei
}

/*  \brief Start ADC conversion */
static inline void adc_start_conversion(void)
{
	ADCSRA |= (1 << ADSC);
    2ea6:	0f 2e       	mov	r0, r31
    2ea8:	fa e7       	ldi	r31, 0x7A	; 122
    2eaa:	af 2e       	mov	r10, r31
    2eac:	b1 2c       	mov	r11, r1
    2eae:	f0 2d       	mov	r31, r0
	
	PHY_SetRxState(true);

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    2eb0:	0f 2e       	mov	r0, r31
    2eb2:	fd ea       	ldi	r31, 0xAD	; 173
    2eb4:	cf 2e       	mov	r12, r31
    2eb6:	fe e0       	ldi	r31, 0x0E	; 14
    2eb8:	df 2e       	mov	r13, r31
    2eba:	f0 2d       	mov	r31, r0
    2ebc:	0f 2e       	mov	r0, r31
    2ebe:	f4 e1       	ldi	r31, 0x14	; 20
    2ec0:	4f 2e       	mov	r4, r31
    2ec2:	51 2c       	mov	r5, r1
    2ec4:	61 2c       	mov	r6, r1
    2ec6:	71 2c       	mov	r7, r1
    2ec8:	f0 2d       	mov	r31, r0
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
	appTimer.handler = appTimerHandler;
    2eca:	0f 2e       	mov	r0, r31
    2ecc:	f9 ef       	ldi	r31, 0xF9	; 249
    2ece:	8f 2e       	mov	r8, r31
    2ed0:	f6 e1       	ldi	r31, 0x16	; 22
    2ed2:	9f 2e       	mov	r9, r31
    2ed4:	f0 2d       	mov	r31, r0
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 0;

	// Check if button is high or low for the moment
	uint8_t current_state = (~PINE & (1<<PORTE4)) != 0;
    2ed6:	33 24       	eor	r3, r3
    2ed8:	33 94       	inc	r3
    2eda:	21 2c       	mov	r2, r1
    2edc:	8c b1       	in	r24, 0x0c	; 12
    2ede:	93 2d       	mov	r25, r3
    2ee0:	28 2f       	mov	r18, r24
    2ee2:	20 71       	andi	r18, 0x10	; 16
    2ee4:	84 fd       	sbrc	r24, 4
    2ee6:	92 2d       	mov	r25, r2
	if(current_state != button_state) {
    2ee8:	80 91 e9 0c 	lds	r24, 0x0CE9	; 0x800ce9 <button_state.3456>
    2eec:	98 17       	cp	r25, r24
    2eee:	81 f0       	breq	.+32     	; 0x2f10 <main+0x9c>
		// Button state is about to be changed, increase counter
		count++;
    2ef0:	80 91 e8 0c 	lds	r24, 0x0CE8	; 0x800ce8 <count.3455>
    2ef4:	8f 5f       	subi	r24, 0xFF	; 255
    2ef6:	80 93 e8 0c 	sts	0x0CE8, r24	; 0x800ce8 <count.3455>
		if(count >= 4) {
    2efa:	84 30       	cpi	r24, 0x04	; 4
    2efc:	58 f0       	brcs	.+22     	; 0x2f14 <main+0xa0>
			// The button have not bounced for four checks, change state
			button_state = current_state;
    2efe:	90 93 e9 0c 	sts	0x0CE9, r25	; 0x800ce9 <button_state.3456>
			// If the button was pressed (not released), tell main so
			if(current_state != 0) {
    2f02:	21 11       	cpse	r18, r1
    2f04:	02 c0       	rjmp	.+4      	; 0x2f0a <main+0x96>
				button_down = 1;
    2f06:	30 92 f4 0e 	sts	0x0EF4, r3	; 0x800ef4 <button_down>
			}
			count = 0;
    2f0a:	20 92 e8 0c 	sts	0x0CE8, r2	; 0x800ce8 <count.3455>
    2f0e:	02 c0       	rjmp	.+4      	; 0x2f14 <main+0xa0>
		}
	}
	else{
		// Reset counter
		count = 0;
    2f10:	20 92 e8 0c 	sts	0x0CE8, r2	; 0x800ce8 <count.3455>
	cpu_irq_enable();

	while (1)
	{
		debounce();
		if ( button_down ){
    2f14:	80 91 f4 0e 	lds	r24, 0x0EF4	; 0x800ef4 <button_down>
    2f18:	88 23       	and	r24, r24
    2f1a:	31 f0       	breq	.+12     	; 0x2f28 <main+0xb4>
			// Clear flag
			button_down = 0;
    2f1c:	20 92 f4 0e 	sts	0x0EF4, r2	; 0x800ef4 <button_down>
    2f20:	d5 01       	movw	r26, r10
    2f22:	8c 91       	ld	r24, X
    2f24:	80 64       	ori	r24, 0x40	; 64
    2f26:	8c 93       	st	X, r24
			adc_start_conversion();
		}
		SYS_TaskHandler();
    2f28:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SYS_TaskHandler>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
	switch (appState) {
    2f2c:	80 91 ba 0e 	lds	r24, 0x0EBA	; 0x800eba <appState>
    2f30:	81 11       	cpse	r24, r1
    2f32:	1d c0       	rjmp	.+58     	; 0x2f6e <main+0xfa>
}
/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
	NWK_SetAddr(APP_ADDR);
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	0e 94 be 0a 	call	0x157c	; 0x157c <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
    2f3c:	89 e3       	ldi	r24, 0x39	; 57
    2f3e:	92 e1       	ldi	r25, 0x12	; 18
    2f40:	0e 94 c4 0a 	call	0x1588	; 0x1588 <NWK_SetPanId>
	PHY_SetChannel(APP_CHANNEL);
    2f44:	8f e0       	ldi	r24, 0x0F	; 15
    2f46:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <PHY_SetChannel>
	
	PHY_SetRxState(true);
    2f4a:	83 2d       	mov	r24, r3
    2f4c:	0e 94 ce 09 	call	0x139c	; 0x139c <PHY_SetRxState>

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    2f50:	6a ea       	ldi	r22, 0xAA	; 170
    2f52:	76 e1       	ldi	r23, 0x16	; 22
    2f54:	83 2d       	mov	r24, r3
    2f56:	0e 94 ca 0a 	call	0x1594	; 0x1594 <NWK_OpenEndpoint>

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    2f5a:	f6 01       	movw	r30, r12
    2f5c:	46 82       	std	Z+6, r4	; 0x06
    2f5e:	57 82       	std	Z+7, r5	; 0x07
    2f60:	60 86       	std	Z+8, r6	; 0x08
    2f62:	71 86       	std	Z+9, r7	; 0x09
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2f64:	12 86       	std	Z+10, r1	; 0x0a
	appTimer.handler = appTimerHandler;
    2f66:	94 86       	std	Z+12, r9	; 0x0c
    2f68:	83 86       	std	Z+11, r8	; 0x0b
{
	switch (appState) {
	case APP_STATE_INITIAL:
	{
		appInit();
		appState = APP_STATE_IDLE;
    2f6a:	30 92 ba 0e 	sts	0x0EBA, r3	; 0x800eba <appState>
	
	/* We can send a maximum of 109 bytes per packet. If each sample
	is 8 bits in length, we can send up to 109 samples per package
	thus we implement a buffer to store the 109 samples before
	transmitting the entire packet.*/
	adc_rx_length = adc_rx( adc_data, APP_RX_BUF_SIZE );
    2f6e:	6d e6       	ldi	r22, 0x6D	; 109
    2f70:	8a e5       	ldi	r24, 0x5A	; 90
    2f72:	9d e0       	ldi	r25, 0x0D	; 13
    2f74:	40 df       	rcall	.-384    	; 0x2df6 <adc_rx>
    2f76:	80 93 c7 0d 	sts	0x0DC7, r24	; 0x800dc7 <adc_rx_length>
	if (adc_rx_length) {
    2f7a:	88 23       	and	r24, r24
    2f7c:	09 f4       	brne	.+2      	; 0x2f80 <main+0x10c>
    2f7e:	ae cf       	rjmp	.-164    	; 0x2edc <main+0x68>
    2f80:	ca e5       	ldi	r28, 0x5A	; 90
    2f82:	dd e0       	ldi	r29, 0x0D	; 13
    2f84:	00 e0       	ldi	r16, 0x00	; 0
    2f86:	10 e0       	ldi	r17, 0x00	; 0
    2f88:	7e 01       	movw	r14, r28
		for (uint16_t i = 0; i < adc_rx_length; i++) {
			sio2host_putchar(adc_data[i]);
    2f8a:	88 81       	ld	r24, Y
    2f8c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <sio2host_putchar>
			if (appUartBufferPtr == sizeof(appUartBuffer)) {
    2f90:	80 91 c8 0d 	lds	r24, 0x0DC8	; 0x800dc8 <appUartBufferPtr>
    2f94:	89 36       	cpi	r24, 0x69	; 105
				appSendData();
    2f96:	09 f4       	brne	.+2      	; 0x2f9a <main+0x126>
    2f98:	fd de       	rcall	.-518    	; 0x2d94 <appSendData>
			}

			if (appUartBufferPtr < sizeof(appUartBuffer)) {
    2f9a:	e0 91 c8 0d 	lds	r30, 0x0DC8	; 0x800dc8 <appUartBufferPtr>
    2f9e:	e9 36       	cpi	r30, 0x69	; 105
    2fa0:	50 f4       	brcc	.+20     	; 0x2fb6 <main+0x142>
				appUartBuffer[appUartBufferPtr++] = adc_data[i];
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	8e 0f       	add	r24, r30
    2fa6:	80 93 c8 0d 	sts	0x0DC8, r24	; 0x800dc8 <appUartBufferPtr>
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	e7 53       	subi	r30, 0x37	; 55
    2fae:	f2 4f       	sbci	r31, 0xF2	; 242
    2fb0:	d7 01       	movw	r26, r14
    2fb2:	8c 91       	ld	r24, X
    2fb4:	80 83       	st	Z, r24
	is 8 bits in length, we can send up to 109 samples per package
	thus we implement a buffer to store the 109 samples before
	transmitting the entire packet.*/
	adc_rx_length = adc_rx( adc_data, APP_RX_BUF_SIZE );
	if (adc_rx_length) {
		for (uint16_t i = 0; i < adc_rx_length; i++) {
    2fb6:	0f 5f       	subi	r16, 0xFF	; 255
    2fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fba:	21 96       	adiw	r28, 0x01	; 1
    2fbc:	80 91 c7 0d 	lds	r24, 0x0DC7	; 0x800dc7 <adc_rx_length>
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	08 17       	cp	r16, r24
    2fc4:	19 07       	cpc	r17, r25
    2fc6:	00 f3       	brcs	.-64     	; 0x2f88 <main+0x114>
			if (appUartBufferPtr < sizeof(appUartBuffer)) {
				appUartBuffer[appUartBufferPtr++] = adc_data[i];
			}
		}

		SYS_TimerStop(&appTimer);
    2fc8:	c6 01       	movw	r24, r12
    2fca:	0e 94 a4 08 	call	0x1148	; 0x1148 <SYS_TimerStop>
		SYS_TimerStart(&appTimer);
    2fce:	c6 01       	movw	r24, r12
    2fd0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <SYS_TimerStart>
    2fd4:	83 cf       	rjmp	.-250    	; 0x2edc <main+0x68>

00002fd6 <__vector_29>:
		APP_TaskHandler();
	}

}
/* Receive the continuous conversion ADC samples, store them into buffer*/
ISR( ADC_vect ){
    2fd6:	1f 92       	push	r1
    2fd8:	0f 92       	push	r0
    2fda:	0f b6       	in	r0, 0x3f	; 63
    2fdc:	0f 92       	push	r0
    2fde:	11 24       	eor	r1, r1
    2fe0:	0b b6       	in	r0, 0x3b	; 59
    2fe2:	0f 92       	push	r0
    2fe4:	8f 93       	push	r24
    2fe6:	9f 93       	push	r25
    2fe8:	ef 93       	push	r30
    2fea:	ff 93       	push	r31
	uint8_t temp;
	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    2fec:	f8 94       	cli
	temp = ADCH;
    2fee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	adc_rx_buffer[adc_rx_buf_tail] = temp;
    2ff2:	80 91 ec 0c 	lds	r24, 0x0CEC	; 0x800cec <adc_rx_buf_tail>
    2ff6:	e8 2f       	mov	r30, r24
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	e3 51       	subi	r30, 0x13	; 19
    2ffc:	f3 4f       	sbci	r31, 0xF3	; 243
    2ffe:	90 83       	st	Z, r25

	if ((APP_RX_BUF_SIZE - 1) == adc_rx_buf_tail) {
    3000:	8c 36       	cpi	r24, 0x6C	; 108
    3002:	19 f4       	brne	.+6      	; 0x300a <__vector_29+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		adc_rx_buf_tail = 0x00;
    3004:	10 92 ec 0c 	sts	0x0CEC, r1	; 0x800cec <adc_rx_buf_tail>
    3008:	03 c0       	rjmp	.+6      	; 0x3010 <__vector_29+0x3a>
	} else {
		adc_rx_buf_tail++;
    300a:	8f 5f       	subi	r24, 0xFF	; 255
    300c:	80 93 ec 0c 	sts	0x0CEC, r24	; 0x800cec <adc_rx_buf_tail>
	}

	cpu_irq_enable();
    3010:	78 94       	sei

}
    3012:	ff 91       	pop	r31
    3014:	ef 91       	pop	r30
    3016:	9f 91       	pop	r25
    3018:	8f 91       	pop	r24
    301a:	0f 90       	pop	r0
    301c:	0b be       	out	0x3b, r0	; 59
    301e:	0f 90       	pop	r0
    3020:	0f be       	out	0x3f, r0	; 63
    3022:	0f 90       	pop	r0
    3024:	1f 90       	pop	r1
    3026:	18 95       	reti

00003028 <__mulsi3>:
    3028:	db 01       	movw	r26, r22
    302a:	8f 93       	push	r24
    302c:	9f 93       	push	r25
    302e:	41 d0       	rcall	.+130    	; 0x30b2 <__muluhisi3>
    3030:	bf 91       	pop	r27
    3032:	af 91       	pop	r26
    3034:	a2 9f       	mul	r26, r18
    3036:	80 0d       	add	r24, r0
    3038:	91 1d       	adc	r25, r1
    303a:	a3 9f       	mul	r26, r19
    303c:	90 0d       	add	r25, r0
    303e:	b2 9f       	mul	r27, r18
    3040:	90 0d       	add	r25, r0
    3042:	11 24       	eor	r1, r1
    3044:	08 95       	ret

00003046 <__udivmodhi4>:
    3046:	aa 1b       	sub	r26, r26
    3048:	bb 1b       	sub	r27, r27
    304a:	51 e1       	ldi	r21, 0x11	; 17
    304c:	07 c0       	rjmp	.+14     	; 0x305c <__udivmodhi4_ep>

0000304e <__udivmodhi4_loop>:
    304e:	aa 1f       	adc	r26, r26
    3050:	bb 1f       	adc	r27, r27
    3052:	a6 17       	cp	r26, r22
    3054:	b7 07       	cpc	r27, r23
    3056:	10 f0       	brcs	.+4      	; 0x305c <__udivmodhi4_ep>
    3058:	a6 1b       	sub	r26, r22
    305a:	b7 0b       	sbc	r27, r23

0000305c <__udivmodhi4_ep>:
    305c:	88 1f       	adc	r24, r24
    305e:	99 1f       	adc	r25, r25
    3060:	5a 95       	dec	r21
    3062:	a9 f7       	brne	.-22     	; 0x304e <__udivmodhi4_loop>
    3064:	80 95       	com	r24
    3066:	90 95       	com	r25
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	08 95       	ret

0000306e <__udivmodsi4>:
    306e:	a1 e2       	ldi	r26, 0x21	; 33
    3070:	1a 2e       	mov	r1, r26
    3072:	aa 1b       	sub	r26, r26
    3074:	bb 1b       	sub	r27, r27
    3076:	fd 01       	movw	r30, r26
    3078:	0d c0       	rjmp	.+26     	; 0x3094 <__udivmodsi4_ep>

0000307a <__udivmodsi4_loop>:
    307a:	aa 1f       	adc	r26, r26
    307c:	bb 1f       	adc	r27, r27
    307e:	ee 1f       	adc	r30, r30
    3080:	ff 1f       	adc	r31, r31
    3082:	a2 17       	cp	r26, r18
    3084:	b3 07       	cpc	r27, r19
    3086:	e4 07       	cpc	r30, r20
    3088:	f5 07       	cpc	r31, r21
    308a:	20 f0       	brcs	.+8      	; 0x3094 <__udivmodsi4_ep>
    308c:	a2 1b       	sub	r26, r18
    308e:	b3 0b       	sbc	r27, r19
    3090:	e4 0b       	sbc	r30, r20
    3092:	f5 0b       	sbc	r31, r21

00003094 <__udivmodsi4_ep>:
    3094:	66 1f       	adc	r22, r22
    3096:	77 1f       	adc	r23, r23
    3098:	88 1f       	adc	r24, r24
    309a:	99 1f       	adc	r25, r25
    309c:	1a 94       	dec	r1
    309e:	69 f7       	brne	.-38     	; 0x307a <__udivmodsi4_loop>
    30a0:	60 95       	com	r22
    30a2:	70 95       	com	r23
    30a4:	80 95       	com	r24
    30a6:	90 95       	com	r25
    30a8:	9b 01       	movw	r18, r22
    30aa:	ac 01       	movw	r20, r24
    30ac:	bd 01       	movw	r22, r26
    30ae:	cf 01       	movw	r24, r30
    30b0:	08 95       	ret

000030b2 <__muluhisi3>:
    30b2:	09 d0       	rcall	.+18     	; 0x30c6 <__umulhisi3>
    30b4:	a5 9f       	mul	r26, r21
    30b6:	90 0d       	add	r25, r0
    30b8:	b4 9f       	mul	r27, r20
    30ba:	90 0d       	add	r25, r0
    30bc:	a4 9f       	mul	r26, r20
    30be:	80 0d       	add	r24, r0
    30c0:	91 1d       	adc	r25, r1
    30c2:	11 24       	eor	r1, r1
    30c4:	08 95       	ret

000030c6 <__umulhisi3>:
    30c6:	a2 9f       	mul	r26, r18
    30c8:	b0 01       	movw	r22, r0
    30ca:	b3 9f       	mul	r27, r19
    30cc:	c0 01       	movw	r24, r0
    30ce:	a3 9f       	mul	r26, r19
    30d0:	70 0d       	add	r23, r0
    30d2:	81 1d       	adc	r24, r1
    30d4:	11 24       	eor	r1, r1
    30d6:	91 1d       	adc	r25, r1
    30d8:	b2 9f       	mul	r27, r18
    30da:	70 0d       	add	r23, r0
    30dc:	81 1d       	adc	r24, r1
    30de:	11 24       	eor	r1, r1
    30e0:	91 1d       	adc	r25, r1
    30e2:	08 95       	ret

000030e4 <do_rand>:
    30e4:	8f 92       	push	r8
    30e6:	9f 92       	push	r9
    30e8:	af 92       	push	r10
    30ea:	bf 92       	push	r11
    30ec:	cf 92       	push	r12
    30ee:	df 92       	push	r13
    30f0:	ef 92       	push	r14
    30f2:	ff 92       	push	r15
    30f4:	cf 93       	push	r28
    30f6:	df 93       	push	r29
    30f8:	ec 01       	movw	r28, r24
    30fa:	68 81       	ld	r22, Y
    30fc:	79 81       	ldd	r23, Y+1	; 0x01
    30fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3100:	9b 81       	ldd	r25, Y+3	; 0x03
    3102:	61 15       	cp	r22, r1
    3104:	71 05       	cpc	r23, r1
    3106:	81 05       	cpc	r24, r1
    3108:	91 05       	cpc	r25, r1
    310a:	21 f4       	brne	.+8      	; 0x3114 <do_rand+0x30>
    310c:	64 e2       	ldi	r22, 0x24	; 36
    310e:	79 ed       	ldi	r23, 0xD9	; 217
    3110:	8b e5       	ldi	r24, 0x5B	; 91
    3112:	97 e0       	ldi	r25, 0x07	; 7
    3114:	2d e1       	ldi	r18, 0x1D	; 29
    3116:	33 ef       	ldi	r19, 0xF3	; 243
    3118:	41 e0       	ldi	r20, 0x01	; 1
    311a:	50 e0       	ldi	r21, 0x00	; 0
    311c:	41 d0       	rcall	.+130    	; 0x31a0 <__divmodsi4>
    311e:	49 01       	movw	r8, r18
    3120:	5a 01       	movw	r10, r20
    3122:	9b 01       	movw	r18, r22
    3124:	ac 01       	movw	r20, r24
    3126:	a7 ea       	ldi	r26, 0xA7	; 167
    3128:	b1 e4       	ldi	r27, 0x41	; 65
    312a:	c3 df       	rcall	.-122    	; 0x30b2 <__muluhisi3>
    312c:	6b 01       	movw	r12, r22
    312e:	7c 01       	movw	r14, r24
    3130:	ac ee       	ldi	r26, 0xEC	; 236
    3132:	b4 ef       	ldi	r27, 0xF4	; 244
    3134:	a5 01       	movw	r20, r10
    3136:	94 01       	movw	r18, r8
    3138:	51 d0       	rcall	.+162    	; 0x31dc <__mulohisi3>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	8c 0d       	add	r24, r12
    3140:	9d 1d       	adc	r25, r13
    3142:	ae 1d       	adc	r26, r14
    3144:	bf 1d       	adc	r27, r15
    3146:	b7 ff       	sbrs	r27, 7
    3148:	03 c0       	rjmp	.+6      	; 0x3150 <do_rand+0x6c>
    314a:	01 97       	sbiw	r24, 0x01	; 1
    314c:	a1 09       	sbc	r26, r1
    314e:	b0 48       	sbci	r27, 0x80	; 128
    3150:	88 83       	st	Y, r24
    3152:	99 83       	std	Y+1, r25	; 0x01
    3154:	aa 83       	std	Y+2, r26	; 0x02
    3156:	bb 83       	std	Y+3, r27	; 0x03
    3158:	9f 77       	andi	r25, 0x7F	; 127
    315a:	df 91       	pop	r29
    315c:	cf 91       	pop	r28
    315e:	ff 90       	pop	r15
    3160:	ef 90       	pop	r14
    3162:	df 90       	pop	r13
    3164:	cf 90       	pop	r12
    3166:	bf 90       	pop	r11
    3168:	af 90       	pop	r10
    316a:	9f 90       	pop	r9
    316c:	8f 90       	pop	r8
    316e:	08 95       	ret

00003170 <rand_r>:
    3170:	b9 cf       	rjmp	.-142    	; 0x30e4 <do_rand>

00003172 <rand>:
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	92 e0       	ldi	r25, 0x02	; 2
    3176:	b6 cf       	rjmp	.-148    	; 0x30e4 <do_rand>

00003178 <srand>:
    3178:	a0 e0       	ldi	r26, 0x00	; 0
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    3180:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3184:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    3188:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    318c:	08 95       	ret

0000318e <memcpy>:
    318e:	fb 01       	movw	r30, r22
    3190:	dc 01       	movw	r26, r24
    3192:	02 c0       	rjmp	.+4      	; 0x3198 <memcpy+0xa>
    3194:	01 90       	ld	r0, Z+
    3196:	0d 92       	st	X+, r0
    3198:	41 50       	subi	r20, 0x01	; 1
    319a:	50 40       	sbci	r21, 0x00	; 0
    319c:	d8 f7       	brcc	.-10     	; 0x3194 <memcpy+0x6>
    319e:	08 95       	ret

000031a0 <__divmodsi4>:
    31a0:	05 2e       	mov	r0, r21
    31a2:	97 fb       	bst	r25, 7
    31a4:	16 f4       	brtc	.+4      	; 0x31aa <__divmodsi4+0xa>
    31a6:	00 94       	com	r0
    31a8:	0f d0       	rcall	.+30     	; 0x31c8 <__negsi2>
    31aa:	57 fd       	sbrc	r21, 7
    31ac:	05 d0       	rcall	.+10     	; 0x31b8 <__divmodsi4_neg2>
    31ae:	5f df       	rcall	.-322    	; 0x306e <__udivmodsi4>
    31b0:	07 fc       	sbrc	r0, 7
    31b2:	02 d0       	rcall	.+4      	; 0x31b8 <__divmodsi4_neg2>
    31b4:	46 f4       	brtc	.+16     	; 0x31c6 <__divmodsi4_exit>
    31b6:	08 c0       	rjmp	.+16     	; 0x31c8 <__negsi2>

000031b8 <__divmodsi4_neg2>:
    31b8:	50 95       	com	r21
    31ba:	40 95       	com	r20
    31bc:	30 95       	com	r19
    31be:	21 95       	neg	r18
    31c0:	3f 4f       	sbci	r19, 0xFF	; 255
    31c2:	4f 4f       	sbci	r20, 0xFF	; 255
    31c4:	5f 4f       	sbci	r21, 0xFF	; 255

000031c6 <__divmodsi4_exit>:
    31c6:	08 95       	ret

000031c8 <__negsi2>:
    31c8:	90 95       	com	r25
    31ca:	80 95       	com	r24
    31cc:	70 95       	com	r23
    31ce:	61 95       	neg	r22
    31d0:	7f 4f       	sbci	r23, 0xFF	; 255
    31d2:	8f 4f       	sbci	r24, 0xFF	; 255
    31d4:	9f 4f       	sbci	r25, 0xFF	; 255
    31d6:	08 95       	ret

000031d8 <__mulshisi3>:
    31d8:	b7 ff       	sbrs	r27, 7
    31da:	6b cf       	rjmp	.-298    	; 0x30b2 <__muluhisi3>

000031dc <__mulohisi3>:
    31dc:	6a df       	rcall	.-300    	; 0x30b2 <__muluhisi3>
    31de:	82 1b       	sub	r24, r18
    31e0:	93 0b       	sbc	r25, r19
    31e2:	08 95       	ret

000031e4 <_exit>:
    31e4:	f8 94       	cli

000031e6 <__stop_program>:
    31e6:	ff cf       	rjmp	.-2      	; 0x31e6 <__stop_program>
