
Wireless_with_spi_rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  00003238  000032cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f3b  00800212  00800212  000032de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000032de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000750  00000000  00000000  00003350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a36d  00000000  00000000  00003aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004364  00000000  00000000  0000de0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009f1a  00000000  00000000  00012171  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001690  00000000  00000000  0001c08c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001ced6  00000000  00000000  0001d71c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000577f  00000000  00000000  0003a5f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000768  00000000  00000000  0003fd71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000982b  00000000  00000000  000404d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 6d 16 	jmp	0x2cda	; 0x2cda <__vector_1>
       8:	b6 c0       	rjmp	.+364    	; 0x176 <__bad_interrupt>
       a:	00 00       	nop
       c:	b4 c0       	rjmp	.+360    	; 0x176 <__bad_interrupt>
       e:	00 00       	nop
      10:	b2 c0       	rjmp	.+356    	; 0x176 <__bad_interrupt>
      12:	00 00       	nop
      14:	b0 c0       	rjmp	.+352    	; 0x176 <__bad_interrupt>
      16:	00 00       	nop
      18:	ae c0       	rjmp	.+348    	; 0x176 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ac c0       	rjmp	.+344    	; 0x176 <__bad_interrupt>
      1e:	00 00       	nop
      20:	aa c0       	rjmp	.+340    	; 0x176 <__bad_interrupt>
      22:	00 00       	nop
      24:	a8 c0       	rjmp	.+336    	; 0x176 <__bad_interrupt>
      26:	00 00       	nop
      28:	a6 c0       	rjmp	.+332    	; 0x176 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a4 c0       	rjmp	.+328    	; 0x176 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a2 c0       	rjmp	.+324    	; 0x176 <__bad_interrupt>
      32:	00 00       	nop
      34:	a0 c0       	rjmp	.+320    	; 0x176 <__bad_interrupt>
      36:	00 00       	nop
      38:	9e c0       	rjmp	.+316    	; 0x176 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9c c0       	rjmp	.+312    	; 0x176 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9a c0       	rjmp	.+308    	; 0x176 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__vector_17>
      48:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__vector_18>
      4c:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__vector_19>
      50:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__vector_20>
      54:	90 c0       	rjmp	.+288    	; 0x176 <__bad_interrupt>
      56:	00 00       	nop
      58:	8e c0       	rjmp	.+284    	; 0x176 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8c c0       	rjmp	.+280    	; 0x176 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8a c0       	rjmp	.+276    	; 0x176 <__bad_interrupt>
      62:	00 00       	nop
      64:	88 c0       	rjmp	.+272    	; 0x176 <__bad_interrupt>
      66:	00 00       	nop
      68:	86 c0       	rjmp	.+268    	; 0x176 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	84 c0       	rjmp	.+264    	; 0x176 <__bad_interrupt>
      6e:	00 00       	nop
      70:	82 c0       	rjmp	.+260    	; 0x176 <__bad_interrupt>
      72:	00 00       	nop
      74:	80 c0       	rjmp	.+256    	; 0x176 <__bad_interrupt>
      76:	00 00       	nop
      78:	7e c0       	rjmp	.+252    	; 0x176 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7c c0       	rjmp	.+248    	; 0x176 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__vector_32>
      84:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__vector_33>
      88:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__vector_34>
      8c:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <__vector_35>
      90:	7d c3       	rjmp	.+1786   	; 0x78c <__vector_36>
      92:	00 00       	nop
      94:	70 c0       	rjmp	.+224    	; 0x176 <__bad_interrupt>
      96:	00 00       	nop
      98:	6e c0       	rjmp	.+220    	; 0x176 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6c c0       	rjmp	.+216    	; 0x176 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6a c0       	rjmp	.+212    	; 0x176 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	68 c0       	rjmp	.+208    	; 0x176 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__vector_42>
      ac:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__vector_43>
      b0:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__vector_44>
      b4:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__vector_45>
      b8:	5e c0       	rjmp	.+188    	; 0x176 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__vector_47>
      c0:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__vector_48>
      c4:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__vector_49>
      c8:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <__vector_50>
      cc:	54 c0       	rjmp	.+168    	; 0x176 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	52 c0       	rjmp	.+164    	; 0x176 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	50 c0       	rjmp	.+160    	; 0x176 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4e c0       	rjmp	.+156    	; 0x176 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4c c0       	rjmp	.+152    	; 0x176 <__bad_interrupt>
      de:	00 00       	nop
      e0:	4a c0       	rjmp	.+148    	; 0x176 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	48 c0       	rjmp	.+144    	; 0x176 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	46 c0       	rjmp	.+140    	; 0x176 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	44 c0       	rjmp	.+136    	; 0x176 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	42 c0       	rjmp	.+132    	; 0x176 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	40 c0       	rjmp	.+128    	; 0x176 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3e c0       	rjmp	.+124    	; 0x176 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3c c0       	rjmp	.+120    	; 0x176 <__bad_interrupt>
      fe:	00 00       	nop
     100:	3a c0       	rjmp	.+116    	; 0x176 <__bad_interrupt>
     102:	00 00       	nop
     104:	38 c0       	rjmp	.+112    	; 0x176 <__bad_interrupt>
     106:	00 00       	nop
     108:	36 c0       	rjmp	.+108    	; 0x176 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	34 c0       	rjmp	.+104    	; 0x176 <__bad_interrupt>
     10e:	00 00       	nop
     110:	32 c0       	rjmp	.+100    	; 0x176 <__bad_interrupt>
     112:	00 00       	nop
     114:	30 c0       	rjmp	.+96     	; 0x176 <__bad_interrupt>
     116:	00 00       	nop
     118:	2e c0       	rjmp	.+92     	; 0x176 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2c c0       	rjmp	.+88     	; 0x176 <__bad_interrupt>
     11e:	00 00       	nop
     120:	2a c0       	rjmp	.+84     	; 0x176 <__bad_interrupt>
     122:	00 00       	nop
     124:	28 c0       	rjmp	.+80     	; 0x176 <__bad_interrupt>
     126:	00 00       	nop
     128:	26 c0       	rjmp	.+76     	; 0x176 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	24 c0       	rjmp	.+72     	; 0x176 <__bad_interrupt>
     12e:	00 00       	nop
     130:	22 c0       	rjmp	.+68     	; 0x176 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e8 e3       	ldi	r30, 0x38	; 56
     14c:	f2 e3       	ldi	r31, 0x32	; 50
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a2 31       	cpi	r26, 0x12	; 18
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	21 e1       	ldi	r18, 0x11	; 17
     160:	a2 e1       	ldi	r26, 0x12	; 18
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	ad 34       	cpi	r26, 0x4D	; 77
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <main>
     172:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <_exit>

00000176 <__bad_interrupt>:
     176:	44 cf       	rjmp	.-376    	; 0x0 <__vectors>

00000178 <common_tc_read_count>:
     178:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <tmr_read_count>
     17c:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <timer_mul_var>
     180:	22 23       	and	r18, r18
     182:	d9 f0       	breq	.+54     	; 0x1ba <common_tc_read_count+0x42>
     184:	40 91 42 11 	lds	r20, 0x1142	; 0x801142 <timer_multiplier>
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <timer_mul_var>
     18e:	64 2f       	mov	r22, r20
     190:	73 2f       	mov	r23, r19
     192:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__udivmodhi4>
     196:	fb 01       	movw	r30, r22
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	9f ef       	ldi	r25, 0xFF	; 255
     19c:	64 2f       	mov	r22, r20
     19e:	73 2f       	mov	r23, r19
     1a0:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__udivmodhi4>
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	62 9f       	mul	r22, r18
     1a8:	c0 01       	movw	r24, r0
     1aa:	63 9f       	mul	r22, r19
     1ac:	90 0d       	add	r25, r0
     1ae:	72 9f       	mul	r23, r18
     1b0:	90 0d       	add	r25, r0
     1b2:	11 24       	eor	r1, r1
     1b4:	8e 0f       	add	r24, r30
     1b6:	9f 1f       	adc	r25, r31
     1b8:	08 95       	ret
     1ba:	60 91 42 11 	lds	r22, 0x1142	; 0x801142 <timer_multiplier>
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__udivmodhi4>
     1c4:	cb 01       	movw	r24, r22
     1c6:	08 95       	ret

000001c8 <common_tc_compare_stop>:
     1c8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <tmr_disable_cc_interrupt>
     1cc:	0e 94 01 10 	call	0x2002	; 0x2002 <save_cpu_interrupt>
     1d0:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
     1d4:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <__data_end+0x1>
     1d8:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end+0x2>
     1dc:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x3>
     1e0:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <compare_value+0x1>
     1e4:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <compare_value>
     1e8:	0c 94 0e 10 	jmp	0x201c	; 0x201c <restore_cpu_interrupt>

000001ec <common_tc_overflow_stop>:
     1ec:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <tmr_disable_ovf_interrupt>
     1f0:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <timer_mul_var>
     1f4:	08 95       	ret

000001f6 <common_tc_stop>:
     1f6:	e8 df       	rcall	.-48     	; 0x1c8 <common_tc_compare_stop>
     1f8:	f9 df       	rcall	.-14     	; 0x1ec <common_tc_overflow_stop>
     1fa:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <tmr_stop>

000001fe <common_tc_delay>:
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	ec 01       	movw	r28, r24
     208:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <tmr_read_count>
     20c:	8c 01       	movw	r16, r24
     20e:	be 01       	movw	r22, r28
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	20 91 42 11 	lds	r18, 0x1142	; 0x801142 <timer_multiplier>
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <__mulsi3>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	a8 01       	movw	r20, r16
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	48 0f       	add	r20, r24
     22e:	59 1f       	adc	r21, r25
     230:	6a 1f       	adc	r22, r26
     232:	7b 1f       	adc	r23, r27
     234:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <__data_end>
     238:	50 93 13 02 	sts	0x0213, r21	; 0x800213 <__data_end+0x1>
     23c:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <__data_end+0x2>
     240:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <__data_end+0x3>
     244:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <__data_end>
     248:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <__data_end+0x1>
     24c:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end+0x2>
     250:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x3>
     254:	ab 01       	movw	r20, r22
     256:	66 27       	eor	r22, r22
     258:	77 27       	eor	r23, r23
     25a:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <__data_end>
     25e:	50 93 13 02 	sts	0x0213, r21	; 0x800213 <__data_end+0x1>
     262:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <__data_end+0x2>
     266:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <__data_end+0x3>
     26a:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <__data_end>
     26e:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <__data_end+0x1>
     272:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end+0x2>
     276:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x3>
     27a:	41 15       	cp	r20, r1
     27c:	51 05       	cpc	r21, r1
     27e:	61 05       	cpc	r22, r1
     280:	71 05       	cpc	r23, r1
     282:	91 f0       	breq	.+36     	; 0x2a8 <common_tc_delay+0xaa>
     284:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <__data_end>
     288:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <__data_end+0x1>
     28c:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end+0x2>
     290:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x3>
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	08 0f       	add	r16, r24
     298:	19 1f       	adc	r17, r25
     29a:	10 93 18 02 	sts	0x0218, r17	; 0x800218 <compare_value+0x1>
     29e:	00 93 17 02 	sts	0x0217, r16	; 0x800217 <compare_value>
     2a2:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <tmr_disable_cc_interrupt>
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <common_tc_delay+0xba>
     2a8:	08 0f       	add	r16, r24
     2aa:	19 1f       	adc	r17, r25
     2ac:	10 93 18 02 	sts	0x0218, r17	; 0x800218 <compare_value+0x1>
     2b0:	00 93 17 02 	sts	0x0217, r16	; 0x800217 <compare_value>
     2b4:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <tmr_enable_cc_interrupt>
     2b8:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <compare_value>
     2bc:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <compare_value+0x1>
     2c0:	84 36       	cpi	r24, 0x64	; 100
     2c2:	91 05       	cpc	r25, r1
     2c4:	30 f4       	brcc	.+12     	; 0x2d2 <common_tc_delay+0xd4>
     2c6:	8c 59       	subi	r24, 0x9C	; 156
     2c8:	9f 4f       	sbci	r25, 0xFF	; 255
     2ca:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <compare_value+0x1>
     2ce:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <compare_value>
     2d2:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <compare_value>
     2d6:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <compare_value+0x1>
     2da:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <tmr_write_cmpreg>
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	08 95       	ret

000002e8 <common_tc_init>:
     2e8:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <timer_mul_var>
     2ec:	0e 94 10 10 	call	0x2020	; 0x2020 <tmr_init>
     2f0:	80 93 42 11 	sts	0x1142, r24	; 0x801142 <timer_multiplier>
     2f4:	08 95       	ret

000002f6 <tmr_ovf_callback>:
     2f6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     2fa:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
     2fe:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <__data_end+0x2>
     302:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <__data_end+0x3>
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	a1 05       	cpc	r26, r1
     30a:	b1 05       	cpc	r27, r1
     30c:	c9 f0       	breq	.+50     	; 0x340 <tmr_ovf_callback+0x4a>
     30e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     312:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
     316:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <__data_end+0x2>
     31a:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <__data_end+0x3>
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	a1 09       	sbc	r26, r1
     322:	b1 09       	sbc	r27, r1
     324:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
     328:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x1>
     32c:	a0 93 14 02 	sts	0x0214, r26	; 0x800214 <__data_end+0x2>
     330:	b0 93 15 02 	sts	0x0215, r27	; 0x800215 <__data_end+0x3>
     334:	00 97       	sbiw	r24, 0x00	; 0
     336:	a1 05       	cpc	r26, r1
     338:	b1 05       	cpc	r27, r1
     33a:	11 f4       	brne	.+4      	; 0x340 <tmr_ovf_callback+0x4a>
     33c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <tmr_enable_cc_interrupt>
     340:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <timer_mul_var>
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <timer_mul_var>
     34a:	90 91 42 11 	lds	r25, 0x1142	; 0x801142 <timer_multiplier>
     34e:	89 17       	cp	r24, r25
     350:	48 f0       	brcs	.+18     	; 0x364 <tmr_ovf_callback+0x6e>
     352:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <timer_mul_var>
     356:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <common_tc_ovf_callback>
     35a:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <common_tc_ovf_callback+0x1>
     35e:	30 97       	sbiw	r30, 0x00	; 0
     360:	09 f0       	breq	.+2      	; 0x364 <tmr_ovf_callback+0x6e>
     362:	19 95       	eicall
     364:	08 95       	ret

00000366 <tmr_cca_callback>:
     366:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <tmr_disable_cc_interrupt>
     36a:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <common_tc_cca_callback>
     36e:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <common_tc_cca_callback+0x1>
     372:	30 97       	sbiw	r30, 0x00	; 0
     374:	09 f0       	breq	.+2      	; 0x378 <tmr_cca_callback+0x12>
     376:	19 95       	eicall
     378:	08 95       	ret

0000037a <set_common_tc_overflow_callback>:
     37a:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <common_tc_ovf_callback+0x1>
     37e:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <common_tc_ovf_callback>
     382:	08 95       	ret

00000384 <set_common_tc_expiry_callback>:
     384:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <common_tc_cca_callback+0x1>
     388:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <common_tc_cca_callback>
     38c:	08 95       	ret

0000038e <init_SPI_mstr>:


/* Initiate SPI module */
void init_SPI_mstr(void){

	sysclk_enable_module( POWER_RED_REG0, PRSPI_bm );
     38e:	64 e0       	ldi	r22, 0x04	; 4
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	2e d0       	rcall	.+92     	; 0x3f0 <sysclk_enable_module>
	
	/* Set MOSI and SCK output, all others input */
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK);
     394:	84 b1       	in	r24, 0x04	; 4
     396:	86 60       	ori	r24, 0x06	; 6
     398:	84 b9       	out	0x04, r24	; 4
	/*	No end of tx irq, enable SPI, Master, set clock rate fck/2, dord MSB first, */
	SPCR |= ((0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|
     39a:	8c b5       	in	r24, 0x2c	; 44
     39c:	80 65       	ori	r24, 0x50	; 80
     39e:	8c bd       	out	0x2c, r24	; 44
	(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0));  // SPI enable, Master, f/2 with TxRx OSC
	SPSR |= (1<<SPI2X); //double speed enabled
     3a0:	8d b5       	in	r24, 0x2d	; 45
     3a2:	81 60       	ori	r24, 0x01	; 1
     3a4:	8d bd       	out	0x2d, r24	; 45
	DDRD = (1<<DDD5);//SS outputs
     3a6:	80 e2       	ldi	r24, 0x20	; 32
     3a8:	8a b9       	out	0x0a, r24	; 10
	
	PORTD |= (1<<SS2); //Put Slave Select high
     3aa:	5d 9a       	sbi	0x0b, 5	; 11
     3ac:	08 95       	ret

000003ae <SPI_Transmit_no_IRQ>:
	
}

uint8_t SPI_Transmit_no_IRQ(uint8_t Data)
{	
	SPDR = Data;
     3ae:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){};
     3b0:	0d b4       	in	r0, 0x2d	; 45
     3b2:	07 fe       	sbrs	r0, 7
     3b4:	fd cf       	rjmp	.-6      	; 0x3b0 <SPI_Transmit_no_IRQ+0x2>
	return SPDR;
     3b6:	8e b5       	in	r24, 0x2e	; 46
}
     3b8:	08 95       	ret

000003ba <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	1f 92       	push	r1
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     3c4:	8f ef       	ldi	r24, 0xFF	; 255
     3c6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     3ca:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3ce:	8f b7       	in	r24, 0x3f	; 63
     3d0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     3d2:	f8 94       	cli
	return flags;
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     3d6:	5f 93       	push	r21
     3d8:	50 e8       	ldi	r21, 0x80	; 128
     3da:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     3de:	50 e0       	ldi	r21, 0x00	; 0
     3e0:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     3e4:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3e6:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     3e8:	0f 90       	pop	r0
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	1f 92       	push	r1
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3fa:	9f b7       	in	r25, 0x3f	; 63
     3fc:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     3fe:	f8 94       	cli
	return flags;
     400:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	40 f4       	brcc	.+16     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		*(reg + port)  &= ~id;
     406:	e8 2f       	mov	r30, r24
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	ec 59       	subi	r30, 0x9C	; 156
     40c:	ff 4f       	sbci	r31, 0xFF	; 255
     40e:	60 95       	com	r22
     410:	80 81       	ld	r24, Z
     412:	68 23       	and	r22, r24
     414:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     416:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     418:	0f 90       	pop	r0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	08 95       	ret

00000420 <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	1f 92       	push	r1
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     42a:	9f b7       	in	r25, 0x3f	; 63
     42c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     42e:	f8 94       	cli
	return flags;
     430:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     432:	82 30       	cpi	r24, 0x02	; 2
     434:	38 f4       	brcc	.+14     	; 0x444 <sysclk_disable_module+0x24>
		*(reg + port) |= id;
     436:	e8 2f       	mov	r30, r24
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	ec 59       	subi	r30, 0x9C	; 156
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	80 81       	ld	r24, Z
     440:	68 2b       	or	r22, r24
     442:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     444:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     446:	0f 90       	pop	r0
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	7c 01       	movw	r14, r24
     45c:	8b 01       	movw	r16, r22
     45e:	ea 01       	movw	r28, r20
	while (len) {
     460:	20 97       	sbiw	r28, 0x00	; 0
     462:	39 f0       	breq	.+14     	; 0x472 <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     464:	f8 01       	movw	r30, r16
     466:	61 91       	ld	r22, Z+
     468:	8f 01       	movw	r16, r30
     46a:	c7 01       	movw	r24, r14
     46c:	54 d0       	rcall	.+168    	; 0x516 <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
     46e:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
     470:	c9 f7       	brne	.-14     	; 0x464 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	ff 90       	pop	r15
     47e:	ef 90       	pop	r14
     480:	08 95       	ret

00000482 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	7c 01       	movw	r14, r24
     490:	8b 01       	movw	r16, r22
     492:	ea 01       	movw	r28, r20
	while (len) {
     494:	20 97       	sbiw	r28, 0x00	; 0
     496:	39 f0       	breq	.+14     	; 0x4a6 <usart_serial_read_packet+0x24>
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
     498:	c7 01       	movw	r24, r14
     49a:	44 d0       	rcall	.+136    	; 0x524 <usart_getchar>
     49c:	f8 01       	movw	r30, r16
     49e:	81 93       	st	Z+, r24
     4a0:	8f 01       	movw	r16, r30
		usart_serial_getchar(usart, data);
		len--;
     4a2:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
     4a4:	c9 f7       	brne	.-14     	; 0x498 <usart_serial_read_packet+0x16>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	08 95       	ret

000004b6 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	1f 92       	push	r1
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     4c0:	80 91 04 11 	lds	r24, 0x1104	; 0x801104 <stdio_base>
     4c4:	90 91 05 11 	lds	r25, 0x1105	; 0x801105 <stdio_base+0x1>
     4c8:	e0 91 00 11 	lds	r30, 0x1100	; 0x801100 <ptr_get>
     4cc:	f0 91 01 11 	lds	r31, 0x1101	; 0x801101 <ptr_get+0x1>
     4d0:	be 01       	movw	r22, r28
     4d2:	6f 5f       	subi	r22, 0xFF	; 255
     4d4:	7f 4f       	sbci	r23, 0xFF	; 255
     4d6:	19 95       	eicall
	return c;
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
}
     4da:	08 2e       	mov	r0, r24
     4dc:	00 0c       	add	r0, r0
     4de:	99 0b       	sbc	r25, r25
     4e0:	0f 90       	pop	r0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     4e8:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     4ea:	80 91 04 11 	lds	r24, 0x1104	; 0x801104 <stdio_base>
     4ee:	90 91 05 11 	lds	r25, 0x1105	; 0x801105 <stdio_base+0x1>
     4f2:	e0 91 02 11 	lds	r30, 0x1102	; 0x801102 <ptr_put>
     4f6:	f0 91 03 11 	lds	r31, 0x1103	; 0x801103 <ptr_put+0x1>
     4fa:	19 95       	eicall
     4fc:	99 23       	and	r25, r25
     4fe:	1c f0       	brlt	.+6      	; 0x506 <_write+0x1e>
		return -1;
	}
	return 1;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     506:	8f ef       	ldi	r24, 0xFF	; 255
     508:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     50a:	08 95       	ret

0000050c <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     50c:	2c 9a       	sbi	0x05, 4	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     50e:	24 9a       	sbi	0x04, 4	; 4
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     510:	6c 98       	cbi	0x0d, 4	; 13
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     512:	74 9a       	sbi	0x0e, 4	; 14
     514:	08 95       	ret

00000516 <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
     516:	fc 01       	movw	r30, r24
     518:	90 81       	ld	r25, Z
     51a:	95 ff       	sbrs	r25, 5
     51c:	fd cf       	rjmp	.-6      	; 0x518 <usart_putchar+0x2>
     51e:	66 83       	std	Z+6, r22	; 0x06
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	08 95       	ret

00000524 <usart_getchar>:
     524:	fc 01       	movw	r30, r24
     526:	90 81       	ld	r25, Z
     528:	99 23       	and	r25, r25
     52a:	ec f7       	brge	.-6      	; 0x526 <usart_getchar+0x2>
     52c:	86 81       	ldd	r24, Z+6	; 0x06
     52e:	08 95       	ret

00000530 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     530:	8f 92       	push	r8
     532:	9f 92       	push	r9
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
     54a:	6a 01       	movw	r12, r20
     54c:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     54e:	c9 01       	movw	r24, r18
     550:	b8 01       	movw	r22, r16
     552:	68 94       	set
     554:	12 f8       	bld	r1, 2
     556:	96 95       	lsr	r25
     558:	87 95       	ror	r24
     55a:	77 95       	ror	r23
     55c:	67 95       	ror	r22
     55e:	16 94       	lsr	r1
     560:	d1 f7       	brne	.-12     	; 0x556 <usart_set_baudrate+0x26>
	/*if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
		min_rate /= 2;
	}*/

	if( baud <= max_rate && baud > max_rate/2 ){
     562:	6c 15       	cp	r22, r12
     564:	7d 05       	cpc	r23, r13
     566:	8e 05       	cpc	r24, r14
     568:	9f 05       	cpc	r25, r15
     56a:	78 f1       	brcs	.+94     	; 0x5ca <usart_set_baudrate+0x9a>
     56c:	48 01       	movw	r8, r16
     56e:	59 01       	movw	r10, r18
     570:	68 94       	set
     572:	13 f8       	bld	r1, 3
     574:	b6 94       	lsr	r11
     576:	a7 94       	ror	r10
     578:	97 94       	ror	r9
     57a:	87 94       	ror	r8
     57c:	16 94       	lsr	r1
     57e:	d1 f7       	brne	.-12     	; 0x574 <usart_set_baudrate+0x44>
     580:	8c 14       	cp	r8, r12
     582:	9d 04       	cpc	r9, r13
     584:	ae 04       	cpc	r10, r14
     586:	bf 04       	cpc	r11, r15
     588:	20 f5       	brcc	.+72     	; 0x5d2 <usart_set_baudrate+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_double_baud_enable(USART_t *usart)
{
	usart->UCSRnA |=  USART_U2X_bm;
     58a:	e8 81       	ld	r30, Y
     58c:	e2 60       	ori	r30, 0x02	; 2
     58e:	e8 83       	st	Y, r30
     590:	20 c0       	rjmp	.+64     	; 0x5d2 <usart_set_baudrate+0xa2>
	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     592:	28 81       	ld	r18, Y
     594:	21 ff       	sbrs	r18, 1
     596:	0a c0       	rjmp	.+20     	; 0x5ac <usart_set_baudrate+0x7c>
		//baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     598:	a7 01       	movw	r20, r14
     59a:	96 01       	movw	r18, r12
     59c:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__udivmodsi4>
     5a0:	da 01       	movw	r26, r20
     5a2:	c9 01       	movw	r24, r18
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	a1 09       	sbc	r26, r1
     5a8:	b1 09       	sbc	r27, r1
     5aa:	0b c0       	rjmp	.+22     	; 0x5c2 <usart_set_baudrate+0x92>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     5ac:	c5 01       	movw	r24, r10
     5ae:	b4 01       	movw	r22, r8
     5b0:	a7 01       	movw	r20, r14
     5b2:	96 01       	movw	r18, r12
     5b4:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__udivmodsi4>
     5b8:	da 01       	movw	r26, r20
     5ba:	c9 01       	movw	r24, r18
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	a1 09       	sbc	r26, r1
     5c0:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     5c2:	9d 83       	std	Y+5, r25	; 0x05
     5c4:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	13 c0       	rjmp	.+38     	; 0x5f0 <usart_set_baudrate+0xc0>
	if( baud <= max_rate && baud > max_rate/2 ){
		usart_double_baud_enable(usart);
	}
    
	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	11 c0       	rjmp	.+34     	; 0x5f0 <usart_set_baudrate+0xc0>
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	0f c0       	rjmp	.+30     	; 0x5f0 <usart_set_baudrate+0xc0>

	if( baud <= max_rate && baud > max_rate/2 ){
		usart_double_baud_enable(usart);
	}
    
	if ((baud > max_rate) || (baud < min_rate)) {
     5d2:	0f 2e       	mov	r0, r31
     5d4:	f3 e1       	ldi	r31, 0x13	; 19
     5d6:	36 95       	lsr	r19
     5d8:	27 95       	ror	r18
     5da:	17 95       	ror	r17
     5dc:	07 95       	ror	r16
     5de:	fa 95       	dec	r31
     5e0:	d1 f7       	brne	.-12     	; 0x5d6 <usart_set_baudrate+0xa6>
     5e2:	f0 2d       	mov	r31, r0
     5e4:	c0 16       	cp	r12, r16
     5e6:	d1 06       	cpc	r13, r17
     5e8:	e2 06       	cpc	r14, r18
     5ea:	f3 06       	cpc	r15, r19
     5ec:	90 f6       	brcc	.-92     	; 0x592 <usart_set_baudrate+0x62>
     5ee:	ef cf       	rjmp	.-34     	; 0x5ce <usart_set_baudrate+0x9e>
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	bf 90       	pop	r11
     602:	af 90       	pop	r10
     604:	9f 90       	pop	r9
     606:	8f 90       	pop	r8
     608:	08 95       	ret

0000060a <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	ec 01       	movw	r28, r24
     614:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTA0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     616:	80 3c       	cpi	r24, 0xC0	; 192
     618:	91 05       	cpc	r25, r1
     61a:	21 f4       	brne	.+8      	; 0x624 <usart_init_rs232+0x1a>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     61c:	62 e0       	ldi	r22, 0x02	; 2
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	e7 de       	rcall	.-562    	; 0x3f0 <sysclk_enable_module>
     622:	06 c0       	rjmp	.+12     	; 0x630 <usart_init_rs232+0x26>
	}
#endif
#ifdef USARTA1
	if ((uintptr_t)usart == (uintptr_t)&UCSR1A) {
     624:	88 3c       	cpi	r24, 0xC8	; 200
     626:	91 05       	cpc	r25, r1
     628:	19 f4       	brne	.+6      	; 0x630 <usart_init_rs232+0x26>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	e0 de       	rcall	.-576    	; 0x3f0 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	8f 73       	andi	r24, 0x3F	; 63
     634:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     636:	f8 01       	movw	r30, r16
     638:	26 81       	ldd	r18, Z+6	; 0x06
     63a:	35 81       	ldd	r19, Z+5	; 0x05
     63c:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     63e:	9a 81       	ldd	r25, Y+2	; 0x02
     640:	48 2f       	mov	r20, r24
     642:	43 70       	andi	r20, 0x03	; 3
     644:	44 0f       	add	r20, r20
     646:	99 7f       	andi	r25, 0xF9	; 249
     648:	94 2b       	or	r25, r20
     64a:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     64c:	99 81       	ldd	r25, Y+1	; 0x01
     64e:	84 70       	andi	r24, 0x04	; 4
     650:	88 0f       	add	r24, r24
     652:	88 0f       	add	r24, r24
     654:	9b 7f       	andi	r25, 0xFB	; 251
     656:	89 2b       	or	r24, r25
     658:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     65a:	8a 81       	ldd	r24, Y+2	; 0x02
     65c:	8f 7c       	andi	r24, 0xCF	; 207
     65e:	83 2b       	or	r24, r19
     660:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     662:	9a 81       	ldd	r25, Y+2	; 0x02
     664:	97 7f       	andi	r25, 0xF7	; 247
     666:	82 2f       	mov	r24, r18
     668:	88 0f       	add	r24, r24
     66a:	88 0f       	add	r24, r24
     66c:	88 0f       	add	r24, r24
     66e:	89 2b       	or	r24, r25
     670:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     672:	40 81       	ld	r20, Z
     674:	51 81       	ldd	r21, Z+1	; 0x01
     676:	62 81       	ldd	r22, Z+2	; 0x02
     678:	73 81       	ldd	r23, Z+3	; 0x03
     67a:	00 e0       	ldi	r16, 0x00	; 0
     67c:	14 e2       	ldi	r17, 0x24	; 36
     67e:	24 ef       	ldi	r18, 0xF4	; 244
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	ce 01       	movw	r24, r28
     684:	55 df       	rcall	.-342    	; 0x530 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     686:	99 81       	ldd	r25, Y+1	; 0x01
     688:	98 60       	ori	r25, 0x08	; 8
     68a:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     68c:	99 81       	ldd	r25, Y+1	; 0x01
     68e:	90 61       	ori	r25, 0x10	; 16
     690:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	08 95       	ret

0000069c <usart_serial_getchar>:
	if (back >= 1) {
		return c;
	} else {
		return (-1);
	}
}
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	eb 01       	movw	r28, r22
     6a2:	40 df       	rcall	.-384    	; 0x524 <usart_getchar>
     6a4:	88 83       	st	Y, r24
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	08 95       	ret

000006ac <usart_serial_putchar>:
     6ac:	34 cf       	rjmp	.-408    	; 0x516 <usart_putchar>
     6ae:	08 95       	ret

000006b0 <sio2host_init>:
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	27 97       	sbiw	r28, 0x07	; 7
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	08 ec       	ldi	r16, 0xC8	; 200
     6ca:	10 e0       	ldi	r17, 0x00	; 0
     6cc:	10 93 05 11 	sts	0x1105, r17	; 0x801105 <stdio_base+0x1>
     6d0:	00 93 04 11 	sts	0x1104, r16	; 0x801104 <stdio_base>
     6d4:	86 e5       	ldi	r24, 0x56	; 86
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	90 93 03 11 	sts	0x1103, r25	; 0x801103 <ptr_put+0x1>
     6dc:	80 93 02 11 	sts	0x1102, r24	; 0x801102 <ptr_put>
     6e0:	8e e4       	ldi	r24, 0x4E	; 78
     6e2:	93 e0       	ldi	r25, 0x03	; 3
     6e4:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <ptr_get+0x1>
     6e8:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <ptr_get>
     6ec:	ea e0       	ldi	r30, 0x0A	; 10
     6ee:	f2 e0       	ldi	r31, 0x02	; 2
     6f0:	84 81       	ldd	r24, Z+4	; 0x04
     6f2:	8d 83       	std	Y+5, r24	; 0x05
     6f4:	85 81       	ldd	r24, Z+5	; 0x05
     6f6:	8e 83       	std	Y+6, r24	; 0x06
     6f8:	86 81       	ldd	r24, Z+6	; 0x06
     6fa:	8f 83       	std	Y+7, r24	; 0x07
     6fc:	80 81       	ld	r24, Z
     6fe:	91 81       	ldd	r25, Z+1	; 0x01
     700:	a2 81       	ldd	r26, Z+2	; 0x02
     702:	b3 81       	ldd	r27, Z+3	; 0x03
     704:	89 83       	std	Y+1, r24	; 0x01
     706:	9a 83       	std	Y+2, r25	; 0x02
     708:	ab 83       	std	Y+3, r26	; 0x03
     70a:	bc 83       	std	Y+4, r27	; 0x04
     70c:	be 01       	movw	r22, r28
     70e:	6f 5f       	subi	r22, 0xFF	; 255
     710:	7f 4f       	sbci	r23, 0xFF	; 255
     712:	88 ec       	ldi	r24, 0xC8	; 200
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	79 df       	rcall	.-270    	; 0x60a <usart_init_rs232>
     718:	6b e5       	ldi	r22, 0x5B	; 91
     71a:	72 e0       	ldi	r23, 0x02	; 2
     71c:	84 e7       	ldi	r24, 0x74	; 116
     71e:	92 e0       	ldi	r25, 0x02	; 2
     720:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <fdevopen>
     724:	f8 01       	movw	r30, r16
     726:	81 81       	ldd	r24, Z+1	; 0x01
     728:	80 68       	ori	r24, 0x80	; 128
     72a:	81 83       	std	Z+1, r24	; 0x01
     72c:	27 96       	adiw	r28, 0x07	; 7
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <sio2host_tx>:
     742:	ff 92       	push	r15
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	8c 01       	movw	r16, r24
     74e:	f6 2e       	mov	r15, r22
     750:	c6 2f       	mov	r28, r22
     752:	d0 e0       	ldi	r29, 0x00	; 0
     754:	ae 01       	movw	r20, r28
     756:	b8 01       	movw	r22, r16
     758:	88 ec       	ldi	r24, 0xC8	; 200
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	78 de       	rcall	.-784    	; 0x44e <usart_serial_write_packet>
     75e:	81 11       	cpse	r24, r1
     760:	f9 cf       	rjmp	.-14     	; 0x754 <sio2host_tx+0x12>
     762:	8f 2d       	mov	r24, r15
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	08 95       	ret

00000770 <sio2host_putchar>:
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	1f 92       	push	r1
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	89 83       	std	Y+1, r24	; 0x01
     77c:	61 e0       	ldi	r22, 0x01	; 1
     77e:	ce 01       	movw	r24, r28
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	df df       	rcall	.-66     	; 0x742 <sio2host_tx>
     784:	0f 90       	pop	r0
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <__vector_36>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
     78c:	1f 92       	push	r1
     78e:	0f 92       	push	r0
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	0f 92       	push	r0
     794:	11 24       	eor	r1, r1
     796:	0b b6       	in	r0, 0x3b	; 59
     798:	0f 92       	push	r0
     79a:	2f 93       	push	r18
     79c:	3f 93       	push	r19
     79e:	4f 93       	push	r20
     7a0:	5f 93       	push	r21
     7a2:	6f 93       	push	r22
     7a4:	7f 93       	push	r23
     7a6:	8f 93       	push	r24
     7a8:	9f 93       	push	r25
     7aa:	af 93       	push	r26
     7ac:	bf 93       	push	r27
     7ae:	ef 93       	push	r30
     7b0:	ff 93       	push	r31
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	1f 92       	push	r1
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	be 01       	movw	r22, r28
     7c2:	6f 5f       	subi	r22, 0xFF	; 255
     7c4:	7f 4f       	sbci	r23, 0xFF	; 255
     7c6:	88 ec       	ldi	r24, 0xC8	; 200
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	5b de       	rcall	.-842    	; 0x482 <usart_serial_read_packet>
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     7cc:	f8 94       	cli

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
     7ce:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <serial_rx_buf_tail>
     7d2:	e8 2f       	mov	r30, r24
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	e2 5e       	subi	r30, 0xE2	; 226
     7d8:	fd 4f       	sbci	r31, 0xFD	; 253
     7da:	99 81       	ldd	r25, Y+1	; 0x01
     7dc:	90 83       	st	Z, r25

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
     7de:	8b 39       	cpi	r24, 0x9B	; 155
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <__vector_36+0x5c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
     7e2:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <serial_rx_buf_tail>
     7e6:	03 c0       	rjmp	.+6      	; 0x7ee <__vector_36+0x62>
	} else {
		serial_rx_buf_tail++;
     7e8:	8f 5f       	subi	r24, 0xFF	; 255
     7ea:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <serial_rx_buf_tail>
	}

	cpu_irq_enable();
     7ee:	78 94       	sei
}
     7f0:	0f 90       	pop	r0
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	ff 91       	pop	r31
     7f8:	ef 91       	pop	r30
     7fa:	bf 91       	pop	r27
     7fc:	af 91       	pop	r26
     7fe:	9f 91       	pop	r25
     800:	8f 91       	pop	r24
     802:	7f 91       	pop	r23
     804:	6f 91       	pop	r22
     806:	5f 91       	pop	r21
     808:	4f 91       	pop	r20
     80a:	3f 91       	pop	r19
     80c:	2f 91       	pop	r18
     80e:	0f 90       	pop	r0
     810:	0b be       	out	0x3b, r0	; 59
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	0f 90       	pop	r0
     818:	1f 90       	pop	r1
     81a:	18 95       	reti

0000081c <NWK_Init>:

		cl += 25;
	}

	return 255;
}
     81c:	e6 e0       	ldi	r30, 0x06	; 6
     81e:	f1 e1       	ldi	r31, 0x11	; 17
     820:	14 82       	std	Z+4, r1	; 0x04
     822:	15 82       	std	Z+5, r1	; 0x05
     824:	11 82       	std	Z+1, r1	; 0x01
     826:	10 82       	st	Z, r1
     828:	17 aa       	std	Z+55, r1	; 0x37
     82a:	16 aa       	std	Z+54, r1	; 0x36
     82c:	ec e0       	ldi	r30, 0x0C	; 12
     82e:	f1 e1       	ldi	r31, 0x11	; 17
     830:	8c e2       	ldi	r24, 0x2C	; 44
     832:	91 e1       	ldi	r25, 0x11	; 17
     834:	11 92       	st	Z+, r1
     836:	11 92       	st	Z+, r1
     838:	e8 17       	cp	r30, r24
     83a:	f9 07       	cpc	r31, r25
     83c:	d9 f7       	brne	.-10     	; 0x834 <NWK_Init+0x18>
     83e:	ac d7       	rcall	.+3928   	; 0x1798 <nwkTxInit>
     840:	64 d3       	rcall	.+1736   	; 0xf0a <nwkRxInit>
     842:	18 d1       	rcall	.+560    	; 0xa74 <nwkFrameInit>
     844:	43 d0       	rcall	.+134    	; 0x8cc <nwkDataReqInit>
     846:	96 d1       	rcall	.+812    	; 0xb74 <nwkRouteInit>
     848:	03 c6       	rjmp	.+3078   	; 0x1450 <nwkSecurityInit>
     84a:	08 95       	ret

0000084c <NWK_SetAddr>:
     84c:	90 93 07 11 	sts	0x1107, r25	; 0x801107 <nwkIb+0x1>
     850:	80 93 06 11 	sts	0x1106, r24	; 0x801106 <nwkIb>
     854:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <PHY_SetShortAddr>
     858:	08 95       	ret

0000085a <NWK_SetPanId>:
     85a:	90 93 09 11 	sts	0x1109, r25	; 0x801109 <nwkIb+0x3>
     85e:	80 93 08 11 	sts	0x1108, r24	; 0x801108 <nwkIb+0x2>
     862:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <PHY_SetPanId>
     866:	08 95       	ret

00000868 <NWK_OpenEndpoint>:
     868:	e8 2f       	mov	r30, r24
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	ee 0f       	add	r30, r30
     86e:	ff 1f       	adc	r31, r31
     870:	e4 5f       	subi	r30, 0xF4	; 244
     872:	fe 4e       	sbci	r31, 0xEE	; 238
     874:	71 83       	std	Z+1, r23	; 0x01
     876:	60 83       	st	Z, r22
     878:	08 95       	ret

0000087a <NWK_TaskHandler>:
/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
	nwkRxTaskHandler();
     87a:	99 d3       	rcall	.+1842   	; 0xfae <nwkRxTaskHandler>
	nwkTxTaskHandler();
     87c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <nwkTxTaskHandler>
	nwkDataReqTaskHandler();
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
     880:	4e d0       	rcall	.+156    	; 0x91e <nwkDataReqTaskHandler>
     882:	3d c6       	rjmp	.+3194   	; 0x14fe <nwkSecurityTaskHandler>
     884:	08 95       	ret

00000886 <nwkDataReqTxConf>:
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     886:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <nwkDataReqQueue>
     88a:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <nwkDataReqQueue+0x1>
     88e:	30 97       	sbiw	r30, 0x00	; 0
     890:	d9 f0       	breq	.+54     	; 0x8c8 <nwkDataReqTxConf+0x42>
		if (req->frame == frame) {
     892:	22 81       	ldd	r18, Z+2	; 0x02
     894:	33 81       	ldd	r19, Z+3	; 0x03
     896:	82 17       	cp	r24, r18
     898:	93 07       	cpc	r25, r19
     89a:	89 f4       	brne	.+34     	; 0x8be <nwkDataReqTxConf+0x38>
     89c:	05 c0       	rjmp	.+10     	; 0x8a8 <nwkDataReqTxConf+0x22>
     89e:	22 81       	ldd	r18, Z+2	; 0x02
     8a0:	33 81       	ldd	r19, Z+3	; 0x03
     8a2:	28 17       	cp	r18, r24
     8a4:	39 07       	cpc	r19, r25
     8a6:	59 f4       	brne	.+22     	; 0x8be <nwkDataReqTxConf+0x38>
			req->status = frame->tx.status;
     8a8:	dc 01       	movw	r26, r24
     8aa:	ad 57       	subi	r26, 0x7D	; 125
     8ac:	bf 4f       	sbci	r27, 0xFF	; 255
     8ae:	2c 91       	ld	r18, X
     8b0:	27 87       	std	Z+15, r18	; 0x0f
			req->control = frame->tx.control;
     8b2:	13 96       	adiw	r26, 0x03	; 3
     8b4:	2c 91       	ld	r18, X
     8b6:	20 8b       	std	Z+16, r18	; 0x10
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
     8b8:	22 e0       	ldi	r18, 0x02	; 2
     8ba:	24 83       	std	Z+4, r18	; 0x04
			break;
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <nwkDataReqTxConf+0x42>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     8be:	01 90       	ld	r0, Z+
     8c0:	f0 81       	ld	r31, Z
     8c2:	e0 2d       	mov	r30, r0
     8c4:	30 97       	sbiw	r30, 0x00	; 0
     8c6:	59 f7       	brne	.-42     	; 0x89e <nwkDataReqTxConf+0x18>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
     8c8:	12 c1       	rjmp	.+548    	; 0xaee <nwkFrameFree>
     8ca:	08 95       	ret

000008cc <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
     8cc:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <nwkDataReqQueue+0x1>
     8d0:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <nwkDataReqQueue>
     8d4:	08 95       	ret

000008d6 <NWK_DataReq>:
/*************************************************************************//**
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     8d6:	fc 01       	movw	r30, r24
	req->state = NWK_DATA_REQ_STATE_INITIAL;
     8d8:	14 82       	std	Z+4, r1	; 0x04
	req->status = NWK_SUCCESS_STATUS;
     8da:	17 86       	std	Z+15, r1	; 0x0f
	req->frame = NULL;
     8dc:	13 82       	std	Z+3, r1	; 0x03
     8de:	12 82       	std	Z+2, r1	; 0x02

	nwkIb.lock++;
     8e0:	a6 e0       	ldi	r26, 0x06	; 6
     8e2:	b1 e1       	ldi	r27, 0x11	; 17
     8e4:	d6 96       	adiw	r26, 0x36	; 54
     8e6:	8d 91       	ld	r24, X+
     8e8:	9c 91       	ld	r25, X
     8ea:	d7 97       	sbiw	r26, 0x37	; 55
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	d7 96       	adiw	r26, 0x37	; 55
     8f0:	9c 93       	st	X, r25
     8f2:	8e 93       	st	-X, r24
     8f4:	d6 97       	sbiw	r26, 0x36	; 54

	if (NULL == nwkDataReqQueue) {
     8f6:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <nwkDataReqQueue>
     8fa:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <nwkDataReqQueue+0x1>
     8fe:	00 97       	sbiw	r24, 0x00	; 0
     900:	39 f4       	brne	.+14     	; 0x910 <NWK_DataReq+0x3a>
		req->next = NULL;
     902:	11 82       	std	Z+1, r1	; 0x01
     904:	10 82       	st	Z, r1
		nwkDataReqQueue = req;
     906:	f0 93 bb 02 	sts	0x02BB, r31	; 0x8002bb <nwkDataReqQueue+0x1>
     90a:	e0 93 ba 02 	sts	0x02BA, r30	; 0x8002ba <nwkDataReqQueue>
     90e:	08 95       	ret
	} else {
		req->next = nwkDataReqQueue;
     910:	91 83       	std	Z+1, r25	; 0x01
     912:	80 83       	st	Z, r24
		nwkDataReqQueue = req;
     914:	f0 93 bb 02 	sts	0x02BB, r31	; 0x8002bb <nwkDataReqQueue+0x1>
     918:	e0 93 ba 02 	sts	0x02BA, r30	; 0x8002ba <nwkDataReqQueue>
     91c:	08 95       	ret

0000091e <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     926:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <nwkDataReqQueue>
     92a:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <nwkDataReqQueue+0x1>
     92e:	30 97       	sbiw	r30, 0x00	; 0
     930:	09 f4       	brne	.+2      	; 0x934 <nwkDataReqTaskHandler+0x16>
     932:	9b c0       	rjmp	.+310    	; 0xa6a <nwkDataReqTaskHandler+0x14c>
     934:	ef 01       	movw	r28, r30
		switch (req->state) {
     936:	8c 81       	ldd	r24, Y+4	; 0x04
     938:	88 23       	and	r24, r24
     93a:	21 f0       	breq	.+8      	; 0x944 <nwkDataReqTaskHandler+0x26>
     93c:	82 30       	cpi	r24, 0x02	; 2
     93e:	09 f4       	brne	.+2      	; 0x942 <nwkDataReqTaskHandler+0x24>
     940:	6e c0       	rjmp	.+220    	; 0xa1e <nwkDataReqTaskHandler+0x100>
     942:	8d c0       	rjmp	.+282    	; 0xa5e <nwkDataReqTaskHandler+0x140>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
     944:	9e d0       	rcall	.+316    	; 0xa82 <nwkFrameAlloc>
     946:	8c 01       	movw	r16, r24
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	21 f4       	brne	.+8      	; 0x954 <nwkDataReqTaskHandler+0x36>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	8c 83       	std	Y+4, r24	; 0x04
		req->status = NWK_OUT_OF_MEMORY_STATUS;
     950:	8f 87       	std	Y+15, r24	; 0x0f
     952:	8b c0       	rjmp	.+278    	; 0xa6a <nwkDataReqTaskHandler+0x14c>
		return;
	}

	req->frame = frame;
     954:	9b 83       	std	Y+3, r25	; 0x03
     956:	8a 83       	std	Y+2, r24	; 0x02
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	8c 83       	std	Y+4, r24	; 0x04

	frame->tx.confirm = nwkDataReqTxConf;
     95c:	f8 01       	movw	r30, r16
     95e:	e9 57       	subi	r30, 0x79	; 121
     960:	ff 4f       	sbci	r31, 0xFF	; 255
     962:	83 e4       	ldi	r24, 0x43	; 67
     964:	94 e0       	ldi	r25, 0x04	; 4
     966:	91 83       	std	Z+1, r25	; 0x01
     968:	80 83       	st	Z, r24
	frame->tx.control = req->options &
     96a:	31 97       	sbiw	r30, 0x01	; 1
     96c:	89 85       	ldd	r24, Y+9	; 0x09
     96e:	82 fb       	bst	r24, 2
     970:	88 27       	eor	r24, r24
     972:	80 f9       	bld	r24, 0
     974:	80 83       	st	Z, r24
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
     976:	99 85       	ldd	r25, Y+9	; 0x09
     978:	d8 01       	movw	r26, r16
     97a:	1b 96       	adiw	r26, 0x0b	; 11
     97c:	8c 91       	ld	r24, X
     97e:	1b 97       	sbiw	r26, 0x0b	; 11
     980:	90 fb       	bst	r25, 0
     982:	80 f9       	bld	r24, 0
     984:	1b 96       	adiw	r26, 0x0b	; 11
     986:	8c 93       	st	X, r24
     988:	1b 97       	sbiw	r26, 0x0b	; 11
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
     98a:	99 85       	ldd	r25, Y+9	; 0x09
     98c:	93 fb       	bst	r25, 3
     98e:	99 27       	eor	r25, r25
     990:	90 f9       	bld	r25, 0
     992:	90 fb       	bst	r25, 0
     994:	82 f9       	bld	r24, 2
     996:	1b 96       	adiw	r26, 0x0b	; 11
     998:	8c 93       	st	X, r24
     99a:	1b 97       	sbiw	r26, 0x0b	; 11
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
     99c:	99 85       	ldd	r25, Y+9	; 0x09
     99e:	96 95       	lsr	r25
     9a0:	91 70       	andi	r25, 0x01	; 1
     9a2:	90 fb       	bst	r25, 0
     9a4:	81 f9       	bld	r24, 1
     9a6:	1b 96       	adiw	r26, 0x0b	; 11
     9a8:	8c 93       	st	X, r24
     9aa:	1b 97       	sbiw	r26, 0x0b	; 11
		frame->payload += sizeof(NwkFrameMulticastHeader_t);
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}
#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     9ac:	e6 e0       	ldi	r30, 0x06	; 6
     9ae:	f1 e1       	ldi	r31, 0x11	; 17
     9b0:	84 81       	ldd	r24, Z+4	; 0x04
     9b2:	8f 5f       	subi	r24, 0xFF	; 255
     9b4:	84 83       	std	Z+4, r24	; 0x04
     9b6:	1c 96       	adiw	r26, 0x0c	; 12
     9b8:	8c 93       	st	X, r24
     9ba:	1c 97       	sbiw	r26, 0x0c	; 12
	frame->header.nwkSrcAddr = nwkIb.addr;
     9bc:	80 81       	ld	r24, Z
     9be:	91 81       	ldd	r25, Z+1	; 0x01
     9c0:	1e 96       	adiw	r26, 0x0e	; 14
     9c2:	9c 93       	st	X, r25
     9c4:	8e 93       	st	-X, r24
     9c6:	1d 97       	sbiw	r26, 0x0d	; 13
	frame->header.nwkDstAddr = req->dstAddr;
     9c8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ca:	9e 81       	ldd	r25, Y+6	; 0x06
     9cc:	50 96       	adiw	r26, 0x10	; 16
     9ce:	9c 93       	st	X, r25
     9d0:	8e 93       	st	-X, r24
     9d2:	1f 97       	sbiw	r26, 0x0f	; 15
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
     9d4:	88 85       	ldd	r24, Y+8	; 0x08
     9d6:	98 2f       	mov	r25, r24
     9d8:	9f 70       	andi	r25, 0x0F	; 15
     9da:	51 96       	adiw	r26, 0x11	; 17
     9dc:	8c 91       	ld	r24, X
     9de:	51 97       	sbiw	r26, 0x11	; 17
     9e0:	80 7f       	andi	r24, 0xF0	; 240
     9e2:	89 2b       	or	r24, r25
     9e4:	51 96       	adiw	r26, 0x11	; 17
     9e6:	8c 93       	st	X, r24
     9e8:	51 97       	sbiw	r26, 0x11	; 17
	frame->header.nwkDstEndpoint = req->dstEndpoint;
     9ea:	9f 81       	ldd	r25, Y+7	; 0x07
     9ec:	92 95       	swap	r25
     9ee:	90 7f       	andi	r25, 0xF0	; 240
     9f0:	8f 70       	andi	r24, 0x0F	; 15
     9f2:	89 2b       	or	r24, r25
     9f4:	51 96       	adiw	r26, 0x11	; 17
     9f6:	8c 93       	st	X, r24

	memcpy(frame->payload, req->data, req->size);
     9f8:	f8 01       	movw	r30, r16
     9fa:	ef 57       	subi	r30, 0x7F	; 127
     9fc:	ff 4f       	sbci	r31, 0xFF	; 255
     9fe:	4c 85       	ldd	r20, Y+12	; 0x0c
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	6a 85       	ldd	r22, Y+10	; 0x0a
     a04:	7b 85       	ldd	r23, Y+11	; 0x0b
     a06:	80 81       	ld	r24, Z
     a08:	91 81       	ldd	r25, Z+1	; 0x01
     a0a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <memcpy>
	frame->size += req->size;
     a0e:	f8 01       	movw	r30, r16
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	8c 85       	ldd	r24, Y+12	; 0x0c
     a14:	89 0f       	add	r24, r25
     a16:	81 83       	std	Z+1, r24	; 0x01

	nwkTxFrame(frame);
     a18:	c8 01       	movw	r24, r16
     a1a:	e1 d6       	rcall	.+3522   	; 0x17de <nwkTxFrame>
     a1c:	26 c0       	rjmp	.+76     	; 0xa6a <nwkDataReqTaskHandler+0x14c>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
     a1e:	ec 17       	cp	r30, r28
     a20:	fd 07       	cpc	r31, r29
     a22:	41 f4       	brne	.+16     	; 0xa34 <nwkDataReqTaskHandler+0x116>
		nwkDataReqQueue = nwkDataReqQueue->next;
     a24:	80 81       	ld	r24, Z
     a26:	91 81       	ldd	r25, Z+1	; 0x01
     a28:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <nwkDataReqQueue+0x1>
     a2c:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <nwkDataReqQueue>
     a30:	0a c0       	rjmp	.+20     	; 0xa46 <nwkDataReqTaskHandler+0x128>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
			prev = prev->next;
     a32:	fc 01       	movw	r30, r24
{
	if (nwkDataReqQueue == req) {
		nwkDataReqQueue = nwkDataReqQueue->next;
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
     a34:	80 81       	ld	r24, Z
     a36:	91 81       	ldd	r25, Z+1	; 0x01
     a38:	8c 17       	cp	r24, r28
     a3a:	9d 07       	cpc	r25, r29
     a3c:	d1 f7       	brne	.-12     	; 0xa32 <nwkDataReqTaskHandler+0x114>
			prev = prev->next;
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
     a3e:	88 81       	ld	r24, Y
     a40:	99 81       	ldd	r25, Y+1	; 0x01
     a42:	91 83       	std	Z+1, r25	; 0x01
     a44:	80 83       	st	Z, r24
	}

	nwkIb.lock--;
     a46:	e6 e0       	ldi	r30, 0x06	; 6
     a48:	f1 e1       	ldi	r31, 0x11	; 17
     a4a:	86 a9       	ldd	r24, Z+54	; 0x36
     a4c:	97 a9       	ldd	r25, Z+55	; 0x37
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	97 ab       	std	Z+55, r25	; 0x37
     a52:	86 ab       	std	Z+54, r24	; 0x36
	req->confirm(req);
     a54:	ed 85       	ldd	r30, Y+13	; 0x0d
     a56:	fe 85       	ldd	r31, Y+14	; 0x0e
     a58:	ce 01       	movw	r24, r28
     a5a:	19 95       	eicall
     a5c:	06 c0       	rjmp	.+12     	; 0xa6a <nwkDataReqTaskHandler+0x14c>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     a5e:	09 90       	ld	r0, Y+
     a60:	d8 81       	ld	r29, Y
     a62:	c0 2d       	mov	r28, r0
     a64:	20 97       	sbiw	r28, 0x00	; 0
     a66:	09 f0       	breq	.+2      	; 0xa6a <nwkDataReqTaskHandler+0x14c>
     a68:	66 cf       	rjmp	.-308    	; 0x936 <nwkDataReqTaskHandler+0x18>

		default:
			break;
		}
	}
}
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	08 95       	ret

00000a74 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     a74:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <nwkFrameFrames>
     a78:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <nwkFrameFrames+0x89>
     a7c:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <nwkFrameFrames+0x112>
     a80:	08 95       	ret

00000a82 <nwkFrameAlloc>:
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
     a82:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <nwkFrameFrames>
     a86:	88 23       	and	r24, r24
     a88:	71 f0       	breq	.+28     	; 0xaa6 <nwkFrameAlloc+0x24>
     a8a:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <nwkFrameFrames+0x89>
     a8e:	88 23       	and	r24, r24
     a90:	39 f0       	breq	.+14     	; 0xaa0 <nwkFrameAlloc+0x1e>
     a92:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <nwkFrameFrames+0x112>
     a96:	81 11       	cpse	r24, r1
     a98:	27 c0       	rjmp	.+78     	; 0xae8 <nwkFrameAlloc+0x66>
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	05 c0       	rjmp	.+10     	; 0xaaa <nwkFrameAlloc+0x28>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <nwkFrameAlloc+0x28>
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     aaa:	49 e8       	ldi	r20, 0x89	; 137
     aac:	48 9f       	mul	r20, r24
     aae:	90 01       	movw	r18, r0
     ab0:	49 9f       	mul	r20, r25
     ab2:	30 0d       	add	r19, r0
     ab4:	11 24       	eor	r1, r1
     ab6:	c9 01       	movw	r24, r18
     ab8:	84 54       	subi	r24, 0x44	; 68
     aba:	9d 4f       	sbci	r25, 0xFD	; 253
     abc:	fc 01       	movw	r30, r24
     abe:	11 92       	st	Z+, r1
     ac0:	4a 95       	dec	r20
     ac2:	e9 f7       	brne	.-6      	; 0xabe <nwkFrameAlloc+0x3c>
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     ac4:	40 e1       	ldi	r20, 0x10	; 16
     ac6:	fc 01       	movw	r30, r24
     ac8:	41 83       	std	Z+1, r20	; 0x01
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
     aca:	ef 57       	subi	r30, 0x7F	; 127
     acc:	ff 4f       	sbci	r31, 0xFF	; 255
     ace:	22 53       	subi	r18, 0x32	; 50
     ad0:	3d 4f       	sbci	r19, 0xFD	; 253
     ad2:	31 83       	std	Z+1, r19	; 0x01
     ad4:	20 83       	st	Z, r18
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
     ad6:	e6 e0       	ldi	r30, 0x06	; 6
     ad8:	f1 e1       	ldi	r31, 0x11	; 17
     ada:	26 a9       	ldd	r18, Z+54	; 0x36
     adc:	37 a9       	ldd	r19, Z+55	; 0x37
     ade:	2f 5f       	subi	r18, 0xFF	; 255
     ae0:	3f 4f       	sbci	r19, 0xFF	; 255
     ae2:	37 ab       	std	Z+55, r19	; 0x37
     ae4:	26 ab       	std	Z+54, r18	; 0x36
			return &nwkFrameFrames[i];
     ae6:	08 95       	ret
		}
	}
	return NULL;
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
}
     aec:	08 95       	ret

00000aee <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
     aee:	fc 01       	movw	r30, r24
     af0:	10 82       	st	Z, r1
	nwkIb.lock--;
     af2:	e6 e0       	ldi	r30, 0x06	; 6
     af4:	f1 e1       	ldi	r31, 0x11	; 17
     af6:	86 a9       	ldd	r24, Z+54	; 0x36
     af8:	97 a9       	ldd	r25, Z+55	; 0x37
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	97 ab       	std	Z+55, r25	; 0x37
     afe:	86 ab       	std	Z+54, r24	; 0x36
     b00:	08 95       	ret

00000b02 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
     b02:	00 97       	sbiw	r24, 0x00	; 0
     b04:	41 f0       	breq	.+16     	; 0xb16 <nwkFrameNext+0x14>
		frame = nwkFrameFrames;
	} else {
		frame++;
     b06:	fc 01       	movw	r30, r24
     b08:	e7 57       	subi	r30, 0x77	; 119
     b0a:	ff 4f       	sbci	r31, 0xFF	; 255
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     b0c:	84 e0       	ldi	r24, 0x04	; 4
     b0e:	e7 35       	cpi	r30, 0x57	; 87
     b10:	f8 07       	cpc	r31, r24
     b12:	18 f0       	brcs	.+6      	; 0xb1a <nwkFrameNext+0x18>
     b14:	12 c0       	rjmp	.+36     	; 0xb3a <nwkFrameNext+0x38>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
     b16:	ec eb       	ldi	r30, 0xBC	; 188
     b18:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
     b1a:	80 81       	ld	r24, Z
     b1c:	88 23       	and	r24, r24
     b1e:	21 f0       	breq	.+8      	; 0xb28 <nwkFrameNext+0x26>
     b20:	0f c0       	rjmp	.+30     	; 0xb40 <nwkFrameNext+0x3e>
     b22:	80 81       	ld	r24, Z
     b24:	81 11       	cpse	r24, r1
     b26:	0f c0       	rjmp	.+30     	; 0xb46 <nwkFrameNext+0x44>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     b28:	e7 57       	subi	r30, 0x77	; 119
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	84 e0       	ldi	r24, 0x04	; 4
     b2e:	e7 35       	cpi	r30, 0x57	; 87
     b30:	f8 07       	cpc	r31, r24
     b32:	b8 f3       	brcs	.-18     	; 0xb22 <nwkFrameNext+0x20>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	08 95       	ret
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	08 95       	ret
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
     b40:	8e 2f       	mov	r24, r30
     b42:	9f 2f       	mov	r25, r31
     b44:	08 95       	ret
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     b46:	8e 2f       	mov	r24, r30
     b48:	9f 2f       	mov	r25, r31
			return frame;
		}
	}

	return NULL;
}
     b4a:	08 95       	ret

00000b4c <nwkFrameCommandInit>:
/*************************************************************************//**
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     b4c:	fc 01       	movw	r30, r24
	frame->tx.status = NWK_SUCCESS_STATUS;
     b4e:	dc 01       	movw	r26, r24
     b50:	ad 57       	subi	r26, 0x7D	; 125
     b52:	bf 4f       	sbci	r27, 0xFF	; 255
     b54:	1c 92       	st	X, r1
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     b56:	a6 e0       	ldi	r26, 0x06	; 6
     b58:	b1 e1       	ldi	r27, 0x11	; 17
     b5a:	14 96       	adiw	r26, 0x04	; 4
     b5c:	9c 91       	ld	r25, X
     b5e:	14 97       	sbiw	r26, 0x04	; 4
     b60:	9f 5f       	subi	r25, 0xFF	; 255
     b62:	14 96       	adiw	r26, 0x04	; 4
     b64:	9c 93       	st	X, r25
     b66:	14 97       	sbiw	r26, 0x04	; 4
     b68:	94 87       	std	Z+12, r25	; 0x0c
	frame->header.nwkSrcAddr = nwkIb.addr;
     b6a:	8d 91       	ld	r24, X+
     b6c:	9c 91       	ld	r25, X
     b6e:	96 87       	std	Z+14, r25	; 0x0e
     b70:	85 87       	std	Z+13, r24	; 0x0d
     b72:	08 95       	ret

00000b74 <nwkRouteInit>:
	entry->nextHopAddr = nextHop;
	entry->multicast = multicast;
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
	entry->lqi = lqi;
}
     b74:	a8 e5       	ldi	r26, 0x58	; 88
     b76:	b4 e0       	ldi	r27, 0x04	; 4
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	4f ef       	ldi	r20, 0xFF	; 255
     b7e:	5f ef       	ldi	r21, 0xFF	; 255
     b80:	11 96       	adiw	r26, 0x01	; 1
     b82:	5c 93       	st	X, r21
     b84:	4e 93       	st	-X, r20
     b86:	fc 01       	movw	r30, r24
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	e8 1b       	sub	r30, r24
     b96:	f9 0b       	sbc	r31, r25
     b98:	e9 5a       	subi	r30, 0xA9	; 169
     b9a:	fb 4f       	sbci	r31, 0xFB	; 251
     b9c:	20 81       	ld	r18, Z
     b9e:	2e 7f       	andi	r18, 0xFE	; 254
     ba0:	20 83       	st	Z, r18
     ba2:	14 96       	adiw	r26, 0x04	; 4
     ba4:	1c 92       	st	X, r1
     ba6:	14 97       	sbiw	r26, 0x04	; 4
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	17 96       	adiw	r26, 0x07	; 7
     bac:	84 36       	cpi	r24, 0x64	; 100
     bae:	91 05       	cpc	r25, r1
     bb0:	39 f7       	brne	.-50     	; 0xb80 <nwkRouteInit+0xc>
     bb2:	08 95       	ret

00000bb4 <NWK_RouteFindEntry>:
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	e8 e5       	ldi	r30, 0x58	; 88
     bbe:	f4 e0       	ldi	r31, 0x04	; 4
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	06 2f       	mov	r16, r22
     bc6:	10 e0       	ldi	r17, 0x00	; 0
     bc8:	40 81       	ld	r20, Z
     bca:	51 81       	ldd	r21, Z+1	; 0x01
     bcc:	48 17       	cp	r20, r24
     bce:	59 07       	cpc	r21, r25
     bd0:	b1 f4       	brne	.+44     	; 0xbfe <NWK_RouteFindEntry+0x4a>
     bd2:	d9 01       	movw	r26, r18
     bd4:	aa 0f       	add	r26, r26
     bd6:	bb 1f       	adc	r27, r27
     bd8:	aa 0f       	add	r26, r26
     bda:	bb 1f       	adc	r27, r27
     bdc:	aa 0f       	add	r26, r26
     bde:	bb 1f       	adc	r27, r27
     be0:	a2 1b       	sub	r26, r18
     be2:	b3 0b       	sbc	r27, r19
     be4:	a9 5a       	subi	r26, 0xA9	; 169
     be6:	bb 4f       	sbci	r27, 0xFB	; 251
     be8:	4c 91       	ld	r20, X
     bea:	46 95       	lsr	r20
     bec:	41 70       	andi	r20, 0x01	; 1
     bee:	c4 2f       	mov	r28, r20
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	d4 2f       	mov	r29, r20
     bf4:	c0 17       	cp	r28, r16
     bf6:	d1 07       	cpc	r29, r17
     bf8:	11 f4       	brne	.+4      	; 0xbfe <NWK_RouteFindEntry+0x4a>
     bfa:	cd 01       	movw	r24, r26
     bfc:	08 c0       	rjmp	.+16     	; 0xc0e <NWK_RouteFindEntry+0x5a>
     bfe:	2f 5f       	subi	r18, 0xFF	; 255
     c00:	3f 4f       	sbci	r19, 0xFF	; 255
     c02:	37 96       	adiw	r30, 0x07	; 7
     c04:	24 36       	cpi	r18, 0x64	; 100
     c06:	31 05       	cpc	r19, r1
     c08:	f9 f6       	brne	.-66     	; 0xbc8 <NWK_RouteFindEntry+0x14>
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	08 95       	ret

00000c18 <NWK_RouteNewEntry>:
     c18:	a0 e0       	ldi	r26, 0x00	; 0
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e7 e5       	ldi	r30, 0x57	; 87
     c1e:	f4 e0       	ldi	r31, 0x04	; 4
     c20:	80 81       	ld	r24, Z
     c22:	80 fd       	sbrc	r24, 0
     c24:	0d c0       	rjmp	.+26     	; 0xc40 <NWK_RouteNewEntry+0x28>
     c26:	85 81       	ldd	r24, Z+5	; 0x05
     c28:	88 23       	and	r24, r24
     c2a:	81 f0       	breq	.+32     	; 0xc4c <NWK_RouteNewEntry+0x34>
     c2c:	10 97       	sbiw	r26, 0x00	; 0
     c2e:	39 f0       	breq	.+14     	; 0xc3e <NWK_RouteNewEntry+0x26>
     c30:	15 96       	adiw	r26, 0x05	; 5
     c32:	9c 91       	ld	r25, X
     c34:	15 97       	sbiw	r26, 0x05	; 5
     c36:	89 17       	cp	r24, r25
     c38:	18 f4       	brcc	.+6      	; 0xc40 <NWK_RouteNewEntry+0x28>
     c3a:	df 01       	movw	r26, r30
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <NWK_RouteNewEntry+0x28>
     c3e:	df 01       	movw	r26, r30
     c40:	37 96       	adiw	r30, 0x07	; 7
     c42:	87 e0       	ldi	r24, 0x07	; 7
     c44:	e3 31       	cpi	r30, 0x13	; 19
     c46:	f8 07       	cpc	r31, r24
     c48:	59 f7       	brne	.-42     	; 0xc20 <NWK_RouteNewEntry+0x8>
     c4a:	fd 01       	movw	r30, r26
     c4c:	80 81       	ld	r24, Z
     c4e:	8d 70       	andi	r24, 0x0D	; 13
     c50:	80 63       	ori	r24, 0x30	; 48
     c52:	80 83       	st	Z, r24
     c54:	80 e8       	ldi	r24, 0x80	; 128
     c56:	85 83       	std	Z+5, r24	; 0x05
     c58:	cf 01       	movw	r24, r30
     c5a:	08 95       	ret

00000c5c <NWK_RouteFreeEntry>:
     c5c:	fc 01       	movw	r30, r24
     c5e:	80 81       	ld	r24, Z
     c60:	80 fd       	sbrc	r24, 0
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <NWK_RouteFreeEntry+0x12>
     c64:	8f ef       	ldi	r24, 0xFF	; 255
     c66:	9f ef       	ldi	r25, 0xFF	; 255
     c68:	92 83       	std	Z+2, r25	; 0x02
     c6a:	81 83       	std	Z+1, r24	; 0x01
     c6c:	15 82       	std	Z+5, r1	; 0x05
     c6e:	08 95       	ret

00000c70 <NWK_RouteNextHop>:
     c70:	a1 df       	rcall	.-190    	; 0xbb4 <NWK_RouteFindEntry>
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	21 f0       	breq	.+8      	; 0xc7e <NWK_RouteNextHop+0xe>
     c76:	fc 01       	movw	r30, r24
     c78:	83 81       	ldd	r24, Z+3	; 0x03
     c7a:	94 81       	ldd	r25, Z+4	; 0x04
     c7c:	08 95       	ret
     c7e:	8f ef       	ldi	r24, 0xFF	; 255
     c80:	9f ef       	ldi	r25, 0xFF	; 255
     c82:	08 95       	ret

00000c84 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
     c84:	97 df       	rcall	.-210    	; 0xbb4 <NWK_RouteFindEntry>
	if (entry) {
     c86:	00 97       	sbiw	r24, 0x00	; 0
		NWK_RouteFreeEntry(entry);
     c88:	09 f0       	breq	.+2      	; 0xc8c <nwkRouteRemove+0x8>
     c8a:	e8 cf       	rjmp	.-48     	; 0xc5c <NWK_RouteFreeEntry>
     c8c:	08 95       	ret

00000c8e <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     c98:	01 85       	ldd	r16, Z+9	; 0x09
     c9a:	12 85       	ldd	r17, Z+10	; 0x0a
     c9c:	11 23       	and	r17, r17
     c9e:	2c f4       	brge	.+10     	; 0xcaa <nwkRouteFrameReceived+0x1c>
     ca0:	85 85       	ldd	r24, Z+13	; 0x0d
     ca2:	96 85       	ldd	r25, Z+14	; 0x0e
     ca4:	08 17       	cp	r16, r24
     ca6:	19 07       	cpc	r17, r25
     ca8:	e1 f5       	brne	.+120    	; 0xd22 <nwkRouteFrameReceived+0x94>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
     caa:	85 81       	ldd	r24, Z+5	; 0x05
     cac:	96 81       	ldd	r25, Z+6	; 0x06
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	c1 f1       	breq	.+112    	; 0xd22 <nwkRouteFrameReceived+0x94>
     cb2:	ef 01       	movw	r28, r30
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	85 85       	ldd	r24, Z+13	; 0x0d
     cb8:	96 85       	ldd	r25, Z+14	; 0x0e
     cba:	7c df       	rcall	.-264    	; 0xbb4 <NWK_RouteFindEntry>
     cbc:	fc 01       	movw	r30, r24

	if (entry) {
     cbe:	89 2b       	or	r24, r25
     cc0:	a1 f0       	breq	.+40     	; 0xcea <nwkRouteFrameReceived+0x5c>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     cc2:	8f 81       	ldd	r24, Y+7	; 0x07
     cc4:	98 85       	ldd	r25, Y+8	; 0x08
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	f9 f4       	brne	.+62     	; 0xd08 <nwkRouteFrameReceived+0x7a>
     cca:	20 91 06 11 	lds	r18, 0x1106	; 0x801106 <nwkIb>
     cce:	30 91 07 11 	lds	r19, 0x1107	; 0x801107 <nwkIb+0x1>
     cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd4:	98 89       	ldd	r25, Y+16	; 0x10
     cd6:	28 17       	cp	r18, r24
     cd8:	39 07       	cpc	r19, r25
     cda:	b1 f4       	brne	.+44     	; 0xd08 <nwkRouteFrameReceived+0x7a>
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
				entry->lqi) || discovery) {
			entry->nextHopAddr = header->macSrcAddr;
     cdc:	14 83       	std	Z+4, r17	; 0x04
     cde:	03 83       	std	Z+3, r16	; 0x03
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
     ce0:	80 81       	ld	r24, Z
     ce2:	8f 70       	andi	r24, 0x0F	; 15
     ce4:	80 63       	ori	r24, 0x30	; 48
     ce6:	80 83       	st	Z, r24
		}
	} else {
		entry = NWK_RouteNewEntry();
     ce8:	0a c0       	rjmp	.+20     	; 0xcfe <nwkRouteFrameReceived+0x70>
     cea:	96 df       	rcall	.-212    	; 0xc18 <NWK_RouteNewEntry>
     cec:	fc 01       	movw	r30, r24

		entry->dstAddr = header->nwkSrcAddr;
     cee:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf2:	92 83       	std	Z+2, r25	; 0x02
     cf4:	81 83       	std	Z+1, r24	; 0x01
		entry->nextHopAddr = header->macSrcAddr;
     cf6:	89 85       	ldd	r24, Y+9	; 0x09
     cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfa:	94 83       	std	Z+4, r25	; 0x04
     cfc:	83 83       	std	Z+3, r24	; 0x03
	}

	entry->lqi = frame->rx.lqi;
     cfe:	cd 57       	subi	r28, 0x7D	; 125
     d00:	df 4f       	sbci	r29, 0xFF	; 255
     d02:	88 81       	ld	r24, Y
     d04:	86 83       	std	Z+6, r24	; 0x06
     d06:	0d c0       	rjmp	.+26     	; 0xd22 <nwkRouteFrameReceived+0x94>

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
     d08:	83 81       	ldd	r24, Z+3	; 0x03
     d0a:	94 81       	ldd	r25, Z+4	; 0x04
     d0c:	08 17       	cp	r16, r24
     d0e:	19 07       	cpc	r17, r25
     d10:	b1 f3       	breq	.-20     	; 0xcfe <nwkRouteFrameReceived+0x70>
     d12:	96 81       	ldd	r25, Z+6	; 0x06
     d14:	de 01       	movw	r26, r28
     d16:	ad 57       	subi	r26, 0x7D	; 125
     d18:	bf 4f       	sbci	r27, 0xFF	; 255
     d1a:	8c 91       	ld	r24, X
     d1c:	98 17       	cp	r25, r24
     d1e:	f0 f2       	brcs	.-68     	; 0xcdc <nwkRouteFrameReceived+0x4e>
     d20:	ee cf       	rjmp	.-36     	; 0xcfe <nwkRouteFrameReceived+0x70>

	entry->lqi = frame->rx.lqi;
#else
	(void)frame;
#endif
}
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	08 95       	ret

00000d2c <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	fc 01       	movw	r30, r24
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
     d32:	87 85       	ldd	r24, Z+15	; 0x0f
     d34:	90 89       	ldd	r25, Z+16	; 0x10
     d36:	8f 3f       	cpi	r24, 0xFF	; 255
     d38:	2f ef       	ldi	r18, 0xFF	; 255
     d3a:	92 07       	cpc	r25, r18
     d3c:	d9 f1       	breq	.+118    	; 0xdb4 <nwkRouteFrameSent+0x88>
     d3e:	ef 01       	movw	r28, r30
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
     d40:	63 85       	ldd	r22, Z+11	; 0x0b
     d42:	63 fb       	bst	r22, 3
     d44:	66 27       	eor	r22, r22
     d46:	60 f9       	bld	r22, 0

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
     d48:	35 df       	rcall	.-406    	; 0xbb4 <NWK_RouteFindEntry>
     d4a:	dc 01       	movw	r26, r24
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
     d4c:	89 2b       	or	r24, r25
     d4e:	91 f1       	breq	.+100    	; 0xdb4 <nwkRouteFrameSent+0x88>
     d50:	8c 91       	ld	r24, X
     d52:	80 fd       	sbrc	r24, 0
     d54:	2f c0       	rjmp	.+94     	; 0xdb4 <nwkRouteFrameSent+0x88>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
     d56:	fe 01       	movw	r30, r28
     d58:	ed 57       	subi	r30, 0x7D	; 125
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	80 81       	ld	r24, Z
     d5e:	81 11       	cpse	r24, r1
     d60:	19 c0       	rjmp	.+50     	; 0xd94 <nwkRouteFrameSent+0x68>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
     d62:	8c 91       	ld	r24, X
     d64:	8f 70       	andi	r24, 0x0F	; 15
     d66:	80 63       	ori	r24, 0x30	; 48
     d68:	8c 93       	st	X, r24

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
     d6a:	15 96       	adiw	r26, 0x05	; 5
     d6c:	8c 91       	ld	r24, X
     d6e:	15 97       	sbiw	r26, 0x05	; 5
     d70:	8f 5f       	subi	r24, 0xFF	; 255
     d72:	15 96       	adiw	r26, 0x05	; 5
     d74:	8c 93       	st	X, r24
     d76:	8f 3f       	cpi	r24, 0xFF	; 255
     d78:	e9 f4       	brne	.+58     	; 0xdb4 <nwkRouteFrameSent+0x88>
     d7a:	ec e5       	ldi	r30, 0x5C	; 92
     d7c:	f4 e0       	ldi	r31, 0x04	; 4
     d7e:	28 e1       	ldi	r18, 0x18	; 24
     d80:	37 e0       	ldi	r19, 0x07	; 7
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     d82:	80 81       	ld	r24, Z
     d84:	86 95       	lsr	r24
     d86:	8f 5f       	subi	r24, 0xFF	; 255
     d88:	80 83       	st	Z, r24
     d8a:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
     d8c:	e2 17       	cp	r30, r18
     d8e:	f3 07       	cpc	r31, r19
     d90:	c1 f7       	brne	.-16     	; 0xd82 <nwkRouteFrameSent+0x56>
     d92:	10 c0       	rjmp	.+32     	; 0xdb4 <nwkRouteFrameSent+0x88>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
     d94:	9c 91       	ld	r25, X
     d96:	89 2f       	mov	r24, r25
     d98:	82 95       	swap	r24
     d9a:	8f 70       	andi	r24, 0x0F	; 15
     d9c:	81 5f       	subi	r24, 0xF1	; 241
     d9e:	8f 70       	andi	r24, 0x0F	; 15
     da0:	28 2f       	mov	r18, r24
     da2:	22 95       	swap	r18
     da4:	20 7f       	andi	r18, 0xF0	; 240
     da6:	9f 70       	andi	r25, 0x0F	; 15
     da8:	92 2b       	or	r25, r18
     daa:	9c 93       	st	X, r25
     dac:	81 11       	cpse	r24, r1
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <nwkRouteFrameSent+0x88>
			NWK_RouteFreeEntry(entry);
     db0:	cd 01       	movw	r24, r26
     db2:	54 df       	rcall	.-344    	; 0xc5c <NWK_RouteFreeEntry>
		}
	}
}
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	08 95       	ret

00000dba <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	fc 01       	movw	r30, r24
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
     dc0:	87 85       	ldd	r24, Z+15	; 0x0f
     dc2:	90 89       	ldd	r25, Z+16	; 0x10
     dc4:	8f 3f       	cpi	r24, 0xFF	; 255
     dc6:	2f ef       	ldi	r18, 0xFF	; 255
     dc8:	92 07       	cpc	r25, r18
     dca:	29 f4       	brne	.+10     	; 0xdd6 <nwkRoutePrepareTx+0x1c>
		header->macDstAddr = NWK_BROADCAST_ADDR;
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	9f ef       	ldi	r25, 0xFF	; 255
     dd0:	90 87       	std	Z+8, r25	; 0x08
     dd2:	87 83       	std	Z+7, r24	; 0x07
     dd4:	0e c0       	rjmp	.+28     	; 0xdf2 <nwkRoutePrepareTx+0x38>
	} else if (header->nwkFcf.linkLocal) {
     dd6:	23 85       	ldd	r18, Z+11	; 0x0b
     dd8:	22 ff       	sbrs	r18, 2
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
     ddc:	90 87       	std	Z+8, r25	; 0x08
     dde:	87 83       	std	Z+7, r24	; 0x07
     de0:	08 c0       	rjmp	.+16     	; 0xdf2 <nwkRoutePrepareTx+0x38>
     de2:	ef 01       	movw	r28, r30
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
     de4:	63 85       	ldd	r22, Z+11	; 0x0b
     de6:	63 fb       	bst	r22, 3
     de8:	66 27       	eor	r22, r22
     dea:	60 f9       	bld	r22, 0
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
     dec:	41 df       	rcall	.-382    	; 0xc70 <NWK_RouteNextHop>
     dee:	98 87       	std	Y+8, r25	; 0x08
     df0:	8f 83       	std	Y+7, r24	; 0x07
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
			nwkRouteDiscoveryRequest(frame);
		}
  #endif
	}
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     df8:	af 92       	push	r10
     dfa:	bf 92       	push	r11
     dfc:	cf 92       	push	r12
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	ec 01       	movw	r28, r24
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
     e0c:	1b 85       	ldd	r17, Y+11	; 0x0b
     e0e:	13 fb       	bst	r17, 3
     e10:	11 27       	eor	r17, r17
     e12:	10 f9       	bld	r17, 0
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
     e14:	cf 84       	ldd	r12, Y+15	; 0x0f
     e16:	d8 88       	ldd	r13, Y+16	; 0x10
     e18:	61 2f       	mov	r22, r17
     e1a:	c6 01       	movw	r24, r12
     e1c:	29 df       	rcall	.-430    	; 0xc70 <NWK_RouteNextHop>
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	59 f0       	breq	.+22     	; 0xe38 <nwkRouteFrame+0x40>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
     e22:	fe 01       	movw	r30, r28
     e24:	e9 57       	subi	r30, 0x79	; 121
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	11 82       	std	Z+1, r1	; 0x01
     e2a:	10 82       	st	Z, r1
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	80 83       	st	Z, r24
		nwkTxFrame(frame);
     e32:	ce 01       	movw	r24, r28
     e34:	d4 d4       	rcall	.+2472   	; 0x17de <nwkTxFrame>
     e36:	22 c0       	rjmp	.+68     	; 0xe7c <nwkRouteFrame+0x84>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
     e38:	ad 84       	ldd	r10, Y+13	; 0x0d
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
     e3a:	be 84       	ldd	r11, Y+14	; 0x0e
     e3c:	22 de       	rcall	.-956    	; 0xa82 <nwkFrameAlloc>
     e3e:	7c 01       	movw	r14, r24
     e40:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}

	nwkFrameCommandInit(frame);
     e42:	d1 f0       	breq	.+52     	; 0xe78 <nwkRouteFrame+0x80>
     e44:	83 de       	rcall	.-762    	; 0xb4c <nwkFrameCommandInit>

	frame->size += sizeof(NwkCommandRouteError_t);
     e46:	f7 01       	movw	r30, r14
     e48:	81 81       	ldd	r24, Z+1	; 0x01
     e4a:	8a 5f       	subi	r24, 0xFA	; 250
     e4c:	81 83       	std	Z+1, r24	; 0x01
	frame->tx.confirm = NULL;
     e4e:	e9 57       	subi	r30, 0x79	; 121
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	11 82       	std	Z+1, r1	; 0x01
     e54:	10 82       	st	Z, r1

	frame->header.nwkDstAddr = src;
     e56:	f7 01       	movw	r30, r14
     e58:	b0 8a       	std	Z+16, r11	; 0x10
     e5a:	a7 86       	std	Z+15, r10	; 0x0f

	command = (NwkCommandRouteError_t *)frame->payload;
     e5c:	ef 57       	subi	r30, 0x7F	; 127
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	01 90       	ld	r0, Z+
     e62:	f0 81       	ld	r31, Z
     e64:	e0 2d       	mov	r30, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	80 83       	st	Z, r24
	command->srcAddr = src;
     e6a:	b2 82       	std	Z+2, r11	; 0x02
     e6c:	a1 82       	std	Z+1, r10	; 0x01
	command->dstAddr = dst;
     e6e:	d4 82       	std	Z+4, r13	; 0x04
	command->multicast = multicast;

	nwkTxFrame(frame);
     e70:	c3 82       	std	Z+3, r12	; 0x03
     e72:	15 83       	std	Z+5, r17	; 0x05
     e74:	c7 01       	movw	r24, r14
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
     e76:	b3 d4       	rcall	.+2406   	; 0x17de <nwkTxFrame>
     e78:	ce 01       	movw	r24, r28
     e7a:	39 de       	rcall	.-910    	; 0xaee <nwkFrameFree>
	}
}
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	bf 90       	pop	r11
     e8c:	af 90       	pop	r10
     e8e:	08 95       	ret

00000e90 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
     e90:	fc 01       	movw	r30, r24
     e92:	21 85       	ldd	r18, Z+9	; 0x09
     e94:	26 30       	cpi	r18, 0x06	; 6
     e96:	49 f4       	brne	.+18     	; 0xeaa <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     e98:	07 80       	ldd	r0, Z+7	; 0x07
     e9a:	f0 85       	ldd	r31, Z+8	; 0x08
     e9c:	e0 2d       	mov	r30, r0

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
     e9e:	65 81       	ldd	r22, Z+5	; 0x05
     ea0:	83 81       	ldd	r24, Z+3	; 0x03
     ea2:	94 81       	ldd	r25, Z+4	; 0x04
     ea4:	ef de       	rcall	.-546    	; 0xc84 <nwkRouteRemove>

	return true;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
     eaa:	80 e0       	ldi	r24, 0x00	; 0
	}

	nwkRouteRemove(command->dstAddr, command->multicast);

	return true;
}
     eac:	08 95       	ret

00000eae <nwkRxSeriveDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
	nwkRxAckControl = control;
     eae:	dc 01       	movw	r26, r24
     eb0:	19 96       	adiw	r26, 0x09	; 9
     eb2:	2c 91       	ld	r18, X
     eb4:	19 97       	sbiw	r26, 0x09	; 9
     eb6:	22 23       	and	r18, r18
     eb8:	71 f0       	breq	.+28     	; 0xed6 <nwkRxSeriveDataInd+0x28>
     eba:	17 96       	adiw	r26, 0x07	; 7
     ebc:	ed 91       	ld	r30, X+
     ebe:	fc 91       	ld	r31, X
     ec0:	18 97       	sbiw	r26, 0x08	; 8
     ec2:	20 81       	ld	r18, Z
     ec4:	22 23       	and	r18, r18
     ec6:	19 f0       	breq	.+6      	; 0xece <nwkRxSeriveDataInd+0x20>
     ec8:	21 30       	cpi	r18, 0x01	; 1
     eca:	19 f0       	breq	.+6      	; 0xed2 <nwkRxSeriveDataInd+0x24>
     ecc:	06 c0       	rjmp	.+12     	; 0xeda <nwkRxSeriveDataInd+0x2c>
     ece:	21 c5       	rjmp	.+2626   	; 0x1912 <nwkTxAckReceived>
     ed0:	08 95       	ret
     ed2:	de cf       	rjmp	.-68     	; 0xe90 <nwkRouteErrorReceived>
     ed4:	08 95       	ret
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	08 95       	ret
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	08 95       	ret

00000ede <nwkRxDuplicateRejectionTimerHandler>:
     ede:	bc 01       	movw	r22, r24
     ee0:	e5 e2       	ldi	r30, 0x25	; 37
     ee2:	f7 e0       	ldi	r31, 0x07	; 7
     ee4:	27 e5       	ldi	r18, 0x57	; 87
     ee6:	37 e0       	ldi	r19, 0x07	; 7
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	51 e0       	ldi	r21, 0x01	; 1
     eec:	90 81       	ld	r25, Z
     eee:	99 23       	and	r25, r25
     ef0:	19 f0       	breq	.+6      	; 0xef8 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     ef2:	91 50       	subi	r25, 0x01	; 1
     ef4:	90 83       	st	Z, r25
     ef6:	45 2f       	mov	r20, r21
     ef8:	35 96       	adiw	r30, 0x05	; 5
     efa:	e2 17       	cp	r30, r18
     efc:	f3 07       	cpc	r31, r19
     efe:	b1 f7       	brne	.-20     	; 0xeec <nwkRxDuplicateRejectionTimerHandler+0xe>
     f00:	44 23       	and	r20, r20
     f02:	11 f0       	breq	.+4      	; 0xf08 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     f04:	cb 01       	movw	r24, r22
     f06:	d6 c7       	rjmp	.+4012   	; 0x1eb4 <SYS_TimerStart>
     f08:	08 95       	ret

00000f0a <nwkRxInit>:
     f0a:	e5 e2       	ldi	r30, 0x25	; 37
     f0c:	f7 e0       	ldi	r31, 0x07	; 7
     f0e:	87 e5       	ldi	r24, 0x57	; 87
     f10:	97 e0       	ldi	r25, 0x07	; 7
     f12:	10 82       	st	Z, r1
     f14:	35 96       	adiw	r30, 0x05	; 5
     f16:	e8 17       	cp	r30, r24
     f18:	f9 07       	cpc	r31, r25
     f1a:	d9 f7       	brne	.-10     	; 0xf12 <nwkRxInit+0x8>
     f1c:	e3 e1       	ldi	r30, 0x13	; 19
     f1e:	f7 e0       	ldi	r31, 0x07	; 7
     f20:	84 e6       	ldi	r24, 0x64	; 100
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	a0 e0       	ldi	r26, 0x00	; 0
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	86 83       	std	Z+6, r24	; 0x06
     f2a:	97 83       	std	Z+7, r25	; 0x07
     f2c:	a0 87       	std	Z+8, r26	; 0x08
     f2e:	b1 87       	std	Z+9, r27	; 0x09
     f30:	12 86       	std	Z+10, r1	; 0x0a
     f32:	8f e6       	ldi	r24, 0x6F	; 111
     f34:	97 e0       	ldi	r25, 0x07	; 7
     f36:	94 87       	std	Z+12, r25	; 0x0c
     f38:	83 87       	std	Z+11, r24	; 0x0b
     f3a:	67 e5       	ldi	r22, 0x57	; 87
     f3c:	77 e0       	ldi	r23, 0x07	; 7
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	93 cc       	rjmp	.-1754   	; 0x868 <NWK_OpenEndpoint>
     f42:	08 95       	ret

00000f44 <PHY_DataInd>:
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	dc 01       	movw	r26, r24
     f4a:	ed 91       	ld	r30, X+
     f4c:	fc 91       	ld	r31, X
     f4e:	11 97       	sbiw	r26, 0x01	; 1
     f50:	21 81       	ldd	r18, Z+1	; 0x01
     f52:	28 38       	cpi	r18, 0x88	; 136
     f54:	f9 f4       	brne	.+62     	; 0xf94 <PHY_DataInd+0x50>
     f56:	20 81       	ld	r18, Z
     f58:	2f 7d       	andi	r18, 0xDF	; 223
     f5a:	21 34       	cpi	r18, 0x41	; 65
     f5c:	d9 f4       	brne	.+54     	; 0xf94 <PHY_DataInd+0x50>
     f5e:	12 96       	adiw	r26, 0x02	; 2
     f60:	2c 91       	ld	r18, X
     f62:	20 31       	cpi	r18, 0x10	; 16
     f64:	b8 f0       	brcs	.+46     	; 0xf94 <PHY_DataInd+0x50>
     f66:	ec 01       	movw	r28, r24
     f68:	8c dd       	rcall	.-1256   	; 0xa82 <nwkFrameAlloc>
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	99 f0       	breq	.+38     	; 0xf94 <PHY_DataInd+0x50>
     f6e:	20 e2       	ldi	r18, 0x20	; 32
     f70:	fc 01       	movw	r30, r24
     f72:	20 83       	st	Z, r18
     f74:	2a 81       	ldd	r18, Y+2	; 0x02
     f76:	21 83       	std	Z+1, r18	; 0x01
     f78:	2b 81       	ldd	r18, Y+3	; 0x03
     f7a:	ed 57       	subi	r30, 0x7D	; 125
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	20 83       	st	Z, r18
     f80:	2c 81       	ldd	r18, Y+4	; 0x04
     f82:	31 96       	adiw	r30, 0x01	; 1
     f84:	20 83       	st	Z, r18
     f86:	4a 81       	ldd	r20, Y+2	; 0x02
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	68 81       	ld	r22, Y
     f8c:	79 81       	ldd	r23, Y+1	; 0x01
     f8e:	02 96       	adiw	r24, 0x02	; 2
     f90:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <memcpy>
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
     f9a:	66 23       	and	r22, r22
     f9c:	21 f0       	breq	.+8      	; 0xfa6 <nwkRxDecryptConf+0xc>
		frame->state = NWK_RX_STATE_INDICATE;
     f9e:	22 e2       	ldi	r18, 0x22	; 34
     fa0:	fc 01       	movw	r30, r24
     fa2:	20 83       	st	Z, r18
     fa4:	08 95       	ret
	} else {
		frame->state = NWK_RX_STATE_FINISH;
     fa6:	24 e2       	ldi	r18, 0x24	; 36
     fa8:	fc 01       	movw	r30, r24
     faa:	20 83       	st	Z, r18
     fac:	08 95       	ret

00000fae <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     fae:	2f 92       	push	r2
     fb0:	3f 92       	push	r3
     fb2:	4f 92       	push	r4
     fb4:	5f 92       	push	r5
     fb6:	6f 92       	push	r6
     fb8:	7f 92       	push	r7
     fba:	8f 92       	push	r8
     fbc:	9f 92       	push	r9
     fbe:	af 92       	push	r10
     fc0:	bf 92       	push	r11
     fc2:	cf 92       	push	r12
     fc4:	df 92       	push	r13
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	2c 97       	sbiw	r28, 0x0c	; 12
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
	NwkFrame_t *frame = NULL;
     fe2:	00 e0       	ldi	r16, 0x00	; 0
     fe4:	10 e0       	ldi	r17, 0x00	; 0

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
     fe6:	0f 2e       	mov	r0, r31
     fe8:	f4 e2       	ldi	r31, 0x24	; 36
     fea:	bf 2e       	mov	r11, r31
     fec:	f0 2d       	mov	r31, r0

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
     fee:	0f 2e       	mov	r0, r31
     ff0:	f6 e0       	ldi	r31, 0x06	; 6
     ff2:	ef 2e       	mov	r14, r31
     ff4:	f1 e1       	ldi	r31, 0x11	; 17
     ff6:	ff 2e       	mov	r15, r31
     ff8:	f0 2d       	mov	r31, r0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
     ffa:	aa 24       	eor	r10, r10
     ffc:	a3 94       	inc	r10
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
     ffe:	68 94       	set
    1000:	66 24       	eor	r6, r6
    1002:	64 f8       	bld	r6, 4
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    1004:	68 94       	set
    1006:	55 24       	eor	r5, r5
    1008:	53 f8       	bld	r5, 3
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    100a:	68 94       	set
    100c:	44 24       	eor	r4, r4
    100e:	42 f8       	bld	r4, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1010:	21 2c       	mov	r2, r1
    1012:	31 2c       	mov	r3, r1
	}

	freeEntry->src = header->nwkSrcAddr;
	freeEntry->seq = header->nwkSeq;
	freeEntry->mask = 1;
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1014:	0f 2e       	mov	r0, r31
    1016:	ff e1       	ldi	r31, 0x1F	; 31
    1018:	7f 2e       	mov	r7, r31
    101a:	f0 2d       	mov	r31, r0
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    101c:	cc 24       	eor	r12, r12
    101e:	c3 94       	inc	r12
    1020:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1022:	ef c1       	rjmp	.+990    	; 0x1402 <nwkRxTaskHandler+0x454>
		switch (frame->state) {
    1024:	d8 01       	movw	r26, r16
    1026:	8c 91       	ld	r24, X
    1028:	82 32       	cpi	r24, 0x22	; 34
    102a:	09 f4       	brne	.+2      	; 0x102e <nwkRxTaskHandler+0x80>
    102c:	1a c1       	rjmp	.+564    	; 0x1262 <nwkRxTaskHandler+0x2b4>
    102e:	30 f4       	brcc	.+12     	; 0x103c <nwkRxTaskHandler+0x8e>
    1030:	80 32       	cpi	r24, 0x20	; 32
    1032:	59 f0       	breq	.+22     	; 0x104a <nwkRxTaskHandler+0x9c>
    1034:	81 32       	cpi	r24, 0x21	; 33
    1036:	09 f4       	brne	.+2      	; 0x103a <nwkRxTaskHandler+0x8c>
    1038:	10 c1       	rjmp	.+544    	; 0x125a <nwkRxTaskHandler+0x2ac>
    103a:	e3 c1       	rjmp	.+966    	; 0x1402 <nwkRxTaskHandler+0x454>
    103c:	83 32       	cpi	r24, 0x23	; 35
    103e:	09 f4       	brne	.+2      	; 0x1042 <nwkRxTaskHandler+0x94>
    1040:	db c1       	rjmp	.+950    	; 0x13f8 <nwkRxTaskHandler+0x44a>
    1042:	84 32       	cpi	r24, 0x24	; 36
    1044:	09 f4       	brne	.+2      	; 0x1048 <nwkRxTaskHandler+0x9a>
    1046:	db c1       	rjmp	.+950    	; 0x13fe <nwkRxTaskHandler+0x450>
    1048:	dc c1       	rjmp	.+952    	; 0x1402 <nwkRxTaskHandler+0x454>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    104a:	f8 01       	movw	r30, r16
    104c:	b0 82       	st	Z, r11
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    104e:	83 85       	ldd	r24, Z+11	; 0x0b
    1050:	83 fd       	sbrc	r24, 3
    1052:	d7 c1       	rjmp	.+942    	; 0x1402 <nwkRxTaskHandler+0x454>
		return;
	}
#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    1054:	25 81       	ldd	r18, Z+5	; 0x05
    1056:	36 81       	ldd	r19, Z+6	; 0x06
    1058:	2f 3f       	cpi	r18, 0xFF	; 255
    105a:	3f 4f       	sbci	r19, 0xFF	; 255
    105c:	c9 f4       	brne	.+50     	; 0x1090 <nwkRxTaskHandler+0xe2>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    105e:	d8 01       	movw	r26, r16
    1060:	1f 96       	adiw	r26, 0x0f	; 15
    1062:	2d 91       	ld	r18, X+
    1064:	3c 91       	ld	r19, X
    1066:	50 97       	sbiw	r26, 0x10	; 16
    1068:	f7 01       	movw	r30, r14
    106a:	40 81       	ld	r20, Z
    106c:	51 81       	ldd	r21, Z+1	; 0x01
    106e:	42 17       	cp	r20, r18
    1070:	53 07       	cpc	r21, r19
    1072:	21 f0       	breq	.+8      	; 0x107c <nwkRxTaskHandler+0xce>
    1074:	2f 3f       	cpi	r18, 0xFF	; 255
    1076:	3f 4f       	sbci	r19, 0xFF	; 255
    1078:	09 f0       	breq	.+2      	; 0x107c <nwkRxTaskHandler+0xce>
    107a:	c3 c1       	rjmp	.+902    	; 0x1402 <nwkRxTaskHandler+0x454>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    107c:	81 ff       	sbrs	r24, 1
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <nwkRxTaskHandler+0xda>
				frame->state = NWK_RX_STATE_DECRYPT;
    1080:	e1 e2       	ldi	r30, 0x21	; 33
    1082:	d8 01       	movw	r26, r16
    1084:	ec 93       	st	X, r30
    1086:	bd c1       	rjmp	.+890    	; 0x1402 <nwkRxTaskHandler+0x454>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    1088:	e2 e2       	ldi	r30, 0x22	; 34
    108a:	d8 01       	movw	r26, r16
    108c:	ec 93       	st	X, r30
    108e:	b9 c1       	rjmp	.+882    	; 0x1402 <nwkRxTaskHandler+0x454>
	if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi)) {
		return;
	}
#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    1090:	d8 01       	movw	r26, r16
    1092:	1f 96       	adiw	r26, 0x0f	; 15
    1094:	2d 91       	ld	r18, X+
    1096:	3c 91       	ld	r19, X
    1098:	50 97       	sbiw	r26, 0x10	; 16
    109a:	2f 3f       	cpi	r18, 0xFF	; 255
    109c:	3f 4f       	sbci	r19, 0xFF	; 255
    109e:	11 f4       	brne	.+4      	; 0x10a4 <nwkRxTaskHandler+0xf6>
    10a0:	80 fd       	sbrc	r24, 0
    10a2:	af c1       	rjmp	.+862    	; 0x1402 <nwkRxTaskHandler+0x454>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    10a4:	f7 01       	movw	r30, r14
    10a6:	20 81       	ld	r18, Z
    10a8:	31 81       	ldd	r19, Z+1	; 0x01
    10aa:	d8 01       	movw	r26, r16
    10ac:	1d 96       	adiw	r26, 0x0d	; 13
    10ae:	8d 91       	ld	r24, X+
    10b0:	9c 91       	ld	r25, X
    10b2:	1e 97       	sbiw	r26, 0x0e	; 14
    10b4:	28 17       	cp	r18, r24
    10b6:	39 07       	cpc	r19, r25
    10b8:	09 f4       	brne	.+2      	; 0x10bc <nwkRxTaskHandler+0x10e>
    10ba:	a3 c1       	rjmp	.+838    	; 0x1402 <nwkRxTaskHandler+0x454>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    10bc:	c8 01       	movw	r24, r16
    10be:	e7 dd       	rcall	.-1074   	; 0xc8e <nwkRouteFrameReceived>
    10c0:	e1 e2       	ldi	r30, 0x21	; 33
    10c2:	f7 e0       	ldi	r31, 0x07	; 7
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    10c8:	82 2c       	mov	r8, r2
    10ca:	93 2c       	mov	r9, r3

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    10cc:	9c 01       	movw	r18, r24

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    10ce:	44 81       	ldd	r20, Z+4	; 0x04
    10d0:	44 23       	and	r20, r20
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <nwkRxTaskHandler+0x128>
    10d4:	74 c0       	rjmp	.+232    	; 0x11be <nwkRxTaskHandler+0x210>
    10d6:	d8 01       	movw	r26, r16
    10d8:	1d 96       	adiw	r26, 0x0d	; 13
    10da:	6d 91       	ld	r22, X+
    10dc:	7c 91       	ld	r23, X
    10de:	1e 97       	sbiw	r26, 0x0e	; 14
    10e0:	40 81       	ld	r20, Z
    10e2:	51 81       	ldd	r21, Z+1	; 0x01
    10e4:	64 17       	cp	r22, r20
    10e6:	75 07       	cpc	r23, r21
    10e8:	09 f0       	breq	.+2      	; 0x10ec <nwkRxTaskHandler+0x13e>
    10ea:	6a c0       	rjmp	.+212    	; 0x11c0 <nwkRxTaskHandler+0x212>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    10ec:	1c 96       	adiw	r26, 0x0c	; 12
    10ee:	8c 91       	ld	r24, X
    10f0:	1c 97       	sbiw	r26, 0x0c	; 12
    10f2:	f9 01       	movw	r30, r18
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	ee 0f       	add	r30, r30
    10fa:	ff 1f       	adc	r31, r31
    10fc:	e2 0f       	add	r30, r18
    10fe:	f3 1f       	adc	r31, r19
    1100:	ef 5d       	subi	r30, 0xDF	; 223
    1102:	f8 4f       	sbci	r31, 0xF8	; 248
    1104:	92 81       	ldd	r25, Z+2	; 0x02
    1106:	98 1b       	sub	r25, r24

			if (diff < 8) {
    1108:	98 30       	cpi	r25, 0x08	; 8
    110a:	08 f0       	brcs	.+2      	; 0x110e <nwkRxTaskHandler+0x160>
    110c:	3e c0       	rjmp	.+124    	; 0x118a <nwkRxTaskHandler+0x1dc>
				if (entry->mask & (1 << diff)) {
    110e:	f9 01       	movw	r30, r18
    1110:	ee 0f       	add	r30, r30
    1112:	ff 1f       	adc	r31, r31
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	e2 0f       	add	r30, r18
    111a:	f3 1f       	adc	r31, r19
    111c:	ef 5d       	subi	r30, 0xDF	; 223
    111e:	f8 4f       	sbci	r31, 0xF8	; 248
    1120:	83 81       	ldd	r24, Z+3	; 0x03
    1122:	48 2f       	mov	r20, r24
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	09 2e       	mov	r0, r25
    1128:	02 c0       	rjmp	.+4      	; 0x112e <nwkRxTaskHandler+0x180>
    112a:	55 95       	asr	r21
    112c:	47 95       	ror	r20
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <nwkRxTaskHandler+0x17c>
    1132:	40 ff       	sbrs	r20, 0
    1134:	17 c0       	rjmp	.+46     	; 0x1164 <nwkRxTaskHandler+0x1b6>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    1136:	f7 01       	movw	r30, r14
    1138:	20 81       	ld	r18, Z
    113a:	31 81       	ldd	r19, Z+1	; 0x01
    113c:	17 96       	adiw	r26, 0x07	; 7
    113e:	8d 91       	ld	r24, X+
    1140:	9c 91       	ld	r25, X
    1142:	18 97       	sbiw	r26, 0x08	; 8
    1144:	28 17       	cp	r18, r24
    1146:	39 07       	cpc	r19, r25
    1148:	09 f0       	breq	.+2      	; 0x114c <nwkRxTaskHandler+0x19e>
    114a:	5b c1       	rjmp	.+694    	; 0x1402 <nwkRxTaskHandler+0x454>
						nwkRouteRemove(
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    114c:	1b 96       	adiw	r26, 0x0b	; 11
    114e:	6c 91       	ld	r22, X
    1150:	1b 97       	sbiw	r26, 0x0b	; 11
    1152:	63 fb       	bst	r22, 3
    1154:	66 27       	eor	r22, r22
    1156:	60 f9       	bld	r22, 0

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    1158:	1f 96       	adiw	r26, 0x0f	; 15
    115a:	8d 91       	ld	r24, X+
    115c:	9c 91       	ld	r25, X
    115e:	50 97       	sbiw	r26, 0x10	; 16
    1160:	91 dd       	rcall	.-1246   	; 0xc84 <nwkRouteRemove>
    1162:	4f c1       	rjmp	.+670    	; 0x1402 <nwkRxTaskHandler+0x454>
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    1164:	f9 01       	movw	r30, r18
    1166:	ee 0f       	add	r30, r30
    1168:	ff 1f       	adc	r31, r31
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	2e 0f       	add	r18, r30
    1170:	3f 1f       	adc	r19, r31
    1172:	f9 01       	movw	r30, r18
    1174:	ef 5d       	subi	r30, 0xDF	; 223
    1176:	f8 4f       	sbci	r31, 0xF8	; 248
    1178:	96 01       	movw	r18, r12
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <nwkRxTaskHandler+0x1d2>
    117c:	22 0f       	add	r18, r18
    117e:	33 1f       	adc	r19, r19
    1180:	9a 95       	dec	r25
    1182:	e2 f7       	brpl	.-8      	; 0x117c <nwkRxTaskHandler+0x1ce>
    1184:	82 2b       	or	r24, r18
    1186:	83 83       	std	Z+3, r24	; 0x03
    1188:	43 c1       	rjmp	.+646    	; 0x1410 <nwkRxTaskHandler+0x462>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    118a:	f9 01       	movw	r30, r18
    118c:	ee 0f       	add	r30, r30
    118e:	ff 1f       	adc	r31, r31
    1190:	ee 0f       	add	r30, r30
    1192:	ff 1f       	adc	r31, r31
    1194:	2e 0f       	add	r18, r30
    1196:	3f 1f       	adc	r19, r31
    1198:	f9 01       	movw	r30, r18
    119a:	ef 5d       	subi	r30, 0xDF	; 223
    119c:	f8 4f       	sbci	r31, 0xF8	; 248
    119e:	82 83       	std	Z+2, r24	; 0x02
				entry->mask = (entry->mask << shift) | 1;
    11a0:	83 81       	ldd	r24, Z+3	; 0x03
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	91 95       	neg	r25
    11a8:	a9 01       	movw	r20, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <nwkRxTaskHandler+0x202>
    11ac:	44 0f       	add	r20, r20
    11ae:	55 1f       	adc	r21, r21
    11b0:	9a 95       	dec	r25
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <nwkRxTaskHandler+0x1fe>
    11b4:	ca 01       	movw	r24, r20
    11b6:	81 60       	ori	r24, 0x01	; 1
    11b8:	83 83       	std	Z+3, r24	; 0x03
				entry->ttl = DUPLICATE_REJECTION_TTL;
    11ba:	74 82       	std	Z+4, r7	; 0x04
    11bc:	29 c1       	rjmp	.+594    	; 0x1410 <nwkRxTaskHandler+0x462>
				return false;
			}
		}

		if (0 == entry->ttl) {
			freeEntry = entry;
    11be:	4f 01       	movw	r8, r30
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    11c4:	8a 30       	cpi	r24, 0x0A	; 10
    11c6:	91 05       	cpc	r25, r1
    11c8:	09 f0       	breq	.+2      	; 0x11cc <nwkRxTaskHandler+0x21e>
    11ca:	80 cf       	rjmp	.-256    	; 0x10cc <nwkRxTaskHandler+0x11e>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    11cc:	81 14       	cp	r8, r1
    11ce:	91 04       	cpc	r9, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <nwkRxTaskHandler+0x226>
    11d2:	17 c1       	rjmp	.+558    	; 0x1402 <nwkRxTaskHandler+0x454>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    11d4:	d8 01       	movw	r26, r16
    11d6:	1d 96       	adiw	r26, 0x0d	; 13
    11d8:	8d 91       	ld	r24, X+
    11da:	9c 91       	ld	r25, X
    11dc:	1e 97       	sbiw	r26, 0x0e	; 14
    11de:	f4 01       	movw	r30, r8
    11e0:	91 83       	std	Z+1, r25	; 0x01
    11e2:	80 83       	st	Z, r24
	freeEntry->seq = header->nwkSeq;
    11e4:	1c 96       	adiw	r26, 0x0c	; 12
    11e6:	8c 91       	ld	r24, X
    11e8:	82 83       	std	Z+2, r24	; 0x02
	freeEntry->mask = 1;
    11ea:	a3 82       	std	Z+3, r10	; 0x03
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    11ec:	74 82       	std	Z+4, r7	; 0x04

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    11ee:	83 e1       	ldi	r24, 0x13	; 19
    11f0:	97 e0       	ldi	r25, 0x07	; 7
    11f2:	60 d6       	rcall	.+3264   	; 0x1eb4 <SYS_TimerStart>
    11f4:	0d c1       	rjmp	.+538    	; 0x1410 <nwkRxTaskHandler+0x462>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    11f6:	d7 01       	movw	r26, r14
    11f8:	2d 91       	ld	r18, X+
    11fa:	3c 91       	ld	r19, X
				header->nwkDstAddr &&
    11fc:	f8 01       	movw	r30, r16
    11fe:	87 85       	ldd	r24, Z+15	; 0x0f
    1200:	90 89       	ldd	r25, Z+16	; 0x10
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    1202:	28 17       	cp	r18, r24
    1204:	39 07       	cpc	r19, r25
    1206:	81 f0       	breq	.+32     	; 0x1228 <nwkRxTaskHandler+0x27a>
				header->nwkDstAddr &&
    1208:	43 85       	ldd	r20, Z+11	; 0x0b
    120a:	42 fd       	sbrc	r20, 2
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    120c:	0b c0       	rjmp	.+22     	; 0x1224 <nwkRxTaskHandler+0x276>
    120e:	c8 01       	movw	r24, r16
    1210:	3b d3       	rcall	.+1654   	; 0x1888 <nwkTxBroadcastFrame>
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    1212:	d7 01       	movw	r26, r14
    1214:	2d 91       	ld	r18, X+
    1216:	3c 91       	ld	r19, X
    1218:	f8 01       	movw	r30, r16
    121a:	87 85       	ldd	r24, Z+15	; 0x0f
    121c:	90 89       	ldd	r25, Z+16	; 0x10
    121e:	28 17       	cp	r18, r24
    1220:	39 07       	cpc	r19, r25
    1222:	11 f0       	breq	.+4      	; 0x1228 <nwkRxTaskHandler+0x27a>
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	69 f4       	brne	.+26     	; 0x1242 <nwkRxTaskHandler+0x294>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    1228:	d8 01       	movw	r26, r16
    122a:	1b 96       	adiw	r26, 0x0b	; 11
    122c:	8c 91       	ld	r24, X
    122e:	1b 97       	sbiw	r26, 0x0b	; 11
    1230:	81 ff       	sbrs	r24, 1
    1232:	03 c0       	rjmp	.+6      	; 0x123a <nwkRxTaskHandler+0x28c>
				frame->state = NWK_RX_STATE_DECRYPT;
    1234:	e1 e2       	ldi	r30, 0x21	; 33
    1236:	ec 93       	st	X, r30
    1238:	e4 c0       	rjmp	.+456    	; 0x1402 <nwkRxTaskHandler+0x454>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    123a:	e2 e2       	ldi	r30, 0x22	; 34
    123c:	d8 01       	movw	r26, r16
    123e:	ec 93       	st	X, r30
    1240:	e0 c0       	rjmp	.+448    	; 0x1402 <nwkRxTaskHandler+0x454>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    1242:	d8 01       	movw	r26, r16
    1244:	17 96       	adiw	r26, 0x07	; 7
    1246:	8d 91       	ld	r24, X+
    1248:	9c 91       	ld	r25, X
    124a:	18 97       	sbiw	r26, 0x08	; 8
    124c:	82 17       	cp	r24, r18
    124e:	93 07       	cpc	r25, r19
    1250:	09 f0       	breq	.+2      	; 0x1254 <nwkRxTaskHandler+0x2a6>
    1252:	d7 c0       	rjmp	.+430    	; 0x1402 <nwkRxTaskHandler+0x454>
			frame->state = NWK_RX_STATE_ROUTE;
    1254:	e3 e2       	ldi	r30, 0x23	; 35
    1256:	ec 93       	st	X, r30
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    1258:	d4 c0       	rjmp	.+424    	; 0x1402 <nwkRxTaskHandler+0x454>
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	c8 01       	movw	r24, r16
    125e:	ff d0       	rcall	.+510    	; 0x145e <nwkSecurityProcess>
		}
		break;
    1260:	d0 c0       	rjmp	.+416    	; 0x1402 <nwkRxTaskHandler+0x454>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    1262:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    1266:	d8 01       	movw	r26, r16
    1268:	51 96       	adiw	r26, 0x11	; 17
    126a:	8c 91       	ld	r24, X
    126c:	51 97       	sbiw	r26, 0x11	; 17
    126e:	82 95       	swap	r24
    1270:	8f 70       	andi	r24, 0x0F	; 15
    1272:	e8 2f       	mov	r30, r24
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	ee 0f       	add	r30, r30
    1278:	ff 1f       	adc	r31, r31
    127a:	e4 5f       	subi	r30, 0xF4	; 244
    127c:	fe 4e       	sbci	r31, 0xEE	; 238
    127e:	01 90       	ld	r0, Z+
    1280:	f0 81       	ld	r31, Z
    1282:	e0 2d       	mov	r30, r0
    1284:	30 97       	sbiw	r30, 0x00	; 0
    1286:	09 f4       	brne	.+2      	; 0x128a <nwkRxTaskHandler+0x2dc>
    1288:	60 c0       	rjmp	.+192    	; 0x134a <nwkRxTaskHandler+0x39c>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    128a:	1d 96       	adiw	r26, 0x0d	; 13
    128c:	2d 91       	ld	r18, X+
    128e:	3c 91       	ld	r19, X
    1290:	1e 97       	sbiw	r26, 0x0e	; 14
    1292:	3a 83       	std	Y+2, r19	; 0x02
    1294:	29 83       	std	Y+1, r18	; 0x01
	ind.dstAddr = header->nwkDstAddr;
    1296:	1f 96       	adiw	r26, 0x0f	; 15
    1298:	4d 91       	ld	r20, X+
    129a:	5c 91       	ld	r21, X
    129c:	50 97       	sbiw	r26, 0x10	; 16
    129e:	5c 83       	std	Y+4, r21	; 0x04
    12a0:	4b 83       	std	Y+3, r20	; 0x03
	ind.srcEndpoint = header->nwkSrcEndpoint;
    12a2:	51 96       	adiw	r26, 0x11	; 17
    12a4:	9c 91       	ld	r25, X
    12a6:	51 97       	sbiw	r26, 0x11	; 17
    12a8:	9f 70       	andi	r25, 0x0F	; 15
    12aa:	9d 83       	std	Y+5, r25	; 0x05
	ind.dstEndpoint = header->nwkDstEndpoint;
    12ac:	8e 83       	std	Y+6, r24	; 0x06
	ind.data = frame->payload;
    12ae:	af 57       	subi	r26, 0x7F	; 127
    12b0:	bf 4f       	sbci	r27, 0xFF	; 255
    12b2:	8d 91       	ld	r24, X+
    12b4:	9c 91       	ld	r25, X
    12b6:	99 87       	std	Y+9, r25	; 0x09
    12b8:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    12ba:	b8 01       	movw	r22, r16
    12bc:	6e 5f       	subi	r22, 0xFE	; 254
    12be:	7f 4f       	sbci	r23, 0xFF	; 255
	ind.size = nwkFramePayloadSize(frame);
    12c0:	86 1b       	sub	r24, r22
    12c2:	97 0b       	sbc	r25, r23
    12c4:	d8 01       	movw	r26, r16
    12c6:	11 96       	adiw	r26, 0x01	; 1
    12c8:	9c 91       	ld	r25, X
    12ca:	11 97       	sbiw	r26, 0x01	; 1
    12cc:	98 1b       	sub	r25, r24
    12ce:	9a 87       	std	Y+10, r25	; 0x0a
	ind.lqi = frame->rx.lqi;
    12d0:	ad 57       	subi	r26, 0x7D	; 125
    12d2:	bf 4f       	sbci	r27, 0xFF	; 255
    12d4:	8c 91       	ld	r24, X
    12d6:	8b 87       	std	Y+11, r24	; 0x0b
	ind.rssi = frame->rx.rssi;
    12d8:	11 96       	adiw	r26, 0x01	; 1
    12da:	8c 91       	ld	r24, X
    12dc:	8c 87       	std	Y+12, r24	; 0x0c

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    12de:	d8 01       	movw	r26, r16
    12e0:	1b 96       	adiw	r26, 0x0b	; 11
    12e2:	9c 91       	ld	r25, X
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    12e4:	69 2f       	mov	r22, r25
    12e6:	63 70       	andi	r22, 0x03	; 3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    12e8:	92 fd       	sbrc	r25, 2
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <nwkRxTaskHandler+0x342>
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <nwkRxTaskHandler+0x344>
    12f0:	80 e2       	ldi	r24, 0x20	; 32
    12f2:	86 2b       	or	r24, r22
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    12f4:	93 fd       	sbrc	r25, 3
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <nwkRxTaskHandler+0x34e>
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <nwkRxTaskHandler+0x350>
    12fc:	90 e4       	ldi	r25, 0x40	; 64
    12fe:	89 2b       	or	r24, r25
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    1300:	4f 3f       	cpi	r20, 0xFF	; 255
    1302:	5f 4f       	sbci	r21, 0xFF	; 255
    1304:	11 f0       	breq	.+4      	; 0x130a <nwkRxTaskHandler+0x35c>
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	01 c0       	rjmp	.+2      	; 0x130c <nwkRxTaskHandler+0x35e>
    130a:	94 2d       	mov	r25, r4
    130c:	89 2b       	or	r24, r25
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    130e:	d8 01       	movw	r26, r16
    1310:	19 96       	adiw	r26, 0x09	; 9
    1312:	4d 91       	ld	r20, X+
    1314:	5c 91       	ld	r21, X
    1316:	1a 97       	sbiw	r26, 0x0a	; 10
    1318:	24 17       	cp	r18, r20
    131a:	35 07       	cpc	r19, r21
    131c:	11 f0       	breq	.+4      	; 0x1322 <nwkRxTaskHandler+0x374>
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <nwkRxTaskHandler+0x376>
    1322:	95 2d       	mov	r25, r5
    1324:	89 2b       	or	r24, r25
    1326:	8f 83       	std	Y+7, r24	; 0x07
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    1328:	d8 01       	movw	r26, r16
    132a:	15 96       	adiw	r26, 0x05	; 5
    132c:	2d 91       	ld	r18, X+
    132e:	3c 91       	ld	r19, X
    1330:	16 97       	sbiw	r26, 0x06	; 6
    1332:	2f 3f       	cpi	r18, 0xFF	; 255
    1334:	3f 4f       	sbci	r19, 0xFF	; 255
    1336:	11 f0       	breq	.+4      	; 0x133c <nwkRxTaskHandler+0x38e>
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	01 c0       	rjmp	.+2      	; 0x133e <nwkRxTaskHandler+0x390>
    133c:	96 2d       	mov	r25, r6
    133e:	89 2b       	or	r24, r25
    1340:	8f 83       	std	Y+7, r24	; 0x07
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1342:	ce 01       	movw	r24, r28
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	19 95       	eicall
    1348:	01 c0       	rjmp	.+2      	; 0x134c <nwkRxTaskHandler+0x39e>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    134a:	80 e0       	ldi	r24, 0x00	; 0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    134c:	f8 01       	movw	r30, r16
    134e:	93 85       	ldd	r25, Z+11	; 0x0b
    1350:	90 ff       	sbrs	r25, 0
		ack = false;
    1352:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    1354:	d8 01       	movw	r26, r16
    1356:	17 96       	adiw	r26, 0x07	; 7
    1358:	2d 91       	ld	r18, X+
    135a:	3c 91       	ld	r19, X
    135c:	18 97       	sbiw	r26, 0x08	; 8
    135e:	2f 3f       	cpi	r18, 0xFF	; 255
    1360:	3f 4f       	sbci	r19, 0xFF	; 255
    1362:	69 f4       	brne	.+26     	; 0x137e <nwkRxTaskHandler+0x3d0>
    1364:	f7 01       	movw	r30, r14
    1366:	40 81       	ld	r20, Z
    1368:	51 81       	ldd	r21, Z+1	; 0x01
    136a:	d8 01       	movw	r26, r16
    136c:	1f 96       	adiw	r26, 0x0f	; 15
    136e:	2d 91       	ld	r18, X+
    1370:	3c 91       	ld	r19, X
    1372:	50 97       	sbiw	r26, 0x10	; 16
    1374:	42 17       	cp	r20, r18
    1376:	53 07       	cpc	r21, r19
    1378:	11 f4       	brne	.+4      	; 0x137e <nwkRxTaskHandler+0x3d0>
			nwkIb.addr == frame->header.nwkDstAddr &&
    137a:	93 ff       	sbrs	r25, 3
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    137c:	8a 2d       	mov	r24, r10
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    137e:	f8 01       	movw	r30, r16
    1380:	25 81       	ldd	r18, Z+5	; 0x05
    1382:	36 81       	ldd	r19, Z+6	; 0x06
    1384:	2f 3f       	cpi	r18, 0xFF	; 255
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	a1 f1       	breq	.+104    	; 0x13f2 <nwkRxTaskHandler+0x444>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    138a:	d7 01       	movw	r26, r14
    138c:	2d 91       	ld	r18, X+
    138e:	3c 91       	ld	r19, X
    1390:	2f 3f       	cpi	r18, 0xFF	; 255
    1392:	3f 4f       	sbci	r19, 0xFF	; 255
		ack = false;
	}

	if (ack) {
    1394:	71 f1       	breq	.+92     	; 0x13f2 <nwkRxTaskHandler+0x444>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    1396:	88 23       	and	r24, r24
    1398:	61 f1       	breq	.+88     	; 0x13f2 <nwkRxTaskHandler+0x444>
    139a:	73 db       	rcall	.-2330   	; 0xa82 <nwkFrameAlloc>
    139c:	4c 01       	movw	r8, r24
    139e:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}

	nwkFrameCommandInit(ack);
    13a0:	41 f1       	breq	.+80     	; 0x13f2 <nwkRxTaskHandler+0x444>
    13a2:	d4 db       	rcall	.-2136   	; 0xb4c <nwkFrameCommandInit>

	ack->size += sizeof(NwkCommandAck_t);
    13a4:	f4 01       	movw	r30, r8
    13a6:	81 81       	ldd	r24, Z+1	; 0x01
    13a8:	8d 5f       	subi	r24, 0xFD	; 253
    13aa:	81 83       	std	Z+1, r24	; 0x01
	ack->tx.confirm = NULL;
    13ac:	e9 57       	subi	r30, 0x79	; 121
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	11 82       	std	Z+1, r1	; 0x01
    13b2:	10 82       	st	Z, r1

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    13b4:	d8 01       	movw	r26, r16
    13b6:	1b 96       	adiw	r26, 0x0b	; 11
    13b8:	8c 91       	ld	r24, X
    13ba:	1b 97       	sbiw	r26, 0x0b	; 11
    13bc:	86 95       	lsr	r24
    13be:	81 70       	andi	r24, 0x01	; 1
    13c0:	f4 01       	movw	r30, r8
    13c2:	93 85       	ldd	r25, Z+11	; 0x0b
    13c4:	80 fb       	bst	r24, 0
    13c6:	91 f9       	bld	r25, 1
    13c8:	93 87       	std	Z+11, r25	; 0x0b
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    13ca:	1d 96       	adiw	r26, 0x0d	; 13
    13cc:	8d 91       	ld	r24, X+
    13ce:	9c 91       	ld	r25, X
    13d0:	1e 97       	sbiw	r26, 0x0e	; 14
    13d2:	90 8b       	std	Z+16, r25	; 0x10
    13d4:	87 87       	std	Z+15, r24	; 0x0f

	command = (NwkCommandAck_t *)ack->payload;
    13d6:	ef 57       	subi	r30, 0x7F	; 127
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	01 90       	ld	r0, Z+
    13dc:	f0 81       	ld	r31, Z
    13de:	e0 2d       	mov	r30, r0
	command->id = NWK_COMMAND_ACK;
    13e0:	10 82       	st	Z, r1
	command->control = nwkRxAckControl;
    13e2:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <nwkRxAckControl>
	command->seq = frame->header.nwkSeq;
    13e6:	82 83       	std	Z+2, r24	; 0x02
    13e8:	1c 96       	adiw	r26, 0x0c	; 12

	nwkTxFrame(ack);
    13ea:	8c 91       	ld	r24, X
    13ec:	81 83       	std	Z+1, r24	; 0x01

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    13ee:	c4 01       	movw	r24, r8
    13f0:	f6 d1       	rcall	.+1004   	; 0x17de <nwkTxFrame>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    13f2:	d8 01       	movw	r26, r16
    13f4:	bc 92       	st	X, r11
    13f6:	05 c0       	rjmp	.+10     	; 0x1402 <nwkRxTaskHandler+0x454>
		}
		break;
    13f8:	c8 01       	movw	r24, r16
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    13fa:	fe dc       	rcall	.-1540   	; 0xdf8 <nwkRouteFrame>
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <nwkRxTaskHandler+0x454>
    13fe:	c8 01       	movw	r24, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1400:	76 db       	rcall	.-2324   	; 0xaee <nwkFrameFree>
    1402:	c8 01       	movw	r24, r16
    1404:	7e db       	rcall	.-2308   	; 0xb02 <nwkFrameNext>
    1406:	8c 01       	movw	r16, r24
    1408:	89 2b       	or	r24, r25
    140a:	09 f0       	breq	.+2      	; 0x140e <nwkRxTaskHandler+0x460>
    140c:	0b ce       	rjmp	.-1002   	; 0x1024 <nwkRxTaskHandler+0x76>
    140e:	07 c0       	rjmp	.+14     	; 0x141e <nwkRxTaskHandler+0x470>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    1410:	f8 01       	movw	r30, r16
    1412:	87 81       	ldd	r24, Z+7	; 0x07
    1414:	90 85       	ldd	r25, Z+8	; 0x08
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	09 f0       	breq	.+2      	; 0x141c <nwkRxTaskHandler+0x46e>
    141a:	fb ce       	rjmp	.-522    	; 0x1212 <nwkRxTaskHandler+0x264>
    141c:	ec ce       	rjmp	.-552    	; 0x11f6 <nwkRxTaskHandler+0x248>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    141e:	2c 96       	adiw	r28, 0x0c	; 12
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	ff 90       	pop	r15
    1434:	ef 90       	pop	r14
    1436:	df 90       	pop	r13
    1438:	cf 90       	pop	r12
    143a:	bf 90       	pop	r11
    143c:	af 90       	pop	r10
    143e:	9f 90       	pop	r9
    1440:	8f 90       	pop	r8
    1442:	7f 90       	pop	r7
    1444:	6f 90       	pop	r6
    1446:	5f 90       	pop	r5
    1448:	4f 90       	pop	r4
    144a:	3f 90       	pop	r3
    144c:	2f 90       	pop	r2
    144e:	08 95       	ret

00001450 <nwkSecurityInit>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    1450:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <nwkSecurityActiveFrames>
    1454:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <nwkSecurityActiveFrame+0x1>
    1458:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <nwkSecurityActiveFrame>
    145c:	08 95       	ret

0000145e <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    145e:	66 23       	and	r22, r22
    1460:	21 f0       	breq	.+8      	; 0x146a <nwkSecurityProcess+0xc>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    1462:	20 e3       	ldi	r18, 0x30	; 48
    1464:	fc 01       	movw	r30, r24
    1466:	20 83       	st	Z, r18
    1468:	03 c0       	rjmp	.+6      	; 0x1470 <nwkSecurityProcess+0x12>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    146a:	21 e3       	ldi	r18, 0x31	; 49
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18
	}

	++nwkSecurityActiveFrames;
    1470:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <nwkSecurityActiveFrames>
    1474:	8f 5f       	subi	r24, 0xFF	; 255
    1476:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <nwkSecurityActiveFrames>
    147a:	08 95       	ret

0000147c <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    1480:	c0 91 66 07 	lds	r28, 0x0766	; 0x800766 <nwkSecurityActiveFrame>
    1484:	d0 91 67 07 	lds	r29, 0x0767	; 0x800767 <nwkSecurityActiveFrame+0x1>
    1488:	fe 01       	movw	r30, r28
    148a:	ef 57       	subi	r30, 0x7F	; 127
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	a0 81       	ld	r26, Z
    1490:	b1 81       	ldd	r27, Z+1	; 0x01
    1492:	70 91 64 07 	lds	r23, 0x0764	; 0x800764 <nwkSecurityOffset>
    1496:	87 2f       	mov	r24, r23
    1498:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t block;

	block
		= (nwkSecuritySize <
    149a:	50 91 65 07 	lds	r21, 0x0765	; 0x800765 <nwkSecuritySize>
    149e:	65 2f       	mov	r22, r21
    14a0:	51 31       	cpi	r21, 0x11	; 17
    14a2:	08 f0       	brcs	.+2      	; 0x14a6 <SYS_EncryptConf+0x2a>
    14a4:	60 e1       	ldi	r22, 0x10	; 16
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    14a6:	66 23       	and	r22, r22
    14a8:	d1 f0       	breq	.+52     	; 0x14de <SYS_EncryptConf+0x62>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    14aa:	40 91 63 07 	lds	r20, 0x0763	; 0x800763 <nwkSecurityEncrypt>
    14ae:	e3 e5       	ldi	r30, 0x53	; 83
    14b0:	f7 e0       	ldi	r31, 0x07	; 7
    14b2:	a8 0f       	add	r26, r24
    14b4:	b9 1f       	adc	r27, r25
    14b6:	2f ef       	ldi	r18, 0xFF	; 255
    14b8:	26 0f       	add	r18, r22
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	2c 5a       	subi	r18, 0xAC	; 172
    14be:	38 4f       	sbci	r19, 0xF8	; 248
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    14c0:	9c 91       	ld	r25, X
    14c2:	80 81       	ld	r24, Z
    14c4:	89 27       	eor	r24, r25
    14c6:	8d 93       	st	X+, r24

		if (nwkSecurityEncrypt) {
    14c8:	44 23       	and	r20, r20
    14ca:	11 f0       	breq	.+4      	; 0x14d0 <SYS_EncryptConf+0x54>
			vector[i] = text[i];
    14cc:	80 83       	st	Z, r24
    14ce:	03 c0       	rjmp	.+6      	; 0x14d6 <SYS_EncryptConf+0x5a>
		} else {
			vector[i] ^= text[i];
    14d0:	90 81       	ld	r25, Z
    14d2:	89 27       	eor	r24, r25
    14d4:	80 83       	st	Z, r24
    14d6:	31 96       	adiw	r30, 0x01	; 1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    14d8:	e2 17       	cp	r30, r18
    14da:	f3 07       	cpc	r31, r19
    14dc:	89 f7       	brne	.-30     	; 0x14c0 <SYS_EncryptConf+0x44>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    14de:	76 0f       	add	r23, r22
    14e0:	70 93 64 07 	sts	0x0764, r23	; 0x800764 <nwkSecurityOffset>
	nwkSecuritySize -= block;
    14e4:	56 1b       	sub	r21, r22
    14e6:	50 93 65 07 	sts	0x0765, r21	; 0x800765 <nwkSecuritySize>

	if (nwkSecuritySize > 0) {
    14ea:	55 23       	and	r21, r21
    14ec:	19 f0       	breq	.+6      	; 0x14f4 <SYS_EncryptConf+0x78>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    14ee:	82 e3       	ldi	r24, 0x32	; 50
    14f0:	88 83       	st	Y, r24
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <SYS_EncryptConf+0x7c>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    14f4:	84 e3       	ldi	r24, 0x34	; 52
    14f6:	88 83       	st	Y, r24
	}
}
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    1506:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <nwkSecurityActiveFrames>
    150a:	88 23       	and	r24, r24
    150c:	09 f4       	brne	.+2      	; 0x1510 <nwkSecurityTaskHandler+0x12>
    150e:	e1 c0       	rjmp	.+450    	; 0x16d2 <nwkSecurityTaskHandler+0x1d4>
		return;
	}

	if (nwkSecurityActiveFrame) {
    1510:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <nwkSecurityActiveFrame>
    1514:	f0 91 67 07 	lds	r31, 0x0767	; 0x800767 <nwkSecurityActiveFrame+0x1>
    1518:	30 97       	sbiw	r30, 0x00	; 0
    151a:	09 f4       	brne	.+2      	; 0x151e <nwkSecurityTaskHandler+0x20>
    151c:	d4 c0       	rjmp	.+424    	; 0x16c6 <nwkSecurityTaskHandler+0x1c8>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    151e:	80 81       	ld	r24, Z
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    1520:	84 33       	cpi	r24, 0x34	; 52
    1522:	09 f0       	breq	.+2      	; 0x1526 <nwkSecurityTaskHandler+0x28>
    1524:	55 c0       	rjmp	.+170    	; 0x15d0 <nwkSecurityTaskHandler+0xd2>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    1526:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <nwkSecurityOffset>
    152a:	df 01       	movw	r26, r30
    152c:	af 57       	subi	r26, 0x7F	; 127
    152e:	bf 4f       	sbci	r27, 0xFF	; 255
    1530:	cd 91       	ld	r28, X+
    1532:	dc 91       	ld	r29, X
    1534:	c8 0f       	add	r28, r24
    1536:	d1 1d       	adc	r29, r1
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    1538:	a3 e5       	ldi	r26, 0x53	; 83
    153a:	b7 e0       	ldi	r27, 0x07	; 7
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    153c:	0d 91       	ld	r16, X+
    153e:	1d 91       	ld	r17, X+
    1540:	2d 91       	ld	r18, X+
    1542:	3c 91       	ld	r19, X
    1544:	13 97       	sbiw	r26, 0x03	; 3
    1546:	14 96       	adiw	r26, 0x04	; 4
    1548:	4d 91       	ld	r20, X+
    154a:	5d 91       	ld	r21, X+
    154c:	6d 91       	ld	r22, X+
    154e:	7c 91       	ld	r23, X
    1550:	17 97       	sbiw	r26, 0x07	; 7
    1552:	04 27       	eor	r16, r20
    1554:	15 27       	eor	r17, r21
    1556:	26 27       	eor	r18, r22
    1558:	37 27       	eor	r19, r23
    155a:	18 96       	adiw	r26, 0x08	; 8
    155c:	4d 91       	ld	r20, X+
    155e:	5d 91       	ld	r21, X+
    1560:	6d 91       	ld	r22, X+
    1562:	7c 91       	ld	r23, X
    1564:	1b 97       	sbiw	r26, 0x0b	; 11
    1566:	04 27       	eor	r16, r20
    1568:	15 27       	eor	r17, r21
    156a:	26 27       	eor	r18, r22
    156c:	37 27       	eor	r19, r23
    156e:	1c 96       	adiw	r26, 0x0c	; 12
    1570:	4d 91       	ld	r20, X+
    1572:	5d 91       	ld	r21, X+
    1574:	6d 91       	ld	r22, X+
    1576:	7c 91       	ld	r23, X
    1578:	1f 97       	sbiw	r26, 0x0f	; 15
    157a:	d9 01       	movw	r26, r18
    157c:	c8 01       	movw	r24, r16
    157e:	84 27       	eor	r24, r20
    1580:	95 27       	eor	r25, r21
    1582:	a6 27       	eor	r26, r22
    1584:	b7 27       	eor	r27, r23
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    1586:	20 91 63 07 	lds	r18, 0x0763	; 0x800763 <nwkSecurityEncrypt>
    158a:	22 23       	and	r18, r18
    158c:	51 f0       	breq	.+20     	; 0x15a2 <nwkSecurityTaskHandler+0xa4>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    158e:	88 83       	st	Y, r24
    1590:	99 83       	std	Y+1, r25	; 0x01
    1592:	aa 83       	std	Y+2, r26	; 0x02
    1594:	bb 83       	std	Y+3, r27	; 0x03
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    1596:	81 81       	ldd	r24, Z+1	; 0x01
    1598:	8c 5f       	subi	r24, 0xFC	; 252
    159a:	81 83       	std	Z+1, r24	; 0x01
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    159c:	cf 01       	movw	r24, r30
    159e:	de d1       	rcall	.+956    	; 0x195c <nwkTxEncryptConf>
    15a0:	0d c0       	rjmp	.+26     	; 0x15bc <nwkSecurityTaskHandler+0xbe>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    15a2:	61 e0       	ldi	r22, 0x01	; 1
    15a4:	08 81       	ld	r16, Y
    15a6:	19 81       	ldd	r17, Y+1	; 0x01
    15a8:	2a 81       	ldd	r18, Y+2	; 0x02
    15aa:	3b 81       	ldd	r19, Y+3	; 0x03
    15ac:	08 17       	cp	r16, r24
    15ae:	19 07       	cpc	r17, r25
    15b0:	2a 07       	cpc	r18, r26
    15b2:	3b 07       	cpc	r19, r27
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <nwkSecurityTaskHandler+0xba>
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	cf 01       	movw	r24, r30
    15ba:	ef dc       	rcall	.-1570   	; 0xf9a <nwkRxDecryptConf>
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    15bc:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <nwkSecurityActiveFrame+0x1>
    15c0:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <nwkSecurityActiveFrame>
			--nwkSecurityActiveFrames;
    15c4:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <nwkSecurityActiveFrames>
    15c8:	81 50       	subi	r24, 0x01	; 1
    15ca:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <nwkSecurityActiveFrames>
    15ce:	81 c0       	rjmp	.+258    	; 0x16d2 <nwkSecurityTaskHandler+0x1d4>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    15d0:	82 33       	cpi	r24, 0x32	; 50
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <nwkSecurityTaskHandler+0xd8>
    15d4:	7e c0       	rjmp	.+252    	; 0x16d2 <nwkSecurityTaskHandler+0x1d4>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    15d6:	83 e3       	ldi	r24, 0x33	; 51
    15d8:	80 83       	st	Z, r24
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    15da:	6c e2       	ldi	r22, 0x2C	; 44
    15dc:	71 e1       	ldi	r23, 0x11	; 17
    15de:	83 e5       	ldi	r24, 0x53	; 83
    15e0:	97 e0       	ldi	r25, 0x07	; 7
    15e2:	cc d3       	rcall	.+1944   	; 0x1d7c <SYS_EncryptReq>
    15e4:	76 c0       	rjmp	.+236    	; 0x16d2 <nwkSecurityTaskHandler+0x1d4>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    15e6:	dc 01       	movw	r26, r24
    15e8:	2c 91       	ld	r18, X
    15ea:	20 53       	subi	r18, 0x30	; 48
    15ec:	22 30       	cpi	r18, 0x02	; 2
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <nwkSecurityTaskHandler+0xf4>
    15f0:	6c c0       	rjmp	.+216    	; 0x16ca <nwkSecurityTaskHandler+0x1cc>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    15f2:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <nwkSecurityActiveFrame+0x1>
    15f6:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <nwkSecurityActiveFrame>
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    15fa:	e3 e5       	ldi	r30, 0x53	; 83
    15fc:	f7 e0       	ldi	r31, 0x07	; 7
    15fe:	1c 96       	adiw	r26, 0x0c	; 12
    1600:	4c 91       	ld	r20, X
    1602:	1c 97       	sbiw	r26, 0x0c	; 12
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	40 83       	st	Z, r20
    160c:	51 83       	std	Z+1, r21	; 0x01
    160e:	62 83       	std	Z+2, r22	; 0x02
    1610:	73 83       	std	Z+3, r23	; 0x03
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    1612:	1f 96       	adiw	r26, 0x0f	; 15
    1614:	4d 91       	ld	r20, X+
    1616:	5c 91       	ld	r21, X
    1618:	50 97       	sbiw	r26, 0x10	; 16
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	ba 01       	movw	r22, r20
    1620:	55 27       	eor	r21, r21
    1622:	44 27       	eor	r20, r20
			16) | header->nwkDstEndpoint;
    1624:	51 96       	adiw	r26, 0x11	; 17
    1626:	2c 91       	ld	r18, X
    1628:	51 97       	sbiw	r26, 0x11	; 17
    162a:	22 95       	swap	r18
    162c:	2f 70       	andi	r18, 0x0F	; 15
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    162e:	42 2b       	or	r20, r18
    1630:	44 83       	std	Z+4, r20	; 0x04
    1632:	55 83       	std	Z+5, r21	; 0x05
    1634:	66 83       	std	Z+6, r22	; 0x06
    1636:	77 83       	std	Z+7, r23	; 0x07
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    1638:	1d 96       	adiw	r26, 0x0d	; 13
    163a:	4d 91       	ld	r20, X+
    163c:	5c 91       	ld	r21, X
    163e:	1e 97       	sbiw	r26, 0x0e	; 14
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	ba 01       	movw	r22, r20
    1646:	55 27       	eor	r21, r21
    1648:	44 27       	eor	r20, r20
			16) | header->nwkSrcEndpoint;
    164a:	51 96       	adiw	r26, 0x11	; 17
    164c:	2c 91       	ld	r18, X
    164e:	51 97       	sbiw	r26, 0x11	; 17
    1650:	2f 70       	andi	r18, 0x0F	; 15
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    1652:	42 2b       	or	r20, r18
    1654:	40 87       	std	Z+8, r20	; 0x08
    1656:	51 87       	std	Z+9, r21	; 0x09
    1658:	62 87       	std	Z+10, r22	; 0x0a
    165a:	73 87       	std	Z+11, r23	; 0x0b
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    165c:	15 96       	adiw	r26, 0x05	; 5
    165e:	4d 91       	ld	r20, X+
    1660:	5c 91       	ld	r21, X
    1662:	16 97       	sbiw	r26, 0x06	; 6
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	ba 01       	movw	r22, r20
    166a:	55 27       	eor	r21, r21
    166c:	44 27       	eor	r20, r20
    166e:	1b 96       	adiw	r26, 0x0b	; 11
    1670:	2c 91       	ld	r18, X
    1672:	1b 97       	sbiw	r26, 0x0b	; 11
    1674:	42 2b       	or	r20, r18
    1676:	44 87       	std	Z+12, r20	; 0x0c
    1678:	55 87       	std	Z+13, r21	; 0x0d
    167a:	66 87       	std	Z+14, r22	; 0x0e
    167c:	77 87       	std	Z+15, r23	; 0x0f
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
			nwkSecurityActiveFrame->state) {
    167e:	6c 91       	ld	r22, X
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    1680:	61 33       	cpi	r22, 0x31	; 49
    1682:	31 f4       	brne	.+12     	; 0x1690 <nwkSecurityTaskHandler+0x192>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    1684:	11 96       	adiw	r26, 0x01	; 1
    1686:	2c 91       	ld	r18, X
    1688:	11 97       	sbiw	r26, 0x01	; 1
    168a:	24 50       	subi	r18, 0x04	; 4
    168c:	11 96       	adiw	r26, 0x01	; 1
    168e:	2c 93       	st	X, r18
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    1690:	fc 01       	movw	r30, r24
    1692:	ef 57       	subi	r30, 0x7F	; 127
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	40 81       	ld	r20, Z
    1698:	51 81       	ldd	r21, Z+1	; 0x01
    169a:	9c 01       	movw	r18, r24
    169c:	2e 5f       	subi	r18, 0xFE	; 254
    169e:	3f 4f       	sbci	r19, 0xFF	; 255
    16a0:	42 1b       	sub	r20, r18
    16a2:	53 0b       	sbc	r21, r19
    16a4:	fc 01       	movw	r30, r24
    16a6:	21 81       	ldd	r18, Z+1	; 0x01
    16a8:	24 1b       	sub	r18, r20
    16aa:	20 93 65 07 	sts	0x0765, r18	; 0x800765 <nwkSecuritySize>
	nwkSecurityOffset = 0;
    16ae:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <nwkSecurityOffset>
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    16b2:	21 e0       	ldi	r18, 0x01	; 1
    16b4:	60 33       	cpi	r22, 0x30	; 48
    16b6:	09 f0       	breq	.+2      	; 0x16ba <nwkSecurityTaskHandler+0x1bc>
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	20 93 63 07 	sts	0x0763, r18	; 0x800763 <nwkSecurityEncrypt>
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    16be:	22 e3       	ldi	r18, 0x32	; 50
    16c0:	dc 01       	movw	r26, r24
    16c2:	2c 93       	st	X, r18
    16c4:	06 c0       	rjmp	.+12     	; 0x16d2 <nwkSecurityTaskHandler+0x1d4>
    16c6:	80 e0       	ldi	r24, 0x00	; 0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	1b da       	rcall	.-3018   	; 0xb02 <nwkFrameNext>
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <nwkSecurityTaskHandler+0x1d4>
    16d0:	8a cf       	rjmp	.-236    	; 0x15e6 <nwkSecurityTaskHandler+0xe8>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	08 95       	ret

000016dc <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
	frame->tx.status = status;
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	7c 01       	movw	r14, r24
    16e8:	10 e0       	ldi	r17, 0x00	; 0
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	01 e0       	ldi	r16, 0x01	; 1
    16f0:	c3 e1       	ldi	r28, 0x13	; 19
    16f2:	13 c0       	rjmp	.+38     	; 0x171a <nwkTxDelayTimerHandler+0x3e>
    16f4:	fc 01       	movw	r30, r24
    16f6:	20 81       	ld	r18, Z
    16f8:	21 31       	cpi	r18, 0x11	; 17
    16fa:	79 f4       	brne	.+30     	; 0x171a <nwkTxDelayTimerHandler+0x3e>
    16fc:	ec 57       	subi	r30, 0x7C	; 124
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	20 81       	ld	r18, Z
    1702:	31 81       	ldd	r19, Z+1	; 0x01
    1704:	21 50       	subi	r18, 0x01	; 1
    1706:	31 09       	sbc	r19, r1
    1708:	31 83       	std	Z+1, r19	; 0x01
    170a:	20 83       	st	Z, r18
    170c:	23 2b       	or	r18, r19
    170e:	21 f4       	brne	.+8      	; 0x1718 <nwkTxDelayTimerHandler+0x3c>
    1710:	fc 01       	movw	r30, r24
    1712:	c0 83       	st	Z, r28
    1714:	10 2f       	mov	r17, r16
    1716:	01 c0       	rjmp	.+2      	; 0x171a <nwkTxDelayTimerHandler+0x3e>
    1718:	10 2f       	mov	r17, r16
    171a:	f3 d9       	rcall	.-3098   	; 0xb02 <nwkFrameNext>
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	51 f7       	brne	.-44     	; 0x16f4 <nwkTxDelayTimerHandler+0x18>
    1720:	11 23       	and	r17, r17
    1722:	11 f0       	breq	.+4      	; 0x1728 <nwkTxDelayTimerHandler+0x4c>
    1724:	c7 01       	movw	r24, r14
    1726:	c6 d3       	rcall	.+1932   	; 0x1eb4 <SYS_TimerStart>
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ff 90       	pop	r15
    1730:	ef 90       	pop	r14
    1732:	08 95       	ret

00001734 <nwkTxAckWaitTimerHandler>:
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	7c 01       	movw	r14, r24
    1742:	10 e0       	ldi	r17, 0x00	; 0
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	01 e0       	ldi	r16, 0x01	; 1
    174a:	d7 e1       	ldi	r29, 0x17	; 23
    174c:	c0 e1       	ldi	r28, 0x10	; 16
    174e:	16 c0       	rjmp	.+44     	; 0x177c <nwkTxAckWaitTimerHandler+0x48>
    1750:	fc 01       	movw	r30, r24
    1752:	20 81       	ld	r18, Z
    1754:	26 31       	cpi	r18, 0x16	; 22
    1756:	91 f4       	brne	.+36     	; 0x177c <nwkTxAckWaitTimerHandler+0x48>
    1758:	ec 57       	subi	r30, 0x7C	; 124
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	20 81       	ld	r18, Z
    175e:	31 81       	ldd	r19, Z+1	; 0x01
    1760:	21 50       	subi	r18, 0x01	; 1
    1762:	31 09       	sbc	r19, r1
    1764:	31 83       	std	Z+1, r19	; 0x01
    1766:	20 83       	st	Z, r18
    1768:	23 2b       	or	r18, r19
    176a:	39 f4       	brne	.+14     	; 0x177a <nwkTxAckWaitTimerHandler+0x46>
    176c:	fc 01       	movw	r30, r24
    176e:	d0 83       	st	Z, r29
    1770:	ed 57       	subi	r30, 0x7D	; 125
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	c0 83       	st	Z, r28
    1776:	10 2f       	mov	r17, r16
    1778:	01 c0       	rjmp	.+2      	; 0x177c <nwkTxAckWaitTimerHandler+0x48>
    177a:	10 2f       	mov	r17, r16
    177c:	c2 d9       	rcall	.-3196   	; 0xb02 <nwkFrameNext>
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	39 f7       	brne	.-50     	; 0x1750 <nwkTxAckWaitTimerHandler+0x1c>
    1782:	11 23       	and	r17, r17
    1784:	11 f0       	breq	.+4      	; 0x178a <nwkTxAckWaitTimerHandler+0x56>
    1786:	c7 01       	movw	r24, r14
    1788:	95 d3       	rcall	.+1834   	; 0x1eb4 <SYS_TimerStart>
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	ff 90       	pop	r15
    1794:	ef 90       	pop	r14
    1796:	08 95       	ret

00001798 <nwkTxInit>:
    1798:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <nwkTxPhyActiveFrame+0x1>
    179c:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <nwkTxPhyActiveFrame>
    17a0:	e6 e7       	ldi	r30, 0x76	; 118
    17a2:	f7 e0       	ldi	r31, 0x07	; 7
    17a4:	82 e3       	ldi	r24, 0x32	; 50
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a0 e0       	ldi	r26, 0x00	; 0
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	86 83       	std	Z+6, r24	; 0x06
    17ae:	97 83       	std	Z+7, r25	; 0x07
    17b0:	a0 87       	std	Z+8, r26	; 0x08
    17b2:	b1 87       	std	Z+9, r27	; 0x09
    17b4:	12 86       	std	Z+10, r1	; 0x0a
    17b6:	8a e9       	ldi	r24, 0x9A	; 154
    17b8:	9b e0       	ldi	r25, 0x0B	; 11
    17ba:	94 87       	std	Z+12, r25	; 0x0c
    17bc:	83 87       	std	Z+11, r24	; 0x0b
    17be:	e9 e6       	ldi	r30, 0x69	; 105
    17c0:	f7 e0       	ldi	r31, 0x07	; 7
    17c2:	8a e0       	ldi	r24, 0x0A	; 10
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	a0 e0       	ldi	r26, 0x00	; 0
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	86 83       	std	Z+6, r24	; 0x06
    17cc:	97 83       	std	Z+7, r25	; 0x07
    17ce:	a0 87       	std	Z+8, r26	; 0x08
    17d0:	b1 87       	std	Z+9, r27	; 0x09
    17d2:	12 86       	std	Z+10, r1	; 0x0a
    17d4:	8e e6       	ldi	r24, 0x6E	; 110
    17d6:	9b e0       	ldi	r25, 0x0B	; 11
    17d8:	94 87       	std	Z+12, r25	; 0x0c
    17da:	83 87       	std	Z+11, r24	; 0x0b
    17dc:	08 95       	ret

000017de <nwkTxFrame>:
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	ec 01       	movw	r28, r24
    17e4:	fc 01       	movw	r30, r24
    17e6:	ea 57       	subi	r30, 0x7A	; 122
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	80 81       	ld	r24, Z
    17ec:	81 ff       	sbrs	r24, 1
    17ee:	03 c0       	rjmp	.+6      	; 0x17f6 <nwkTxFrame+0x18>
    17f0:	92 e1       	ldi	r25, 0x12	; 18
    17f2:	98 83       	st	Y, r25
    17f4:	08 c0       	rjmp	.+16     	; 0x1806 <nwkTxFrame+0x28>
    17f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    17f8:	91 ff       	sbrs	r25, 1
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <nwkTxFrame+0x24>
    17fc:	90 e1       	ldi	r25, 0x10	; 16
    17fe:	98 83       	st	Y, r25
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <nwkTxFrame+0x28>
    1802:	92 e1       	ldi	r25, 0x12	; 18
    1804:	98 83       	st	Y, r25
    1806:	fe 01       	movw	r30, r28
    1808:	ed 57       	subi	r30, 0x7D	; 125
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	10 82       	st	Z, r1
    180e:	80 ff       	sbrs	r24, 0
    1810:	05 c0       	rjmp	.+10     	; 0x181c <nwkTxFrame+0x3e>
    1812:	2f ef       	ldi	r18, 0xFF	; 255
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	3e 83       	std	Y+6, r19	; 0x06
    1818:	2d 83       	std	Y+5, r18	; 0x05
    181a:	06 c0       	rjmp	.+12     	; 0x1828 <nwkTxFrame+0x4a>
    181c:	20 91 08 11 	lds	r18, 0x1108	; 0x801108 <nwkIb+0x2>
    1820:	30 91 09 11 	lds	r19, 0x1109	; 0x801109 <nwkIb+0x3>
    1824:	3e 83       	std	Y+6, r19	; 0x06
    1826:	2d 83       	std	Y+5, r18	; 0x05
    1828:	85 70       	andi	r24, 0x05	; 5
    182a:	19 f4       	brne	.+6      	; 0x1832 <nwkTxFrame+0x54>
    182c:	ce 01       	movw	r24, r28
    182e:	c5 da       	rcall	.-2678   	; 0xdba <nwkRoutePrepareTx>
    1830:	04 c0       	rjmp	.+8      	; 0x183a <nwkTxFrame+0x5c>
    1832:	8f 85       	ldd	r24, Y+15	; 0x0f
    1834:	98 89       	ldd	r25, Y+16	; 0x10
    1836:	98 87       	std	Y+8, r25	; 0x08
    1838:	8f 83       	std	Y+7, r24	; 0x07
    183a:	e6 e0       	ldi	r30, 0x06	; 6
    183c:	f1 e1       	ldi	r31, 0x11	; 17
    183e:	80 81       	ld	r24, Z
    1840:	91 81       	ldd	r25, Z+1	; 0x01
    1842:	9a 87       	std	Y+10, r25	; 0x0a
    1844:	89 87       	std	Y+9, r24	; 0x09
    1846:	85 81       	ldd	r24, Z+5	; 0x05
    1848:	8f 5f       	subi	r24, 0xFF	; 255
    184a:	85 83       	std	Z+5, r24	; 0x05
    184c:	8c 83       	std	Y+4, r24	; 0x04
    184e:	8f 81       	ldd	r24, Y+7	; 0x07
    1850:	98 85       	ldd	r25, Y+8	; 0x08
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	71 f4       	brne	.+28     	; 0x1872 <nwkTxFrame+0x94>
    1856:	81 e4       	ldi	r24, 0x41	; 65
    1858:	98 e8       	ldi	r25, 0x88	; 136
    185a:	9b 83       	std	Y+3, r25	; 0x03
    185c:	8a 83       	std	Y+2, r24	; 0x02
    185e:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <rand>
    1862:	cc 57       	subi	r28, 0x7C	; 124
    1864:	df 4f       	sbci	r29, 0xFF	; 255
    1866:	87 70       	andi	r24, 0x07	; 7
    1868:	99 27       	eor	r25, r25
    186a:	01 96       	adiw	r24, 0x01	; 1
    186c:	99 83       	std	Y+1, r25	; 0x01
    186e:	88 83       	st	Y, r24
    1870:	08 c0       	rjmp	.+16     	; 0x1882 <nwkTxFrame+0xa4>
    1872:	81 e6       	ldi	r24, 0x61	; 97
    1874:	98 e8       	ldi	r25, 0x88	; 136
    1876:	9b 83       	std	Y+3, r25	; 0x03
    1878:	8a 83       	std	Y+2, r24	; 0x02
    187a:	cc 57       	subi	r28, 0x7C	; 124
    187c:	df 4f       	sbci	r29, 0xFF	; 255
    187e:	19 82       	std	Y+1, r1	; 0x01
    1880:	18 82       	st	Y, r1
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	08 95       	ret

00001888 <nwkTxBroadcastFrame>:
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	8c 01       	movw	r16, r24
    1892:	f7 d8       	rcall	.-3602   	; 0xa82 <nwkFrameAlloc>
    1894:	ec 01       	movw	r28, r24
    1896:	89 2b       	or	r24, r25
    1898:	b9 f1       	breq	.+110    	; 0x1908 <nwkTxBroadcastFrame+0x80>
    189a:	82 e1       	ldi	r24, 0x12	; 18
    189c:	88 83       	st	Y, r24
    189e:	f8 01       	movw	r30, r16
    18a0:	81 81       	ldd	r24, Z+1	; 0x01
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	fe 01       	movw	r30, r28
    18a6:	ed 57       	subi	r30, 0x7D	; 125
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	10 82       	st	Z, r1
    18ac:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <rand>
    18b0:	fe 01       	movw	r30, r28
    18b2:	ec 57       	subi	r30, 0x7C	; 124
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	87 70       	andi	r24, 0x07	; 7
    18b8:	99 27       	eor	r25, r25
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	80 83       	st	Z, r24
    18c0:	33 96       	adiw	r30, 0x03	; 3
    18c2:	11 82       	std	Z+1, r1	; 0x01
    18c4:	10 82       	st	Z, r1
    18c6:	f8 01       	movw	r30, r16
    18c8:	41 81       	ldd	r20, Z+1	; 0x01
    18ca:	50 e0       	ldi	r21, 0x00	; 0
    18cc:	b8 01       	movw	r22, r16
    18ce:	6e 5f       	subi	r22, 0xFE	; 254
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	ce 01       	movw	r24, r28
    18d4:	02 96       	adiw	r24, 0x02	; 2
    18d6:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <memcpy>
    18da:	81 e4       	ldi	r24, 0x41	; 65
    18dc:	98 e8       	ldi	r25, 0x88	; 136
    18de:	9b 83       	std	Y+3, r25	; 0x03
    18e0:	8a 83       	std	Y+2, r24	; 0x02
    18e2:	8f ef       	ldi	r24, 0xFF	; 255
    18e4:	9f ef       	ldi	r25, 0xFF	; 255
    18e6:	98 87       	std	Y+8, r25	; 0x08
    18e8:	8f 83       	std	Y+7, r24	; 0x07
    18ea:	f8 01       	movw	r30, r16
    18ec:	85 81       	ldd	r24, Z+5	; 0x05
    18ee:	96 81       	ldd	r25, Z+6	; 0x06
    18f0:	9e 83       	std	Y+6, r25	; 0x06
    18f2:	8d 83       	std	Y+5, r24	; 0x05
    18f4:	e6 e0       	ldi	r30, 0x06	; 6
    18f6:	f1 e1       	ldi	r31, 0x11	; 17
    18f8:	80 81       	ld	r24, Z
    18fa:	91 81       	ldd	r25, Z+1	; 0x01
    18fc:	9a 87       	std	Y+10, r25	; 0x0a
    18fe:	89 87       	std	Y+9, r24	; 0x09
    1900:	85 81       	ldd	r24, Z+5	; 0x05
    1902:	8f 5f       	subi	r24, 0xFF	; 255
    1904:	85 83       	std	Z+5, r24	; 0x05
    1906:	8c 83       	std	Y+4, r24	; 0x04
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	1f 91       	pop	r17
    190e:	0f 91       	pop	r16
    1910:	08 95       	ret

00001912 <nwkTxAckReceived>:
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	fc 01       	movw	r30, r24
    1918:	21 85       	ldd	r18, Z+9	; 0x09
    191a:	23 30       	cpi	r18, 0x03	; 3
    191c:	d9 f4       	brne	.+54     	; 0x1954 <nwkTxAckReceived+0x42>
    191e:	10 c0       	rjmp	.+32     	; 0x1940 <nwkTxAckReceived+0x2e>
    1920:	fc 01       	movw	r30, r24
    1922:	20 81       	ld	r18, Z
    1924:	26 31       	cpi	r18, 0x16	; 22
    1926:	89 f4       	brne	.+34     	; 0x194a <nwkTxAckReceived+0x38>
    1928:	34 85       	ldd	r19, Z+12	; 0x0c
    192a:	29 81       	ldd	r18, Y+1	; 0x01
    192c:	32 13       	cpse	r19, r18
    192e:	0d c0       	rjmp	.+26     	; 0x194a <nwkTxAckReceived+0x38>
    1930:	27 e1       	ldi	r18, 0x17	; 23
    1932:	20 83       	st	Z, r18
    1934:	2a 81       	ldd	r18, Y+2	; 0x02
    1936:	ea 57       	subi	r30, 0x7A	; 122
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	20 83       	st	Z, r18
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	0b c0       	rjmp	.+22     	; 0x1956 <nwkTxAckReceived+0x44>
    1940:	fc 01       	movw	r30, r24
    1942:	c7 81       	ldd	r28, Z+7	; 0x07
    1944:	d0 85       	ldd	r29, Z+8	; 0x08
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	db d8       	rcall	.-3658   	; 0xb02 <nwkFrameNext>
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	41 f7       	brne	.-48     	; 0x1920 <nwkTxAckReceived+0xe>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	01 c0       	rjmp	.+2      	; 0x1956 <nwkTxAckReceived+0x44>
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	08 95       	ret

0000195c <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    195c:	22 e1       	ldi	r18, 0x12	; 18
    195e:	fc 01       	movw	r30, r24
    1960:	20 83       	st	Z, r18
    1962:	08 95       	ret

00001964 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1964:	e0 91 83 07 	lds	r30, 0x0783	; 0x800783 <nwkTxPhyActiveFrame>
    1968:	f0 91 84 07 	lds	r31, 0x0784	; 0x800784 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	21 f0       	breq	.+8      	; 0x1978 <PHY_DataConf+0x14>
    1970:	48 f0       	brcs	.+18     	; 0x1984 <PHY_DataConf+0x20>
    1972:	82 30       	cpi	r24, 0x02	; 2
    1974:	19 f0       	breq	.+6      	; 0x197c <PHY_DataConf+0x18>
    1976:	04 c0       	rjmp	.+8      	; 0x1980 <PHY_DataConf+0x1c>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1978:	80 e2       	ldi	r24, 0x20	; 32
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <PHY_DataConf+0x22>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    197c:	81 e2       	ldi	r24, 0x21	; 33
    197e:	03 c0       	rjmp	.+6      	; 0x1986 <PHY_DataConf+0x22>

	default:
		return NWK_ERROR_STATUS;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <PHY_DataConf+0x22>
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    1984:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1986:	df 01       	movw	r26, r30
    1988:	ad 57       	subi	r26, 0x7D	; 125
    198a:	bf 4f       	sbci	r27, 0xFF	; 255
    198c:	8c 93       	st	X, r24
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    198e:	85 e1       	ldi	r24, 0x15	; 21
    1990:	80 83       	st	Z, r24
	nwkTxPhyActiveFrame = NULL;
    1992:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <nwkTxPhyActiveFrame+0x1>
    1996:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <nwkTxPhyActiveFrame>
	nwkIb.lock--;
    199a:	e6 e0       	ldi	r30, 0x06	; 6
    199c:	f1 e1       	ldi	r31, 0x11	; 17
    199e:	86 a9       	ldd	r24, Z+54	; 0x36
    19a0:	97 a9       	ldd	r25, Z+55	; 0x37
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	97 ab       	std	Z+55, r25	; 0x37
    19a6:	86 ab       	std	Z+54, r24	; 0x36
    19a8:	08 95       	ret

000019aa <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    19aa:	9f 92       	push	r9
    19ac:	af 92       	push	r10
    19ae:	bf 92       	push	r11
    19b0:	cf 92       	push	r12
    19b2:	df 92       	push	r13
    19b4:	ef 92       	push	r14
    19b6:	ff 92       	push	r15
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
	NwkFrame_t *frame = NULL;
    19c0:	c0 e0       	ldi	r28, 0x00	; 0
    19c2:	d0 e0       	ldi	r29, 0x00	; 0

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
				nwkTxPhyActiveFrame = frame;
				frame->state = NWK_TX_STATE_WAIT_CONF;
    19c4:	0f 2e       	mov	r0, r31
    19c6:	f4 e1       	ldi	r31, 0x14	; 20
    19c8:	af 2e       	mov	r10, r31
    19ca:	f0 2d       	mov	r31, r0
				PHY_DataReq(&(frame->size));
				nwkIb.lock++;
    19cc:	06 e0       	ldi	r16, 0x06	; 6
    19ce:	11 e1       	ldi	r17, 0x11	; 17
					SYS_TimerStart(&nwkTxAckWaitTimer);
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    19d0:	0f 2e       	mov	r0, r31
    19d2:	f7 e1       	ldi	r31, 0x17	; 23
    19d4:	df 2e       	mov	r13, r31
    19d6:	f0 2d       	mov	r31, r0
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    19d8:	0f 2e       	mov	r0, r31
    19da:	f6 e1       	ldi	r31, 0x16	; 22
    19dc:	9f 2e       	mov	r9, r31
    19de:	f0 2d       	mov	r31, r0
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    19e0:	0f 2e       	mov	r0, r31
    19e2:	f5 e1       	ldi	r31, 0x15	; 21
    19e4:	ef 2e       	mov	r14, r31
    19e6:	f1 2c       	mov	r15, r1
    19e8:	f0 2d       	mov	r31, r0
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
				SYS_TimerStart(&nwkTxDelayTimer);
			} else {
				frame->state = NWK_TX_STATE_SEND;
    19ea:	0f 2e       	mov	r0, r31
    19ec:	f3 e1       	ldi	r31, 0x13	; 19
    19ee:	cf 2e       	mov	r12, r31
    19f0:	f0 2d       	mov	r31, r0
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    19f2:	0f 2e       	mov	r0, r31
    19f4:	f1 e1       	ldi	r31, 0x11	; 17
    19f6:	bf 2e       	mov	r11, r31
    19f8:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    19fa:	65 c0       	rjmp	.+202    	; 0x1ac6 <nwkTxTaskHandler+0x11c>
		switch (frame->state) {
    19fc:	88 81       	ld	r24, Y
    19fe:	83 31       	cpi	r24, 0x13	; 19
    1a00:	f1 f0       	breq	.+60     	; 0x1a3e <nwkTxTaskHandler+0x94>
    1a02:	28 f4       	brcc	.+10     	; 0x1a0e <nwkTxTaskHandler+0x64>
    1a04:	80 31       	cpi	r24, 0x10	; 16
    1a06:	49 f0       	breq	.+18     	; 0x1a1a <nwkTxTaskHandler+0x70>
    1a08:	82 31       	cpi	r24, 0x12	; 18
    1a0a:	59 f0       	breq	.+22     	; 0x1a22 <nwkTxTaskHandler+0x78>
    1a0c:	5c c0       	rjmp	.+184    	; 0x1ac6 <nwkTxTaskHandler+0x11c>
    1a0e:	85 31       	cpi	r24, 0x15	; 21
    1a10:	61 f1       	breq	.+88     	; 0x1a6a <nwkTxTaskHandler+0xc0>
    1a12:	87 31       	cpi	r24, 0x17	; 23
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <nwkTxTaskHandler+0x6e>
    1a16:	48 c0       	rjmp	.+144    	; 0x1aa8 <nwkTxTaskHandler+0xfe>
    1a18:	56 c0       	rjmp	.+172    	; 0x1ac6 <nwkTxTaskHandler+0x11c>
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    1a1a:	61 e0       	ldi	r22, 0x01	; 1
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	1f dd       	rcall	.-1474   	; 0x145e <nwkSecurityProcess>
		}
		break;
    1a20:	52 c0       	rjmp	.+164    	; 0x1ac6 <nwkTxTaskHandler+0x11c>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    1a22:	fe 01       	movw	r30, r28
    1a24:	ec 57       	subi	r30, 0x7C	; 124
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	80 81       	ld	r24, Z
    1a2a:	91 81       	ldd	r25, Z+1	; 0x01
    1a2c:	89 2b       	or	r24, r25
    1a2e:	29 f0       	breq	.+10     	; 0x1a3a <nwkTxTaskHandler+0x90>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    1a30:	b8 82       	st	Y, r11
				SYS_TimerStart(&nwkTxDelayTimer);
    1a32:	89 e6       	ldi	r24, 0x69	; 105
    1a34:	97 e0       	ldi	r25, 0x07	; 7
    1a36:	3e d2       	rcall	.+1148   	; 0x1eb4 <SYS_TimerStart>
    1a38:	46 c0       	rjmp	.+140    	; 0x1ac6 <nwkTxTaskHandler+0x11c>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    1a3a:	c8 82       	st	Y, r12
    1a3c:	44 c0       	rjmp	.+136    	; 0x1ac6 <nwkTxTaskHandler+0x11c>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    1a3e:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <nwkTxPhyActiveFrame>
    1a42:	90 91 84 07 	lds	r25, 0x0784	; 0x800784 <nwkTxPhyActiveFrame+0x1>
    1a46:	89 2b       	or	r24, r25
    1a48:	09 f0       	breq	.+2      	; 0x1a4c <nwkTxTaskHandler+0xa2>
    1a4a:	3d c0       	rjmp	.+122    	; 0x1ac6 <nwkTxTaskHandler+0x11c>
				nwkTxPhyActiveFrame = frame;
    1a4c:	d0 93 84 07 	sts	0x0784, r29	; 0x800784 <nwkTxPhyActiveFrame+0x1>
    1a50:	c0 93 83 07 	sts	0x0783, r28	; 0x800783 <nwkTxPhyActiveFrame>
				frame->state = NWK_TX_STATE_WAIT_CONF;
    1a54:	fe 01       	movw	r30, r28
    1a56:	a1 92       	st	Z+, r10
				PHY_DataReq(&(frame->size));
    1a58:	cf 01       	movw	r24, r30
    1a5a:	d4 d0       	rcall	.+424    	; 0x1c04 <PHY_DataReq>
				nwkIb.lock++;
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	86 a9       	ldd	r24, Z+54	; 0x36
    1a60:	97 a9       	ldd	r25, Z+55	; 0x37
    1a62:	01 96       	adiw	r24, 0x01	; 1
    1a64:	97 ab       	std	Z+55, r25	; 0x37
    1a66:	86 ab       	std	Z+54, r24	; 0x36
    1a68:	2e c0       	rjmp	.+92     	; 0x1ac6 <nwkTxTaskHandler+0x11c>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	ed 57       	subi	r30, 0x7D	; 125
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 81       	ld	r24, Z
    1a72:	81 11       	cpse	r24, r1
    1a74:	17 c0       	rjmp	.+46     	; 0x1aa4 <nwkTxTaskHandler+0xfa>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    1a76:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a78:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a7a:	f8 01       	movw	r30, r16
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
    1a80:	28 17       	cp	r18, r24
    1a82:	39 07       	cpc	r19, r25
    1a84:	69 f4       	brne	.+26     	; 0x1aa0 <nwkTxTaskHandler+0xf6>
    1a86:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a88:	80 ff       	sbrs	r24, 0
    1a8a:	0a c0       	rjmp	.+20     	; 0x1aa0 <nwkTxTaskHandler+0xf6>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    1a8c:	98 82       	st	Y, r9
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    1a8e:	fe 01       	movw	r30, r28
    1a90:	ec 57       	subi	r30, 0x7C	; 124
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	f1 82       	std	Z+1, r15	; 0x01
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    1a96:	e0 82       	st	Z, r14
    1a98:	86 e7       	ldi	r24, 0x76	; 118
    1a9a:	97 e0       	ldi	r25, 0x07	; 7
    1a9c:	0b d2       	rcall	.+1046   	; 0x1eb4 <SYS_TimerStart>
    1a9e:	13 c0       	rjmp	.+38     	; 0x1ac6 <nwkTxTaskHandler+0x11c>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    1aa0:	d8 82       	st	Y, r13
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    1aa2:	11 c0       	rjmp	.+34     	; 0x1ac6 <nwkTxTaskHandler+0x11c>
    1aa4:	d8 82       	st	Y, r13
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    1aa6:	0f c0       	rjmp	.+30     	; 0x1ac6 <nwkTxTaskHandler+0x11c>
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	40 d9       	rcall	.-3456   	; 0xd2c <nwkRouteFrameSent>
#endif
			if (NULL == frame->tx.confirm) {
    1aac:	fe 01       	movw	r30, r28
    1aae:	e9 57       	subi	r30, 0x79	; 121
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	01 90       	ld	r0, Z+
    1ab4:	f0 81       	ld	r31, Z
    1ab6:	e0 2d       	mov	r30, r0
    1ab8:	30 97       	sbiw	r30, 0x00	; 0
				nwkFrameFree(frame);
    1aba:	19 f4       	brne	.+6      	; 0x1ac2 <nwkTxTaskHandler+0x118>
    1abc:	ce 01       	movw	r24, r28
    1abe:	17 d8       	rcall	.-4050   	; 0xaee <nwkFrameFree>
			} else {
				frame->tx.confirm(frame);
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <nwkTxTaskHandler+0x11c>
    1ac2:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1ac4:	19 95       	eicall
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	1c d8       	rcall	.-4040   	; 0xb02 <nwkFrameNext>
    1aca:	ec 01       	movw	r28, r24
    1acc:	89 2b       	or	r24, r25
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <nwkTxTaskHandler+0x128>
    1ad0:	95 cf       	rjmp	.-214    	; 0x19fc <nwkTxTaskHandler+0x52>

		default:
			break;
		}
	}
}
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	ff 90       	pop	r15
    1adc:	ef 90       	pop	r14
    1ade:	df 90       	pop	r13
    1ae0:	cf 90       	pop	r12
    1ae2:	bf 90       	pop	r11
    1ae4:	af 90       	pop	r10
    1ae6:	9f 90       	pop	r9
    1ae8:	08 95       	ret

00001aea <phySetChannel>:
	IEEE_ADDR_2_REG = *ptr_to_reg++;
	IEEE_ADDR_3_REG = *ptr_to_reg++;
	IEEE_ADDR_4_REG = *ptr_to_reg++;
	IEEE_ADDR_5_REG = *ptr_to_reg++;
	IEEE_ADDR_6_REG = *ptr_to_reg++;
	IEEE_ADDR_7_REG = *ptr_to_reg;
    1aea:	80 91 85 07 	lds	r24, 0x0785	; 0x800785 <phyBand>
    1aee:	98 2f       	mov	r25, r24
    1af0:	9f 70       	andi	r25, 0x0F	; 15
    1af2:	e4 e5       	ldi	r30, 0x54	; 84
    1af4:	f1 e0       	ldi	r31, 0x01	; 1
    1af6:	80 81       	ld	r24, Z
    1af8:	80 7f       	andi	r24, 0xF0	; 240
    1afa:	89 2b       	or	r24, r25
    1afc:	80 83       	st	Z, r24
    1afe:	80 91 85 07 	lds	r24, 0x0785	; 0x800785 <phyBand>
    1b02:	88 23       	and	r24, r24
    1b04:	29 f0       	breq	.+10     	; 0x1b10 <phySetChannel+0x26>
    1b06:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <phyChannel>
    1b0a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
    1b0e:	08 95       	ret
    1b10:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <phyChannel>
    1b14:	98 2f       	mov	r25, r24
    1b16:	9f 71       	andi	r25, 0x1F	; 31
    1b18:	e8 e4       	ldi	r30, 0x48	; 72
    1b1a:	f1 e0       	ldi	r31, 0x01	; 1
    1b1c:	80 81       	ld	r24, Z
    1b1e:	80 7e       	andi	r24, 0xE0	; 224
    1b20:	89 2b       	or	r24, r25
    1b22:	80 83       	st	Z, r24
    1b24:	08 95       	ret

00001b26 <phyTrxSetState>:
    1b26:	a2 e4       	ldi	r26, 0x42	; 66
    1b28:	b1 e0       	ldi	r27, 0x01	; 1
    1b2a:	23 e0       	ldi	r18, 0x03	; 3
    1b2c:	e1 e4       	ldi	r30, 0x41	; 65
    1b2e:	f1 e0       	ldi	r31, 0x01	; 1
    1b30:	2c 93       	st	X, r18
    1b32:	90 81       	ld	r25, Z
    1b34:	9f 71       	andi	r25, 0x1F	; 31
    1b36:	98 30       	cpi	r25, 0x08	; 8
    1b38:	d9 f7       	brne	.-10     	; 0x1b30 <phyTrxSetState+0xa>
    1b3a:	a2 e4       	ldi	r26, 0x42	; 66
    1b3c:	b1 e0       	ldi	r27, 0x01	; 1
    1b3e:	e1 e4       	ldi	r30, 0x41	; 65
    1b40:	f1 e0       	ldi	r31, 0x01	; 1
    1b42:	8c 93       	st	X, r24
    1b44:	90 81       	ld	r25, Z
    1b46:	9f 71       	andi	r25, 0x1F	; 31
    1b48:	89 13       	cpse	r24, r25
    1b4a:	fb cf       	rjmp	.-10     	; 0x1b42 <phyTrxSetState+0x1c>
    1b4c:	08 95       	ret

00001b4e <phySetRxState>:
    1b4e:	88 e0       	ldi	r24, 0x08	; 8
    1b50:	ea df       	rcall	.-44     	; 0x1b26 <phyTrxSetState>
    1b52:	8f ef       	ldi	r24, 0xFF	; 255
    1b54:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1b58:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <phyRxState>
    1b5c:	88 23       	and	r24, r24
    1b5e:	11 f0       	breq	.+4      	; 0x1b64 <phySetRxState+0x16>
    1b60:	86 e1       	ldi	r24, 0x16	; 22
    1b62:	e1 cf       	rjmp	.-62     	; 0x1b26 <phyTrxSetState>
    1b64:	08 95       	ret

00001b66 <PHY_Init>:
    1b66:	60 e4       	ldi	r22, 0x40	; 64
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sysclk_enable_module>
    1b6e:	e9 e3       	ldi	r30, 0x39	; 57
    1b70:	f1 e0       	ldi	r31, 0x01	; 1
    1b72:	80 81       	ld	r24, Z
    1b74:	81 60       	ori	r24, 0x01	; 1
    1b76:	80 83       	st	Z, r24
    1b78:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <phyRxState>
    1b7c:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <phyBand>
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <phyState>
    1b86:	88 e0       	ldi	r24, 0x08	; 8
    1b88:	ce df       	rcall	.-100    	; 0x1b26 <phyTrxSetState>
    1b8a:	8b ee       	ldi	r24, 0xEB	; 235
    1b8c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x700156>
    1b90:	ec e4       	ldi	r30, 0x4C	; 76
    1b92:	f1 e0       	ldi	r31, 0x01	; 1
    1b94:	80 81       	ld	r24, Z
    1b96:	83 60       	ori	r24, 0x03	; 3
    1b98:	80 83       	st	Z, r24
    1b9a:	80 81       	ld	r24, Z
    1b9c:	80 68       	ori	r24, 0x80	; 128
    1b9e:	80 83       	st	Z, r24
    1ba0:	08 95       	ret

00001ba2 <PHY_SetRxState>:
    1ba2:	80 93 87 07 	sts	0x0787, r24	; 0x800787 <phyRxState>
    1ba6:	d3 cf       	rjmp	.-90     	; 0x1b4e <phySetRxState>
    1ba8:	08 95       	ret

00001baa <PHY_SetChannel>:
    1baa:	80 93 86 07 	sts	0x0786, r24	; 0x800786 <phyChannel>
    1bae:	9d cf       	rjmp	.-198    	; 0x1aea <phySetChannel>
    1bb0:	08 95       	ret

00001bb2 <PHY_SetPanId>:
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	1f 92       	push	r1
    1bb8:	1f 92       	push	r1
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x700162>
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x700163>
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	08 95       	ret

00001bd6 <PHY_SetShortAddr>:
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	1f 92       	push	r1
    1bdc:	1f 92       	push	r1
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	9a 83       	std	Y+2, r25	; 0x02
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x700160>
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x700161>
    1bf0:	99 81       	ldd	r25, Y+1	; 0x01
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	89 0f       	add	r24, r25
    1bf6:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x70016d>
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	08 95       	ret

00001c04 <PHY_DataReq>:
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	ec 01       	movw	r28, r24
    1c0a:	89 e1       	ldi	r24, 0x19	; 25
    1c0c:	8c df       	rcall	.-232    	; 0x1b26 <phyTrxSetState>
    1c0e:	8f ef       	ldi	r24, 0xFF	; 255
    1c10:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1c14:	88 81       	ld	r24, Y
    1c16:	8e 5f       	subi	r24, 0xFE	; 254
    1c18:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
    1c1c:	88 81       	ld	r24, Y
    1c1e:	88 23       	and	r24, r24
    1c20:	81 f0       	breq	.+32     	; 0x1c42 <PHY_DataReq+0x3e>
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	82 2f       	mov	r24, r18
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	fc 01       	movw	r30, r24
    1c2a:	ef 57       	subi	r30, 0x7F	; 127
    1c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c2e:	de 01       	movw	r26, r28
    1c30:	a8 0f       	add	r26, r24
    1c32:	b9 1f       	adc	r27, r25
    1c34:	11 96       	adiw	r26, 0x01	; 1
    1c36:	8c 91       	ld	r24, X
    1c38:	80 83       	st	Z, r24
    1c3a:	2f 5f       	subi	r18, 0xFF	; 255
    1c3c:	88 81       	ld	r24, Y
    1c3e:	28 17       	cp	r18, r24
    1c40:	88 f3       	brcs	.-30     	; 0x1c24 <PHY_DataReq+0x20>
    1c42:	83 e0       	ldi	r24, 0x03	; 3
    1c44:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <phyState>
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	08 95       	ret

00001c54 <PHY_EncryptReq>:
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	ec 01       	movw	r28, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	14 d6       	rcall	.+3112   	; 0x288a <sal_aes_setup>
    1c62:	ce 01       	movw	r24, r28
    1c64:	fc d5       	rcall	.+3064   	; 0x285e <sal_aes_exec>
    1c66:	ce 01       	movw	r24, r28
    1c68:	9e d6       	rcall	.+3388   	; 0x29a6 <sal_aes_read>
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	08 95       	ret

00001c70 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <PHY_TaskHandler+0x8>
    1c78:	1f 92       	push	r1
    1c7a:	1f 92       	push	r1
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
	if (PHY_STATE_SLEEP == phyState) {
    1c80:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <phyState>
    1c84:	82 30       	cpi	r24, 0x02	; 2
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <PHY_TaskHandler+0x1a>
    1c88:	65 c0       	rjmp	.+202    	; 0x1d54 <PHY_TaskHandler+0xe4>
		return;
	}

	if (IRQ_STATUS_REG_s.rxEnd) {
    1c8a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1c8e:	83 ff       	sbrs	r24, 3
    1c90:	3e c0       	rjmp	.+124    	; 0x1d0e <PHY_TaskHandler+0x9e>
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;
    1c92:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x70017b>

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    1c96:	6a 2f       	mov	r22, r26
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	ab 01       	movw	r20, r22
    1c9c:	4f 5f       	subi	r20, 0xFF	; 255
    1c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	e0 58       	subi	r30, 0x80	; 128
    1caa:	fe 4f       	sbci	r31, 0xFE	; 254
    1cac:	30 81       	ld	r19, Z
    1cae:	fc 01       	movw	r30, r24
    1cb0:	e8 57       	subi	r30, 0x78	; 120
    1cb2:	f8 4f       	sbci	r31, 0xF8	; 248
    1cb4:	30 83       	st	Z, r19

	if (IRQ_STATUS_REG_s.rxEnd) {
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    1cb6:	2f 5f       	subi	r18, 0xFF	; 255
    1cb8:	82 2f       	mov	r24, r18
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	84 17       	cp	r24, r20
    1cbe:	95 07       	cpc	r25, r21
    1cc0:	94 f3       	brlt	.-28     	; 0x1ca6 <PHY_TaskHandler+0x36>
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
		}

		ind.data = phyRxBuffer;
    1cc2:	88 e8       	ldi	r24, 0x88	; 136
    1cc4:	97 e0       	ldi	r25, 0x07	; 7
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01
		ind.size = size - PHY_CRC_SIZE;
    1cca:	a2 50       	subi	r26, 0x02	; 2
    1ccc:	ab 83       	std	Y+3, r26	; 0x03
		ind.lqi  = phyRxBuffer[size];
    1cce:	fb 01       	movw	r30, r22
    1cd0:	e8 57       	subi	r30, 0x78	; 120
    1cd2:	f8 4f       	sbci	r31, 0xF8	; 248
    1cd4:	80 81       	ld	r24, Z
    1cd6:	8c 83       	std	Y+4, r24	; 0x04
		ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1cd8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    1cdc:	8a 55       	subi	r24, 0x5A	; 90
    1cde:	8d 83       	std	Y+5, r24	; 0x05
		PHY_DataInd(&ind);
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	2f d9       	rcall	.-3490   	; 0xf44 <PHY_DataInd>

		while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus) {
    1ce6:	e1 e4       	ldi	r30, 0x41	; 65
    1ce8:	f1 e0       	ldi	r31, 0x01	; 1
    1cea:	80 81       	ld	r24, Z
    1cec:	8f 71       	andi	r24, 0x1F	; 31
    1cee:	86 31       	cpi	r24, 0x16	; 22
    1cf0:	e1 f7       	brne	.-8      	; 0x1cea <PHY_TaskHandler+0x7a>
		}

		IRQ_STATUS_REG_s.rxEnd = 1;
    1cf2:	ef e4       	ldi	r30, 0x4F	; 79
    1cf4:	f1 e0       	ldi	r31, 0x01	; 1
    1cf6:	80 81       	ld	r24, Z
    1cf8:	88 60       	ori	r24, 0x08	; 8
    1cfa:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 0;
    1cfc:	ec e4       	ldi	r30, 0x4C	; 76
    1cfe:	f1 e0       	ldi	r31, 0x01	; 1
    1d00:	80 81       	ld	r24, Z
    1d02:	8f 77       	andi	r24, 0x7F	; 127
    1d04:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1d06:	80 81       	ld	r24, Z
    1d08:	80 68       	ori	r24, 0x80	; 128
    1d0a:	80 83       	st	Z, r24
    1d0c:	23 c0       	rjmp	.+70     	; 0x1d54 <PHY_TaskHandler+0xe4>
	} else if (IRQ_STATUS_REG_s.txEnd) {
    1d0e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1d12:	86 ff       	sbrs	r24, 6
    1d14:	1f c0       	rjmp	.+62     	; 0x1d54 <PHY_TaskHandler+0xe4>
		if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus) {
    1d16:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1d1a:	8f 71       	andi	r24, 0x1F	; 31
    1d1c:	89 31       	cpi	r24, 0x19	; 25
    1d1e:	a9 f4       	brne	.+42     	; 0x1d4a <PHY_TaskHandler+0xda>
			uint8_t status = TRX_STATE_REG_s.tracStatus;
    1d20:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1d24:	12 95       	swap	r17
    1d26:	16 95       	lsr	r17
    1d28:	17 70       	andi	r17, 0x07	; 7

			if (TRAC_STATUS_SUCCESS == status) {
    1d2a:	49 f0       	breq	.+18     	; 0x1d3e <PHY_TaskHandler+0xce>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    1d2c:	13 30       	cpi	r17, 0x03	; 3
    1d2e:	21 f0       	breq	.+8      	; 0x1d38 <PHY_TaskHandler+0xc8>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
    1d30:	15 30       	cpi	r17, 0x05	; 5
    1d32:	21 f0       	breq	.+8      	; 0x1d3c <PHY_TaskHandler+0xcc>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
    1d34:	13 e0       	ldi	r17, 0x03	; 3
    1d36:	03 c0       	rjmp	.+6      	; 0x1d3e <PHY_TaskHandler+0xce>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1d38:	11 e0       	ldi	r17, 0x01	; 1
    1d3a:	01 c0       	rjmp	.+2      	; 0x1d3e <PHY_TaskHandler+0xce>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    1d3c:	12 e0       	ldi	r17, 0x02	; 2
    1d3e:	07 df       	rcall	.-498    	; 0x1b4e <phySetRxState>
			phyState = PHY_STATE_IDLE;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <phyState>

			PHY_DataConf(status);
    1d46:	81 2f       	mov	r24, r17
    1d48:	0d de       	rcall	.-998    	; 0x1964 <PHY_DataConf>
		}

		IRQ_STATUS_REG_s.txEnd = 1;
    1d4a:	ef e4       	ldi	r30, 0x4F	; 79
    1d4c:	f1 e0       	ldi	r31, 0x01	; 1
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 64       	ori	r24, 0x40	; 64
    1d52:	80 83       	st	Z, r24
	}
}
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	08 95       	ret

00001d66 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
	SYS_TimerInit();
    1d66:	7b d0       	rcall	.+246    	; 0x1e5e <SYS_TimerInit>
#if SYS_SECURITY_MODE == 0
	sal_init();
    1d68:	79 d5       	rcall	.+2802   	; 0x285c <sal_init>
#endif
	PHY_Init();
    1d6a:	fd de       	rcall	.-518    	; 0x1b66 <PHY_Init>
    1d6c:	0c 94 0e 04 	jmp	0x81c	; 0x81c <NWK_Init>
	NWK_Init();
    1d70:	08 95       	ret

00001d72 <SYS_TaskHandler>:
    1d72:	7e df       	rcall	.-260    	; 0x1c70 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
	PHY_TaskHandler();
	NWK_TaskHandler();
    1d74:	0e 94 3d 04 	call	0x87a	; 0x87a <NWK_TaskHandler>
	SYS_TimerTaskHandler();
    1d78:	a8 c0       	rjmp	.+336    	; 0x1eca <SYS_TimerTaskHandler>
    1d7a:	08 95       	ret

00001d7c <SYS_EncryptReq>:
/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    1d7c:	6b df       	rcall	.-298    	; 0x1c54 <PHY_EncryptReq>
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    1d7e:	7e cb       	rjmp	.-2308   	; 0x147c <SYS_EncryptConf>
    1d80:	08 95       	ret

00001d82 <placeTimer>:
    1d82:	0f 93       	push	r16
			break;
		}

		prev = t;
	}
}
    1d84:	1f 93       	push	r17
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	ec 01       	movw	r28, r24
    1d8c:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <timers>
    1d90:	90 91 0a 08 	lds	r25, 0x080A	; 0x80080a <timers+0x1>
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <placeTimer+0x18>
    1d98:	45 c0       	rjmp	.+138    	; 0x1e24 <placeTimer+0xa2>
    1d9a:	4e 81       	ldd	r20, Y+6	; 0x06
    1d9c:	5f 81       	ldd	r21, Y+7	; 0x07
    1d9e:	68 85       	ldd	r22, Y+8	; 0x08
    1da0:	79 85       	ldd	r23, Y+9	; 0x09
    1da2:	fc 01       	movw	r30, r24
    1da4:	02 81       	ldd	r16, Z+2	; 0x02
    1da6:	13 81       	ldd	r17, Z+3	; 0x03
    1da8:	24 81       	ldd	r18, Z+4	; 0x04
    1daa:	35 81       	ldd	r19, Z+5	; 0x05
    1dac:	40 17       	cp	r20, r16
    1dae:	51 07       	cpc	r21, r17
    1db0:	62 07       	cpc	r22, r18
    1db2:	73 07       	cpc	r23, r19
    1db4:	60 f0       	brcs	.+24     	; 0x1dce <placeTimer+0x4c>
    1db6:	dc 01       	movw	r26, r24
    1db8:	17 c0       	rjmp	.+46     	; 0x1de8 <placeTimer+0x66>
    1dba:	02 81       	ldd	r16, Z+2	; 0x02
    1dbc:	13 81       	ldd	r17, Z+3	; 0x03
    1dbe:	24 81       	ldd	r18, Z+4	; 0x04
    1dc0:	35 81       	ldd	r19, Z+5	; 0x05
    1dc2:	40 17       	cp	r20, r16
    1dc4:	51 07       	cpc	r21, r17
    1dc6:	62 07       	cpc	r22, r18
    1dc8:	73 07       	cpc	r23, r19
    1dca:	68 f4       	brcc	.+26     	; 0x1de6 <placeTimer+0x64>
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <placeTimer+0x52>
    1dce:	fc 01       	movw	r30, r24
    1dd0:	a0 e0       	ldi	r26, 0x00	; 0
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	04 1b       	sub	r16, r20
    1dd6:	15 0b       	sbc	r17, r21
    1dd8:	26 0b       	sbc	r18, r22
    1dda:	37 0b       	sbc	r19, r23
    1ddc:	02 83       	std	Z+2, r16	; 0x02
    1dde:	13 83       	std	Z+3, r17	; 0x03
    1de0:	24 83       	std	Z+4, r18	; 0x04
    1de2:	35 83       	std	Z+5, r19	; 0x05
    1de4:	0a c0       	rjmp	.+20     	; 0x1dfa <placeTimer+0x78>
    1de6:	df 01       	movw	r26, r30
    1de8:	40 1b       	sub	r20, r16
    1dea:	51 0b       	sbc	r21, r17
    1dec:	62 0b       	sbc	r22, r18
    1dee:	73 0b       	sbc	r23, r19
    1df0:	ed 91       	ld	r30, X+
    1df2:	fc 91       	ld	r31, X
    1df4:	11 97       	sbiw	r26, 0x01	; 1
    1df6:	30 97       	sbiw	r30, 0x00	; 0
    1df8:	01 f7       	brne	.-64     	; 0x1dba <placeTimer+0x38>
    1dfa:	4a 83       	std	Y+2, r20	; 0x02
    1dfc:	5b 83       	std	Y+3, r21	; 0x03
    1dfe:	6c 83       	std	Y+4, r22	; 0x04
    1e00:	7d 83       	std	Y+5, r23	; 0x05
    1e02:	10 97       	sbiw	r26, 0x00	; 0
    1e04:	41 f0       	breq	.+16     	; 0x1e16 <placeTimer+0x94>
    1e06:	8d 91       	ld	r24, X+
    1e08:	9c 91       	ld	r25, X
    1e0a:	11 97       	sbiw	r26, 0x01	; 1
    1e0c:	99 83       	std	Y+1, r25	; 0x01
    1e0e:	88 83       	st	Y, r24
    1e10:	cd 93       	st	X+, r28
    1e12:	dc 93       	st	X, r29
    1e14:	15 c0       	rjmp	.+42     	; 0x1e40 <placeTimer+0xbe>
    1e16:	99 83       	std	Y+1, r25	; 0x01
    1e18:	88 83       	st	Y, r24
    1e1a:	d0 93 0a 08 	sts	0x080A, r29	; 0x80080a <timers+0x1>
    1e1e:	c0 93 09 08 	sts	0x0809, r28	; 0x800809 <timers>
    1e22:	0e c0       	rjmp	.+28     	; 0x1e40 <placeTimer+0xbe>
    1e24:	19 82       	std	Y+1, r1	; 0x01
    1e26:	18 82       	st	Y, r1
    1e28:	8e 81       	ldd	r24, Y+6	; 0x06
    1e2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e2c:	a8 85       	ldd	r26, Y+8	; 0x08
    1e2e:	b9 85       	ldd	r27, Y+9	; 0x09
    1e30:	8a 83       	std	Y+2, r24	; 0x02
    1e32:	9b 83       	std	Y+3, r25	; 0x03
    1e34:	ac 83       	std	Y+4, r26	; 0x04
    1e36:	bd 83       	std	Y+5, r27	; 0x05
    1e38:	d0 93 0a 08 	sts	0x080A, r29	; 0x80080a <timers+0x1>
    1e3c:	c0 93 09 08 	sts	0x0809, r28	; 0x800809 <timers>
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	08 95       	ret

00001e4a <SYS_HwExpiry_Cb>:
    1e4a:	80 91 3e 11 	lds	r24, 0x113E	; 0x80113e <SysTimerIrqCount>
    1e4e:	8f 5f       	subi	r24, 0xFF	; 255
    1e50:	80 93 3e 11 	sts	0x113E, r24	; 0x80113e <SysTimerIrqCount>
    1e54:	80 e1       	ldi	r24, 0x10	; 16
    1e56:	97 e2       	ldi	r25, 0x27	; 39
    1e58:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <common_tc_delay>
    1e5c:	08 95       	ret

00001e5e <SYS_TimerInit>:
    1e5e:	10 92 3e 11 	sts	0x113E, r1	; 0x80113e <SysTimerIrqCount>
    1e62:	85 e2       	ldi	r24, 0x25	; 37
    1e64:	9f e0       	ldi	r25, 0x0F	; 15
    1e66:	0e 94 c2 01 	call	0x384	; 0x384 <set_common_tc_expiry_callback>
    1e6a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <common_tc_init>
    1e6e:	80 e1       	ldi	r24, 0x10	; 16
    1e70:	97 e2       	ldi	r25, 0x27	; 39
    1e72:	0e 94 ff 00 	call	0x1fe	; 0x1fe <common_tc_delay>
    1e76:	10 92 0a 08 	sts	0x080A, r1	; 0x80080a <timers+0x1>
    1e7a:	10 92 09 08 	sts	0x0809, r1	; 0x800809 <timers>
    1e7e:	08 95       	ret

00001e80 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1e80:	e0 91 09 08 	lds	r30, 0x0809	; 0x800809 <timers>
    1e84:	f0 91 0a 08 	lds	r31, 0x080A	; 0x80080a <timers+0x1>
    1e88:	30 97       	sbiw	r30, 0x00	; 0
    1e8a:	71 f0       	breq	.+28     	; 0x1ea8 <SYS_TimerStarted+0x28>
		if (t == timer) {
    1e8c:	e8 17       	cp	r30, r24
    1e8e:	f9 07       	cpc	r31, r25
    1e90:	21 f4       	brne	.+8      	; 0x1e9a <SYS_TimerStarted+0x1a>
    1e92:	0c c0       	rjmp	.+24     	; 0x1eac <SYS_TimerStarted+0x2c>
    1e94:	8e 17       	cp	r24, r30
    1e96:	9f 07       	cpc	r25, r31
    1e98:	59 f0       	breq	.+22     	; 0x1eb0 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1e9a:	01 90       	ld	r0, Z+
    1e9c:	f0 81       	ld	r31, Z
    1e9e:	e0 2d       	mov	r30, r0
    1ea0:	30 97       	sbiw	r30, 0x00	; 0
    1ea2:	c1 f7       	brne	.-16     	; 0x1e94 <SYS_TimerStarted+0x14>
		if (t == timer) {
			return true;
		}
	}
	return false;
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	08 95       	ret
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	08 95       	ret
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return false;
}
    1eb2:	08 95       	ret

00001eb4 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	ec 01       	movw	r28, r24
	if (!SYS_TimerStarted(timer)) {
    1eba:	e2 df       	rcall	.-60     	; 0x1e80 <SYS_TimerStarted>
    1ebc:	81 11       	cpse	r24, r1
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <SYS_TimerStart+0x10>
		placeTimer(timer);
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	5f df       	rcall	.-322    	; 0x1d82 <placeTimer>
	}
}
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	08 95       	ret

00001eca <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1eca:	cf 92       	push	r12
    1ecc:	df 92       	push	r13
    1ece:	ef 92       	push	r14
    1ed0:	ff 92       	push	r15
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	1f 92       	push	r1
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    1ee0:	80 91 3e 11 	lds	r24, 0x113E	; 0x80113e <SysTimerIrqCount>
    1ee4:	88 23       	and	r24, r24
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <SYS_TimerTaskHandler+0x20>
    1ee8:	53 c0       	rjmp	.+166    	; 0x1f90 <SYS_TimerTaskHandler+0xc6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1eea:	8f b7       	in	r24, 0x3f	; 63
    1eec:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1eee:	f8 94       	cli
	return flags;
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    1ef2:	c0 90 3e 11 	lds	r12, 0x113E	; 0x80113e <SysTimerIrqCount>
	SysTimerIrqCount = 0;
    1ef6:	10 92 3e 11 	sts	0x113E, r1	; 0x80113e <SysTimerIrqCount>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1efa:	8f bf       	out	0x3f, r24	; 63
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    1efc:	d1 2c       	mov	r13, r1
    1efe:	e1 2c       	mov	r14, r1
    1f00:	f1 2c       	mov	r15, r1
    1f02:	cc 0c       	add	r12, r12
    1f04:	dd 1c       	adc	r13, r13
    1f06:	ee 1c       	adc	r14, r14
    1f08:	ff 1c       	adc	r15, r15
    1f0a:	d7 01       	movw	r26, r14
    1f0c:	c6 01       	movw	r24, r12
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	aa 1f       	adc	r26, r26
    1f14:	bb 1f       	adc	r27, r27
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	aa 1f       	adc	r26, r26
    1f1c:	bb 1f       	adc	r27, r27
    1f1e:	c8 0e       	add	r12, r24
    1f20:	d9 1e       	adc	r13, r25
    1f22:	ea 1e       	adc	r14, r26
    1f24:	fb 1e       	adc	r15, r27

	while (timers && (timers->timeout <= elapsed)) {
    1f26:	1b c0       	rjmp	.+54     	; 0x1f5e <SYS_TimerTaskHandler+0x94>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    1f28:	c8 1a       	sub	r12, r24
    1f2a:	d9 0a       	sbc	r13, r25
    1f2c:	ea 0a       	sbc	r14, r26
    1f2e:	fb 0a       	sbc	r15, r27
		timers = timers->next;
    1f30:	d8 01       	movw	r26, r16
    1f32:	8d 91       	ld	r24, X+
    1f34:	9c 91       	ld	r25, X
    1f36:	11 97       	sbiw	r26, 0x01	; 1
    1f38:	90 93 0a 08 	sts	0x080A, r25	; 0x80080a <timers+0x1>
    1f3c:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <timers>
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    1f40:	1a 96       	adiw	r26, 0x0a	; 10
    1f42:	8c 91       	ld	r24, X
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	11 f4       	brne	.+4      	; 0x1f4c <SYS_TimerTaskHandler+0x82>
			placeTimer(timer);
    1f48:	c8 01       	movw	r24, r16
    1f4a:	1b df       	rcall	.-458    	; 0x1d82 <placeTimer>
		}

		if (timer->handler) {
    1f4c:	d8 01       	movw	r26, r16
    1f4e:	1b 96       	adiw	r26, 0x0b	; 11
    1f50:	ed 91       	ld	r30, X+
    1f52:	fc 91       	ld	r31, X
    1f54:	1c 97       	sbiw	r26, 0x0c	; 12
    1f56:	30 97       	sbiw	r30, 0x00	; 0
    1f58:	11 f0       	breq	.+4      	; 0x1f5e <SYS_TimerTaskHandler+0x94>
			timer->handler(timer);
    1f5a:	c8 01       	movw	r24, r16
    1f5c:	19 95       	eicall
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    1f5e:	00 91 09 08 	lds	r16, 0x0809	; 0x800809 <timers>
    1f62:	10 91 0a 08 	lds	r17, 0x080A	; 0x80080a <timers+0x1>
    1f66:	01 15       	cp	r16, r1
    1f68:	11 05       	cpc	r17, r1
    1f6a:	91 f0       	breq	.+36     	; 0x1f90 <SYS_TimerTaskHandler+0xc6>
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	a4 81       	ldd	r26, Z+4	; 0x04
    1f74:	b5 81       	ldd	r27, Z+5	; 0x05
    1f76:	c8 16       	cp	r12, r24
    1f78:	d9 06       	cpc	r13, r25
    1f7a:	ea 06       	cpc	r14, r26
    1f7c:	fb 06       	cpc	r15, r27
    1f7e:	a0 f6       	brcc	.-88     	; 0x1f28 <SYS_TimerTaskHandler+0x5e>
			timer->handler(timer);
		}
	}

	if (timers) {
		timers->timeout -= elapsed;
    1f80:	8c 19       	sub	r24, r12
    1f82:	9d 09       	sbc	r25, r13
    1f84:	ae 09       	sbc	r26, r14
    1f86:	bf 09       	sbc	r27, r15
    1f88:	82 83       	std	Z+2, r24	; 0x02
    1f8a:	93 83       	std	Z+3, r25	; 0x03
    1f8c:	a4 83       	std	Z+4, r26	; 0x04
    1f8e:	b5 83       	std	Z+5, r27	; 0x05
	}
}
    1f90:	0f 90       	pop	r0
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	df 90       	pop	r13
    1fa0:	cf 90       	pop	r12
    1fa2:	08 95       	ret

00001fa4 <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
    1fa4:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <tmr_ovf_callback>
    1fa8:	08 95       	ret

00001faa <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
    1faa:	0c 94 b3 01 	jmp	0x366	; 0x366 <tmr_cca_callback>
    1fae:	08 95       	ret

00001fb0 <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
    1fb0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    1fb4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
    1fb8:	08 95       	ret

00001fba <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    1fba:	ef e6       	ldi	r30, 0x6F	; 111
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	8d 7f       	andi	r24, 0xFD	; 253
    1fc2:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
    1fc4:	b1 9a       	sbi	0x16, 1	; 22
    1fc6:	08 95       	ret

00001fc8 <tmr_enable_cc_interrupt>:
    1fc8:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
    1fca:	ef e6       	ldi	r30, 0x6F	; 111
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	82 60       	ori	r24, 0x02	; 2
    1fd2:	80 83       	st	Z, r24
    1fd4:	08 95       	ret

00001fd6 <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    1fd6:	ef e6       	ldi	r30, 0x6F	; 111
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	81 60       	ori	r24, 0x01	; 1
    1fde:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
    1fe0:	b0 9a       	sbi	0x16, 0	; 22
    1fe2:	08 95       	ret

00001fe4 <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
    1fe4:	80 e8       	ldi	r24, 0x80	; 128
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	82 c3       	rjmp	.+1796   	; 0x26ee <tc_disable>
    1fea:	08 95       	ret

00001fec <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
    1fec:	e9 e8       	ldi	r30, 0x89	; 137
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	20 81       	ld	r18, Z
    1ff2:	92 2b       	or	r25, r18
    1ff4:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
    1ff6:	e8 e8       	ldi	r30, 0x88	; 136
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	90 81       	ld	r25, Z
    1ffc:	89 2b       	or	r24, r25
    1ffe:	80 83       	st	Z, r24
    2000:	08 95       	ret

00002002 <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	1f 92       	push	r1
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    200c:	8f b7       	in	r24, 0x3f	; 63
    200e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2010:	f8 94       	cli
	return flags;
    2012:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
    2014:	0f 90       	pop	r0
    2016:	df 91       	pop	r29
    2018:	cf 91       	pop	r28
    201a:	08 95       	ret

0000201c <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    201c:	8f bf       	out	0x3f, r24	; 63
    201e:	08 95       	ret

00002020 <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
    2024:	80 e8       	ldi	r24, 0x80	; 128
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	eb d2       	rcall	.+1494   	; 0x2600 <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
    202a:	62 ed       	ldi	r22, 0xD2	; 210
    202c:	7f e0       	ldi	r23, 0x0F	; 15
    202e:	80 e8       	ldi	r24, 0x80	; 128
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	d4 d3       	rcall	.+1960   	; 0x27dc <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    2034:	cf e6       	ldi	r28, 0x6F	; 111
    2036:	d0 e0       	ldi	r29, 0x00	; 0
    2038:	88 81       	ld	r24, Y
    203a:	81 60       	ori	r24, 0x01	; 1
    203c:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
    203e:	65 ed       	ldi	r22, 0xD5	; 213
    2040:	7f e0       	ldi	r23, 0x0F	; 15
    2042:	80 e8       	ldi	r24, 0x80	; 128
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	ea d3       	rcall	.+2004   	; 0x281c <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    2048:	88 81       	ld	r24, Y
    204a:	8d 7f       	andi	r24, 0xFD	; 253
    204c:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
    204e:	e1 e8       	ldi	r30, 0x81	; 129
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	81 60       	ori	r24, 0x01	; 1
    2056:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
    2058:	80 e1       	ldi	r24, 0x10	; 16
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	08 95       	ret

00002060 <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
    2060:	1f 92       	push	r1
    2062:	0f 92       	push	r0
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	0f 92       	push	r0
    2068:	11 24       	eor	r1, r1
    206a:	0b b6       	in	r0, 0x3b	; 59
    206c:	0f 92       	push	r0
    206e:	2f 93       	push	r18
    2070:	3f 93       	push	r19
    2072:	4f 93       	push	r20
    2074:	5f 93       	push	r21
    2076:	6f 93       	push	r22
    2078:	7f 93       	push	r23
    207a:	8f 93       	push	r24
    207c:	9f 93       	push	r25
    207e:	af 93       	push	r26
    2080:	bf 93       	push	r27
    2082:	ef 93       	push	r30
    2084:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
    2086:	e0 91 29 08 	lds	r30, 0x0829	; 0x800829 <tc_tccr1_ovf_callback>
    208a:	f0 91 2a 08 	lds	r31, 0x082A	; 0x80082a <tc_tccr1_ovf_callback+0x1>
    208e:	30 97       	sbiw	r30, 0x00	; 0
    2090:	09 f0       	breq	.+2      	; 0x2094 <__vector_20+0x34>
		tc_tccr1_ovf_callback();
    2092:	19 95       	eicall
	}
}
    2094:	ff 91       	pop	r31
    2096:	ef 91       	pop	r30
    2098:	bf 91       	pop	r27
    209a:	af 91       	pop	r26
    209c:	9f 91       	pop	r25
    209e:	8f 91       	pop	r24
    20a0:	7f 91       	pop	r23
    20a2:	6f 91       	pop	r22
    20a4:	5f 91       	pop	r21
    20a6:	4f 91       	pop	r20
    20a8:	3f 91       	pop	r19
    20aa:	2f 91       	pop	r18
    20ac:	0f 90       	pop	r0
    20ae:	0b be       	out	0x3b, r0	; 59
    20b0:	0f 90       	pop	r0
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	0f 90       	pop	r0
    20b6:	1f 90       	pop	r1
    20b8:	18 95       	reti

000020ba <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
    20ba:	1f 92       	push	r1
    20bc:	0f 92       	push	r0
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	0f 92       	push	r0
    20c2:	11 24       	eor	r1, r1
    20c4:	0b b6       	in	r0, 0x3b	; 59
    20c6:	0f 92       	push	r0
    20c8:	2f 93       	push	r18
    20ca:	3f 93       	push	r19
    20cc:	4f 93       	push	r20
    20ce:	5f 93       	push	r21
    20d0:	6f 93       	push	r22
    20d2:	7f 93       	push	r23
    20d4:	8f 93       	push	r24
    20d6:	9f 93       	push	r25
    20d8:	af 93       	push	r26
    20da:	bf 93       	push	r27
    20dc:	ef 93       	push	r30
    20de:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
    20e0:	e0 91 27 08 	lds	r30, 0x0827	; 0x800827 <tc_tccr1_compa_callback>
    20e4:	f0 91 28 08 	lds	r31, 0x0828	; 0x800828 <tc_tccr1_compa_callback+0x1>
    20e8:	30 97       	sbiw	r30, 0x00	; 0
    20ea:	09 f0       	breq	.+2      	; 0x20ee <__vector_17+0x34>
		tc_tccr1_compa_callback();
    20ec:	19 95       	eicall
	}
}
    20ee:	ff 91       	pop	r31
    20f0:	ef 91       	pop	r30
    20f2:	bf 91       	pop	r27
    20f4:	af 91       	pop	r26
    20f6:	9f 91       	pop	r25
    20f8:	8f 91       	pop	r24
    20fa:	7f 91       	pop	r23
    20fc:	6f 91       	pop	r22
    20fe:	5f 91       	pop	r21
    2100:	4f 91       	pop	r20
    2102:	3f 91       	pop	r19
    2104:	2f 91       	pop	r18
    2106:	0f 90       	pop	r0
    2108:	0b be       	out	0x3b, r0	; 59
    210a:	0f 90       	pop	r0
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	0f 90       	pop	r0
    2110:	1f 90       	pop	r1
    2112:	18 95       	reti

00002114 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
    2114:	1f 92       	push	r1
    2116:	0f 92       	push	r0
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	0f 92       	push	r0
    211c:	11 24       	eor	r1, r1
    211e:	0b b6       	in	r0, 0x3b	; 59
    2120:	0f 92       	push	r0
    2122:	2f 93       	push	r18
    2124:	3f 93       	push	r19
    2126:	4f 93       	push	r20
    2128:	5f 93       	push	r21
    212a:	6f 93       	push	r22
    212c:	7f 93       	push	r23
    212e:	8f 93       	push	r24
    2130:	9f 93       	push	r25
    2132:	af 93       	push	r26
    2134:	bf 93       	push	r27
    2136:	ef 93       	push	r30
    2138:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
    213a:	e0 91 25 08 	lds	r30, 0x0825	; 0x800825 <tc_tccr1_compb_callback>
    213e:	f0 91 26 08 	lds	r31, 0x0826	; 0x800826 <tc_tccr1_compb_callback+0x1>
    2142:	30 97       	sbiw	r30, 0x00	; 0
    2144:	09 f0       	breq	.+2      	; 0x2148 <__vector_18+0x34>
		tc_tccr1_compb_callback();
    2146:	19 95       	eicall
	}
}
    2148:	ff 91       	pop	r31
    214a:	ef 91       	pop	r30
    214c:	bf 91       	pop	r27
    214e:	af 91       	pop	r26
    2150:	9f 91       	pop	r25
    2152:	8f 91       	pop	r24
    2154:	7f 91       	pop	r23
    2156:	6f 91       	pop	r22
    2158:	5f 91       	pop	r21
    215a:	4f 91       	pop	r20
    215c:	3f 91       	pop	r19
    215e:	2f 91       	pop	r18
    2160:	0f 90       	pop	r0
    2162:	0b be       	out	0x3b, r0	; 59
    2164:	0f 90       	pop	r0
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	0f 90       	pop	r0
    216a:	1f 90       	pop	r1
    216c:	18 95       	reti

0000216e <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
    216e:	1f 92       	push	r1
    2170:	0f 92       	push	r0
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	0f 92       	push	r0
    2176:	11 24       	eor	r1, r1
    2178:	0b b6       	in	r0, 0x3b	; 59
    217a:	0f 92       	push	r0
    217c:	2f 93       	push	r18
    217e:	3f 93       	push	r19
    2180:	4f 93       	push	r20
    2182:	5f 93       	push	r21
    2184:	6f 93       	push	r22
    2186:	7f 93       	push	r23
    2188:	8f 93       	push	r24
    218a:	9f 93       	push	r25
    218c:	af 93       	push	r26
    218e:	bf 93       	push	r27
    2190:	ef 93       	push	r30
    2192:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
    2194:	e0 91 23 08 	lds	r30, 0x0823	; 0x800823 <tc_tccr1_compc_callback>
    2198:	f0 91 24 08 	lds	r31, 0x0824	; 0x800824 <tc_tccr1_compc_callback+0x1>
    219c:	30 97       	sbiw	r30, 0x00	; 0
    219e:	09 f0       	breq	.+2      	; 0x21a2 <__vector_19+0x34>
		tc_tccr1_compc_callback();
    21a0:	19 95       	eicall
	}
}
    21a2:	ff 91       	pop	r31
    21a4:	ef 91       	pop	r30
    21a6:	bf 91       	pop	r27
    21a8:	af 91       	pop	r26
    21aa:	9f 91       	pop	r25
    21ac:	8f 91       	pop	r24
    21ae:	7f 91       	pop	r23
    21b0:	6f 91       	pop	r22
    21b2:	5f 91       	pop	r21
    21b4:	4f 91       	pop	r20
    21b6:	3f 91       	pop	r19
    21b8:	2f 91       	pop	r18
    21ba:	0f 90       	pop	r0
    21bc:	0b be       	out	0x3b, r0	; 59
    21be:	0f 90       	pop	r0
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	0f 90       	pop	r0
    21c4:	1f 90       	pop	r1
    21c6:	18 95       	reti

000021c8 <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
    21c8:	1f 92       	push	r1
    21ca:	0f 92       	push	r0
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	0f 92       	push	r0
    21d0:	11 24       	eor	r1, r1
    21d2:	0b b6       	in	r0, 0x3b	; 59
    21d4:	0f 92       	push	r0
    21d6:	2f 93       	push	r18
    21d8:	3f 93       	push	r19
    21da:	4f 93       	push	r20
    21dc:	5f 93       	push	r21
    21de:	6f 93       	push	r22
    21e0:	7f 93       	push	r23
    21e2:	8f 93       	push	r24
    21e4:	9f 93       	push	r25
    21e6:	af 93       	push	r26
    21e8:	bf 93       	push	r27
    21ea:	ef 93       	push	r30
    21ec:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
    21ee:	e0 91 21 08 	lds	r30, 0x0821	; 0x800821 <tc_tccr3_ovf_callback>
    21f2:	f0 91 22 08 	lds	r31, 0x0822	; 0x800822 <tc_tccr3_ovf_callback+0x1>
    21f6:	30 97       	sbiw	r30, 0x00	; 0
    21f8:	09 f0       	breq	.+2      	; 0x21fc <__vector_35+0x34>
		tc_tccr3_ovf_callback();
    21fa:	19 95       	eicall
	}
}
    21fc:	ff 91       	pop	r31
    21fe:	ef 91       	pop	r30
    2200:	bf 91       	pop	r27
    2202:	af 91       	pop	r26
    2204:	9f 91       	pop	r25
    2206:	8f 91       	pop	r24
    2208:	7f 91       	pop	r23
    220a:	6f 91       	pop	r22
    220c:	5f 91       	pop	r21
    220e:	4f 91       	pop	r20
    2210:	3f 91       	pop	r19
    2212:	2f 91       	pop	r18
    2214:	0f 90       	pop	r0
    2216:	0b be       	out	0x3b, r0	; 59
    2218:	0f 90       	pop	r0
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	0f 90       	pop	r0
    221e:	1f 90       	pop	r1
    2220:	18 95       	reti

00002222 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
    2222:	1f 92       	push	r1
    2224:	0f 92       	push	r0
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	0f 92       	push	r0
    222a:	11 24       	eor	r1, r1
    222c:	0b b6       	in	r0, 0x3b	; 59
    222e:	0f 92       	push	r0
    2230:	2f 93       	push	r18
    2232:	3f 93       	push	r19
    2234:	4f 93       	push	r20
    2236:	5f 93       	push	r21
    2238:	6f 93       	push	r22
    223a:	7f 93       	push	r23
    223c:	8f 93       	push	r24
    223e:	9f 93       	push	r25
    2240:	af 93       	push	r26
    2242:	bf 93       	push	r27
    2244:	ef 93       	push	r30
    2246:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
    2248:	e0 91 1f 08 	lds	r30, 0x081F	; 0x80081f <tc_tccr3_compa_callback>
    224c:	f0 91 20 08 	lds	r31, 0x0820	; 0x800820 <tc_tccr3_compa_callback+0x1>
    2250:	30 97       	sbiw	r30, 0x00	; 0
    2252:	09 f0       	breq	.+2      	; 0x2256 <__vector_32+0x34>
		tc_tccr3_compa_callback();
    2254:	19 95       	eicall
	}
}
    2256:	ff 91       	pop	r31
    2258:	ef 91       	pop	r30
    225a:	bf 91       	pop	r27
    225c:	af 91       	pop	r26
    225e:	9f 91       	pop	r25
    2260:	8f 91       	pop	r24
    2262:	7f 91       	pop	r23
    2264:	6f 91       	pop	r22
    2266:	5f 91       	pop	r21
    2268:	4f 91       	pop	r20
    226a:	3f 91       	pop	r19
    226c:	2f 91       	pop	r18
    226e:	0f 90       	pop	r0
    2270:	0b be       	out	0x3b, r0	; 59
    2272:	0f 90       	pop	r0
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	0f 90       	pop	r0
    2278:	1f 90       	pop	r1
    227a:	18 95       	reti

0000227c <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    227c:	1f 92       	push	r1
    227e:	0f 92       	push	r0
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	0f 92       	push	r0
    2284:	11 24       	eor	r1, r1
    2286:	0b b6       	in	r0, 0x3b	; 59
    2288:	0f 92       	push	r0
    228a:	2f 93       	push	r18
    228c:	3f 93       	push	r19
    228e:	4f 93       	push	r20
    2290:	5f 93       	push	r21
    2292:	6f 93       	push	r22
    2294:	7f 93       	push	r23
    2296:	8f 93       	push	r24
    2298:	9f 93       	push	r25
    229a:	af 93       	push	r26
    229c:	bf 93       	push	r27
    229e:	ef 93       	push	r30
    22a0:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
    22a2:	e0 91 1d 08 	lds	r30, 0x081D	; 0x80081d <tc_tccr3_compb_callback>
    22a6:	f0 91 1e 08 	lds	r31, 0x081E	; 0x80081e <tc_tccr3_compb_callback+0x1>
    22aa:	30 97       	sbiw	r30, 0x00	; 0
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <__vector_33+0x34>
		tc_tccr3_compb_callback();
    22ae:	19 95       	eicall
	}
}
    22b0:	ff 91       	pop	r31
    22b2:	ef 91       	pop	r30
    22b4:	bf 91       	pop	r27
    22b6:	af 91       	pop	r26
    22b8:	9f 91       	pop	r25
    22ba:	8f 91       	pop	r24
    22bc:	7f 91       	pop	r23
    22be:	6f 91       	pop	r22
    22c0:	5f 91       	pop	r21
    22c2:	4f 91       	pop	r20
    22c4:	3f 91       	pop	r19
    22c6:	2f 91       	pop	r18
    22c8:	0f 90       	pop	r0
    22ca:	0b be       	out	0x3b, r0	; 59
    22cc:	0f 90       	pop	r0
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	0f 90       	pop	r0
    22d2:	1f 90       	pop	r1
    22d4:	18 95       	reti

000022d6 <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
    22d6:	1f 92       	push	r1
    22d8:	0f 92       	push	r0
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	0f 92       	push	r0
    22de:	11 24       	eor	r1, r1
    22e0:	0b b6       	in	r0, 0x3b	; 59
    22e2:	0f 92       	push	r0
    22e4:	2f 93       	push	r18
    22e6:	3f 93       	push	r19
    22e8:	4f 93       	push	r20
    22ea:	5f 93       	push	r21
    22ec:	6f 93       	push	r22
    22ee:	7f 93       	push	r23
    22f0:	8f 93       	push	r24
    22f2:	9f 93       	push	r25
    22f4:	af 93       	push	r26
    22f6:	bf 93       	push	r27
    22f8:	ef 93       	push	r30
    22fa:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
    22fc:	e0 91 1b 08 	lds	r30, 0x081B	; 0x80081b <tc_tccr3_compc_callback>
    2300:	f0 91 1c 08 	lds	r31, 0x081C	; 0x80081c <tc_tccr3_compc_callback+0x1>
    2304:	30 97       	sbiw	r30, 0x00	; 0
    2306:	09 f0       	breq	.+2      	; 0x230a <__vector_34+0x34>
		tc_tccr3_compc_callback();
    2308:	19 95       	eicall
	}
}
    230a:	ff 91       	pop	r31
    230c:	ef 91       	pop	r30
    230e:	bf 91       	pop	r27
    2310:	af 91       	pop	r26
    2312:	9f 91       	pop	r25
    2314:	8f 91       	pop	r24
    2316:	7f 91       	pop	r23
    2318:	6f 91       	pop	r22
    231a:	5f 91       	pop	r21
    231c:	4f 91       	pop	r20
    231e:	3f 91       	pop	r19
    2320:	2f 91       	pop	r18
    2322:	0f 90       	pop	r0
    2324:	0b be       	out	0x3b, r0	; 59
    2326:	0f 90       	pop	r0
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	0f 90       	pop	r0
    232c:	1f 90       	pop	r1
    232e:	18 95       	reti

00002330 <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
    2330:	1f 92       	push	r1
    2332:	0f 92       	push	r0
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	0f 92       	push	r0
    2338:	11 24       	eor	r1, r1
    233a:	0b b6       	in	r0, 0x3b	; 59
    233c:	0f 92       	push	r0
    233e:	2f 93       	push	r18
    2340:	3f 93       	push	r19
    2342:	4f 93       	push	r20
    2344:	5f 93       	push	r21
    2346:	6f 93       	push	r22
    2348:	7f 93       	push	r23
    234a:	8f 93       	push	r24
    234c:	9f 93       	push	r25
    234e:	af 93       	push	r26
    2350:	bf 93       	push	r27
    2352:	ef 93       	push	r30
    2354:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
    2356:	e0 91 19 08 	lds	r30, 0x0819	; 0x800819 <tc_tccr4_ovf_callback>
    235a:	f0 91 1a 08 	lds	r31, 0x081A	; 0x80081a <tc_tccr4_ovf_callback+0x1>
    235e:	30 97       	sbiw	r30, 0x00	; 0
    2360:	09 f0       	breq	.+2      	; 0x2364 <__vector_45+0x34>
		tc_tccr4_ovf_callback();
    2362:	19 95       	eicall
	}
}
    2364:	ff 91       	pop	r31
    2366:	ef 91       	pop	r30
    2368:	bf 91       	pop	r27
    236a:	af 91       	pop	r26
    236c:	9f 91       	pop	r25
    236e:	8f 91       	pop	r24
    2370:	7f 91       	pop	r23
    2372:	6f 91       	pop	r22
    2374:	5f 91       	pop	r21
    2376:	4f 91       	pop	r20
    2378:	3f 91       	pop	r19
    237a:	2f 91       	pop	r18
    237c:	0f 90       	pop	r0
    237e:	0b be       	out	0x3b, r0	; 59
    2380:	0f 90       	pop	r0
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	0f 90       	pop	r0
    2386:	1f 90       	pop	r1
    2388:	18 95       	reti

0000238a <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    238a:	1f 92       	push	r1
    238c:	0f 92       	push	r0
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	0f 92       	push	r0
    2392:	11 24       	eor	r1, r1
    2394:	0b b6       	in	r0, 0x3b	; 59
    2396:	0f 92       	push	r0
    2398:	2f 93       	push	r18
    239a:	3f 93       	push	r19
    239c:	4f 93       	push	r20
    239e:	5f 93       	push	r21
    23a0:	6f 93       	push	r22
    23a2:	7f 93       	push	r23
    23a4:	8f 93       	push	r24
    23a6:	9f 93       	push	r25
    23a8:	af 93       	push	r26
    23aa:	bf 93       	push	r27
    23ac:	ef 93       	push	r30
    23ae:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
    23b0:	e0 91 17 08 	lds	r30, 0x0817	; 0x800817 <tc_tccr4_compa_callback>
    23b4:	f0 91 18 08 	lds	r31, 0x0818	; 0x800818 <tc_tccr4_compa_callback+0x1>
    23b8:	30 97       	sbiw	r30, 0x00	; 0
    23ba:	09 f0       	breq	.+2      	; 0x23be <__vector_42+0x34>
		tc_tccr4_compa_callback();
    23bc:	19 95       	eicall
	}
}
    23be:	ff 91       	pop	r31
    23c0:	ef 91       	pop	r30
    23c2:	bf 91       	pop	r27
    23c4:	af 91       	pop	r26
    23c6:	9f 91       	pop	r25
    23c8:	8f 91       	pop	r24
    23ca:	7f 91       	pop	r23
    23cc:	6f 91       	pop	r22
    23ce:	5f 91       	pop	r21
    23d0:	4f 91       	pop	r20
    23d2:	3f 91       	pop	r19
    23d4:	2f 91       	pop	r18
    23d6:	0f 90       	pop	r0
    23d8:	0b be       	out	0x3b, r0	; 59
    23da:	0f 90       	pop	r0
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	0f 90       	pop	r0
    23e0:	1f 90       	pop	r1
    23e2:	18 95       	reti

000023e4 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
    23e4:	1f 92       	push	r1
    23e6:	0f 92       	push	r0
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	0f 92       	push	r0
    23ec:	11 24       	eor	r1, r1
    23ee:	0b b6       	in	r0, 0x3b	; 59
    23f0:	0f 92       	push	r0
    23f2:	2f 93       	push	r18
    23f4:	3f 93       	push	r19
    23f6:	4f 93       	push	r20
    23f8:	5f 93       	push	r21
    23fa:	6f 93       	push	r22
    23fc:	7f 93       	push	r23
    23fe:	8f 93       	push	r24
    2400:	9f 93       	push	r25
    2402:	af 93       	push	r26
    2404:	bf 93       	push	r27
    2406:	ef 93       	push	r30
    2408:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
    240a:	e0 91 15 08 	lds	r30, 0x0815	; 0x800815 <tc_tccr4_compb_callback>
    240e:	f0 91 16 08 	lds	r31, 0x0816	; 0x800816 <tc_tccr4_compb_callback+0x1>
    2412:	30 97       	sbiw	r30, 0x00	; 0
    2414:	09 f0       	breq	.+2      	; 0x2418 <__vector_43+0x34>
		tc_tccr4_compb_callback();
    2416:	19 95       	eicall
	}
}
    2418:	ff 91       	pop	r31
    241a:	ef 91       	pop	r30
    241c:	bf 91       	pop	r27
    241e:	af 91       	pop	r26
    2420:	9f 91       	pop	r25
    2422:	8f 91       	pop	r24
    2424:	7f 91       	pop	r23
    2426:	6f 91       	pop	r22
    2428:	5f 91       	pop	r21
    242a:	4f 91       	pop	r20
    242c:	3f 91       	pop	r19
    242e:	2f 91       	pop	r18
    2430:	0f 90       	pop	r0
    2432:	0b be       	out	0x3b, r0	; 59
    2434:	0f 90       	pop	r0
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	0f 90       	pop	r0
    243a:	1f 90       	pop	r1
    243c:	18 95       	reti

0000243e <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
    243e:	1f 92       	push	r1
    2440:	0f 92       	push	r0
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	0f 92       	push	r0
    2446:	11 24       	eor	r1, r1
    2448:	0b b6       	in	r0, 0x3b	; 59
    244a:	0f 92       	push	r0
    244c:	2f 93       	push	r18
    244e:	3f 93       	push	r19
    2450:	4f 93       	push	r20
    2452:	5f 93       	push	r21
    2454:	6f 93       	push	r22
    2456:	7f 93       	push	r23
    2458:	8f 93       	push	r24
    245a:	9f 93       	push	r25
    245c:	af 93       	push	r26
    245e:	bf 93       	push	r27
    2460:	ef 93       	push	r30
    2462:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
    2464:	e0 91 13 08 	lds	r30, 0x0813	; 0x800813 <tc_tccr4_compc_callback>
    2468:	f0 91 14 08 	lds	r31, 0x0814	; 0x800814 <tc_tccr4_compc_callback+0x1>
    246c:	30 97       	sbiw	r30, 0x00	; 0
    246e:	09 f0       	breq	.+2      	; 0x2472 <__vector_44+0x34>
		tc_tccr4_compc_callback();
    2470:	19 95       	eicall
	}
}
    2472:	ff 91       	pop	r31
    2474:	ef 91       	pop	r30
    2476:	bf 91       	pop	r27
    2478:	af 91       	pop	r26
    247a:	9f 91       	pop	r25
    247c:	8f 91       	pop	r24
    247e:	7f 91       	pop	r23
    2480:	6f 91       	pop	r22
    2482:	5f 91       	pop	r21
    2484:	4f 91       	pop	r20
    2486:	3f 91       	pop	r19
    2488:	2f 91       	pop	r18
    248a:	0f 90       	pop	r0
    248c:	0b be       	out	0x3b, r0	; 59
    248e:	0f 90       	pop	r0
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	0f 90       	pop	r0
    2494:	1f 90       	pop	r1
    2496:	18 95       	reti

00002498 <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
    2498:	1f 92       	push	r1
    249a:	0f 92       	push	r0
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	0f 92       	push	r0
    24a0:	11 24       	eor	r1, r1
    24a2:	0b b6       	in	r0, 0x3b	; 59
    24a4:	0f 92       	push	r0
    24a6:	2f 93       	push	r18
    24a8:	3f 93       	push	r19
    24aa:	4f 93       	push	r20
    24ac:	5f 93       	push	r21
    24ae:	6f 93       	push	r22
    24b0:	7f 93       	push	r23
    24b2:	8f 93       	push	r24
    24b4:	9f 93       	push	r25
    24b6:	af 93       	push	r26
    24b8:	bf 93       	push	r27
    24ba:	ef 93       	push	r30
    24bc:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
    24be:	e0 91 11 08 	lds	r30, 0x0811	; 0x800811 <tc_tccr5_ovf_callback>
    24c2:	f0 91 12 08 	lds	r31, 0x0812	; 0x800812 <tc_tccr5_ovf_callback+0x1>
    24c6:	30 97       	sbiw	r30, 0x00	; 0
    24c8:	09 f0       	breq	.+2      	; 0x24cc <__vector_50+0x34>
		tc_tccr5_ovf_callback();
    24ca:	19 95       	eicall
	}
}
    24cc:	ff 91       	pop	r31
    24ce:	ef 91       	pop	r30
    24d0:	bf 91       	pop	r27
    24d2:	af 91       	pop	r26
    24d4:	9f 91       	pop	r25
    24d6:	8f 91       	pop	r24
    24d8:	7f 91       	pop	r23
    24da:	6f 91       	pop	r22
    24dc:	5f 91       	pop	r21
    24de:	4f 91       	pop	r20
    24e0:	3f 91       	pop	r19
    24e2:	2f 91       	pop	r18
    24e4:	0f 90       	pop	r0
    24e6:	0b be       	out	0x3b, r0	; 59
    24e8:	0f 90       	pop	r0
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	0f 90       	pop	r0
    24ee:	1f 90       	pop	r1
    24f0:	18 95       	reti

000024f2 <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
    24f2:	1f 92       	push	r1
    24f4:	0f 92       	push	r0
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	0f 92       	push	r0
    24fa:	11 24       	eor	r1, r1
    24fc:	0b b6       	in	r0, 0x3b	; 59
    24fe:	0f 92       	push	r0
    2500:	2f 93       	push	r18
    2502:	3f 93       	push	r19
    2504:	4f 93       	push	r20
    2506:	5f 93       	push	r21
    2508:	6f 93       	push	r22
    250a:	7f 93       	push	r23
    250c:	8f 93       	push	r24
    250e:	9f 93       	push	r25
    2510:	af 93       	push	r26
    2512:	bf 93       	push	r27
    2514:	ef 93       	push	r30
    2516:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
    2518:	e0 91 0f 08 	lds	r30, 0x080F	; 0x80080f <tc_tccr5_compa_callback>
    251c:	f0 91 10 08 	lds	r31, 0x0810	; 0x800810 <tc_tccr5_compa_callback+0x1>
    2520:	30 97       	sbiw	r30, 0x00	; 0
    2522:	09 f0       	breq	.+2      	; 0x2526 <__vector_47+0x34>
		tc_tccr5_compa_callback();
    2524:	19 95       	eicall
	}
}
    2526:	ff 91       	pop	r31
    2528:	ef 91       	pop	r30
    252a:	bf 91       	pop	r27
    252c:	af 91       	pop	r26
    252e:	9f 91       	pop	r25
    2530:	8f 91       	pop	r24
    2532:	7f 91       	pop	r23
    2534:	6f 91       	pop	r22
    2536:	5f 91       	pop	r21
    2538:	4f 91       	pop	r20
    253a:	3f 91       	pop	r19
    253c:	2f 91       	pop	r18
    253e:	0f 90       	pop	r0
    2540:	0b be       	out	0x3b, r0	; 59
    2542:	0f 90       	pop	r0
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	0f 90       	pop	r0
    2548:	1f 90       	pop	r1
    254a:	18 95       	reti

0000254c <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
    254c:	1f 92       	push	r1
    254e:	0f 92       	push	r0
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	0f 92       	push	r0
    2554:	11 24       	eor	r1, r1
    2556:	0b b6       	in	r0, 0x3b	; 59
    2558:	0f 92       	push	r0
    255a:	2f 93       	push	r18
    255c:	3f 93       	push	r19
    255e:	4f 93       	push	r20
    2560:	5f 93       	push	r21
    2562:	6f 93       	push	r22
    2564:	7f 93       	push	r23
    2566:	8f 93       	push	r24
    2568:	9f 93       	push	r25
    256a:	af 93       	push	r26
    256c:	bf 93       	push	r27
    256e:	ef 93       	push	r30
    2570:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
    2572:	e0 91 0d 08 	lds	r30, 0x080D	; 0x80080d <tc_tccr5_compb_callback>
    2576:	f0 91 0e 08 	lds	r31, 0x080E	; 0x80080e <tc_tccr5_compb_callback+0x1>
    257a:	30 97       	sbiw	r30, 0x00	; 0
    257c:	09 f0       	breq	.+2      	; 0x2580 <__vector_48+0x34>
		tc_tccr5_compb_callback();
    257e:	19 95       	eicall
	}
}
    2580:	ff 91       	pop	r31
    2582:	ef 91       	pop	r30
    2584:	bf 91       	pop	r27
    2586:	af 91       	pop	r26
    2588:	9f 91       	pop	r25
    258a:	8f 91       	pop	r24
    258c:	7f 91       	pop	r23
    258e:	6f 91       	pop	r22
    2590:	5f 91       	pop	r21
    2592:	4f 91       	pop	r20
    2594:	3f 91       	pop	r19
    2596:	2f 91       	pop	r18
    2598:	0f 90       	pop	r0
    259a:	0b be       	out	0x3b, r0	; 59
    259c:	0f 90       	pop	r0
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	0f 90       	pop	r0
    25a2:	1f 90       	pop	r1
    25a4:	18 95       	reti

000025a6 <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
    25a6:	1f 92       	push	r1
    25a8:	0f 92       	push	r0
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	0f 92       	push	r0
    25ae:	11 24       	eor	r1, r1
    25b0:	0b b6       	in	r0, 0x3b	; 59
    25b2:	0f 92       	push	r0
    25b4:	2f 93       	push	r18
    25b6:	3f 93       	push	r19
    25b8:	4f 93       	push	r20
    25ba:	5f 93       	push	r21
    25bc:	6f 93       	push	r22
    25be:	7f 93       	push	r23
    25c0:	8f 93       	push	r24
    25c2:	9f 93       	push	r25
    25c4:	af 93       	push	r26
    25c6:	bf 93       	push	r27
    25c8:	ef 93       	push	r30
    25ca:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
    25cc:	e0 91 0b 08 	lds	r30, 0x080B	; 0x80080b <tc_tccr5_compc_callback>
    25d0:	f0 91 0c 08 	lds	r31, 0x080C	; 0x80080c <tc_tccr5_compc_callback+0x1>
    25d4:	30 97       	sbiw	r30, 0x00	; 0
    25d6:	09 f0       	breq	.+2      	; 0x25da <__vector_49+0x34>
		tc_tccr5_compc_callback();
    25d8:	19 95       	eicall
	}
}
    25da:	ff 91       	pop	r31
    25dc:	ef 91       	pop	r30
    25de:	bf 91       	pop	r27
    25e0:	af 91       	pop	r26
    25e2:	9f 91       	pop	r25
    25e4:	8f 91       	pop	r24
    25e6:	7f 91       	pop	r23
    25e8:	6f 91       	pop	r22
    25ea:	5f 91       	pop	r21
    25ec:	4f 91       	pop	r20
    25ee:	3f 91       	pop	r19
    25f0:	2f 91       	pop	r18
    25f2:	0f 90       	pop	r0
    25f4:	0b be       	out	0x3b, r0	; 59
    25f6:	0f 90       	pop	r0
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	0f 90       	pop	r0
    25fc:	1f 90       	pop	r1
    25fe:	18 95       	reti

00002600 <tc_enable>:

void tc_enable(volatile void *tc)
{
    2600:	1f 93       	push	r17
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	1f 92       	push	r1
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    260c:	2f b7       	in	r18, 0x3f	; 63
    260e:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2610:	f8 94       	cli
	return flags;
    2612:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	09 f4       	brne	.+2      	; 0x261a <tc_enable+0x1a>
    2618:	64 c0       	rjmp	.+200    	; 0x26e2 <tc_enable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    261a:	88 37       	cpi	r24, 0x78	; 120
    261c:	91 05       	cpc	r25, r1
    261e:	49 f4       	brne	.+18     	; 0x2632 <tc_enable+0x32>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    2620:	61 e0       	ldi	r22, 0x01	; 1
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    2628:	60 e1       	ldi	r22, 0x10	; 16
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sysclk_enable_module>
    2630:	58 c0       	rjmp	.+176    	; 0x26e2 <tc_enable+0xe2>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2632:	80 3c       	cpi	r24, 0xC0	; 192
    2634:	91 05       	cpc	r25, r1
    2636:	29 f4       	brne	.+10     	; 0x2642 <tc_enable+0x42>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    2638:	62 e0       	ldi	r22, 0x02	; 2
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sysclk_enable_module>
    2640:	50 c0       	rjmp	.+160    	; 0x26e2 <tc_enable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2642:	8c 34       	cpi	r24, 0x4C	; 76
    2644:	91 05       	cpc	r25, r1
    2646:	29 f4       	brne	.+10     	; 0x2652 <tc_enable+0x52>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    2648:	64 e0       	ldi	r22, 0x04	; 4
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sysclk_enable_module>
    2650:	48 c0       	rjmp	.+144    	; 0x26e2 <tc_enable+0xe2>
	}
#endif

	else if (module == &TCCR1A) {
    2652:	80 38       	cpi	r24, 0x80	; 128
    2654:	91 05       	cpc	r25, r1
    2656:	29 f4       	brne	.+10     	; 0x2662 <tc_enable+0x62>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    2658:	68 e0       	ldi	r22, 0x08	; 8
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sysclk_enable_module>
    2660:	40 c0       	rjmp	.+128    	; 0x26e2 <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    2662:	84 34       	cpi	r24, 0x44	; 68
    2664:	91 05       	cpc	r25, r1
    2666:	29 f4       	brne	.+10     	; 0x2672 <tc_enable+0x72>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    2668:	60 e2       	ldi	r22, 0x20	; 32
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sysclk_enable_module>
    2670:	38 c0       	rjmp	.+112    	; 0x26e2 <tc_enable+0xe2>
	} else if (module == &TCCR2A) {
    2672:	80 3b       	cpi	r24, 0xB0	; 176
    2674:	91 05       	cpc	r25, r1
    2676:	29 f4       	brne	.+10     	; 0x2682 <tc_enable+0x82>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    2678:	60 e4       	ldi	r22, 0x40	; 64
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sysclk_enable_module>
    2680:	30 c0       	rjmp	.+96     	; 0x26e2 <tc_enable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    2682:	88 3b       	cpi	r24, 0xB8	; 184
    2684:	91 05       	cpc	r25, r1
    2686:	29 f4       	brne	.+10     	; 0x2692 <tc_enable+0x92>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    2688:	60 e8       	ldi	r22, 0x80	; 128
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sysclk_enable_module>
    2690:	28 c0       	rjmp	.+80     	; 0x26e2 <tc_enable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    2692:	88 3c       	cpi	r24, 0xC8	; 200
    2694:	91 05       	cpc	r25, r1
    2696:	29 f4       	brne	.+10     	; 0x26a2 <tc_enable+0xa2>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    2698:	61 e0       	ldi	r22, 0x01	; 1
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sysclk_enable_module>
    26a0:	20 c0       	rjmp	.+64     	; 0x26e2 <tc_enable+0xe2>
	} else if (module == &TCCR3A) {
    26a2:	80 39       	cpi	r24, 0x90	; 144
    26a4:	91 05       	cpc	r25, r1
    26a6:	29 f4       	brne	.+10     	; 0x26b2 <tc_enable+0xb2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    26a8:	68 e0       	ldi	r22, 0x08	; 8
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sysclk_enable_module>
    26b0:	18 c0       	rjmp	.+48     	; 0x26e2 <tc_enable+0xe2>
	} else if (module == &TCCR4A) {
    26b2:	80 3a       	cpi	r24, 0xA0	; 160
    26b4:	91 05       	cpc	r25, r1
    26b6:	29 f4       	brne	.+10     	; 0x26c2 <tc_enable+0xc2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    26b8:	60 e1       	ldi	r22, 0x10	; 16
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sysclk_enable_module>
    26c0:	10 c0       	rjmp	.+32     	; 0x26e2 <tc_enable+0xe2>
	} else if (module == &TCCR5A) {
    26c2:	80 32       	cpi	r24, 0x20	; 32
    26c4:	21 e0       	ldi	r18, 0x01	; 1
    26c6:	92 07       	cpc	r25, r18
    26c8:	29 f4       	brne	.+10     	; 0x26d4 <tc_enable+0xd4>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    26ca:	60 e2       	ldi	r22, 0x20	; 32
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sysclk_enable_module>
    26d2:	07 c0       	rjmp	.+14     	; 0x26e2 <tc_enable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    26d4:	83 34       	cpi	r24, 0x43	; 67
    26d6:	91 40       	sbci	r25, 0x01	; 1
    26d8:	21 f4       	brne	.+8      	; 0x26e2 <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    26da:	60 e4       	ldi	r22, 0x40	; 64
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    26e2:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    26e4:	0f 90       	pop	r0
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	1f 91       	pop	r17
    26ec:	08 95       	ret

000026ee <tc_disable>:

void tc_disable(volatile void *tc)
{
    26ee:	1f 93       	push	r17
    26f0:	cf 93       	push	r28
    26f2:	df 93       	push	r29
    26f4:	1f 92       	push	r1
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    26fa:	2f b7       	in	r18, 0x3f	; 63
    26fc:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    26fe:	f8 94       	cli
	return flags;
    2700:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2702:	00 97       	sbiw	r24, 0x00	; 0
    2704:	09 f4       	brne	.+2      	; 0x2708 <tc_disable+0x1a>
    2706:	64 c0       	rjmp	.+200    	; 0x27d0 <tc_disable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    2708:	88 37       	cpi	r24, 0x78	; 120
    270a:	91 05       	cpc	r25, r1
    270c:	49 f4       	brne	.+18     	; 0x2720 <tc_disable+0x32>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    270e:	61 e0       	ldi	r22, 0x01	; 1
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	0e 94 10 02 	call	0x420	; 0x420 <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    2716:	60 e1       	ldi	r22, 0x10	; 16
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	0e 94 10 02 	call	0x420	; 0x420 <sysclk_disable_module>
    271e:	58 c0       	rjmp	.+176    	; 0x27d0 <tc_disable+0xe2>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2720:	80 3c       	cpi	r24, 0xC0	; 192
    2722:	91 05       	cpc	r25, r1
    2724:	29 f4       	brne	.+10     	; 0x2730 <tc_disable+0x42>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    2726:	62 e0       	ldi	r22, 0x02	; 2
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	0e 94 10 02 	call	0x420	; 0x420 <sysclk_disable_module>
    272e:	50 c0       	rjmp	.+160    	; 0x27d0 <tc_disable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2730:	8c 34       	cpi	r24, 0x4C	; 76
    2732:	91 05       	cpc	r25, r1
    2734:	29 f4       	brne	.+10     	; 0x2740 <tc_disable+0x52>
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    2736:	64 e0       	ldi	r22, 0x04	; 4
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	0e 94 10 02 	call	0x420	; 0x420 <sysclk_disable_module>
    273e:	48 c0       	rjmp	.+144    	; 0x27d0 <tc_disable+0xe2>
	}
#endif
	else if (module == &TCCR1A) {
    2740:	80 38       	cpi	r24, 0x80	; 128
    2742:	91 05       	cpc	r25, r1
    2744:	29 f4       	brne	.+10     	; 0x2750 <tc_disable+0x62>
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    2746:	68 e0       	ldi	r22, 0x08	; 8
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	0e 94 10 02 	call	0x420	; 0x420 <sysclk_disable_module>
    274e:	40 c0       	rjmp	.+128    	; 0x27d0 <tc_disable+0xe2>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    2750:	84 34       	cpi	r24, 0x44	; 68
    2752:	91 05       	cpc	r25, r1
    2754:	29 f4       	brne	.+10     	; 0x2760 <tc_disable+0x72>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    2756:	60 e2       	ldi	r22, 0x20	; 32
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	0e 94 10 02 	call	0x420	; 0x420 <sysclk_disable_module>
    275e:	38 c0       	rjmp	.+112    	; 0x27d0 <tc_disable+0xe2>
	} else if (module == &TCCR2A) {
    2760:	80 3b       	cpi	r24, 0xB0	; 176
    2762:	91 05       	cpc	r25, r1
    2764:	29 f4       	brne	.+10     	; 0x2770 <tc_disable+0x82>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    2766:	60 e4       	ldi	r22, 0x40	; 64
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	0e 94 10 02 	call	0x420	; 0x420 <sysclk_disable_module>
    276e:	30 c0       	rjmp	.+96     	; 0x27d0 <tc_disable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    2770:	88 3b       	cpi	r24, 0xB8	; 184
    2772:	91 05       	cpc	r25, r1
    2774:	29 f4       	brne	.+10     	; 0x2780 <tc_disable+0x92>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    2776:	60 e8       	ldi	r22, 0x80	; 128
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	0e 94 10 02 	call	0x420	; 0x420 <sysclk_disable_module>
    277e:	28 c0       	rjmp	.+80     	; 0x27d0 <tc_disable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    2780:	88 3c       	cpi	r24, 0xC8	; 200
    2782:	91 05       	cpc	r25, r1
    2784:	29 f4       	brne	.+10     	; 0x2790 <tc_disable+0xa2>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    2786:	61 e0       	ldi	r22, 0x01	; 1
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	0e 94 10 02 	call	0x420	; 0x420 <sysclk_disable_module>
    278e:	20 c0       	rjmp	.+64     	; 0x27d0 <tc_disable+0xe2>
	} else if (module == &TCCR3A) {
    2790:	80 39       	cpi	r24, 0x90	; 144
    2792:	91 05       	cpc	r25, r1
    2794:	29 f4       	brne	.+10     	; 0x27a0 <tc_disable+0xb2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    2796:	68 e0       	ldi	r22, 0x08	; 8
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	0e 94 10 02 	call	0x420	; 0x420 <sysclk_disable_module>
    279e:	18 c0       	rjmp	.+48     	; 0x27d0 <tc_disable+0xe2>
	} else if (module == &TCCR4A) {
    27a0:	80 3a       	cpi	r24, 0xA0	; 160
    27a2:	91 05       	cpc	r25, r1
    27a4:	29 f4       	brne	.+10     	; 0x27b0 <tc_disable+0xc2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    27a6:	60 e1       	ldi	r22, 0x10	; 16
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	0e 94 10 02 	call	0x420	; 0x420 <sysclk_disable_module>
    27ae:	10 c0       	rjmp	.+32     	; 0x27d0 <tc_disable+0xe2>
	} else if (module == &TCCR5A) {
    27b0:	80 32       	cpi	r24, 0x20	; 32
    27b2:	21 e0       	ldi	r18, 0x01	; 1
    27b4:	92 07       	cpc	r25, r18
    27b6:	29 f4       	brne	.+10     	; 0x27c2 <tc_disable+0xd4>
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    27b8:	60 e2       	ldi	r22, 0x20	; 32
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	0e 94 10 02 	call	0x420	; 0x420 <sysclk_disable_module>
    27c0:	07 c0       	rjmp	.+14     	; 0x27d0 <tc_disable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    27c2:	83 34       	cpi	r24, 0x43	; 67
    27c4:	91 40       	sbci	r25, 0x01	; 1
    27c6:	21 f4       	brne	.+8      	; 0x27d0 <tc_disable+0xe2>
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    27c8:	60 e4       	ldi	r22, 0x40	; 64
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	0e 94 10 02 	call	0x420	; 0x420 <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    27d0:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    27d2:	0f 90       	pop	r0
    27d4:	df 91       	pop	r29
    27d6:	cf 91       	pop	r28
    27d8:	1f 91       	pop	r17
    27da:	08 95       	ret

000027dc <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    27dc:	80 38       	cpi	r24, 0x80	; 128
    27de:	91 05       	cpc	r25, r1
    27e0:	29 f4       	brne	.+10     	; 0x27ec <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
    27e2:	70 93 2a 08 	sts	0x082A, r23	; 0x80082a <tc_tccr1_ovf_callback+0x1>
    27e6:	60 93 29 08 	sts	0x0829, r22	; 0x800829 <tc_tccr1_ovf_callback>
    27ea:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    27ec:	80 39       	cpi	r24, 0x90	; 144
    27ee:	91 05       	cpc	r25, r1
    27f0:	29 f4       	brne	.+10     	; 0x27fc <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
    27f2:	70 93 22 08 	sts	0x0822, r23	; 0x800822 <tc_tccr3_ovf_callback+0x1>
    27f6:	60 93 21 08 	sts	0x0821, r22	; 0x800821 <tc_tccr3_ovf_callback>
    27fa:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    27fc:	80 3a       	cpi	r24, 0xA0	; 160
    27fe:	91 05       	cpc	r25, r1
    2800:	29 f4       	brne	.+10     	; 0x280c <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
    2802:	70 93 1a 08 	sts	0x081A, r23	; 0x80081a <tc_tccr4_ovf_callback+0x1>
    2806:	60 93 19 08 	sts	0x0819, r22	; 0x800819 <tc_tccr4_ovf_callback>
    280a:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    280c:	80 32       	cpi	r24, 0x20	; 32
    280e:	91 40       	sbci	r25, 0x01	; 1
    2810:	21 f4       	brne	.+8      	; 0x281a <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
    2812:	70 93 12 08 	sts	0x0812, r23	; 0x800812 <tc_tccr5_ovf_callback+0x1>
    2816:	60 93 11 08 	sts	0x0811, r22	; 0x800811 <tc_tccr5_ovf_callback>
    281a:	08 95       	ret

0000281c <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    281c:	80 38       	cpi	r24, 0x80	; 128
    281e:	91 05       	cpc	r25, r1
    2820:	29 f4       	brne	.+10     	; 0x282c <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
    2822:	70 93 28 08 	sts	0x0828, r23	; 0x800828 <tc_tccr1_compa_callback+0x1>
    2826:	60 93 27 08 	sts	0x0827, r22	; 0x800827 <tc_tccr1_compa_callback>
    282a:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    282c:	80 39       	cpi	r24, 0x90	; 144
    282e:	91 05       	cpc	r25, r1
    2830:	29 f4       	brne	.+10     	; 0x283c <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
    2832:	70 93 20 08 	sts	0x0820, r23	; 0x800820 <tc_tccr3_compa_callback+0x1>
    2836:	60 93 1f 08 	sts	0x081F, r22	; 0x80081f <tc_tccr3_compa_callback>
    283a:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    283c:	80 3a       	cpi	r24, 0xA0	; 160
    283e:	91 05       	cpc	r25, r1
    2840:	29 f4       	brne	.+10     	; 0x284c <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
    2842:	70 93 18 08 	sts	0x0818, r23	; 0x800818 <tc_tccr4_compa_callback+0x1>
    2846:	60 93 17 08 	sts	0x0817, r22	; 0x800817 <tc_tccr4_compa_callback>
    284a:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    284c:	80 32       	cpi	r24, 0x20	; 32
    284e:	91 40       	sbci	r25, 0x01	; 1
    2850:	21 f4       	brne	.+8      	; 0x285a <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
    2852:	70 93 10 08 	sts	0x0810, r23	; 0x800810 <tc_tccr5_compa_callback+0x1>
    2856:	60 93 0f 08 	sts	0x080F, r22	; 0x80080f <tc_tccr5_compa_callback>
    285a:	08 95       	ret

0000285c <sal_init>:

/**
 * @brief Cleans up the SAL/AES after STB has been finished
 */
void _sal_aes_clean_up(void)
{
    285c:	08 95       	ret

0000285e <sal_aes_exec>:
 * The function returns after the AES operation is finished.
 *
 * @param[in]  data  AES block to be en/decrypted
 */
void sal_aes_exec(uint8_t *data)
{
    285e:	fc 01       	movw	r30, r24
    2860:	9c 01       	movw	r18, r24
    2862:	20 5f       	subi	r18, 0xF0	; 240
    2864:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
		trx_reg_write(RG_AES_STATE, *data++);
    2866:	ae e3       	ldi	r26, 0x3E	; 62
    2868:	b1 e0       	ldi	r27, 0x01	; 1
    286a:	81 91       	ld	r24, Z+
    286c:	8c 93       	st	X, r24
 */
void sal_aes_exec(uint8_t *data)
{
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
    286e:	e2 17       	cp	r30, r18
    2870:	f3 07       	cpc	r31, r19
    2872:	d9 f7       	brne	.-10     	; 0x286a <sal_aes_exec+0xc>
		trx_reg_write(RG_AES_STATE, *data++);
	}

	trx_reg_write(RG_AES_CTRL,
    2874:	80 91 4b 08 	lds	r24, 0x084B	; 0x80084b <mode_byte>
    2878:	80 68       	ori	r24, 0x80	; 128
    287a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__TEXT_REGION_LENGTH__+0x70013c>
			mode_byte | SR_MASK(SR_AES_REQUEST, AES_START));

	/* Wait for the operation to finish - poll RG_AES_RY. */
	while (!trx_bit_read(SR_AES_DONE)) {
    287e:	ed e3       	ldi	r30, 0x3D	; 61
    2880:	f1 e0       	ldi	r31, 0x01	; 1
    2882:	80 81       	ld	r24, Z
    2884:	80 ff       	sbrs	r24, 0
    2886:	fd cf       	rjmp	.-6      	; 0x2882 <sal_aes_exec+0x24>
	}
}
    2888:	08 95       	ret

0000288a <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    288a:	0f 93       	push	r16
    288c:	1f 93       	push	r17
    288e:	cf 93       	push	r28
    2890:	df 93       	push	r29
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	60 97       	sbiw	r28, 0x10	; 16
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	06 2f       	mov	r16, r22
    28a4:	14 2f       	mov	r17, r20
	uint8_t i;

	if (key != NULL) {
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	c9 f0       	breq	.+50     	; 0x28dc <sal_aes_setup+0x52>
		/* Setup key. */
		dec_initialized = false;
    28aa:	10 92 4c 08 	sts	0x084C, r1	; 0x80084c <dec_initialized>

		last_dir = AES_DIR_VOID;
    28ae:	22 e0       	ldi	r18, 0x02	; 2
    28b0:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <last_dir>

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    28b4:	20 e1       	ldi	r18, 0x10	; 16
    28b6:	fc 01       	movw	r30, r24
    28b8:	ab e3       	ldi	r26, 0x3B	; 59
    28ba:	b8 e0       	ldi	r27, 0x08	; 8
    28bc:	01 90       	ld	r0, Z+
    28be:	0d 92       	st	X+, r0
    28c0:	2a 95       	dec	r18
    28c2:	e1 f7       	brne	.-8      	; 0x28bc <sal_aes_setup+0x32>
    28c4:	dc 01       	movw	r26, r24
    28c6:	ac 01       	movw	r20, r24
    28c8:	40 5f       	subi	r20, 0xF0	; 240
    28ca:	5f 4f       	sbci	r21, 0xFF	; 255

		/* fill in key */
		for (i = 0; i < AES_BLOCKSIZE; ++i) {
			trx_reg_write(RG_AES_KEY, key[i]);
    28cc:	2f e3       	ldi	r18, 0x3F	; 63
    28ce:	31 e0       	ldi	r19, 0x01	; 1
    28d0:	9d 91       	ld	r25, X+
    28d2:	f9 01       	movw	r30, r18
    28d4:	90 83       	st	Z, r25

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);

		/* fill in key */
		for (i = 0; i < AES_BLOCKSIZE; ++i) {
    28d6:	4a 17       	cp	r20, r26
    28d8:	5b 07       	cpc	r21, r27
    28da:	d1 f7       	brne	.-12     	; 0x28d0 <sal_aes_setup+0x46>
			trx_reg_write(RG_AES_KEY, key[i]);
		}
	}

	/* Set encryption direction. */
	switch (dir) {
    28dc:	11 23       	and	r17, r17
    28de:	19 f0       	breq	.+6      	; 0x28e6 <sal_aes_setup+0x5c>
    28e0:	11 30       	cpi	r17, 0x01	; 1
    28e2:	89 f0       	breq	.+34     	; 0x2906 <sal_aes_setup+0x7c>
    28e4:	48 c0       	rjmp	.+144    	; 0x2976 <sal_aes_setup+0xec>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    28e6:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <last_dir>
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	79 f5       	brne	.+94     	; 0x294c <sal_aes_setup+0xc2>
    28ee:	eb e3       	ldi	r30, 0x3B	; 59
    28f0:	f8 e0       	ldi	r31, 0x08	; 8
    28f2:	2b e4       	ldi	r18, 0x4B	; 75
    28f4:	38 e0       	ldi	r19, 0x08	; 8
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, enc_key[i]);
    28f6:	af e3       	ldi	r26, 0x3F	; 63
    28f8:	b1 e0       	ldi	r27, 0x01	; 1
    28fa:	81 91       	ld	r24, Z+
    28fc:	8c 93       	st	X, r24
		if (last_dir == AES_DIR_DECRYPT) {
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
    28fe:	2e 17       	cp	r18, r30
    2900:	3f 07       	cpc	r19, r31
    2902:	d9 f7       	brne	.-10     	; 0x28fa <sal_aes_setup+0x70>
    2904:	23 c0       	rjmp	.+70     	; 0x294c <sal_aes_setup+0xc2>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    2906:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <last_dir>
    290a:	81 30       	cpi	r24, 0x01	; 1
    290c:	b1 f1       	breq	.+108    	; 0x297a <sal_aes_setup+0xf0>
			if (!dec_initialized) {
    290e:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <dec_initialized>
    2912:	81 11       	cpse	r24, r1
    2914:	36 c0       	rjmp	.+108    	; 0x2982 <sal_aes_setup+0xf8>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				mode_byte = SR_MASK(SR_AES_MODE, AES_MODE_ECB) |
    2916:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <mode_byte>
						SR_MASK(SR_AES_DIR,
						AES_DIR_ENCRYPT);
				trx_reg_write(RG_AES_CTRL, mode_byte);
    291a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__TEXT_REGION_LENGTH__+0x70013c>
				sal_aes_exec(dummy);
    291e:	ce 01       	movw	r24, r28
    2920:	01 96       	adiw	r24, 0x01	; 1
    2922:	9d df       	rcall	.-198    	; 0x285e <sal_aes_exec>
    2924:	eb e2       	ldi	r30, 0x2B	; 43
    2926:	f8 e0       	ldi	r31, 0x08	; 8
    2928:	2b e3       	ldi	r18, 0x3B	; 59
    292a:	38 e0       	ldi	r19, 0x08	; 8

				/* Read last round key. */
				for (i = 0; i < AES_BLOCKSIZE; ++i) {
					dec_key[i]
						= trx_reg_read(RG_AES_KEY);
    292c:	af e3       	ldi	r26, 0x3F	; 63
    292e:	b1 e0       	ldi	r27, 0x01	; 1
    2930:	8c 91       	ld	r24, X
    2932:	81 93       	st	Z+, r24
						AES_DIR_ENCRYPT);
				trx_reg_write(RG_AES_CTRL, mode_byte);
				sal_aes_exec(dummy);

				/* Read last round key. */
				for (i = 0; i < AES_BLOCKSIZE; ++i) {
    2934:	2e 17       	cp	r18, r30
    2936:	3f 07       	cpc	r19, r31
    2938:	d9 f7       	brne	.-10     	; 0x2930 <sal_aes_setup+0xa6>
					dec_key[i]
						= trx_reg_read(RG_AES_KEY);
				}

				dec_initialized = true;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	80 93 4c 08 	sts	0x084C, r24	; 0x80084c <dec_initialized>
    2940:	20 c0       	rjmp	.+64     	; 0x2982 <sal_aes_setup+0xf8>
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, dec_key[i]);
    2942:	81 91       	ld	r24, Z+
    2944:	8c 93       	st	X, r24

				dec_initialized = true;
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
    2946:	2e 17       	cp	r18, r30
    2948:	3f 07       	cpc	r19, r31
    294a:	d9 f7       	brne	.-10     	; 0x2942 <sal_aes_setup+0xb8>

	default:
		return false;
	}

	last_dir = dir;
    294c:	10 93 11 02 	sts	0x0211, r17	; 0x800211 <last_dir>

	/* Set encryption mode. */
	switch (enc_mode) {
    2950:	02 30       	cpi	r16, 0x02	; 2
    2952:	a8 f4       	brcc	.+42     	; 0x297e <sal_aes_setup+0xf4>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
		mode_byte
			= SR_MASK(SR_AES_MODE, enc_mode) | SR_MASK(SR_AES_DIR,
    2954:	f0 e2       	ldi	r31, 0x20	; 32
    2956:	0f 9f       	mul	r16, r31
    2958:	c0 01       	movw	r24, r0
    295a:	11 24       	eor	r1, r1
    295c:	08 2f       	mov	r16, r24
    295e:	00 72       	andi	r16, 0x20	; 32
    2960:	11 0f       	add	r17, r17
    2962:	11 0f       	add	r17, r17
    2964:	11 0f       	add	r17, r17
    2966:	18 70       	andi	r17, 0x08	; 8
    2968:	10 2b       	or	r17, r16
    296a:	10 93 4b 08 	sts	0x084B, r17	; 0x80084b <mode_byte>
		return (false);
	}

	/* set mode and direction */

	trx_reg_write(RG_AES_CTRL, mode_byte);
    296e:	10 93 3c 01 	sts	0x013C, r17	; 0x80013c <__TEXT_REGION_LENGTH__+0x70013c>

	return (true);
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	0d c0       	rjmp	.+26     	; 0x2990 <sal_aes_setup+0x106>

			break;
		}

	default:
		return false;
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	0b c0       	rjmp	.+22     	; 0x2990 <sal_aes_setup+0x106>
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	09 c0       	rjmp	.+18     	; 0x2990 <sal_aes_setup+0x106>
			= SR_MASK(SR_AES_MODE, enc_mode) | SR_MASK(SR_AES_DIR,
				dir);
		break;

	default:
		return (false);
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	07 c0       	rjmp	.+14     	; 0x2990 <sal_aes_setup+0x106>
    2982:	eb e2       	ldi	r30, 0x2B	; 43
    2984:	f8 e0       	ldi	r31, 0x08	; 8
    2986:	2b e3       	ldi	r18, 0x3B	; 59
    2988:	38 e0       	ldi	r19, 0x08	; 8
				dec_initialized = true;
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, dec_key[i]);
    298a:	af e3       	ldi	r26, 0x3F	; 63
    298c:	b1 e0       	ldi	r27, 0x01	; 1
    298e:	d9 cf       	rjmp	.-78     	; 0x2942 <sal_aes_setup+0xb8>
	/* set mode and direction */

	trx_reg_write(RG_AES_CTRL, mode_byte);

	return (true);
}
    2990:	60 96       	adiw	r28, 0x10	; 16
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	df 91       	pop	r29
    299e:	cf 91       	pop	r28
    29a0:	1f 91       	pop	r17
    29a2:	0f 91       	pop	r16
    29a4:	08 95       	ret

000029a6 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    29a6:	fc 01       	movw	r30, r24
    29a8:	9c 01       	movw	r18, r24
    29aa:	20 5f       	subi	r18, 0xF0	; 240
    29ac:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
		*data++ = trx_reg_read(RG_AES_STATE);
    29ae:	ae e3       	ldi	r26, 0x3E	; 62
    29b0:	b1 e0       	ldi	r27, 0x01	; 1
    29b2:	8c 91       	ld	r24, X
    29b4:	81 93       	st	Z+, r24
 */
void sal_aes_read(uint8_t *data)
{
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
    29b6:	e2 17       	cp	r30, r18
    29b8:	f3 07       	cpc	r31, r19
    29ba:	d9 f7       	brne	.-10     	; 0x29b2 <sal_aes_read+0xc>
		*data++ = trx_reg_read(RG_AES_STATE);
	}
}
    29bc:	08 95       	ret

000029be <appDataConf>:

/****************************************************************************
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
	appDataReqBusy = false;
    29be:	10 92 8a 10 	sts	0x108A, r1	; 0x80108a <appDataReqBusy>
    29c2:	08 95       	ret

000029c4 <appDataInd>:
}*/

/****************************************************************************
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    29c4:	0f 93       	push	r16
    29c6:	1f 93       	push	r17
    29c8:	cf 93       	push	r28
	for (uint8_t i = 0; i < ind->size; i++) {
    29ca:	dc 01       	movw	r26, r24
    29cc:	19 96       	adiw	r26, 0x09	; 9
    29ce:	2c 91       	ld	r18, X
    29d0:	22 23       	and	r18, r18
    29d2:	89 f0       	breq	.+34     	; 0x29f6 <appDataInd+0x32>
    29d4:	8c 01       	movw	r16, r24
    29d6:	c0 e0       	ldi	r28, 0x00	; 0
		sio2host_putchar(ind->data[i]);
    29d8:	d8 01       	movw	r26, r16
    29da:	17 96       	adiw	r26, 0x07	; 7
    29dc:	ed 91       	ld	r30, X+
    29de:	fc 91       	ld	r31, X
    29e0:	18 97       	sbiw	r26, 0x08	; 8
    29e2:	ec 0f       	add	r30, r28
    29e4:	f1 1d       	adc	r31, r1
    29e6:	80 81       	ld	r24, Z
    29e8:	0e 94 b8 03 	call	0x770	; 0x770 <sio2host_putchar>

/****************************************************************************
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	for (uint8_t i = 0; i < ind->size; i++) {
    29ec:	cf 5f       	subi	r28, 0xFF	; 255
    29ee:	f8 01       	movw	r30, r16
    29f0:	81 85       	ldd	r24, Z+9	; 0x09
    29f2:	c8 17       	cp	r28, r24
    29f4:	88 f3       	brcs	.-30     	; 0x29d8 <appDataInd+0x14>
		sio2host_putchar(ind->data[i]);
	}
	//LED_Toggle(LED0);
	return true;
}
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	cf 91       	pop	r28
    29fa:	1f 91       	pop	r17
    29fc:	0f 91       	pop	r16
    29fe:	08 95       	ret

00002a00 <config_Ziggys_ADC>:
}
/*************************************************************************//**
*****************************************************************************/
/* Write ADC registers via SPI */
void config_Ziggys_ADC( void ){
	PORTD &= ~ ( 1 << SS2 );// Put SS LOW to start transmission.
    2a00:	5d 98       	cbi	0x0b, 5	; 11
	SPI_Transmit_no_IRQ(START_CONFIG);
    2a02:	86 e4       	ldi	r24, 0x46	; 70
    2a04:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_Transmit_no_IRQ>
	SPI_Transmit_no_IRQ(CONFIG0);
    2a08:	82 ef       	ldi	r24, 0xF2	; 242
    2a0a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_Transmit_no_IRQ>
	SPI_Transmit_no_IRQ(CONFIG1);
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_Transmit_no_IRQ>
	SPI_Transmit_no_IRQ(CONFIG2);
    2a14:	8b e8       	ldi	r24, 0x8B	; 139
    2a16:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_Transmit_no_IRQ>
	SPI_Transmit_no_IRQ(CONFIG3);
    2a1a:	80 ec       	ldi	r24, 0xC0	; 192
    2a1c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_Transmit_no_IRQ>
	SPI_Transmit_no_IRQ(ADC_IRQ);// Here we end the inc write of the ADC.
    2a20:	86 e0       	ldi	r24, 0x06	; 6
    2a22:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_Transmit_no_IRQ>
	PORTD |= (1<<SS2);	  // Put SS HIGH to stop comm.
    2a26:	5d 9a       	sbi	0x0b, 5	; 11
    2a28:	08 95       	ret

00002a2a <adc_start_conversions>:
/****************************************************************************************
     ADC start conversions 
****************************************************************************************/
void adc_start_conversions(void)
{
	PORTD &= ~ ( 1 << SS2 );
    2a2a:	5d 98       	cbi	0x0b, 5	; 11
	SPI_Transmit_no_IRQ(STRTCNV);
    2a2c:	88 e6       	ldi	r24, 0x68	; 104
    2a2e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_Transmit_no_IRQ>
	PORTD |= ( 1 << SS2 );
    2a32:	5d 9a       	sbi	0x0b, 5	; 11
    2a34:	08 95       	ret

00002a36 <config_ext_DR_irq>:
/**************************************************************************************
  Configures external irq on PIND0 
**************************************************************************************/
void config_ext_DR_irq(void)
{
	DDRD |= (0<<DDD0);//External interrupt on pin D0
    2a36:	8a b1       	in	r24, 0x0a	; 10
    2a38:	8a b9       	out	0x0a, r24	; 10
	EICRA |= (0x00<<ISC00);// External interrupt 0 activates on falling edge
    2a3a:	e9 e6       	ldi	r30, 0x69	; 105
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	80 83       	st	Z, r24
    2a42:	08 95       	ret

00002a44 <check_adc>:
}
/****************************************************************************
  Check for correct configuration of the ADC
****************************************************************************/
uint8_t check_adc(void){
    2a44:	cf 92       	push	r12
    2a46:	df 92       	push	r13
    2a48:	ef 92       	push	r14
    2a4a:	ff 92       	push	r15
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <check_adc+0x12>
    2a56:	1f 92       	push	r1
    2a58:	1f 92       	push	r1
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
	
	PORTD &= ~ ( 1 << SS2 );
    2a5e:	5d 98       	cbi	0x0b, 5	; 11
	uint8_t adc_ok = 0;
	uint8_t adc_config[5];
	SPI_Transmit_no_IRQ(R_ADC_CONFIG);
    2a60:	87 e4       	ldi	r24, 0x47	; 71
    2a62:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_Transmit_no_IRQ>
	adc_config[0] = SPI_Transmit_no_IRQ(DNT_CARE);
    2a66:	80 e4       	ldi	r24, 0x40	; 64
    2a68:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_Transmit_no_IRQ>
    2a6c:	89 83       	std	Y+1, r24	; 0x01
	adc_config[1] = SPI_Transmit_no_IRQ(DNT_CARE);
    2a6e:	80 e4       	ldi	r24, 0x40	; 64
    2a70:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_Transmit_no_IRQ>
    2a74:	8a 83       	std	Y+2, r24	; 0x02
	adc_config[2] = SPI_Transmit_no_IRQ(DNT_CARE);
    2a76:	80 e4       	ldi	r24, 0x40	; 64
    2a78:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_Transmit_no_IRQ>
    2a7c:	8b 83       	std	Y+3, r24	; 0x03
	adc_config[3] = SPI_Transmit_no_IRQ(DNT_CARE);
    2a7e:	80 e4       	ldi	r24, 0x40	; 64
    2a80:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_Transmit_no_IRQ>
    2a84:	8c 83       	std	Y+4, r24	; 0x04
	adc_config[4] = SPI_Transmit_no_IRQ(DNT_CARE);
    2a86:	80 e4       	ldi	r24, 0x40	; 64
    2a88:	0e 94 d7 01 	call	0x3ae	; 0x3ae <SPI_Transmit_no_IRQ>
    2a8c:	8d 83       	std	Y+5, r24	; 0x05
	PORTD |= (1<<SS2);
    2a8e:	5d 9a       	sbi	0x0b, 5	; 11
    2a90:	ce 01       	movw	r24, r28
    2a92:	01 96       	adiw	r24, 0x01	; 1
    2a94:	7c 01       	movw	r14, r24
    2a96:	6e 01       	movw	r12, r28
    2a98:	96 e0       	ldi	r25, 0x06	; 6
    2a9a:	c9 0e       	add	r12, r25
    2a9c:	d1 1c       	adc	r13, r1
  Check for correct configuration of the ADC
****************************************************************************/
uint8_t check_adc(void){
	
	PORTD &= ~ ( 1 << SS2 );
	uint8_t adc_ok = 0;
    2a9e:	00 e0       	ldi	r16, 0x00	; 0
	adc_config[3] = SPI_Transmit_no_IRQ(DNT_CARE);
	adc_config[4] = SPI_Transmit_no_IRQ(DNT_CARE);
	PORTD |= (1<<SS2);
	for (int i = 0; i < 5; i++)
	{
		sio2host_putchar(adc_config[i]);
    2aa0:	f7 01       	movw	r30, r14
    2aa2:	11 91       	ld	r17, Z+
    2aa4:	7f 01       	movw	r14, r30
    2aa6:	81 2f       	mov	r24, r17
    2aa8:	0e 94 b8 03 	call	0x770	; 0x770 <sio2host_putchar>
		switch( adc_config[i] )
    2aac:	16 37       	cpi	r17, 0x76	; 118
    2aae:	61 f0       	breq	.+24     	; 0x2ac8 <check_adc+0x84>
    2ab0:	28 f4       	brcc	.+10     	; 0x2abc <check_adc+0x78>
    2ab2:	11 23       	and	r17, r17
    2ab4:	49 f0       	breq	.+18     	; 0x2ac8 <check_adc+0x84>
    2ab6:	16 36       	cpi	r17, 0x66	; 102
    2ab8:	41 f4       	brne	.+16     	; 0x2aca <check_adc+0x86>
    2aba:	06 c0       	rjmp	.+12     	; 0x2ac8 <check_adc+0x84>
    2abc:	10 3c       	cpi	r17, 0xC0	; 192
    2abe:	21 f0       	breq	.+8      	; 0x2ac8 <check_adc+0x84>
    2ac0:	12 3f       	cpi	r17, 0xF2	; 242
    2ac2:	11 f0       	breq	.+4      	; 0x2ac8 <check_adc+0x84>
    2ac4:	1b 38       	cpi	r17, 0x8B	; 139
    2ac6:	09 f4       	brne	.+2      	; 0x2aca <check_adc+0x86>
			case CONFIG1:
			case CONFIG2:
			case CONFIG3:
			case ADC_IRQ_POR:
			case ADC_IRQ_no:
				adc_ok++;
    2ac8:	0f 5f       	subi	r16, 0xFF	; 255
		}
		if( adc_ok == 5 )
    2aca:	05 30       	cpi	r16, 0x05	; 5
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <check_adc+0x8c>
		{
			adc_ok = 1;
    2ace:	01 e0       	ldi	r16, 0x01	; 1
	adc_config[1] = SPI_Transmit_no_IRQ(DNT_CARE);
	adc_config[2] = SPI_Transmit_no_IRQ(DNT_CARE);
	adc_config[3] = SPI_Transmit_no_IRQ(DNT_CARE);
	adc_config[4] = SPI_Transmit_no_IRQ(DNT_CARE);
	PORTD |= (1<<SS2);
	for (int i = 0; i < 5; i++)
    2ad0:	ec 14       	cp	r14, r12
    2ad2:	fd 04       	cpc	r15, r13
    2ad4:	29 f7       	brne	.-54     	; 0x2aa0 <check_adc+0x5c>
		{
			adc_ok = 1;
		}
	}
	return adc_ok;
}
    2ad6:	80 2f       	mov	r24, r16
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	df 91       	pop	r29
    2ae4:	cf 91       	pop	r28
    2ae6:	1f 91       	pop	r17
    2ae8:	0f 91       	pop	r16
    2aea:	ff 90       	pop	r15
    2aec:	ef 90       	pop	r14
    2aee:	df 90       	pop	r13
    2af0:	cf 90       	pop	r12
    2af2:	08 95       	ret

00002af4 <spi_rx>:
		// Reset counter
		count = 0;
	}
}
uint8_t spi_rx(uint8_t *data, uint8_t max_length)
{
    2af4:	fc 01       	movw	r30, r24
	uint8_t data_received = 0;
	buff_count++;
    2af6:	80 91 22 10 	lds	r24, 0x1022	; 0x801022 <buff_count>
    2afa:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(buff_count == 20)
    2afc:	84 31       	cpi	r24, 0x14	; 20
    2afe:	19 f0       	breq	.+6      	; 0x2b06 <spi_rx+0x12>
	}
}
uint8_t spi_rx(uint8_t *data, uint8_t max_length)
{
	uint8_t data_received = 0;
	buff_count++;
    2b00:	80 93 22 10 	sts	0x1022, r24	; 0x801022 <buff_count>
    2b04:	02 c0       	rjmp	.+4      	; 0x2b0a <spi_rx+0x16>
	
	if(buff_count == 20)
	{
		buff_count = 0;
    2b06:	10 92 22 10 	sts	0x1022, r1	; 0x801022 <buff_count>
	}
	
	
	if(spi_rx_buf_tail >= spi_rx_buf_head)
    2b0a:	80 91 51 08 	lds	r24, 0x0851	; 0x800851 <spi_rx_buf_tail>
    2b0e:	40 91 50 08 	lds	r20, 0x0850	; 0x800850 <spi_rx_buf_head>
    2b12:	84 17       	cp	r24, r20
    2b14:	20 f0       	brcs	.+8      	; 0x2b1e <spi_rx+0x2a>
	{
		spi_rx_count = spi_rx_buf_tail - spi_rx_buf_head;
    2b16:	84 1b       	sub	r24, r20
    2b18:	80 93 4f 08 	sts	0x084F, r24	; 0x80084f <spi_rx_count>
    2b1c:	04 c0       	rjmp	.+8      	; 0x2b26 <spi_rx+0x32>
	}
	else
	{
		spi_rx_count = spi_rx_buf_tail + (SPI_RX_BUF_SIZE_HOST - spi_rx_buf_head);
    2b1e:	80 53       	subi	r24, 0x30	; 48
    2b20:	84 1b       	sub	r24, r20
    2b22:	80 93 4f 08 	sts	0x084F, r24	; 0x80084f <spi_rx_count>
	}
	
	if (0 == spi_rx_count) {
    2b26:	80 91 4f 08 	lds	r24, 0x084F	; 0x80084f <spi_rx_count>
    2b2a:	88 23       	and	r24, r24
    2b2c:	79 f0       	breq	.+30     	; 0x2b4c <spi_rx+0x58>
    2b2e:	68 17       	cp	r22, r24
    2b30:	08 f4       	brcc	.+2      	; 0x2b34 <spi_rx+0x40>
    2b32:	86 2f       	mov	r24, r22
			max_length = spi_rx_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
    2b34:	88 23       	and	r24, r24
    2b36:	61 f0       	breq	.+24     	; 0x2b50 <spi_rx+0x5c>
    2b38:	98 2f       	mov	r25, r24
		/* Start to copy from head. */
		*data = spi_rx_buf;
    2b3a:	22 e5       	ldi	r18, 0x52	; 82
    2b3c:	38 e0       	ldi	r19, 0x08	; 8
    2b3e:	21 93       	st	Z+, r18
		data++;
		max_length--;
    2b40:	91 50       	subi	r25, 0x01	; 1
			max_length = spi_rx_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
    2b42:	e9 f7       	brne	.-6      	; 0x2b3e <spi_rx+0x4a>
    2b44:	48 0f       	add	r20, r24
    2b46:	40 93 50 08 	sts	0x0850, r20	; 0x800850 <spi_rx_buf_head>
    2b4a:	08 95       	ret
	{
		spi_rx_count = spi_rx_buf_tail + (SPI_RX_BUF_SIZE_HOST - spi_rx_buf_head);
	}
	
	if (0 == spi_rx_count) {
		return 0;
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	08 95       	ret
		else
		{
			spi_rx_buf_head++;
		}
	}
	return data_received;
    2b50:	80 e0       	ldi	r24, 0x00	; 0
}
    2b52:	08 95       	ret

00002b54 <main>:
/*****************************************************************************
*****************************************************************************/
int main(void)
{
    2b54:	cf 93       	push	r28
    2b56:	df 93       	push	r29
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <main+0x6>
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
	irq_initialize_vectors();
	sysclk_init();
    2b5e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sysclk_init>
	board_init();
    2b62:	0e 94 86 02 	call	0x50c	; 0x50c <board_init>
	SYS_Init();
    2b66:	ff d8       	rcall	.-3586   	; 0x1d66 <SYS_Init>
	sio2host_init();
    2b68:	0e 94 58 03 	call	0x6b0	; 0x6b0 <sio2host_init>
	cpu_irq_enable();
    2b6c:	78 94       	sei

/****************************************************************************
*****************************************************************************/
static void appInit(void)
{
	NWK_SetAddr(APP_ADDR);
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	0e 94 26 04 	call	0x84c	; 0x84c <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
    2b76:	87 e6       	ldi	r24, 0x67	; 103
    2b78:	95 e4       	ldi	r25, 0x45	; 69
    2b7a:	0e 94 2d 04 	call	0x85a	; 0x85a <NWK_SetPanId>
	PHY_SetChannel(APP_CHANNEL);
    2b7e:	8f e0       	ldi	r24, 0x0F	; 15
    2b80:	14 d8       	rcall	.-4056   	; 0x1baa <PHY_SetChannel>
	PHY_SetRxState(true);
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	0e d8       	rcall	.-4068   	; 0x1ba2 <PHY_SetRxState>
    2b86:	62 ee       	ldi	r22, 0xE2	; 226

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    2b88:	74 e1       	ldi	r23, 0x14	; 20
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	0e 94 34 04 	call	0x868	; 0x868 <NWK_OpenEndpoint>
    2b90:	0e 94 c7 01 	call	0x38e	; 0x38e <init_SPI_mstr>
	sio2host_init();
	cpu_irq_enable();
	//LED_On(LED0);
	appInit();
	init_SPI_mstr();
	config_ext_DR_irq();
    2b94:	50 df       	rcall	.-352    	; 0x2a36 <config_ext_DR_irq>
	config_Ziggys_ADC();
    2b96:	34 df       	rcall	.-408    	; 0x2a00 <config_Ziggys_ADC>
    2b98:	55 df       	rcall	.-342    	; 0x2a44 <check_adc>
	check_adc();
    2b9a:	0b e8       	ldi	r16, 0x8B	; 139
    2b9c:	10 e1       	ldi	r17, 0x10	; 16
		return;
	}
	
	//memcpy(appDataReqBuffer, SpiBuffer, SpiBufferPtr);
	
	appDataReq.dstAddr = 1 - APP_ADDR;
    2b9e:	aa 24       	eor	r10, r10
    2ba0:	a3 94       	inc	r10
    2ba2:	b1 2c       	mov	r11, r1
    2ba4:	77 24       	eor	r7, r7
    2ba6:	73 94       	inc	r7
	appDataReq.dstEndpoint = APP_ENDPOINT;
    2ba8:	0f 2e       	mov	r0, r31
    2baa:	f6 e2       	ldi	r31, 0x26	; 38
	appDataReq.srcEndpoint = APP_ENDPOINT;
	appDataReq.options = 0;
	appDataReq.data = SpiBuffer;
    2bac:	cf 2e       	mov	r12, r31
    2bae:	f0 e1       	ldi	r31, 0x10	; 16
    2bb0:	df 2e       	mov	r13, r31
    2bb2:	f0 2d       	mov	r31, r0
    2bb4:	0f 2e       	mov	r0, r31
    2bb6:	ff ed       	ldi	r31, 0xDF	; 223
	appDataReq.size = SpiBufferPtr;
	appDataReq.confirm = appDataConf;
    2bb8:	ef 2e       	mov	r14, r31
    2bba:	f4 e1       	ldi	r31, 0x14	; 20
    2bbc:	ff 2e       	mov	r15, r31
    2bbe:	f0 2d       	mov	r31, r0
    2bc0:	61 2c       	mov	r6, r1
    2bc2:	20 2e       	mov	r2, r16
		{
			if (SpiBufferPtr == sizeof(SpiBuffer))
			{
				appSendData();
			}
			if (SpiBufferPtr < sizeof(SpiBuffer)) 
    2bc4:	31 2e       	mov	r3, r17
		return;
	}
	
	//memcpy(appDataReqBuffer, SpiBuffer, SpiBufferPtr);
	
	appDataReq.dstAddr = 1 - APP_ADDR;
    2bc6:	47 2c       	mov	r4, r7
    2bc8:	69 82       	std	Y+1, r6	; 0x01
	appDataReq.dstEndpoint = APP_ENDPOINT;
    2bca:	23 c0       	rjmp	.+70     	; 0x2c12 <main+0xbe>
		{
			if (SpiBufferPtr == sizeof(SpiBuffer))
			{
				appSendData();
			}
			if (SpiBufferPtr < sizeof(SpiBuffer)) 
    2bcc:	8c b1       	in	r24, 0x0c	; 12
    2bce:	97 2d       	mov	r25, r7
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 0;
	// Check if button is high or low for the moment
	uint8_t current_state = (~PINE & (1<<PORTE4)) != 0;
    2bd0:	28 2f       	mov	r18, r24
    2bd2:	20 71       	andi	r18, 0x10	; 16
    2bd4:	84 fd       	sbrc	r24, 4
    2bd6:	96 2d       	mov	r25, r6
    2bd8:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <button_state.3322>
	if(current_state != button_state) {
    2bdc:	98 17       	cp	r25, r24
    2bde:	a1 f0       	breq	.+40     	; 0x2c08 <main+0xb4>
    2be0:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <count.3321>
		// Button state is about to be changed, increase counter
		count++;
    2be4:	8f 5f       	subi	r24, 0xFF	; 255
    2be6:	80 93 4d 08 	sts	0x084D, r24	; 0x80084d <count.3321>
    2bea:	84 30       	cpi	r24, 0x04	; 4
    2bec:	90 f0       	brcs	.+36     	; 0x2c12 <main+0xbe>
		if(count >= 4) {
    2bee:	90 93 4e 08 	sts	0x084E, r25	; 0x80084e <button_state.3322>
			// The button have not bounced for four checks, change state
			button_state = current_state;
    2bf2:	21 11       	cpse	r18, r1
    2bf4:	02 c0       	rjmp	.+4      	; 0x2bfa <main+0xa6>
			// If the button was pressed (not released), tell main so
			if(current_state != 0) {
    2bf6:	40 92 41 11 	sts	0x1141, r4	; 0x801141 <button_down>
				button_down = true;
    2bfa:	60 92 4d 08 	sts	0x084D, r6	; 0x80084d <count.3321>
			}
			count = 0;
    2bfe:	80 91 41 11 	lds	r24, 0x1141	; 0x801141 <button_down>
	while (1) {
		while(!(button_down))
		{
			//LED_On(LED0);
			debounce();
			if(button_down)
    2c02:	81 11       	cpse	r24, r1
    2c04:	04 c0       	rjmp	.+8      	; 0x2c0e <main+0xba>
    2c06:	05 c0       	rjmp	.+10     	; 0x2c12 <main+0xbe>
    2c08:	60 92 4d 08 	sts	0x084D, r6	; 0x80084d <count.3321>
			count = 0;
		}
	}
	else{
		// Reset counter
		count = 0;
    2c0c:	02 c0       	rjmp	.+4      	; 0x2c12 <main+0xbe>
    2c0e:	e8 9a       	sbi	0x1d, 0	; 29
			//LED_On(LED0);
			debounce();
			if(button_down)
			{
				//button_down = 0;
				EIMSK |= (1<<INT0);//External interrupt 0 enabled
    2c10:	0c df       	rcall	.-488    	; 0x2a2a <adc_start_conversions>
				adc_start_conversions();
    2c12:	80 91 41 11 	lds	r24, 0x1141	; 0x801141 <button_down>
	config_ext_DR_irq();
	config_Ziggys_ADC();
	check_adc();
		
	while (1) {
		while(!(button_down))
    2c16:	88 23       	and	r24, r24
    2c18:	c9 f2       	breq	.-78     	; 0x2bcc <main+0x78>
    2c1a:	f8 94       	cli
				adc_start_conversions();
			}
		}

		//LED_On(LED0);
	    cli();//External interrupt 0 enabled
    2c1c:	64 e6       	ldi	r22, 0x64	; 100

/****************************************************************************
*****************************************************************************/
static void APP_TaskHandler(void)
{
	spi_rx_length = spi_rx(rx_data, 100);
    2c1e:	8c e9       	ldi	r24, 0x9C	; 156
    2c20:	90 e1       	ldi	r25, 0x10	; 16
    2c22:	68 df       	rcall	.-304    	; 0x2af4 <spi_rx>
    2c24:	80 93 24 10 	sts	0x1024, r24	; 0x801024 <spi_rx_length>
    2c28:	88 23       	and	r24, r24
    2c2a:	09 f4       	brne	.+2      	; 0x2c2e <main+0xda>
	if (spi_rx_length) {
		for (uint16_t i = 0; i < spi_rx_length; i++) 
    2c2c:	53 c0       	rjmp	.+166    	; 0x2cd4 <main+0x180>
    2c2e:	0f 2e       	mov	r0, r31
    2c30:	fc e9       	ldi	r31, 0x9C	; 156
    2c32:	8f 2e       	mov	r8, r31
    2c34:	f0 e1       	ldi	r31, 0x10	; 16
    2c36:	9f 2e       	mov	r9, r31
    2c38:	f0 2d       	mov	r31, r0
    2c3a:	1b 82       	std	Y+3, r1	; 0x03
    2c3c:	1a 82       	std	Y+2, r1	; 0x02
    2c3e:	0f 2e       	mov	r0, r31
    2c40:	f4 e6       	ldi	r31, 0x64	; 100
	appDataReq.dstAddr = 1 - APP_ADDR;
	appDataReq.dstEndpoint = APP_ENDPOINT;
	appDataReq.srcEndpoint = APP_ENDPOINT;
	appDataReq.options = 0;
	appDataReq.data = SpiBuffer;
	appDataReq.size = SpiBufferPtr;
    2c42:	5f 2e       	mov	r5, r31
    2c44:	f0 2d       	mov	r31, r0
    2c46:	e0 91 25 10 	lds	r30, 0x1025	; 0x801025 <SpiBufferPtr>
{
	spi_rx_length = spi_rx(rx_data, 100);
	if (spi_rx_length) {
		for (uint16_t i = 0; i < spi_rx_length; i++) 
		{
			if (SpiBufferPtr == sizeof(SpiBuffer))
    2c4a:	e4 36       	cpi	r30, 0x64	; 100
    2c4c:	31 f5       	brne	.+76     	; 0x2c9a <main+0x146>
    2c4e:	80 91 8a 10 	lds	r24, 0x108A	; 0x80108a <appDataReqBusy>

/****************************************************************************
*****************************************************************************/
static void appSendData(void)
{
	if (appDataReqBusy || 0 == SpiBufferPtr ) {
    2c52:	81 11       	cpse	r24, r1
    2c54:	2e c0       	rjmp	.+92     	; 0x2cb2 <main+0x15e>
    2c56:	d8 01       	movw	r26, r16
    2c58:	16 96       	adiw	r26, 0x06	; 6
		return;
	}
	
	//memcpy(appDataReqBuffer, SpiBuffer, SpiBufferPtr);
	
	appDataReq.dstAddr = 1 - APP_ADDR;
    2c5a:	bc 92       	st	X, r11
    2c5c:	ae 92       	st	-X, r10
    2c5e:	15 97       	sbiw	r26, 0x05	; 5
    2c60:	17 96       	adiw	r26, 0x07	; 7
    2c62:	7c 92       	st	X, r7
	appDataReq.dstEndpoint = APP_ENDPOINT;
    2c64:	17 97       	sbiw	r26, 0x07	; 7
    2c66:	18 96       	adiw	r26, 0x08	; 8
    2c68:	7c 92       	st	X, r7
	appDataReq.srcEndpoint = APP_ENDPOINT;
    2c6a:	18 97       	sbiw	r26, 0x08	; 8
    2c6c:	19 96       	adiw	r26, 0x09	; 9
    2c6e:	1c 92       	st	X, r1
	appDataReq.options = 0;
    2c70:	19 97       	sbiw	r26, 0x09	; 9
    2c72:	1b 96       	adiw	r26, 0x0b	; 11
    2c74:	dc 92       	st	X, r13
	appDataReq.data = SpiBuffer;
    2c76:	ce 92       	st	-X, r12
    2c78:	1a 97       	sbiw	r26, 0x0a	; 10
    2c7a:	1c 96       	adiw	r26, 0x0c	; 12
    2c7c:	5c 92       	st	X, r5
	appDataReq.size = SpiBufferPtr;
    2c7e:	1c 97       	sbiw	r26, 0x0c	; 12
    2c80:	1e 96       	adiw	r26, 0x0e	; 14
    2c82:	fc 92       	st	X, r15
	appDataReq.confirm = appDataConf;
    2c84:	ee 92       	st	-X, r14
    2c86:	1d 97       	sbiw	r26, 0x0d	; 13
    2c88:	82 2d       	mov	r24, r2
    2c8a:	93 2d       	mov	r25, r3
	NWK_DataReq(&appDataReq);
    2c8c:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <NWK_DataReq>
    2c90:	40 92 8a 10 	sts	0x108A, r4	; 0x80108a <appDataReqBusy>

	SpiBufferPtr = 0;
	//buffer_complete = 0;
	appDataReqBusy = true;
    2c94:	2c 98       	cbi	0x05, 4	; 5
    2c96:	e9 81       	ldd	r30, Y+1	; 0x01
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    2c98:	02 c0       	rjmp	.+4      	; 0x2c9e <main+0x14a>
		{
			if (SpiBufferPtr == sizeof(SpiBuffer))
			{
				appSendData();
			}
			if (SpiBufferPtr < sizeof(SpiBuffer)) 
    2c9a:	e4 36       	cpi	r30, 0x64	; 100
    2c9c:	50 f4       	brcc	.+20     	; 0x2cb2 <main+0x15e>
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	8e 0f       	add	r24, r30
			{
				SpiBuffer[SpiBufferPtr++] = rx_data[i];
    2ca2:	80 93 25 10 	sts	0x1025, r24	; 0x801025 <SpiBufferPtr>
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	ea 5d       	subi	r30, 0xDA	; 218
    2caa:	ff 4e       	sbci	r31, 0xEF	; 239
    2cac:	d4 01       	movw	r26, r8
    2cae:	8c 91       	ld	r24, X
    2cb0:	80 83       	st	Z, r24
    2cb2:	ea 81       	ldd	r30, Y+2	; 0x02
    2cb4:	fb 81       	ldd	r31, Y+3	; 0x03
*****************************************************************************/
static void APP_TaskHandler(void)
{
	spi_rx_length = spi_rx(rx_data, 100);
	if (spi_rx_length) {
		for (uint16_t i = 0; i < spi_rx_length; i++) 
    2cb6:	31 96       	adiw	r30, 0x01	; 1
    2cb8:	fb 83       	std	Y+3, r31	; 0x03
    2cba:	ea 83       	std	Y+2, r30	; 0x02
    2cbc:	ff ef       	ldi	r31, 0xFF	; 255
    2cbe:	8f 1a       	sub	r8, r31
    2cc0:	9f 0a       	sbc	r9, r31
    2cc2:	80 91 24 10 	lds	r24, 0x1024	; 0x801024 <spi_rx_length>
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	2a 81       	ldd	r18, Y+2	; 0x02
    2cca:	3b 81       	ldd	r19, Y+3	; 0x03
    2ccc:	28 17       	cp	r18, r24
    2cce:	39 07       	cpc	r19, r25
    2cd0:	08 f4       	brcc	.+2      	; 0x2cd4 <main+0x180>
    2cd2:	b9 cf       	rjmp	.-142    	; 0x2c46 <main+0xf2>
    2cd4:	78 94       	sei
		}

		//LED_On(LED0);
	    cli();//External interrupt 0 enabled
		APP_TaskHandler();
		sei();
    2cd6:	4d d8       	rcall	.-3942   	; 0x1d72 <SYS_TaskHandler>
		SYS_TaskHandler();
    2cd8:	9c cf       	rjmp	.-200    	; 0x2c12 <main+0xbe>

00002cda <__vector_1>:
    2cda:	1f 92       	push	r1
		
	}
    2cdc:	0f 92       	push	r0
}
/*****************************************************************************
	External interrupt handler for external ADC data ready event
*****************************************************************************/
ISR(INT0_vect)
{
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	0f 92       	push	r0
    2ce2:	11 24       	eor	r1, r1
    2ce4:	0b b6       	in	r0, 0x3b	; 59
    2ce6:	0f 92       	push	r0
    2ce8:	8f 93       	push	r24
    2cea:	ef 93       	push	r30
    2cec:	ff 93       	push	r31
	number_samples++;
    2cee:	80 91 23 10 	lds	r24, 0x1023	; 0x801023 <number_samples>
    2cf2:	8f 5f       	subi	r24, 0xFF	; 255
    2cf4:	80 93 23 10 	sts	0x1023, r24	; 0x801023 <number_samples>
	//LED_On(LED0);
	/*Optimized code*/
	cpu_irq_disable();
    2cf8:	f8 94       	cli
	PORTD &= ~ ( 1 << SS2 );
    2cfa:	5d 98       	cbi	0x0b, 5	; 11
	SPDR = R_ADC_SAMPLES;
    2cfc:	81 e4       	ldi	r24, 0x41	; 65
    2cfe:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){};
    2d00:	0d b4       	in	r0, 0x2d	; 45
    2d02:	07 fe       	sbrs	r0, 7
    2d04:	fd cf       	rjmp	.-6      	; 0x2d00 <__vector_1+0x26>
	SPDR = DNT_CARE;
    2d06:	80 e4       	ldi	r24, 0x40	; 64
    2d08:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){};
    2d0a:	0d b4       	in	r0, 0x2d	; 45
    2d0c:	07 fe       	sbrs	r0, 7
    2d0e:	fd cf       	rjmp	.-6      	; 0x2d0a <__vector_1+0x30>
	spi_rx_buf[spi_rx_buf_tail++] = SPDR;//Read High byte from ADC
    2d10:	e0 91 51 08 	lds	r30, 0x0851	; 0x800851 <spi_rx_buf_tail>
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	8e 0f       	add	r24, r30
    2d18:	80 93 51 08 	sts	0x0851, r24	; 0x800851 <spi_rx_buf_tail>
    2d1c:	8e b5       	in	r24, 0x2e	; 46
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	ee 5a       	subi	r30, 0xAE	; 174
    2d22:	f7 4f       	sbci	r31, 0xF7	; 247
    2d24:	80 83       	st	Z, r24
	SPDR = DNT_CARE;//the increment of the index buf_tail happens only after 
    2d26:	80 e4       	ldi	r24, 0x40	; 64
    2d28:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){};//the evaluation of spi_rx.
    2d2a:	0d b4       	in	r0, 0x2d	; 45
    2d2c:	07 fe       	sbrs	r0, 7
    2d2e:	fd cf       	rjmp	.-6      	; 0x2d2a <__vector_1+0x50>
	spi_rx_buf[spi_rx_buf_tail] = SPDR;//Read Low byte from ADC
    2d30:	8e b5       	in	r24, 0x2e	; 46
    2d32:	e0 91 51 08 	lds	r30, 0x0851	; 0x800851 <spi_rx_buf_tail>
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	ee 5a       	subi	r30, 0xAE	; 174
    2d3a:	f7 4f       	sbci	r31, 0xF7	; 247
    2d3c:	80 83       	st	Z, r24
	PORTD |= ( 1 << SS2 );
    2d3e:	5d 9a       	sbi	0x0b, 5	; 11
		spi_rx_buf_tail = 0x00;
		
	}
	else
	{
		spi_rx_buf_tail++;
    2d40:	80 91 51 08 	lds	r24, 0x0851	; 0x800851 <spi_rx_buf_tail>
    2d44:	8f 5f       	subi	r24, 0xFF	; 255
    2d46:	80 93 51 08 	sts	0x0851, r24	; 0x800851 <spi_rx_buf_tail>
	}
	cpu_irq_enable();	
    2d4a:	78 94       	sei
    2d4c:	ff 91       	pop	r31
    2d4e:	ef 91       	pop	r30
    2d50:	8f 91       	pop	r24
    2d52:	0f 90       	pop	r0
    2d54:	0b be       	out	0x3b, r0	; 59
    2d56:	0f 90       	pop	r0
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	0f 90       	pop	r0
    2d5c:	1f 90       	pop	r1
    2d5e:	18 95       	reti

00002d60 <__mulsi3>:
    2d60:	db 01       	movw	r26, r22
    2d62:	8f 93       	push	r24
    2d64:	9f 93       	push	r25
    2d66:	41 d0       	rcall	.+130    	; 0x2dea <__muluhisi3>
    2d68:	bf 91       	pop	r27
    2d6a:	af 91       	pop	r26
    2d6c:	a2 9f       	mul	r26, r18
    2d6e:	80 0d       	add	r24, r0
    2d70:	91 1d       	adc	r25, r1
    2d72:	a3 9f       	mul	r26, r19
    2d74:	90 0d       	add	r25, r0
    2d76:	b2 9f       	mul	r27, r18
    2d78:	90 0d       	add	r25, r0
    2d7a:	11 24       	eor	r1, r1
    2d7c:	08 95       	ret

00002d7e <__udivmodhi4>:
    2d7e:	aa 1b       	sub	r26, r26
    2d80:	bb 1b       	sub	r27, r27
    2d82:	51 e1       	ldi	r21, 0x11	; 17
    2d84:	07 c0       	rjmp	.+14     	; 0x2d94 <__udivmodhi4_ep>

00002d86 <__udivmodhi4_loop>:
    2d86:	aa 1f       	adc	r26, r26
    2d88:	bb 1f       	adc	r27, r27
    2d8a:	a6 17       	cp	r26, r22
    2d8c:	b7 07       	cpc	r27, r23
    2d8e:	10 f0       	brcs	.+4      	; 0x2d94 <__udivmodhi4_ep>
    2d90:	a6 1b       	sub	r26, r22
    2d92:	b7 0b       	sbc	r27, r23

00002d94 <__udivmodhi4_ep>:
    2d94:	88 1f       	adc	r24, r24
    2d96:	99 1f       	adc	r25, r25
    2d98:	5a 95       	dec	r21
    2d9a:	a9 f7       	brne	.-22     	; 0x2d86 <__udivmodhi4_loop>
    2d9c:	80 95       	com	r24
    2d9e:	90 95       	com	r25
    2da0:	bc 01       	movw	r22, r24
    2da2:	cd 01       	movw	r24, r26
    2da4:	08 95       	ret

00002da6 <__udivmodsi4>:
    2da6:	a1 e2       	ldi	r26, 0x21	; 33
    2da8:	1a 2e       	mov	r1, r26
    2daa:	aa 1b       	sub	r26, r26
    2dac:	bb 1b       	sub	r27, r27
    2dae:	fd 01       	movw	r30, r26
    2db0:	0d c0       	rjmp	.+26     	; 0x2dcc <__udivmodsi4_ep>

00002db2 <__udivmodsi4_loop>:
    2db2:	aa 1f       	adc	r26, r26
    2db4:	bb 1f       	adc	r27, r27
    2db6:	ee 1f       	adc	r30, r30
    2db8:	ff 1f       	adc	r31, r31
    2dba:	a2 17       	cp	r26, r18
    2dbc:	b3 07       	cpc	r27, r19
    2dbe:	e4 07       	cpc	r30, r20
    2dc0:	f5 07       	cpc	r31, r21
    2dc2:	20 f0       	brcs	.+8      	; 0x2dcc <__udivmodsi4_ep>
    2dc4:	a2 1b       	sub	r26, r18
    2dc6:	b3 0b       	sbc	r27, r19
    2dc8:	e4 0b       	sbc	r30, r20
    2dca:	f5 0b       	sbc	r31, r21

00002dcc <__udivmodsi4_ep>:
    2dcc:	66 1f       	adc	r22, r22
    2dce:	77 1f       	adc	r23, r23
    2dd0:	88 1f       	adc	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	1a 94       	dec	r1
    2dd6:	69 f7       	brne	.-38     	; 0x2db2 <__udivmodsi4_loop>
    2dd8:	60 95       	com	r22
    2dda:	70 95       	com	r23
    2ddc:	80 95       	com	r24
    2dde:	90 95       	com	r25
    2de0:	9b 01       	movw	r18, r22
    2de2:	ac 01       	movw	r20, r24
    2de4:	bd 01       	movw	r22, r26
    2de6:	cf 01       	movw	r24, r30
    2de8:	08 95       	ret

00002dea <__muluhisi3>:
    2dea:	09 d0       	rcall	.+18     	; 0x2dfe <__umulhisi3>
    2dec:	a5 9f       	mul	r26, r21
    2dee:	90 0d       	add	r25, r0
    2df0:	b4 9f       	mul	r27, r20
    2df2:	90 0d       	add	r25, r0
    2df4:	a4 9f       	mul	r26, r20
    2df6:	80 0d       	add	r24, r0
    2df8:	91 1d       	adc	r25, r1
    2dfa:	11 24       	eor	r1, r1
    2dfc:	08 95       	ret

00002dfe <__umulhisi3>:
    2dfe:	a2 9f       	mul	r26, r18
    2e00:	b0 01       	movw	r22, r0
    2e02:	b3 9f       	mul	r27, r19
    2e04:	c0 01       	movw	r24, r0
    2e06:	a3 9f       	mul	r26, r19
    2e08:	70 0d       	add	r23, r0
    2e0a:	81 1d       	adc	r24, r1
    2e0c:	11 24       	eor	r1, r1
    2e0e:	91 1d       	adc	r25, r1
    2e10:	b2 9f       	mul	r27, r18
    2e12:	70 0d       	add	r23, r0
    2e14:	81 1d       	adc	r24, r1
    2e16:	11 24       	eor	r1, r1
    2e18:	91 1d       	adc	r25, r1
    2e1a:	08 95       	ret

00002e1c <do_rand>:
    2e1c:	8f 92       	push	r8
    2e1e:	9f 92       	push	r9
    2e20:	af 92       	push	r10
    2e22:	bf 92       	push	r11
    2e24:	cf 92       	push	r12
    2e26:	df 92       	push	r13
    2e28:	ef 92       	push	r14
    2e2a:	ff 92       	push	r15
    2e2c:	cf 93       	push	r28
    2e2e:	df 93       	push	r29
    2e30:	ec 01       	movw	r28, r24
    2e32:	68 81       	ld	r22, Y
    2e34:	79 81       	ldd	r23, Y+1	; 0x01
    2e36:	8a 81       	ldd	r24, Y+2	; 0x02
    2e38:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3a:	61 15       	cp	r22, r1
    2e3c:	71 05       	cpc	r23, r1
    2e3e:	81 05       	cpc	r24, r1
    2e40:	91 05       	cpc	r25, r1
    2e42:	21 f4       	brne	.+8      	; 0x2e4c <do_rand+0x30>
    2e44:	64 e2       	ldi	r22, 0x24	; 36
    2e46:	79 ed       	ldi	r23, 0xD9	; 217
    2e48:	8b e5       	ldi	r24, 0x5B	; 91
    2e4a:	97 e0       	ldi	r25, 0x07	; 7
    2e4c:	2d e1       	ldi	r18, 0x1D	; 29
    2e4e:	33 ef       	ldi	r19, 0xF3	; 243
    2e50:	41 e0       	ldi	r20, 0x01	; 1
    2e52:	50 e0       	ldi	r21, 0x00	; 0
    2e54:	cd d1       	rcall	.+922    	; 0x31f0 <__divmodsi4>
    2e56:	49 01       	movw	r8, r18
    2e58:	5a 01       	movw	r10, r20
    2e5a:	9b 01       	movw	r18, r22
    2e5c:	ac 01       	movw	r20, r24
    2e5e:	a7 ea       	ldi	r26, 0xA7	; 167
    2e60:	b1 e4       	ldi	r27, 0x41	; 65
    2e62:	c3 df       	rcall	.-122    	; 0x2dea <__muluhisi3>
    2e64:	6b 01       	movw	r12, r22
    2e66:	7c 01       	movw	r14, r24
    2e68:	ac ee       	ldi	r26, 0xEC	; 236
    2e6a:	b4 ef       	ldi	r27, 0xF4	; 244
    2e6c:	a5 01       	movw	r20, r10
    2e6e:	94 01       	movw	r18, r8
    2e70:	dd d1       	rcall	.+954    	; 0x322c <__mulohisi3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	8c 0d       	add	r24, r12
    2e78:	9d 1d       	adc	r25, r13
    2e7a:	ae 1d       	adc	r26, r14
    2e7c:	bf 1d       	adc	r27, r15
    2e7e:	b7 ff       	sbrs	r27, 7
    2e80:	03 c0       	rjmp	.+6      	; 0x2e88 <do_rand+0x6c>
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	a1 09       	sbc	r26, r1
    2e86:	b0 48       	sbci	r27, 0x80	; 128
    2e88:	88 83       	st	Y, r24
    2e8a:	99 83       	std	Y+1, r25	; 0x01
    2e8c:	aa 83       	std	Y+2, r26	; 0x02
    2e8e:	bb 83       	std	Y+3, r27	; 0x03
    2e90:	9f 77       	andi	r25, 0x7F	; 127
    2e92:	df 91       	pop	r29
    2e94:	cf 91       	pop	r28
    2e96:	ff 90       	pop	r15
    2e98:	ef 90       	pop	r14
    2e9a:	df 90       	pop	r13
    2e9c:	cf 90       	pop	r12
    2e9e:	bf 90       	pop	r11
    2ea0:	af 90       	pop	r10
    2ea2:	9f 90       	pop	r9
    2ea4:	8f 90       	pop	r8
    2ea6:	08 95       	ret

00002ea8 <rand_r>:
    2ea8:	b9 cf       	rjmp	.-142    	; 0x2e1c <do_rand>

00002eaa <rand>:
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	92 e0       	ldi	r25, 0x02	; 2
    2eae:	b6 cf       	rjmp	.-148    	; 0x2e1c <do_rand>

00002eb0 <srand>:
    2eb0:	a0 e0       	ldi	r26, 0x00	; 0
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    2eb8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    2ebc:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    2ec0:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    2ec4:	08 95       	ret

00002ec6 <memcpy>:
    2ec6:	fb 01       	movw	r30, r22
    2ec8:	dc 01       	movw	r26, r24
    2eca:	02 c0       	rjmp	.+4      	; 0x2ed0 <memcpy+0xa>
    2ecc:	01 90       	ld	r0, Z+
    2ece:	0d 92       	st	X+, r0
    2ed0:	41 50       	subi	r20, 0x01	; 1
    2ed2:	50 40       	sbci	r21, 0x00	; 0
    2ed4:	d8 f7       	brcc	.-10     	; 0x2ecc <memcpy+0x6>
    2ed6:	08 95       	ret

00002ed8 <fdevopen>:
    2ed8:	0f 93       	push	r16
    2eda:	1f 93       	push	r17
    2edc:	cf 93       	push	r28
    2ede:	df 93       	push	r29
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	31 f4       	brne	.+12     	; 0x2ef0 <fdevopen+0x18>
    2ee4:	61 15       	cp	r22, r1
    2ee6:	71 05       	cpc	r23, r1
    2ee8:	19 f4       	brne	.+6      	; 0x2ef0 <fdevopen+0x18>
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	39 c0       	rjmp	.+114    	; 0x2f62 <fdevopen+0x8a>
    2ef0:	8b 01       	movw	r16, r22
    2ef2:	ec 01       	movw	r28, r24
    2ef4:	6e e0       	ldi	r22, 0x0E	; 14
    2ef6:	70 e0       	ldi	r23, 0x00	; 0
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	37 d0       	rcall	.+110    	; 0x2f6c <calloc>
    2efe:	fc 01       	movw	r30, r24
    2f00:	89 2b       	or	r24, r25
    2f02:	99 f3       	breq	.-26     	; 0x2eea <fdevopen+0x12>
    2f04:	80 e8       	ldi	r24, 0x80	; 128
    2f06:	83 83       	std	Z+3, r24	; 0x03
    2f08:	01 15       	cp	r16, r1
    2f0a:	11 05       	cpc	r17, r1
    2f0c:	71 f0       	breq	.+28     	; 0x2f2a <fdevopen+0x52>
    2f0e:	13 87       	std	Z+11, r17	; 0x0b
    2f10:	02 87       	std	Z+10, r16	; 0x0a
    2f12:	81 e8       	ldi	r24, 0x81	; 129
    2f14:	83 83       	std	Z+3, r24	; 0x03
    2f16:	80 91 43 11 	lds	r24, 0x1143	; 0x801143 <__iob>
    2f1a:	90 91 44 11 	lds	r25, 0x1144	; 0x801144 <__iob+0x1>
    2f1e:	89 2b       	or	r24, r25
    2f20:	21 f4       	brne	.+8      	; 0x2f2a <fdevopen+0x52>
    2f22:	f0 93 44 11 	sts	0x1144, r31	; 0x801144 <__iob+0x1>
    2f26:	e0 93 43 11 	sts	0x1143, r30	; 0x801143 <__iob>
    2f2a:	20 97       	sbiw	r28, 0x00	; 0
    2f2c:	c9 f0       	breq	.+50     	; 0x2f60 <fdevopen+0x88>
    2f2e:	d1 87       	std	Z+9, r29	; 0x09
    2f30:	c0 87       	std	Z+8, r28	; 0x08
    2f32:	83 81       	ldd	r24, Z+3	; 0x03
    2f34:	82 60       	ori	r24, 0x02	; 2
    2f36:	83 83       	std	Z+3, r24	; 0x03
    2f38:	80 91 45 11 	lds	r24, 0x1145	; 0x801145 <__iob+0x2>
    2f3c:	90 91 46 11 	lds	r25, 0x1146	; 0x801146 <__iob+0x3>
    2f40:	89 2b       	or	r24, r25
    2f42:	71 f4       	brne	.+28     	; 0x2f60 <fdevopen+0x88>
    2f44:	f0 93 46 11 	sts	0x1146, r31	; 0x801146 <__iob+0x3>
    2f48:	e0 93 45 11 	sts	0x1145, r30	; 0x801145 <__iob+0x2>
    2f4c:	80 91 47 11 	lds	r24, 0x1147	; 0x801147 <__iob+0x4>
    2f50:	90 91 48 11 	lds	r25, 0x1148	; 0x801148 <__iob+0x5>
    2f54:	89 2b       	or	r24, r25
    2f56:	21 f4       	brne	.+8      	; 0x2f60 <fdevopen+0x88>
    2f58:	f0 93 48 11 	sts	0x1148, r31	; 0x801148 <__iob+0x5>
    2f5c:	e0 93 47 11 	sts	0x1147, r30	; 0x801147 <__iob+0x4>
    2f60:	cf 01       	movw	r24, r30
    2f62:	df 91       	pop	r29
    2f64:	cf 91       	pop	r28
    2f66:	1f 91       	pop	r17
    2f68:	0f 91       	pop	r16
    2f6a:	08 95       	ret

00002f6c <calloc>:
    2f6c:	0f 93       	push	r16
    2f6e:	1f 93       	push	r17
    2f70:	cf 93       	push	r28
    2f72:	df 93       	push	r29
    2f74:	86 9f       	mul	r24, r22
    2f76:	80 01       	movw	r16, r0
    2f78:	87 9f       	mul	r24, r23
    2f7a:	10 0d       	add	r17, r0
    2f7c:	96 9f       	mul	r25, r22
    2f7e:	10 0d       	add	r17, r0
    2f80:	11 24       	eor	r1, r1
    2f82:	c8 01       	movw	r24, r16
    2f84:	0d d0       	rcall	.+26     	; 0x2fa0 <malloc>
    2f86:	ec 01       	movw	r28, r24
    2f88:	00 97       	sbiw	r24, 0x00	; 0
    2f8a:	21 f0       	breq	.+8      	; 0x2f94 <calloc+0x28>
    2f8c:	a8 01       	movw	r20, r16
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	70 e0       	ldi	r23, 0x00	; 0
    2f92:	27 d1       	rcall	.+590    	; 0x31e2 <memset>
    2f94:	ce 01       	movw	r24, r28
    2f96:	df 91       	pop	r29
    2f98:	cf 91       	pop	r28
    2f9a:	1f 91       	pop	r17
    2f9c:	0f 91       	pop	r16
    2f9e:	08 95       	ret

00002fa0 <malloc>:
    2fa0:	0f 93       	push	r16
    2fa2:	1f 93       	push	r17
    2fa4:	cf 93       	push	r28
    2fa6:	df 93       	push	r29
    2fa8:	82 30       	cpi	r24, 0x02	; 2
    2faa:	91 05       	cpc	r25, r1
    2fac:	10 f4       	brcc	.+4      	; 0x2fb2 <malloc+0x12>
    2fae:	82 e0       	ldi	r24, 0x02	; 2
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	e0 91 4b 11 	lds	r30, 0x114B	; 0x80114b <__flp>
    2fb6:	f0 91 4c 11 	lds	r31, 0x114C	; 0x80114c <__flp+0x1>
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	a0 e0       	ldi	r26, 0x00	; 0
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	30 97       	sbiw	r30, 0x00	; 0
    2fc4:	19 f1       	breq	.+70     	; 0x300c <malloc+0x6c>
    2fc6:	40 81       	ld	r20, Z
    2fc8:	51 81       	ldd	r21, Z+1	; 0x01
    2fca:	02 81       	ldd	r16, Z+2	; 0x02
    2fcc:	13 81       	ldd	r17, Z+3	; 0x03
    2fce:	48 17       	cp	r20, r24
    2fd0:	59 07       	cpc	r21, r25
    2fd2:	c8 f0       	brcs	.+50     	; 0x3006 <malloc+0x66>
    2fd4:	84 17       	cp	r24, r20
    2fd6:	95 07       	cpc	r25, r21
    2fd8:	69 f4       	brne	.+26     	; 0x2ff4 <malloc+0x54>
    2fda:	10 97       	sbiw	r26, 0x00	; 0
    2fdc:	31 f0       	breq	.+12     	; 0x2fea <malloc+0x4a>
    2fde:	12 96       	adiw	r26, 0x02	; 2
    2fe0:	0c 93       	st	X, r16
    2fe2:	12 97       	sbiw	r26, 0x02	; 2
    2fe4:	13 96       	adiw	r26, 0x03	; 3
    2fe6:	1c 93       	st	X, r17
    2fe8:	27 c0       	rjmp	.+78     	; 0x3038 <malloc+0x98>
    2fea:	00 93 4b 11 	sts	0x114B, r16	; 0x80114b <__flp>
    2fee:	10 93 4c 11 	sts	0x114C, r17	; 0x80114c <__flp+0x1>
    2ff2:	22 c0       	rjmp	.+68     	; 0x3038 <malloc+0x98>
    2ff4:	21 15       	cp	r18, r1
    2ff6:	31 05       	cpc	r19, r1
    2ff8:	19 f0       	breq	.+6      	; 0x3000 <malloc+0x60>
    2ffa:	42 17       	cp	r20, r18
    2ffc:	53 07       	cpc	r21, r19
    2ffe:	18 f4       	brcc	.+6      	; 0x3006 <malloc+0x66>
    3000:	9a 01       	movw	r18, r20
    3002:	bd 01       	movw	r22, r26
    3004:	ef 01       	movw	r28, r30
    3006:	df 01       	movw	r26, r30
    3008:	f8 01       	movw	r30, r16
    300a:	db cf       	rjmp	.-74     	; 0x2fc2 <malloc+0x22>
    300c:	21 15       	cp	r18, r1
    300e:	31 05       	cpc	r19, r1
    3010:	f9 f0       	breq	.+62     	; 0x3050 <malloc+0xb0>
    3012:	28 1b       	sub	r18, r24
    3014:	39 0b       	sbc	r19, r25
    3016:	24 30       	cpi	r18, 0x04	; 4
    3018:	31 05       	cpc	r19, r1
    301a:	80 f4       	brcc	.+32     	; 0x303c <malloc+0x9c>
    301c:	8a 81       	ldd	r24, Y+2	; 0x02
    301e:	9b 81       	ldd	r25, Y+3	; 0x03
    3020:	61 15       	cp	r22, r1
    3022:	71 05       	cpc	r23, r1
    3024:	21 f0       	breq	.+8      	; 0x302e <malloc+0x8e>
    3026:	fb 01       	movw	r30, r22
    3028:	93 83       	std	Z+3, r25	; 0x03
    302a:	82 83       	std	Z+2, r24	; 0x02
    302c:	04 c0       	rjmp	.+8      	; 0x3036 <malloc+0x96>
    302e:	90 93 4c 11 	sts	0x114C, r25	; 0x80114c <__flp+0x1>
    3032:	80 93 4b 11 	sts	0x114B, r24	; 0x80114b <__flp>
    3036:	fe 01       	movw	r30, r28
    3038:	32 96       	adiw	r30, 0x02	; 2
    303a:	44 c0       	rjmp	.+136    	; 0x30c4 <malloc+0x124>
    303c:	fe 01       	movw	r30, r28
    303e:	e2 0f       	add	r30, r18
    3040:	f3 1f       	adc	r31, r19
    3042:	81 93       	st	Z+, r24
    3044:	91 93       	st	Z+, r25
    3046:	22 50       	subi	r18, 0x02	; 2
    3048:	31 09       	sbc	r19, r1
    304a:	39 83       	std	Y+1, r19	; 0x01
    304c:	28 83       	st	Y, r18
    304e:	3a c0       	rjmp	.+116    	; 0x30c4 <malloc+0x124>
    3050:	20 91 49 11 	lds	r18, 0x1149	; 0x801149 <__brkval>
    3054:	30 91 4a 11 	lds	r19, 0x114A	; 0x80114a <__brkval+0x1>
    3058:	23 2b       	or	r18, r19
    305a:	41 f4       	brne	.+16     	; 0x306c <malloc+0xcc>
    305c:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__malloc_heap_start>
    3060:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__malloc_heap_start+0x1>
    3064:	30 93 4a 11 	sts	0x114A, r19	; 0x80114a <__brkval+0x1>
    3068:	20 93 49 11 	sts	0x1149, r18	; 0x801149 <__brkval>
    306c:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__malloc_heap_end>
    3070:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__malloc_heap_end+0x1>
    3074:	21 15       	cp	r18, r1
    3076:	31 05       	cpc	r19, r1
    3078:	41 f4       	brne	.+16     	; 0x308a <malloc+0xea>
    307a:	2d b7       	in	r18, 0x3d	; 61
    307c:	3e b7       	in	r19, 0x3e	; 62
    307e:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <__malloc_margin>
    3082:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <__malloc_margin+0x1>
    3086:	24 1b       	sub	r18, r20
    3088:	35 0b       	sbc	r19, r21
    308a:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <__brkval>
    308e:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <__brkval+0x1>
    3092:	e2 17       	cp	r30, r18
    3094:	f3 07       	cpc	r31, r19
    3096:	a0 f4       	brcc	.+40     	; 0x30c0 <malloc+0x120>
    3098:	2e 1b       	sub	r18, r30
    309a:	3f 0b       	sbc	r19, r31
    309c:	28 17       	cp	r18, r24
    309e:	39 07       	cpc	r19, r25
    30a0:	78 f0       	brcs	.+30     	; 0x30c0 <malloc+0x120>
    30a2:	ac 01       	movw	r20, r24
    30a4:	4e 5f       	subi	r20, 0xFE	; 254
    30a6:	5f 4f       	sbci	r21, 0xFF	; 255
    30a8:	24 17       	cp	r18, r20
    30aa:	35 07       	cpc	r19, r21
    30ac:	48 f0       	brcs	.+18     	; 0x30c0 <malloc+0x120>
    30ae:	4e 0f       	add	r20, r30
    30b0:	5f 1f       	adc	r21, r31
    30b2:	50 93 4a 11 	sts	0x114A, r21	; 0x80114a <__brkval+0x1>
    30b6:	40 93 49 11 	sts	0x1149, r20	; 0x801149 <__brkval>
    30ba:	81 93       	st	Z+, r24
    30bc:	91 93       	st	Z+, r25
    30be:	02 c0       	rjmp	.+4      	; 0x30c4 <malloc+0x124>
    30c0:	e0 e0       	ldi	r30, 0x00	; 0
    30c2:	f0 e0       	ldi	r31, 0x00	; 0
    30c4:	cf 01       	movw	r24, r30
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	1f 91       	pop	r17
    30cc:	0f 91       	pop	r16
    30ce:	08 95       	ret

000030d0 <free>:
    30d0:	cf 93       	push	r28
    30d2:	df 93       	push	r29
    30d4:	00 97       	sbiw	r24, 0x00	; 0
    30d6:	09 f4       	brne	.+2      	; 0x30da <free+0xa>
    30d8:	81 c0       	rjmp	.+258    	; 0x31dc <free+0x10c>
    30da:	fc 01       	movw	r30, r24
    30dc:	32 97       	sbiw	r30, 0x02	; 2
    30de:	13 82       	std	Z+3, r1	; 0x03
    30e0:	12 82       	std	Z+2, r1	; 0x02
    30e2:	a0 91 4b 11 	lds	r26, 0x114B	; 0x80114b <__flp>
    30e6:	b0 91 4c 11 	lds	r27, 0x114C	; 0x80114c <__flp+0x1>
    30ea:	10 97       	sbiw	r26, 0x00	; 0
    30ec:	81 f4       	brne	.+32     	; 0x310e <free+0x3e>
    30ee:	20 81       	ld	r18, Z
    30f0:	31 81       	ldd	r19, Z+1	; 0x01
    30f2:	82 0f       	add	r24, r18
    30f4:	93 1f       	adc	r25, r19
    30f6:	20 91 49 11 	lds	r18, 0x1149	; 0x801149 <__brkval>
    30fa:	30 91 4a 11 	lds	r19, 0x114A	; 0x80114a <__brkval+0x1>
    30fe:	28 17       	cp	r18, r24
    3100:	39 07       	cpc	r19, r25
    3102:	51 f5       	brne	.+84     	; 0x3158 <free+0x88>
    3104:	f0 93 4a 11 	sts	0x114A, r31	; 0x80114a <__brkval+0x1>
    3108:	e0 93 49 11 	sts	0x1149, r30	; 0x801149 <__brkval>
    310c:	67 c0       	rjmp	.+206    	; 0x31dc <free+0x10c>
    310e:	ed 01       	movw	r28, r26
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	ce 17       	cp	r28, r30
    3116:	df 07       	cpc	r29, r31
    3118:	40 f4       	brcc	.+16     	; 0x312a <free+0x5a>
    311a:	4a 81       	ldd	r20, Y+2	; 0x02
    311c:	5b 81       	ldd	r21, Y+3	; 0x03
    311e:	9e 01       	movw	r18, r28
    3120:	41 15       	cp	r20, r1
    3122:	51 05       	cpc	r21, r1
    3124:	f1 f0       	breq	.+60     	; 0x3162 <free+0x92>
    3126:	ea 01       	movw	r28, r20
    3128:	f5 cf       	rjmp	.-22     	; 0x3114 <free+0x44>
    312a:	d3 83       	std	Z+3, r29	; 0x03
    312c:	c2 83       	std	Z+2, r28	; 0x02
    312e:	40 81       	ld	r20, Z
    3130:	51 81       	ldd	r21, Z+1	; 0x01
    3132:	84 0f       	add	r24, r20
    3134:	95 1f       	adc	r25, r21
    3136:	c8 17       	cp	r28, r24
    3138:	d9 07       	cpc	r29, r25
    313a:	59 f4       	brne	.+22     	; 0x3152 <free+0x82>
    313c:	88 81       	ld	r24, Y
    313e:	99 81       	ldd	r25, Y+1	; 0x01
    3140:	84 0f       	add	r24, r20
    3142:	95 1f       	adc	r25, r21
    3144:	02 96       	adiw	r24, 0x02	; 2
    3146:	91 83       	std	Z+1, r25	; 0x01
    3148:	80 83       	st	Z, r24
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	9b 81       	ldd	r25, Y+3	; 0x03
    314e:	93 83       	std	Z+3, r25	; 0x03
    3150:	82 83       	std	Z+2, r24	; 0x02
    3152:	21 15       	cp	r18, r1
    3154:	31 05       	cpc	r19, r1
    3156:	29 f4       	brne	.+10     	; 0x3162 <free+0x92>
    3158:	f0 93 4c 11 	sts	0x114C, r31	; 0x80114c <__flp+0x1>
    315c:	e0 93 4b 11 	sts	0x114B, r30	; 0x80114b <__flp>
    3160:	3d c0       	rjmp	.+122    	; 0x31dc <free+0x10c>
    3162:	e9 01       	movw	r28, r18
    3164:	fb 83       	std	Y+3, r31	; 0x03
    3166:	ea 83       	std	Y+2, r30	; 0x02
    3168:	49 91       	ld	r20, Y+
    316a:	59 91       	ld	r21, Y+
    316c:	c4 0f       	add	r28, r20
    316e:	d5 1f       	adc	r29, r21
    3170:	ec 17       	cp	r30, r28
    3172:	fd 07       	cpc	r31, r29
    3174:	61 f4       	brne	.+24     	; 0x318e <free+0xbe>
    3176:	80 81       	ld	r24, Z
    3178:	91 81       	ldd	r25, Z+1	; 0x01
    317a:	84 0f       	add	r24, r20
    317c:	95 1f       	adc	r25, r21
    317e:	02 96       	adiw	r24, 0x02	; 2
    3180:	e9 01       	movw	r28, r18
    3182:	99 83       	std	Y+1, r25	; 0x01
    3184:	88 83       	st	Y, r24
    3186:	82 81       	ldd	r24, Z+2	; 0x02
    3188:	93 81       	ldd	r25, Z+3	; 0x03
    318a:	9b 83       	std	Y+3, r25	; 0x03
    318c:	8a 83       	std	Y+2, r24	; 0x02
    318e:	e0 e0       	ldi	r30, 0x00	; 0
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	12 96       	adiw	r26, 0x02	; 2
    3194:	8d 91       	ld	r24, X+
    3196:	9c 91       	ld	r25, X
    3198:	13 97       	sbiw	r26, 0x03	; 3
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	19 f0       	breq	.+6      	; 0x31a4 <free+0xd4>
    319e:	fd 01       	movw	r30, r26
    31a0:	dc 01       	movw	r26, r24
    31a2:	f7 cf       	rjmp	.-18     	; 0x3192 <free+0xc2>
    31a4:	8d 91       	ld	r24, X+
    31a6:	9c 91       	ld	r25, X
    31a8:	11 97       	sbiw	r26, 0x01	; 1
    31aa:	9d 01       	movw	r18, r26
    31ac:	2e 5f       	subi	r18, 0xFE	; 254
    31ae:	3f 4f       	sbci	r19, 0xFF	; 255
    31b0:	82 0f       	add	r24, r18
    31b2:	93 1f       	adc	r25, r19
    31b4:	20 91 49 11 	lds	r18, 0x1149	; 0x801149 <__brkval>
    31b8:	30 91 4a 11 	lds	r19, 0x114A	; 0x80114a <__brkval+0x1>
    31bc:	28 17       	cp	r18, r24
    31be:	39 07       	cpc	r19, r25
    31c0:	69 f4       	brne	.+26     	; 0x31dc <free+0x10c>
    31c2:	30 97       	sbiw	r30, 0x00	; 0
    31c4:	29 f4       	brne	.+10     	; 0x31d0 <free+0x100>
    31c6:	10 92 4c 11 	sts	0x114C, r1	; 0x80114c <__flp+0x1>
    31ca:	10 92 4b 11 	sts	0x114B, r1	; 0x80114b <__flp>
    31ce:	02 c0       	rjmp	.+4      	; 0x31d4 <free+0x104>
    31d0:	13 82       	std	Z+3, r1	; 0x03
    31d2:	12 82       	std	Z+2, r1	; 0x02
    31d4:	b0 93 4a 11 	sts	0x114A, r27	; 0x80114a <__brkval+0x1>
    31d8:	a0 93 49 11 	sts	0x1149, r26	; 0x801149 <__brkval>
    31dc:	df 91       	pop	r29
    31de:	cf 91       	pop	r28
    31e0:	08 95       	ret

000031e2 <memset>:
    31e2:	dc 01       	movw	r26, r24
    31e4:	01 c0       	rjmp	.+2      	; 0x31e8 <memset+0x6>
    31e6:	6d 93       	st	X+, r22
    31e8:	41 50       	subi	r20, 0x01	; 1
    31ea:	50 40       	sbci	r21, 0x00	; 0
    31ec:	e0 f7       	brcc	.-8      	; 0x31e6 <memset+0x4>
    31ee:	08 95       	ret

000031f0 <__divmodsi4>:
    31f0:	05 2e       	mov	r0, r21
    31f2:	97 fb       	bst	r25, 7
    31f4:	16 f4       	brtc	.+4      	; 0x31fa <__divmodsi4+0xa>
    31f6:	00 94       	com	r0
    31f8:	0f d0       	rcall	.+30     	; 0x3218 <__negsi2>
    31fa:	57 fd       	sbrc	r21, 7
    31fc:	05 d0       	rcall	.+10     	; 0x3208 <__divmodsi4_neg2>
    31fe:	d3 dd       	rcall	.-1114   	; 0x2da6 <__udivmodsi4>
    3200:	07 fc       	sbrc	r0, 7
    3202:	02 d0       	rcall	.+4      	; 0x3208 <__divmodsi4_neg2>
    3204:	46 f4       	brtc	.+16     	; 0x3216 <__divmodsi4_exit>
    3206:	08 c0       	rjmp	.+16     	; 0x3218 <__negsi2>

00003208 <__divmodsi4_neg2>:
    3208:	50 95       	com	r21
    320a:	40 95       	com	r20
    320c:	30 95       	com	r19
    320e:	21 95       	neg	r18
    3210:	3f 4f       	sbci	r19, 0xFF	; 255
    3212:	4f 4f       	sbci	r20, 0xFF	; 255
    3214:	5f 4f       	sbci	r21, 0xFF	; 255

00003216 <__divmodsi4_exit>:
    3216:	08 95       	ret

00003218 <__negsi2>:
    3218:	90 95       	com	r25
    321a:	80 95       	com	r24
    321c:	70 95       	com	r23
    321e:	61 95       	neg	r22
    3220:	7f 4f       	sbci	r23, 0xFF	; 255
    3222:	8f 4f       	sbci	r24, 0xFF	; 255
    3224:	9f 4f       	sbci	r25, 0xFF	; 255
    3226:	08 95       	ret

00003228 <__mulshisi3>:
    3228:	b7 ff       	sbrs	r27, 7
    322a:	df cd       	rjmp	.-1090   	; 0x2dea <__muluhisi3>

0000322c <__mulohisi3>:
    322c:	de dd       	rcall	.-1092   	; 0x2dea <__muluhisi3>
    322e:	82 1b       	sub	r24, r18
    3230:	93 0b       	sbc	r25, r19
    3232:	08 95       	ret

00003234 <_exit>:
    3234:	f8 94       	cli

00003236 <__stop_program>:
    3236:	ff cf       	rjmp	.-2      	; 0x3236 <__stop_program>
