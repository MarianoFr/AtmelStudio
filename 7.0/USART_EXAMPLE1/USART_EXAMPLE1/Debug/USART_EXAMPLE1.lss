
USART_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  00000420  00000494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000420  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000288f  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001a83  00000000  00000000  00002e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a00  00000000  00000000  000048f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e8  00000000  00000000  000062f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000183b6  00000000  00000000  000064e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f6a  00000000  00000000  0001e896  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0001f800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00006e3d  00000000  00000000  0001f8b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	ae c0       	rjmp	.+348    	; 0x162 <__bad_interrupt>
   6:	00 00       	nop
   8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
   a:	00 00       	nop
   c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
   e:	00 00       	nop
  10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
  12:	00 00       	nop
  14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
  16:	00 00       	nop
  18:	a4 c0       	rjmp	.+328    	; 0x162 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
  22:	00 00       	nop
  24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
  26:	00 00       	nop
  28:	9c c0       	rjmp	.+312    	; 0x162 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9a c0       	rjmp	.+308    	; 0x162 <__bad_interrupt>
  2e:	00 00       	nop
  30:	98 c0       	rjmp	.+304    	; 0x162 <__bad_interrupt>
  32:	00 00       	nop
  34:	96 c0       	rjmp	.+300    	; 0x162 <__bad_interrupt>
  36:	00 00       	nop
  38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	92 c0       	rjmp	.+292    	; 0x162 <__bad_interrupt>
  3e:	00 00       	nop
  40:	90 c0       	rjmp	.+288    	; 0x162 <__bad_interrupt>
  42:	00 00       	nop
  44:	8e c0       	rjmp	.+284    	; 0x162 <__bad_interrupt>
  46:	00 00       	nop
  48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
  4e:	00 00       	nop
  50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
  52:	00 00       	nop
  54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
  56:	00 00       	nop
  58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	82 c0       	rjmp	.+260    	; 0x162 <__bad_interrupt>
  5e:	00 00       	nop
  60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
  62:	00 00       	nop
  64:	7e c0       	rjmp	.+252    	; 0x162 <__bad_interrupt>
  66:	00 00       	nop
  68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
  6e:	00 00       	nop
  70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
  72:	00 00       	nop
  74:	76 c0       	rjmp	.+236    	; 0x162 <__bad_interrupt>
  76:	00 00       	nop
  78:	74 c0       	rjmp	.+232    	; 0x162 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	72 c0       	rjmp	.+228    	; 0x162 <__bad_interrupt>
  7e:	00 00       	nop
  80:	70 c0       	rjmp	.+224    	; 0x162 <__bad_interrupt>
  82:	00 00       	nop
  84:	6e c0       	rjmp	.+220    	; 0x162 <__bad_interrupt>
  86:	00 00       	nop
  88:	6c c0       	rjmp	.+216    	; 0x162 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6a c0       	rjmp	.+212    	; 0x162 <__bad_interrupt>
  8e:	00 00       	nop
  90:	68 c0       	rjmp	.+208    	; 0x162 <__bad_interrupt>
  92:	00 00       	nop
  94:	66 c0       	rjmp	.+204    	; 0x162 <__bad_interrupt>
  96:	00 00       	nop
  98:	64 c0       	rjmp	.+200    	; 0x162 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	62 c0       	rjmp	.+196    	; 0x162 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	60 c0       	rjmp	.+192    	; 0x162 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	5e c0       	rjmp	.+188    	; 0x162 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	5c c0       	rjmp	.+184    	; 0x162 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	5a c0       	rjmp	.+180    	; 0x162 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	58 c0       	rjmp	.+176    	; 0x162 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	56 c0       	rjmp	.+172    	; 0x162 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	54 c0       	rjmp	.+168    	; 0x162 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	52 c0       	rjmp	.+164    	; 0x162 <__bad_interrupt>
  be:	00 00       	nop
  c0:	50 c0       	rjmp	.+160    	; 0x162 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	4e c0       	rjmp	.+156    	; 0x162 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	4c c0       	rjmp	.+152    	; 0x162 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	4a c0       	rjmp	.+148    	; 0x162 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	48 c0       	rjmp	.+144    	; 0x162 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	46 c0       	rjmp	.+140    	; 0x162 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	44 c0       	rjmp	.+136    	; 0x162 <__bad_interrupt>
  da:	00 00       	nop
  dc:	42 c0       	rjmp	.+132    	; 0x162 <__bad_interrupt>
  de:	00 00       	nop
  e0:	40 c0       	rjmp	.+128    	; 0x162 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	3e c0       	rjmp	.+124    	; 0x162 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	3c c0       	rjmp	.+120    	; 0x162 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	3a c0       	rjmp	.+116    	; 0x162 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	38 c0       	rjmp	.+112    	; 0x162 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	36 c0       	rjmp	.+108    	; 0x162 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	34 c0       	rjmp	.+104    	; 0x162 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	32 c0       	rjmp	.+100    	; 0x162 <__bad_interrupt>
  fe:	00 00       	nop
 100:	30 c0       	rjmp	.+96     	; 0x162 <__bad_interrupt>
 102:	00 00       	nop
 104:	2e c0       	rjmp	.+92     	; 0x162 <__bad_interrupt>
 106:	00 00       	nop
 108:	2c c0       	rjmp	.+88     	; 0x162 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	2a c0       	rjmp	.+84     	; 0x162 <__bad_interrupt>
 10e:	00 00       	nop
 110:	28 c0       	rjmp	.+80     	; 0x162 <__bad_interrupt>
 112:	00 00       	nop
 114:	26 c0       	rjmp	.+76     	; 0x162 <__bad_interrupt>
 116:	00 00       	nop
 118:	24 c0       	rjmp	.+72     	; 0x162 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	22 c0       	rjmp	.+68     	; 0x162 <__bad_interrupt>
 11e:	00 00       	nop
 120:	20 c0       	rjmp	.+64     	; 0x162 <__bad_interrupt>
 122:	00 00       	nop
 124:	1e c0       	rjmp	.+60     	; 0x162 <__bad_interrupt>
 126:	00 00       	nop
 128:	1c c0       	rjmp	.+56     	; 0x162 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	1a c0       	rjmp	.+52     	; 0x162 <__bad_interrupt>
 12e:	00 00       	nop
 130:	18 c0       	rjmp	.+48     	; 0x162 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	e0 e2       	ldi	r30, 0x20	; 32
 14c:	f4 e0       	ldi	r31, 0x04	; 4
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	ae 31       	cpi	r26, 0x1E	; 30
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>
 15e:	fb d0       	rcall	.+502    	; 0x356 <main>
 160:	5d c1       	rjmp	.+698    	; 0x41c <_exit>

00000162 <__bad_interrupt>:
 162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	1f 92       	push	r1
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
 174:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 178:	8f b7       	in	r24, 0x3f	; 63
 17a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 17c:	f8 94       	cli
	return flags;
 17e:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
 180:	5f 93       	push	r21
 182:	50 e8       	ldi	r21, 0x80	; 128
 184:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
 18e:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 190:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
 192:	0f 90       	pop	r0
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	1f 92       	push	r1
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 1a4:	9f b7       	in	r25, 0x3f	; 63
 1a6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 1a8:	f8 94       	cli
	return flags;
 1aa:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	40 f4       	brcc	.+16     	; 0x1c0 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
 1b0:	e8 2f       	mov	r30, r24
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	ec 59       	subi	r30, 0x9C	; 156
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	60 95       	com	r22
 1ba:	80 81       	ld	r24, Z
 1bc:	68 23       	and	r22, r24
 1be:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 1c0:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
 1c2:	0f 90       	pop	r0
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 1ca:	2c 9a       	sbi	0x05, 4	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 1cc:	24 9a       	sbi	0x04, 4	; 4
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 1ce:	6c 98       	cbi	0x0d, 4	; 13
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 1d0:	74 9a       	sbi	0x0e, 4	; 14
 1d2:	08 95       	ret

000001d4 <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
 1d4:	fc 01       	movw	r30, r24
 1d6:	90 81       	ld	r25, Z
 1d8:	95 ff       	sbrs	r25, 5
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <usart_putchar+0x2>
 1dc:	66 83       	std	Z+6, r22	; 0x06
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	08 95       	ret

000001e2 <usart_getchar>:
 1e2:	fc 01       	movw	r30, r24
 1e4:	90 81       	ld	r25, Z
 1e6:	99 23       	and	r25, r25
 1e8:	ec f7       	brge	.-6      	; 0x1e4 <usart_getchar+0x2>
 1ea:	86 81       	ldd	r24, Z+6	; 0x06
 1ec:	08 95       	ret

000001ee <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 1ee:	8f 92       	push	r8
 1f0:	9f 92       	push	r9
 1f2:	af 92       	push	r10
 1f4:	bf 92       	push	r11
 1f6:	cf 92       	push	r12
 1f8:	df 92       	push	r13
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ec 01       	movw	r28, r24
 208:	6a 01       	movw	r12, r20
 20a:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
 20c:	c9 01       	movw	r24, r18
 20e:	b8 01       	movw	r22, r16
 210:	68 94       	set
 212:	12 f8       	bld	r1, 2
 214:	96 95       	lsr	r25
 216:	87 95       	ror	r24
 218:	77 95       	ror	r23
 21a:	67 95       	ror	r22
 21c:	16 94       	lsr	r1
 21e:	d1 f7       	brne	.-12     	; 0x214 <usart_set_baudrate+0x26>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
	
	if( baud <= max_rate && baud > max_rate/2 ){
 220:	6c 15       	cp	r22, r12
 222:	7d 05       	cpc	r23, r13
 224:	8e 05       	cpc	r24, r14
 226:	9f 05       	cpc	r25, r15
 228:	68 f1       	brcs	.+90     	; 0x284 <usart_set_baudrate+0x96>
 22a:	48 01       	movw	r8, r16
 22c:	59 01       	movw	r10, r18
 22e:	68 94       	set
 230:	13 f8       	bld	r1, 3
 232:	b6 94       	lsr	r11
 234:	a7 94       	ror	r10
 236:	97 94       	ror	r9
 238:	87 94       	ror	r8
 23a:	16 94       	lsr	r1
 23c:	d1 f7       	brne	.-12     	; 0x232 <usart_set_baudrate+0x44>
 23e:	8c 14       	cp	r8, r12
 240:	9d 04       	cpc	r9, r13
 242:	ae 04       	cpc	r10, r14
 244:	bf 04       	cpc	r11, r15
 246:	10 f5       	brcc	.+68     	; 0x28c <usart_set_baudrate+0x9e>
 *
 * \param usart The USART module.
 */
static inline void usart_double_baud_enable(USART_t *usart)
{
	usart->UCSRnA |=  USART_U2X_bm;
 248:	e8 81       	ld	r30, Y
 24a:	e2 60       	ori	r30, 0x02	; 2
 24c:	e8 83       	st	Y, r30
 24e:	1e c0       	rjmp	.+60     	; 0x28c <usart_set_baudrate+0x9e>
		//LED_On(LED0);
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
 250:	28 81       	ld	r18, Y
 252:	21 ff       	sbrs	r18, 1
 254:	09 c0       	rjmp	.+18     	; 0x268 <usart_set_baudrate+0x7a>
		//baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
 256:	a7 01       	movw	r20, r14
 258:	96 01       	movw	r18, r12
 25a:	be d0       	rcall	.+380    	; 0x3d8 <__udivmodsi4>
 25c:	da 01       	movw	r26, r20
 25e:	c9 01       	movw	r24, r18
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	a1 09       	sbc	r26, r1
 264:	b1 09       	sbc	r27, r1
 266:	0a c0       	rjmp	.+20     	; 0x27c <usart_set_baudrate+0x8e>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
 268:	c5 01       	movw	r24, r10
 26a:	b4 01       	movw	r22, r8
 26c:	a7 01       	movw	r20, r14
 26e:	96 01       	movw	r18, r12
 270:	b3 d0       	rcall	.+358    	; 0x3d8 <__udivmodsi4>
 272:	da 01       	movw	r26, r20
 274:	c9 01       	movw	r24, r18
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	a1 09       	sbc	r26, r1
 27a:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
 27c:	9d 83       	std	Y+5, r25	; 0x05
 27e:	8c 83       	std	Y+4, r24	; 0x04
	return true;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	13 c0       	rjmp	.+38     	; 0x2aa <usart_set_baudrate+0xbc>
		min_rate /= 2;
	}*/

	if ((baud > max_rate) || (baud < min_rate)) {
		//LED_On(LED0);
		return false;
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	11 c0       	rjmp	.+34     	; 0x2aa <usart_set_baudrate+0xbc>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0f c0       	rjmp	.+30     	; 0x2aa <usart_set_baudrate+0xbc>
	/*if (!(usart->UCSRnA & USART_U2X_bm)) {
		max_rate /= 2;
		min_rate /= 2;
	}*/

	if ((baud > max_rate) || (baud < min_rate)) {
 28c:	0f 2e       	mov	r0, r31
 28e:	f3 e1       	ldi	r31, 0x13	; 19
 290:	36 95       	lsr	r19
 292:	27 95       	ror	r18
 294:	17 95       	ror	r17
 296:	07 95       	ror	r16
 298:	fa 95       	dec	r31
 29a:	d1 f7       	brne	.-12     	; 0x290 <usart_set_baudrate+0xa2>
 29c:	f0 2d       	mov	r31, r0
 29e:	c0 16       	cp	r12, r16
 2a0:	d1 06       	cpc	r13, r17
 2a2:	e2 06       	cpc	r14, r18
 2a4:	f3 06       	cpc	r15, r19
 2a6:	a0 f6       	brcc	.-88     	; 0x250 <usart_set_baudrate+0x62>
 2a8:	ef cf       	rjmp	.-34     	; 0x288 <usart_set_baudrate+0x9a>
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	ff 90       	pop	r15
 2b4:	ef 90       	pop	r14
 2b6:	df 90       	pop	r13
 2b8:	cf 90       	pop	r12
 2ba:	bf 90       	pop	r11
 2bc:	af 90       	pop	r10
 2be:	9f 90       	pop	r9
 2c0:	8f 90       	pop	r8
 2c2:	08 95       	ret

000002c4 <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	ec 01       	movw	r28, r24
 2ce:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTA0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
 2d0:	80 3c       	cpi	r24, 0xC0	; 192
 2d2:	91 05       	cpc	r25, r1
 2d4:	21 f4       	brne	.+8      	; 0x2de <usart_init_rs232+0x1a>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
 2d6:	62 e0       	ldi	r22, 0x02	; 2
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	5f df       	rcall	.-322    	; 0x19a <sysclk_enable_module>
 2dc:	06 c0       	rjmp	.+12     	; 0x2ea <usart_init_rs232+0x26>
	}
#endif
#ifdef USARTA1
	if ((uintptr_t)usart == (uintptr_t)&UCSR1A) {
 2de:	88 3c       	cpi	r24, 0xC8	; 200
 2e0:	91 05       	cpc	r25, r1
 2e2:	19 f4       	brne	.+6      	; 0x2ea <usart_init_rs232+0x26>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	58 df       	rcall	.-336    	; 0x19a <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
 2ea:	8a 81       	ldd	r24, Y+2	; 0x02
 2ec:	8f 73       	andi	r24, 0x3F	; 63
 2ee:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
 2f0:	f8 01       	movw	r30, r16
 2f2:	26 81       	ldd	r18, Z+6	; 0x06
 2f4:	35 81       	ldd	r19, Z+5	; 0x05
 2f6:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
 2f8:	9a 81       	ldd	r25, Y+2	; 0x02
 2fa:	48 2f       	mov	r20, r24
 2fc:	43 70       	andi	r20, 0x03	; 3
 2fe:	44 0f       	add	r20, r20
 300:	99 7f       	andi	r25, 0xF9	; 249
 302:	94 2b       	or	r25, r20
 304:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
 306:	99 81       	ldd	r25, Y+1	; 0x01
 308:	84 70       	andi	r24, 0x04	; 4
 30a:	88 0f       	add	r24, r24
 30c:	88 0f       	add	r24, r24
 30e:	9b 7f       	andi	r25, 0xFB	; 251
 310:	89 2b       	or	r24, r25
 312:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
 314:	8a 81       	ldd	r24, Y+2	; 0x02
 316:	8f 7c       	andi	r24, 0xCF	; 207
 318:	83 2b       	or	r24, r19
 31a:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
 31c:	9a 81       	ldd	r25, Y+2	; 0x02
 31e:	97 7f       	andi	r25, 0xF7	; 247
 320:	82 2f       	mov	r24, r18
 322:	88 0f       	add	r24, r24
 324:	88 0f       	add	r24, r24
 326:	88 0f       	add	r24, r24
 328:	89 2b       	or	r24, r25
 32a:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
 32c:	40 81       	ld	r20, Z
 32e:	51 81       	ldd	r21, Z+1	; 0x01
 330:	62 81       	ldd	r22, Z+2	; 0x02
 332:	73 81       	ldd	r23, Z+3	; 0x03
 334:	00 e0       	ldi	r16, 0x00	; 0
 336:	14 e2       	ldi	r17, 0x24	; 36
 338:	24 ef       	ldi	r18, 0xF4	; 244
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	ce 01       	movw	r24, r28
 33e:	57 df       	rcall	.-338    	; 0x1ee <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
 340:	99 81       	ldd	r25, Y+1	; 0x01
 342:	98 60       	ori	r25, 0x08	; 8
 344:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
 346:	99 81       	ldd	r25, Y+1	; 0x01
 348:	90 61       	ori	r25, 0x10	; 16
 34a:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	08 95       	ret

00000356 <main>:
#include <asf.h>

/*! \brief Main function.
 */
int main(void)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	67 97       	sbiw	r28, 0x17	; 23
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
	uint8_t tx_buf[] = "\n\rHello AVR world ! : ";
 36a:	87 e1       	ldi	r24, 0x17	; 23
 36c:	e7 e0       	ldi	r30, 0x07	; 7
 36e:	f2 e0       	ldi	r31, 0x02	; 2
 370:	8e 01       	movw	r16, r28
 372:	0f 5f       	subi	r16, 0xFF	; 255
 374:	1f 4f       	sbci	r17, 0xFF	; 255
 376:	d8 01       	movw	r26, r16
 378:	01 90       	ld	r0, Z+
 37a:	0d 92       	st	X+, r0
 37c:	8a 95       	dec	r24
 37e:	e1 f7       	brne	.-8      	; 0x378 <main+0x22>

	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
 380:	24 df       	rcall	.-440    	; 0x1ca <board_init>
	sysclk_init();
 382:	f0 de       	rcall	.-544    	; 0x164 <sysclk_init>
 384:	60 e0       	ldi	r22, 0x00	; 0
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	/* Initialize usart driver in RS232 mode */
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
 386:	72 e0       	ldi	r23, 0x02	; 2
 388:	88 ec       	ldi	r24, 0xC8	; 200
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	9b df       	rcall	.-202    	; 0x2c4 <usart_init_rs232>
 38e:	c0 2e       	mov	r12, r16
 390:	d1 2e       	mov	r13, r17
 392:	7e 01       	movw	r14, r28
 394:	88 e1       	ldi	r24, 0x18	; 24
 396:	e8 0e       	add	r14, r24
 398:	f1 1c       	adc	r15, r1
 39a:	f8 01       	movw	r30, r16

	/* Send "message header" */
	for (i = 0; i < tx_length; i++) {
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
 39c:	61 91       	ld	r22, Z+
 39e:	8f 01       	movw	r16, r30
 3a0:	88 ec       	ldi	r24, 0xC8	; 200
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	17 df       	rcall	.-466    	; 0x1d4 <usart_putchar>
 3a6:	e0 16       	cp	r14, r16

	/* Initialize usart driver in RS232 mode */
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);

	/* Send "message header" */
	for (i = 0; i < tx_length; i++) {
 3a8:	f1 06       	cpc	r15, r17
 3aa:	b9 f7       	brne	.-18     	; 0x39a <main+0x44>
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
	}
	/* Get and echo a character forever, specific '\r' processing. */
	while (true) {
		received_byte = usart_getchar(USART_SERIAL_EXAMPLE);
 3ac:	88 ec       	ldi	r24, 0xC8	; 200
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	18 df       	rcall	.-464    	; 0x1e2 <usart_getchar>
 3b2:	8d 30       	cpi	r24, 0x0D	; 13
		if (received_byte == '\r') {
 3b4:	61 f4       	brne	.+24     	; 0x3ce <main+0x78>
 3b6:	0c 2d       	mov	r16, r12
 3b8:	1d 2d       	mov	r17, r13
 3ba:	f8 01       	movw	r30, r16
			for (i = 0; i < tx_length; i++) {
				usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
 3bc:	61 91       	ld	r22, Z+
 3be:	8f 01       	movw	r16, r30
 3c0:	88 ec       	ldi	r24, 0xC8	; 200
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	07 df       	rcall	.-498    	; 0x1d4 <usart_putchar>
 3c6:	0e 15       	cp	r16, r14
	}
	/* Get and echo a character forever, specific '\r' processing. */
	while (true) {
		received_byte = usart_getchar(USART_SERIAL_EXAMPLE);
		if (received_byte == '\r') {
			for (i = 0; i < tx_length; i++) {
 3c8:	1f 05       	cpc	r17, r15
 3ca:	b9 f7       	brne	.-18     	; 0x3ba <main+0x64>
 3cc:	ef cf       	rjmp	.-34     	; 0x3ac <main+0x56>
				usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
			}
		} else {
			usart_putchar(USART_SERIAL_EXAMPLE, received_byte);
 3ce:	68 2f       	mov	r22, r24
 3d0:	88 ec       	ldi	r24, 0xC8	; 200
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	ff de       	rcall	.-514    	; 0x1d4 <usart_putchar>
 3d6:	ea cf       	rjmp	.-44     	; 0x3ac <main+0x56>

000003d8 <__udivmodsi4>:
 3d8:	a1 e2       	ldi	r26, 0x21	; 33
 3da:	1a 2e       	mov	r1, r26
 3dc:	aa 1b       	sub	r26, r26
 3de:	bb 1b       	sub	r27, r27
 3e0:	fd 01       	movw	r30, r26
 3e2:	0d c0       	rjmp	.+26     	; 0x3fe <__udivmodsi4_ep>

000003e4 <__udivmodsi4_loop>:
 3e4:	aa 1f       	adc	r26, r26
 3e6:	bb 1f       	adc	r27, r27
 3e8:	ee 1f       	adc	r30, r30
 3ea:	ff 1f       	adc	r31, r31
 3ec:	a2 17       	cp	r26, r18
 3ee:	b3 07       	cpc	r27, r19
 3f0:	e4 07       	cpc	r30, r20
 3f2:	f5 07       	cpc	r31, r21
 3f4:	20 f0       	brcs	.+8      	; 0x3fe <__udivmodsi4_ep>
 3f6:	a2 1b       	sub	r26, r18
 3f8:	b3 0b       	sbc	r27, r19
 3fa:	e4 0b       	sbc	r30, r20
 3fc:	f5 0b       	sbc	r31, r21

000003fe <__udivmodsi4_ep>:
 3fe:	66 1f       	adc	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	88 1f       	adc	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	1a 94       	dec	r1
 408:	69 f7       	brne	.-38     	; 0x3e4 <__udivmodsi4_loop>
 40a:	60 95       	com	r22
 40c:	70 95       	com	r23
 40e:	80 95       	com	r24
 410:	90 95       	com	r25
 412:	9b 01       	movw	r18, r22
 414:	ac 01       	movw	r20, r24
 416:	bd 01       	movw	r22, r26
 418:	cf 01       	movw	r24, r30
 41a:	08 95       	ret

0000041c <_exit>:
 41c:	f8 94       	cli

0000041e <__stop_program>:
 41e:	ff cf       	rjmp	.-2      	; 0x41e <__stop_program>
