
PEER2PEER1_spi_MSTR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  00001216  000012aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001216  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e0  0080021e  0080021e  000012c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000481c  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000253b  00000000  00000000  00005e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000046d4  00000000  00000000  0000835f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bdc  00000000  00000000  0000ca34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00019cbf  00000000  00000000  0000d610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d8f  00000000  00000000  000272cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0002a05e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007c07  00000000  00000000  0002a2c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	0e c7       	rjmp	.+3612   	; 0xe22 <__vector_1>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	9f c0       	rjmp	.+318    	; 0x174 <__bad_interrupt>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	81 c3       	rjmp	.+1794   	; 0x748 <__vector_17>
      46:	00 00       	nop
      48:	ac c3       	rjmp	.+1880   	; 0x7a2 <__vector_18>
      4a:	00 00       	nop
      4c:	d7 c3       	rjmp	.+1966   	; 0x7fc <__vector_19>
      4e:	00 00       	nop
      50:	4e c3       	rjmp	.+1692   	; 0x6ee <__vector_20>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e6 c0       	rjmp	.+460    	; 0x22e <__vector_24>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	17 c4       	rjmp	.+2094   	; 0x8b0 <__vector_32>
      82:	00 00       	nop
      84:	42 c4       	rjmp	.+2180   	; 0x90a <__vector_33>
      86:	00 00       	nop
      88:	6d c4       	rjmp	.+2266   	; 0x964 <__vector_34>
      8a:	00 00       	nop
      8c:	e4 c3       	rjmp	.+1992   	; 0x856 <__vector_35>
      8e:	00 00       	nop
      90:	e6 c2       	rjmp	.+1484   	; 0x65e <__vector_36>
      92:	00 00       	nop
      94:	6f c0       	rjmp	.+222    	; 0x174 <__bad_interrupt>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b7 c4       	rjmp	.+2414   	; 0xa18 <__vector_42>
      aa:	00 00       	nop
      ac:	e2 c4       	rjmp	.+2500   	; 0xa72 <__vector_43>
      ae:	00 00       	nop
      b0:	0d c5       	rjmp	.+2586   	; 0xacc <__vector_44>
      b2:	00 00       	nop
      b4:	84 c4       	rjmp	.+2312   	; 0x9be <__vector_45>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	61 c5       	rjmp	.+2754   	; 0xb80 <__vector_47>
      be:	00 00       	nop
      c0:	8c c5       	rjmp	.+2840   	; 0xbda <__vector_48>
      c2:	00 00       	nop
      c4:	b7 c5       	rjmp	.+2926   	; 0xc34 <__vector_49>
      c6:	00 00       	nop
      c8:	2e c5       	rjmp	.+2652   	; 0xb26 <__vector_50>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e6 e1       	ldi	r30, 0x16	; 22
     14c:	f2 e1       	ldi	r31, 0x12	; 18
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	ae 31       	cpi	r26, 0x1E	; 30
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	23 e0       	ldi	r18, 0x03	; 3
     160:	ae e1       	ldi	r26, 0x1E	; 30
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	ae 3f       	cpi	r26, 0xFE	; 254
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	ff d5       	rcall	.+3070   	; 0xd6e <main>
     170:	0c 94 09 09 	jmp	0x1212	; 0x1212 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <init_SPI_mstr>:
static uint8_t spi_rx_count;

/* Initiate SPI module */
void init_SPI_mstr(void){

	sysclk_enable_module( POWER_RED_REG0, PRSPI_bm );
     176:	64 e0       	ldi	r22, 0x04	; 4
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	9f d0       	rcall	.+318    	; 0x2ba <sysclk_enable_module>
	
	/* Set MOSI and SCK output, all others input */
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK);
     17c:	84 b1       	in	r24, 0x04	; 4
     17e:	86 60       	ori	r24, 0x06	; 6
     180:	84 b9       	out	0x04, r24	; 4
	/*	No end of tx irq, enable SPI, Master, set clock rate fck/2, dord MSB first, */
	SPCR |= ((0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|
     182:	8c b5       	in	r24, 0x2c	; 44
     184:	83 65       	ori	r24, 0x53	; 83
     186:	8c bd       	out	0x2c, r24	; 44
	(0<<CPOL)|(0<<CPHA)|(1<<SPR1)|(1<<SPR0));  // SPI enable, Master, f/2 with TxRx OSC
	SPSR |= (0<<SPI2X); //double speed enabled
     188:	8d b5       	in	r24, 0x2d	; 45
     18a:	8d bd       	out	0x2d, r24	; 45
	DDRD = (1<<DDD5);//SS outputs
     18c:	80 e2       	ldi	r24, 0x20	; 32
     18e:	8a b9       	out	0x0a, r24	; 10
	
	PORTD |= (1<<SS2); //Put Slave Select high
     190:	5d 9a       	sbi	0x0b, 5	; 11
     192:	08 95       	ret

00000194 <SPI_Transmit_IRQ>:
}

/* SPI transmit and receive function */
uint8_t SPI_Transmit_IRQ(uint8_t Data)
{	
	spi_buf_complete = 0;
     194:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <spi_buf_complete>
	SPDR = Data;
     198:	8e bd       	out	0x2e, r24	; 46
	while(!spi_buf_complete){};
     19a:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <spi_buf_complete>
     19e:	88 23       	and	r24, r24
     1a0:	e1 f3       	breq	.-8      	; 0x19a <SPI_Transmit_IRQ+0x6>
}
     1a2:	08 95       	ret

000001a4 <SPI_Transmit_no_IRQ>:
uint8_t SPI_Transmit_no_IRQ(uint8_t Data)
{	
	SPDR = Data;
     1a4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){};
     1a6:	0d b4       	in	r0, 0x2d	; 45
     1a8:	07 fe       	sbrs	r0, 7
     1aa:	fd cf       	rjmp	.-6      	; 0x1a6 <SPI_Transmit_no_IRQ+0x2>
	return SPDR;
     1ac:	8e b5       	in	r24, 0x2e	; 46
}
     1ae:	08 95       	ret

000001b0 <spi_rx>:
uint8_t spi_rx(uint8_t *data, uint8_t max_length)
{
     1b0:	dc 01       	movw	r26, r24
	uint8_t data_received = 0;
	if(spi_rx_buf_tail >= spi_rx_buf_head)
     1b2:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <spi_rx_buf_tail>
     1b6:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <spi_rx_buf_head>
     1ba:	89 17       	cp	r24, r25
     1bc:	28 f0       	brcs	.+10     	; 0x1c8 <spi_rx+0x18>
	{
		spi_rx_count = spi_rx_buf_tail - spi_rx_buf_head;
     1be:	28 2f       	mov	r18, r24
     1c0:	29 1b       	sub	r18, r25
     1c2:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <__data_end>
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <spi_rx+0x22>
	}
	else
	{
		spi_rx_count = spi_rx_buf_tail + (SPI_RX_BUF_SIZE_HOST - spi_rx_buf_head);
     1c8:	2c e9       	ldi	r18, 0x9C	; 156
     1ca:	28 0f       	add	r18, r24
     1cc:	29 1b       	sub	r18, r25
     1ce:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <__data_end>
	}
	
	if (0 == spi_rx_count) {
     1d2:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <__data_end>
     1d6:	99 23       	and	r25, r25
     1d8:	31 f1       	breq	.+76     	; 0x226 <spi_rx+0x76>
		return 0;
	}

	if (SPI_RX_BUF_SIZE_HOST <= spi_rx_count) {
     1da:	9c 39       	cpi	r25, 0x9C	; 156
     1dc:	40 f0       	brcs	.+16     	; 0x1ee <spi_rx+0x3e>
		/*
		 * Bytes between head and tail are overwritten by new data.
		 * The oldest data in buffer is the one to which the tail is
		 * pointing. So reading operation should start from the tail.
		 */
		spi_rx_buf_head = spi_rx_buf_tail;
     1de:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <spi_rx_buf_head>
		/*
		 * This is a buffer overflow case. But still only the number of
		 * bytes equivalent to
		 * full buffer size are useful.
		 */
		spi_rx_count = SPI_RX_BUF_SIZE_HOST;
     1e2:	8c e9       	ldi	r24, 0x9C	; 156
     1e4:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>

		/* Bytes received is more than or equal to buffer. */
		if (SPI_RX_BUF_SIZE_HOST <= max_length) {
     1e8:	6c 39       	cpi	r22, 0x9C	; 156
     1ea:	38 f4       	brcc	.+14     	; 0x1fa <spi_rx+0x4a>
     1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <spi_rx+0x44>
     1ee:	96 17       	cp	r25, r22
     1f0:	08 f4       	brcc	.+2      	; 0x1f4 <spi_rx+0x44>
     1f2:	69 2f       	mov	r22, r25
			max_length = spi_rx_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
     1f4:	61 11       	cpse	r22, r1
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <spi_rx+0x4c>
     1f8:	18 c0       	rjmp	.+48     	; 0x22a <spi_rx+0x7a>
			 * Requested receive length (max_length) is more than
			 * the
			 * max size of receive buffer, but at max the full
			 * buffer can be read.
			 */
			max_length = SPI_RX_BUF_SIZE_HOST;
     1fa:	6c e9       	ldi	r22, 0x9C	; 156
     1fc:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <spi_rx_buf_head>
     200:	26 2f       	mov	r18, r22
	}

	data_received = max_length;
	while (max_length > 0) {
		/* Start to copy from head. */
		*data = spi_rx_buf[spi_rx_buf_head];
     202:	e9 2f       	mov	r30, r25
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	ef 5d       	subi	r30, 0xDF	; 223
     208:	fd 4f       	sbci	r31, 0xFD	; 253
     20a:	30 81       	ld	r19, Z
     20c:	3d 93       	st	X+, r19
		data++;
		max_length--;
     20e:	21 50       	subi	r18, 0x01	; 1
		if ((SPI_RX_BUF_SIZE_HOST - 1) == spi_rx_buf_head) {
     210:	9b 39       	cpi	r25, 0x9B	; 155
     212:	11 f0       	breq	.+4      	; 0x218 <spi_rx+0x68>
			spi_rx_buf_head = 0;
		}
		else
		{
			spi_rx_buf_head++;
     214:	9f 5f       	subi	r25, 0xFF	; 255
     216:	01 c0       	rjmp	.+2      	; 0x21a <spi_rx+0x6a>
		/* Start to copy from head. */
		*data = spi_rx_buf[spi_rx_buf_head];
		data++;
		max_length--;
		if ((SPI_RX_BUF_SIZE_HOST - 1) == spi_rx_buf_head) {
			spi_rx_buf_head = 0;
     218:	90 e0       	ldi	r25, 0x00	; 0
			max_length = spi_rx_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
     21a:	21 11       	cpse	r18, r1
     21c:	f2 cf       	rjmp	.-28     	; 0x202 <spi_rx+0x52>
     21e:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <spi_rx_buf_head>
     222:	86 2f       	mov	r24, r22
     224:	08 95       	ret
	{
		spi_rx_count = spi_rx_buf_tail + (SPI_RX_BUF_SIZE_HOST - spi_rx_buf_head);
	}
	
	if (0 == spi_rx_count) {
		return 0;
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	08 95       	ret
		else
		{
			spi_rx_buf_head++;
		}
	}
	return data_received;
     22a:	80 e0       	ldi	r24, 0x00	; 0
}
     22c:	08 95       	ret

0000022e <__vector_24>:
/*************************************************************************//**
	Interrupt handler for SPI data received
*****************************************************************************/

SPI_HOST_ISR_VECT(){
     22e:	1f 92       	push	r1
     230:	0f 92       	push	r0
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	0f 92       	push	r0
     236:	11 24       	eor	r1, r1
     238:	0b b6       	in	r0, 0x3b	; 59
     23a:	0f 92       	push	r0
     23c:	8f 93       	push	r24
     23e:	9f 93       	push	r25
     240:	ef 93       	push	r30
     242:	ff 93       	push	r31
	uint8_t temp;

	temp = SPDR;
     244:	9e b5       	in	r25, 0x2e	; 46

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     246:	f8 94       	cli

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	spi_rx_buf[spi_rx_buf_tail] = temp;
     248:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <spi_rx_buf_tail>
     24c:	e8 2f       	mov	r30, r24
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	ef 5d       	subi	r30, 0xDF	; 223
     252:	fd 4f       	sbci	r31, 0xFD	; 253
     254:	90 83       	st	Z, r25

	if ((SPI_RX_BUF_SIZE_HOST - 1) == spi_rx_buf_tail) {
     256:	8b 39       	cpi	r24, 0x9B	; 155
     258:	19 f4       	brne	.+6      	; 0x260 <__vector_24+0x32>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		spi_rx_buf_tail = 0x00;
     25a:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <spi_rx_buf_tail>
     25e:	03 c0       	rjmp	.+6      	; 0x266 <__vector_24+0x38>
	} else {
		spi_rx_buf_tail++;
     260:	8f 5f       	subi	r24, 0xFF	; 255
     262:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <spi_rx_buf_tail>
	}

	cpu_irq_enable();
     266:	78 94       	sei
	spi_buf_complete = 1;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <spi_buf_complete>
}
     26e:	ff 91       	pop	r31
     270:	ef 91       	pop	r30
     272:	9f 91       	pop	r25
     274:	8f 91       	pop	r24
     276:	0f 90       	pop	r0
     278:	0b be       	out	0x3b, r0	; 59
     27a:	0f 90       	pop	r0
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	0f 90       	pop	r0
     280:	1f 90       	pop	r1
     282:	18 95       	reti

00000284 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	1f 92       	push	r1
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     28e:	8f ef       	ldi	r24, 0xFF	; 255
     290:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     294:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     298:	8f b7       	in	r24, 0x3f	; 63
     29a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     29c:	f8 94       	cli
	return flags;
     29e:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     2a0:	5f 93       	push	r21
     2a2:	50 e8       	ldi	r21, 0x80	; 128
     2a4:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     2a8:	50 e0       	ldi	r21, 0x00	; 0
     2aa:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     2ae:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2b0:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     2b2:	0f 90       	pop	r0
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	1f 92       	push	r1
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2c4:	9f b7       	in	r25, 0x3f	; 63
     2c6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     2c8:	f8 94       	cli
	return flags;
     2ca:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     2cc:	82 30       	cpi	r24, 0x02	; 2
     2ce:	40 f4       	brcc	.+16     	; 0x2e0 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     2d0:	e8 2f       	mov	r30, r24
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	ec 59       	subi	r30, 0x9C	; 156
     2d6:	ff 4f       	sbci	r31, 0xFF	; 255
     2d8:	60 95       	com	r22
     2da:	80 81       	ld	r24, Z
     2dc:	68 23       	and	r22, r24
     2de:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2e0:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     2e2:	0f 90       	pop	r0
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	7c 01       	movw	r14, r24
     2f8:	8b 01       	movw	r16, r22
     2fa:	ea 01       	movw	r28, r20
	while (len) {
     2fc:	20 97       	sbiw	r28, 0x00	; 0
     2fe:	39 f0       	breq	.+14     	; 0x30e <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     300:	f8 01       	movw	r30, r16
     302:	61 91       	ld	r22, Z+
     304:	8f 01       	movw	r16, r30
     306:	c7 01       	movw	r24, r14
     308:	54 d0       	rcall	.+168    	; 0x3b2 <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
     30a:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
     30c:	c9 f7       	brne	.-14     	; 0x300 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	08 95       	ret

0000031e <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	7c 01       	movw	r14, r24
     32c:	8b 01       	movw	r16, r22
     32e:	ea 01       	movw	r28, r20
	while (len) {
     330:	20 97       	sbiw	r28, 0x00	; 0
     332:	39 f0       	breq	.+14     	; 0x342 <usart_serial_read_packet+0x24>
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
     334:	c7 01       	movw	r24, r14
     336:	44 d0       	rcall	.+136    	; 0x3c0 <usart_getchar>
     338:	f8 01       	movw	r30, r16
     33a:	81 93       	st	Z+, r24
     33c:	8f 01       	movw	r16, r30
		usart_serial_getchar(usart, data);
		len--;
     33e:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
     340:	c9 f7       	brne	.-14     	; 0x334 <usart_serial_read_packet+0x16>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	ff 90       	pop	r15
     34e:	ef 90       	pop	r14
     350:	08 95       	ret

00000352 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	1f 92       	push	r1
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     35c:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <stdio_base>
     360:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <stdio_base+0x1>
     364:	e0 91 ec 03 	lds	r30, 0x03EC	; 0x8003ec <ptr_get>
     368:	f0 91 ed 03 	lds	r31, 0x03ED	; 0x8003ed <ptr_get+0x1>
     36c:	be 01       	movw	r22, r28
     36e:	6f 5f       	subi	r22, 0xFF	; 255
     370:	7f 4f       	sbci	r23, 0xFF	; 255
     372:	19 95       	eicall
	return c;
     374:	89 81       	ldd	r24, Y+1	; 0x01
}
     376:	08 2e       	mov	r0, r24
     378:	00 0c       	add	r0, r0
     37a:	99 0b       	sbc	r25, r25
     37c:	0f 90       	pop	r0
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     384:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     386:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <stdio_base>
     38a:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <stdio_base+0x1>
     38e:	e0 91 ee 03 	lds	r30, 0x03EE	; 0x8003ee <ptr_put>
     392:	f0 91 ef 03 	lds	r31, 0x03EF	; 0x8003ef <ptr_put+0x1>
     396:	19 95       	eicall
     398:	99 23       	and	r25, r25
     39a:	1c f0       	brlt	.+6      	; 0x3a2 <_write+0x1e>
		return -1;
	}
	return 1;
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     3a2:	8f ef       	ldi	r24, 0xFF	; 255
     3a4:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     3a6:	08 95       	ret

000003a8 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     3a8:	2c 9a       	sbi	0x05, 4	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     3aa:	24 9a       	sbi	0x04, 4	; 4
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     3ac:	6c 98       	cbi	0x0d, 4	; 13
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     3ae:	74 9a       	sbi	0x0e, 4	; 14
     3b0:	08 95       	ret

000003b2 <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
     3b2:	fc 01       	movw	r30, r24
     3b4:	90 81       	ld	r25, Z
     3b6:	95 ff       	sbrs	r25, 5
     3b8:	fd cf       	rjmp	.-6      	; 0x3b4 <usart_putchar+0x2>
     3ba:	66 83       	std	Z+6, r22	; 0x06
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	08 95       	ret

000003c0 <usart_getchar>:
     3c0:	fc 01       	movw	r30, r24
     3c2:	90 81       	ld	r25, Z
     3c4:	99 23       	and	r25, r25
     3c6:	ec f7       	brge	.-6      	; 0x3c2 <usart_getchar+0x2>
     3c8:	86 81       	ldd	r24, Z+6	; 0x06
     3ca:	08 95       	ret

000003cc <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     3cc:	4f 92       	push	r4
     3ce:	5f 92       	push	r5
     3d0:	6f 92       	push	r6
     3d2:	7f 92       	push	r7
     3d4:	8f 92       	push	r8
     3d6:	9f 92       	push	r9
     3d8:	af 92       	push	r10
     3da:	bf 92       	push	r11
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	ec 01       	movw	r28, r24
     3ee:	6a 01       	movw	r12, r20
     3f0:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     3f2:	28 01       	movw	r4, r16
     3f4:	39 01       	movw	r6, r18
     3f6:	68 94       	set
     3f8:	12 f8       	bld	r1, 2
     3fa:	76 94       	lsr	r7
     3fc:	67 94       	ror	r6
     3fe:	57 94       	ror	r5
     400:	47 94       	ror	r4
     402:	16 94       	lsr	r1
     404:	d1 f7       	brne	.-12     	; 0x3fa <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
     406:	88 81       	ld	r24, Y
     408:	81 fd       	sbrc	r24, 1
     40a:	0e c0       	rjmp	.+28     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
     40c:	48 01       	movw	r8, r16
     40e:	59 01       	movw	r10, r18
     410:	07 2e       	mov	r0, r23
     412:	73 e1       	ldi	r23, 0x13	; 19
     414:	b6 94       	lsr	r11
     416:	a7 94       	ror	r10
     418:	97 94       	ror	r9
     41a:	87 94       	ror	r8
     41c:	7a 95       	dec	r23
     41e:	d1 f7       	brne	.-12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     420:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     422:	d3 01       	movw	r26, r6
     424:	c2 01       	movw	r24, r4
     426:	15 c0       	rjmp	.+42     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
     428:	d9 01       	movw	r26, r18
     42a:	c8 01       	movw	r24, r16
     42c:	68 94       	set
     42e:	13 f8       	bld	r1, 3
     430:	b6 95       	lsr	r27
     432:	a7 95       	ror	r26
     434:	97 95       	ror	r25
     436:	87 95       	ror	r24
     438:	16 94       	lsr	r1
     43a:	d1 f7       	brne	.-12     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		min_rate /= 2;
     43c:	48 01       	movw	r8, r16
     43e:	59 01       	movw	r10, r18
     440:	07 2e       	mov	r0, r23
     442:	74 e1       	ldi	r23, 0x14	; 20
     444:	b6 94       	lsr	r11
     446:	a7 94       	ror	r10
     448:	97 94       	ror	r9
     44a:	87 94       	ror	r8
     44c:	7a 95       	dec	r23
     44e:	d1 f7       	brne	.-12     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     450:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     452:	8c 15       	cp	r24, r12
     454:	9d 05       	cpc	r25, r13
     456:	ae 05       	cpc	r26, r14
     458:	bf 05       	cpc	r27, r15
     45a:	68 f1       	brcs	.+90     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     45c:	c8 14       	cp	r12, r8
     45e:	d9 04       	cpc	r13, r9
     460:	ea 04       	cpc	r14, r10
     462:	fb 04       	cpc	r15, r11
     464:	50 f1       	brcs	.+84     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     466:	88 81       	ld	r24, Y
     468:	81 ff       	sbrs	r24, 1
     46a:	0f c0       	rjmp	.+30     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     46c:	a7 01       	movw	r20, r14
     46e:	96 01       	movw	r18, r12
     470:	22 0f       	add	r18, r18
     472:	33 1f       	adc	r19, r19
     474:	44 1f       	adc	r20, r20
     476:	55 1f       	adc	r21, r21
     478:	c3 01       	movw	r24, r6
     47a:	b2 01       	movw	r22, r4
     47c:	1c d5       	rcall	.+2616   	; 0xeb6 <__udivmodsi4>
     47e:	da 01       	movw	r26, r20
     480:	c9 01       	movw	r24, r18
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	a1 09       	sbc	r26, r1
     486:	b1 09       	sbc	r27, r1
     488:	12 c0       	rjmp	.+36     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     48a:	c9 01       	movw	r24, r18
     48c:	b8 01       	movw	r22, r16
     48e:	68 94       	set
     490:	13 f8       	bld	r1, 3
     492:	96 95       	lsr	r25
     494:	87 95       	ror	r24
     496:	77 95       	ror	r23
     498:	67 95       	ror	r22
     49a:	16 94       	lsr	r1
     49c:	d1 f7       	brne	.-12     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     49e:	a7 01       	movw	r20, r14
     4a0:	96 01       	movw	r18, r12
     4a2:	09 d5       	rcall	.+2578   	; 0xeb6 <__udivmodsi4>
     4a4:	da 01       	movw	r26, r20
     4a6:	c9 01       	movw	r24, r18
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	a1 09       	sbc	r26, r1
     4ac:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     4ae:	9d 83       	std	Y+5, r25	; 0x05
     4b0:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	03 c0       	rjmp	.+6      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4ba:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	bf 90       	pop	r11
     4ce:	af 90       	pop	r10
     4d0:	9f 90       	pop	r9
     4d2:	8f 90       	pop	r8
     4d4:	7f 90       	pop	r7
     4d6:	6f 90       	pop	r6
     4d8:	5f 90       	pop	r5
     4da:	4f 90       	pop	r4
     4dc:	08 95       	ret

000004de <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	ec 01       	movw	r28, r24
     4e8:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTA0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     4ea:	80 3c       	cpi	r24, 0xC0	; 192
     4ec:	91 05       	cpc	r25, r1
     4ee:	21 f4       	brne	.+8      	; 0x4f8 <usart_init_rs232+0x1a>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     4f0:	62 e0       	ldi	r22, 0x02	; 2
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	e2 de       	rcall	.-572    	; 0x2ba <sysclk_enable_module>
     4f6:	06 c0       	rjmp	.+12     	; 0x504 <usart_init_rs232+0x26>
	}
#endif
#ifdef USARTA1
	if ((uintptr_t)usart == (uintptr_t)&UCSR1A) {
     4f8:	88 3c       	cpi	r24, 0xC8	; 200
     4fa:	91 05       	cpc	r25, r1
     4fc:	19 f4       	brne	.+6      	; 0x504 <usart_init_rs232+0x26>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	db de       	rcall	.-586    	; 0x2ba <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     504:	8a 81       	ldd	r24, Y+2	; 0x02
     506:	8f 73       	andi	r24, 0x3F	; 63
     508:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     50a:	f8 01       	movw	r30, r16
     50c:	26 81       	ldd	r18, Z+6	; 0x06
     50e:	35 81       	ldd	r19, Z+5	; 0x05
     510:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     512:	9a 81       	ldd	r25, Y+2	; 0x02
     514:	48 2f       	mov	r20, r24
     516:	43 70       	andi	r20, 0x03	; 3
     518:	44 0f       	add	r20, r20
     51a:	99 7f       	andi	r25, 0xF9	; 249
     51c:	94 2b       	or	r25, r20
     51e:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     520:	99 81       	ldd	r25, Y+1	; 0x01
     522:	84 70       	andi	r24, 0x04	; 4
     524:	88 0f       	add	r24, r24
     526:	88 0f       	add	r24, r24
     528:	9b 7f       	andi	r25, 0xFB	; 251
     52a:	89 2b       	or	r24, r25
     52c:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     52e:	8a 81       	ldd	r24, Y+2	; 0x02
     530:	8f 7c       	andi	r24, 0xCF	; 207
     532:	83 2b       	or	r24, r19
     534:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     536:	9a 81       	ldd	r25, Y+2	; 0x02
     538:	97 7f       	andi	r25, 0xF7	; 247
     53a:	82 2f       	mov	r24, r18
     53c:	88 0f       	add	r24, r24
     53e:	88 0f       	add	r24, r24
     540:	88 0f       	add	r24, r24
     542:	89 2b       	or	r24, r25
     544:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     546:	40 81       	ld	r20, Z
     548:	51 81       	ldd	r21, Z+1	; 0x01
     54a:	62 81       	ldd	r22, Z+2	; 0x02
     54c:	73 81       	ldd	r23, Z+3	; 0x03
     54e:	00 e0       	ldi	r16, 0x00	; 0
     550:	14 e2       	ldi	r17, 0x24	; 36
     552:	24 ef       	ldi	r18, 0xF4	; 244
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	ce 01       	movw	r24, r28
     558:	39 df       	rcall	.-398    	; 0x3cc <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     55a:	99 81       	ldd	r25, Y+1	; 0x01
     55c:	98 60       	ori	r25, 0x08	; 8
     55e:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     560:	99 81       	ldd	r25, Y+1	; 0x01
     562:	90 61       	ori	r25, 0x10	; 16
     564:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	08 95       	ret

00000570 <usart_serial_getchar>:
	if (back >= 1) {
		return c;
	} else {
		return (-1);
	}
}
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	eb 01       	movw	r28, r22
     576:	24 df       	rcall	.-440    	; 0x3c0 <usart_getchar>
     578:	88 83       	st	Y, r24
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	08 95       	ret

00000580 <usart_serial_putchar>:
     580:	18 cf       	rjmp	.-464    	; 0x3b2 <usart_putchar>
     582:	08 95       	ret

00000584 <sio2host_init>:
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	27 97       	sbiw	r28, 0x07	; 7
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	de bf       	out	0x3e, r29	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	cd bf       	out	0x3d, r28	; 61
     59c:	08 ec       	ldi	r16, 0xC8	; 200
     59e:	10 e0       	ldi	r17, 0x00	; 0
     5a0:	10 93 f1 03 	sts	0x03F1, r17	; 0x8003f1 <stdio_base+0x1>
     5a4:	00 93 f0 03 	sts	0x03F0, r16	; 0x8003f0 <stdio_base>
     5a8:	80 ec       	ldi	r24, 0xC0	; 192
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <ptr_put+0x1>
     5b0:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <ptr_put>
     5b4:	88 eb       	ldi	r24, 0xB8	; 184
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <ptr_get+0x1>
     5bc:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <ptr_get>
     5c0:	e6 e0       	ldi	r30, 0x06	; 6
     5c2:	f2 e0       	ldi	r31, 0x02	; 2
     5c4:	84 81       	ldd	r24, Z+4	; 0x04
     5c6:	8d 83       	std	Y+5, r24	; 0x05
     5c8:	85 81       	ldd	r24, Z+5	; 0x05
     5ca:	8e 83       	std	Y+6, r24	; 0x06
     5cc:	86 81       	ldd	r24, Z+6	; 0x06
     5ce:	8f 83       	std	Y+7, r24	; 0x07
     5d0:	80 81       	ld	r24, Z
     5d2:	91 81       	ldd	r25, Z+1	; 0x01
     5d4:	a2 81       	ldd	r26, Z+2	; 0x02
     5d6:	b3 81       	ldd	r27, Z+3	; 0x03
     5d8:	89 83       	std	Y+1, r24	; 0x01
     5da:	9a 83       	std	Y+2, r25	; 0x02
     5dc:	ab 83       	std	Y+3, r26	; 0x03
     5de:	bc 83       	std	Y+4, r27	; 0x04
     5e0:	be 01       	movw	r22, r28
     5e2:	6f 5f       	subi	r22, 0xFF	; 255
     5e4:	7f 4f       	sbci	r23, 0xFF	; 255
     5e6:	88 ec       	ldi	r24, 0xC8	; 200
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	79 df       	rcall	.-270    	; 0x4de <usart_init_rs232>
     5ec:	69 ea       	ldi	r22, 0xA9	; 169
     5ee:	71 e0       	ldi	r23, 0x01	; 1
     5f0:	82 ec       	ldi	r24, 0xC2	; 194
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	82 d4       	rcall	.+2308   	; 0xefa <fdevopen>
     5f6:	f8 01       	movw	r30, r16
     5f8:	81 81       	ldd	r24, Z+1	; 0x01
     5fa:	80 68       	ori	r24, 0x80	; 128
     5fc:	81 83       	std	Z+1, r24	; 0x01
     5fe:	27 96       	adiw	r28, 0x07	; 7
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	f8 94       	cli
     604:	de bf       	out	0x3e, r29	; 62
     606:	0f be       	out	0x3f, r0	; 63
     608:	cd bf       	out	0x3d, r28	; 61
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	08 95       	ret

00000614 <sio2host_tx>:
     614:	ff 92       	push	r15
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	8c 01       	movw	r16, r24
     620:	f6 2e       	mov	r15, r22
     622:	c6 2f       	mov	r28, r22
     624:	d0 e0       	ldi	r29, 0x00	; 0
     626:	ae 01       	movw	r20, r28
     628:	b8 01       	movw	r22, r16
     62a:	88 ec       	ldi	r24, 0xC8	; 200
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	5d de       	rcall	.-838    	; 0x2ea <usart_serial_write_packet>
     630:	81 11       	cpse	r24, r1
     632:	f9 cf       	rjmp	.-14     	; 0x626 <sio2host_tx+0x12>
     634:	8f 2d       	mov	r24, r15
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	08 95       	ret

00000642 <sio2host_putchar>:
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	1f 92       	push	r1
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	89 83       	std	Y+1, r24	; 0x01
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	ce 01       	movw	r24, r28
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	df df       	rcall	.-66     	; 0x614 <sio2host_tx>
     656:	0f 90       	pop	r0
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <__vector_36>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
     65e:	1f 92       	push	r1
     660:	0f 92       	push	r0
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	0f 92       	push	r0
     666:	11 24       	eor	r1, r1
     668:	0b b6       	in	r0, 0x3b	; 59
     66a:	0f 92       	push	r0
     66c:	2f 93       	push	r18
     66e:	3f 93       	push	r19
     670:	4f 93       	push	r20
     672:	5f 93       	push	r21
     674:	6f 93       	push	r22
     676:	7f 93       	push	r23
     678:	8f 93       	push	r24
     67a:	9f 93       	push	r25
     67c:	af 93       	push	r26
     67e:	bf 93       	push	r27
     680:	ef 93       	push	r30
     682:	ff 93       	push	r31
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	1f 92       	push	r1
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
     68e:	41 e0       	ldi	r20, 0x01	; 1
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	be 01       	movw	r22, r28
     694:	6f 5f       	subi	r22, 0xFF	; 255
     696:	7f 4f       	sbci	r23, 0xFF	; 255
     698:	88 ec       	ldi	r24, 0xC8	; 200
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	40 de       	rcall	.-896    	; 0x31e <usart_serial_read_packet>
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     69e:	f8 94       	cli

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
     6a0:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <serial_rx_buf_tail>
     6a4:	e8 2f       	mov	r30, r24
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	e2 54       	subi	r30, 0x42	; 66
     6aa:	fd 4f       	sbci	r31, 0xFD	; 253
     6ac:	99 81       	ldd	r25, Y+1	; 0x01
     6ae:	90 83       	st	Z, r25

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
     6b0:	8b 39       	cpi	r24, 0x9B	; 155
     6b2:	19 f4       	brne	.+6      	; 0x6ba <__vector_36+0x5c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
     6b4:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <serial_rx_buf_tail>
     6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <__vector_36+0x62>
	} else {
		serial_rx_buf_tail++;
     6ba:	8f 5f       	subi	r24, 0xFF	; 255
     6bc:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <serial_rx_buf_tail>
	}

	cpu_irq_enable();
     6c0:	78 94       	sei
}
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	ff 91       	pop	r31
     6ca:	ef 91       	pop	r30
     6cc:	bf 91       	pop	r27
     6ce:	af 91       	pop	r26
     6d0:	9f 91       	pop	r25
     6d2:	8f 91       	pop	r24
     6d4:	7f 91       	pop	r23
     6d6:	6f 91       	pop	r22
     6d8:	5f 91       	pop	r21
     6da:	4f 91       	pop	r20
     6dc:	3f 91       	pop	r19
     6de:	2f 91       	pop	r18
     6e0:	0f 90       	pop	r0
     6e2:	0b be       	out	0x3b, r0	; 59
     6e4:	0f 90       	pop	r0
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	0f 90       	pop	r0
     6ea:	1f 90       	pop	r1
     6ec:	18 95       	reti

000006ee <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
     6ee:	1f 92       	push	r1
     6f0:	0f 92       	push	r0
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	0f 92       	push	r0
     6f6:	11 24       	eor	r1, r1
     6f8:	0b b6       	in	r0, 0x3b	; 59
     6fa:	0f 92       	push	r0
     6fc:	2f 93       	push	r18
     6fe:	3f 93       	push	r19
     700:	4f 93       	push	r20
     702:	5f 93       	push	r21
     704:	6f 93       	push	r22
     706:	7f 93       	push	r23
     708:	8f 93       	push	r24
     70a:	9f 93       	push	r25
     70c:	af 93       	push	r26
     70e:	bf 93       	push	r27
     710:	ef 93       	push	r30
     712:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
     714:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <tc_tccr1_ovf_callback>
     718:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <tc_tccr1_ovf_callback+0x1>
     71c:	30 97       	sbiw	r30, 0x00	; 0
     71e:	09 f0       	breq	.+2      	; 0x722 <__vector_20+0x34>
		tc_tccr1_ovf_callback();
     720:	19 95       	eicall
	}
}
     722:	ff 91       	pop	r31
     724:	ef 91       	pop	r30
     726:	bf 91       	pop	r27
     728:	af 91       	pop	r26
     72a:	9f 91       	pop	r25
     72c:	8f 91       	pop	r24
     72e:	7f 91       	pop	r23
     730:	6f 91       	pop	r22
     732:	5f 91       	pop	r21
     734:	4f 91       	pop	r20
     736:	3f 91       	pop	r19
     738:	2f 91       	pop	r18
     73a:	0f 90       	pop	r0
     73c:	0b be       	out	0x3b, r0	; 59
     73e:	0f 90       	pop	r0
     740:	0f be       	out	0x3f, r0	; 63
     742:	0f 90       	pop	r0
     744:	1f 90       	pop	r1
     746:	18 95       	reti

00000748 <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
     748:	1f 92       	push	r1
     74a:	0f 92       	push	r0
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	0f 92       	push	r0
     750:	11 24       	eor	r1, r1
     752:	0b b6       	in	r0, 0x3b	; 59
     754:	0f 92       	push	r0
     756:	2f 93       	push	r18
     758:	3f 93       	push	r19
     75a:	4f 93       	push	r20
     75c:	5f 93       	push	r21
     75e:	6f 93       	push	r22
     760:	7f 93       	push	r23
     762:	8f 93       	push	r24
     764:	9f 93       	push	r25
     766:	af 93       	push	r26
     768:	bf 93       	push	r27
     76a:	ef 93       	push	r30
     76c:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
     76e:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <tc_tccr1_compa_callback>
     772:	f0 91 77 03 	lds	r31, 0x0377	; 0x800377 <tc_tccr1_compa_callback+0x1>
     776:	30 97       	sbiw	r30, 0x00	; 0
     778:	09 f0       	breq	.+2      	; 0x77c <__vector_17+0x34>
		tc_tccr1_compa_callback();
     77a:	19 95       	eicall
	}
}
     77c:	ff 91       	pop	r31
     77e:	ef 91       	pop	r30
     780:	bf 91       	pop	r27
     782:	af 91       	pop	r26
     784:	9f 91       	pop	r25
     786:	8f 91       	pop	r24
     788:	7f 91       	pop	r23
     78a:	6f 91       	pop	r22
     78c:	5f 91       	pop	r21
     78e:	4f 91       	pop	r20
     790:	3f 91       	pop	r19
     792:	2f 91       	pop	r18
     794:	0f 90       	pop	r0
     796:	0b be       	out	0x3b, r0	; 59
     798:	0f 90       	pop	r0
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	0f 90       	pop	r0
     79e:	1f 90       	pop	r1
     7a0:	18 95       	reti

000007a2 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
     7a2:	1f 92       	push	r1
     7a4:	0f 92       	push	r0
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	0f 92       	push	r0
     7aa:	11 24       	eor	r1, r1
     7ac:	0b b6       	in	r0, 0x3b	; 59
     7ae:	0f 92       	push	r0
     7b0:	2f 93       	push	r18
     7b2:	3f 93       	push	r19
     7b4:	4f 93       	push	r20
     7b6:	5f 93       	push	r21
     7b8:	6f 93       	push	r22
     7ba:	7f 93       	push	r23
     7bc:	8f 93       	push	r24
     7be:	9f 93       	push	r25
     7c0:	af 93       	push	r26
     7c2:	bf 93       	push	r27
     7c4:	ef 93       	push	r30
     7c6:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
     7c8:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <tc_tccr1_compb_callback>
     7cc:	f0 91 75 03 	lds	r31, 0x0375	; 0x800375 <tc_tccr1_compb_callback+0x1>
     7d0:	30 97       	sbiw	r30, 0x00	; 0
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <__vector_18+0x34>
		tc_tccr1_compb_callback();
     7d4:	19 95       	eicall
	}
}
     7d6:	ff 91       	pop	r31
     7d8:	ef 91       	pop	r30
     7da:	bf 91       	pop	r27
     7dc:	af 91       	pop	r26
     7de:	9f 91       	pop	r25
     7e0:	8f 91       	pop	r24
     7e2:	7f 91       	pop	r23
     7e4:	6f 91       	pop	r22
     7e6:	5f 91       	pop	r21
     7e8:	4f 91       	pop	r20
     7ea:	3f 91       	pop	r19
     7ec:	2f 91       	pop	r18
     7ee:	0f 90       	pop	r0
     7f0:	0b be       	out	0x3b, r0	; 59
     7f2:	0f 90       	pop	r0
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	0f 90       	pop	r0
     7f8:	1f 90       	pop	r1
     7fa:	18 95       	reti

000007fc <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
     7fc:	1f 92       	push	r1
     7fe:	0f 92       	push	r0
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	0b b6       	in	r0, 0x3b	; 59
     808:	0f 92       	push	r0
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	ef 93       	push	r30
     820:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
     822:	e0 91 72 03 	lds	r30, 0x0372	; 0x800372 <tc_tccr1_compc_callback>
     826:	f0 91 73 03 	lds	r31, 0x0373	; 0x800373 <tc_tccr1_compc_callback+0x1>
     82a:	30 97       	sbiw	r30, 0x00	; 0
     82c:	09 f0       	breq	.+2      	; 0x830 <__vector_19+0x34>
		tc_tccr1_compc_callback();
     82e:	19 95       	eicall
	}
}
     830:	ff 91       	pop	r31
     832:	ef 91       	pop	r30
     834:	bf 91       	pop	r27
     836:	af 91       	pop	r26
     838:	9f 91       	pop	r25
     83a:	8f 91       	pop	r24
     83c:	7f 91       	pop	r23
     83e:	6f 91       	pop	r22
     840:	5f 91       	pop	r21
     842:	4f 91       	pop	r20
     844:	3f 91       	pop	r19
     846:	2f 91       	pop	r18
     848:	0f 90       	pop	r0
     84a:	0b be       	out	0x3b, r0	; 59
     84c:	0f 90       	pop	r0
     84e:	0f be       	out	0x3f, r0	; 63
     850:	0f 90       	pop	r0
     852:	1f 90       	pop	r1
     854:	18 95       	reti

00000856 <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
     856:	1f 92       	push	r1
     858:	0f 92       	push	r0
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	0f 92       	push	r0
     85e:	11 24       	eor	r1, r1
     860:	0b b6       	in	r0, 0x3b	; 59
     862:	0f 92       	push	r0
     864:	2f 93       	push	r18
     866:	3f 93       	push	r19
     868:	4f 93       	push	r20
     86a:	5f 93       	push	r21
     86c:	6f 93       	push	r22
     86e:	7f 93       	push	r23
     870:	8f 93       	push	r24
     872:	9f 93       	push	r25
     874:	af 93       	push	r26
     876:	bf 93       	push	r27
     878:	ef 93       	push	r30
     87a:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
     87c:	e0 91 70 03 	lds	r30, 0x0370	; 0x800370 <tc_tccr3_ovf_callback>
     880:	f0 91 71 03 	lds	r31, 0x0371	; 0x800371 <tc_tccr3_ovf_callback+0x1>
     884:	30 97       	sbiw	r30, 0x00	; 0
     886:	09 f0       	breq	.+2      	; 0x88a <__vector_35+0x34>
		tc_tccr3_ovf_callback();
     888:	19 95       	eicall
	}
}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	bf 91       	pop	r27
     890:	af 91       	pop	r26
     892:	9f 91       	pop	r25
     894:	8f 91       	pop	r24
     896:	7f 91       	pop	r23
     898:	6f 91       	pop	r22
     89a:	5f 91       	pop	r21
     89c:	4f 91       	pop	r20
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	0f 90       	pop	r0
     8a4:	0b be       	out	0x3b, r0	; 59
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     8b0:	1f 92       	push	r1
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	0b b6       	in	r0, 0x3b	; 59
     8bc:	0f 92       	push	r0
     8be:	2f 93       	push	r18
     8c0:	3f 93       	push	r19
     8c2:	4f 93       	push	r20
     8c4:	5f 93       	push	r21
     8c6:	6f 93       	push	r22
     8c8:	7f 93       	push	r23
     8ca:	8f 93       	push	r24
     8cc:	9f 93       	push	r25
     8ce:	af 93       	push	r26
     8d0:	bf 93       	push	r27
     8d2:	ef 93       	push	r30
     8d4:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
     8d6:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <tc_tccr3_compa_callback>
     8da:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <tc_tccr3_compa_callback+0x1>
     8de:	30 97       	sbiw	r30, 0x00	; 0
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <__vector_32+0x34>
		tc_tccr3_compa_callback();
     8e2:	19 95       	eicall
	}
}
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	7f 91       	pop	r23
     8f2:	6f 91       	pop	r22
     8f4:	5f 91       	pop	r21
     8f6:	4f 91       	pop	r20
     8f8:	3f 91       	pop	r19
     8fa:	2f 91       	pop	r18
     8fc:	0f 90       	pop	r0
     8fe:	0b be       	out	0x3b, r0	; 59
     900:	0f 90       	pop	r0
     902:	0f be       	out	0x3f, r0	; 63
     904:	0f 90       	pop	r0
     906:	1f 90       	pop	r1
     908:	18 95       	reti

0000090a <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
     90a:	1f 92       	push	r1
     90c:	0f 92       	push	r0
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	0f 92       	push	r0
     912:	11 24       	eor	r1, r1
     914:	0b b6       	in	r0, 0x3b	; 59
     916:	0f 92       	push	r0
     918:	2f 93       	push	r18
     91a:	3f 93       	push	r19
     91c:	4f 93       	push	r20
     91e:	5f 93       	push	r21
     920:	6f 93       	push	r22
     922:	7f 93       	push	r23
     924:	8f 93       	push	r24
     926:	9f 93       	push	r25
     928:	af 93       	push	r26
     92a:	bf 93       	push	r27
     92c:	ef 93       	push	r30
     92e:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
     930:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <tc_tccr3_compb_callback>
     934:	f0 91 6d 03 	lds	r31, 0x036D	; 0x80036d <tc_tccr3_compb_callback+0x1>
     938:	30 97       	sbiw	r30, 0x00	; 0
     93a:	09 f0       	breq	.+2      	; 0x93e <__vector_33+0x34>
		tc_tccr3_compb_callback();
     93c:	19 95       	eicall
	}
}
     93e:	ff 91       	pop	r31
     940:	ef 91       	pop	r30
     942:	bf 91       	pop	r27
     944:	af 91       	pop	r26
     946:	9f 91       	pop	r25
     948:	8f 91       	pop	r24
     94a:	7f 91       	pop	r23
     94c:	6f 91       	pop	r22
     94e:	5f 91       	pop	r21
     950:	4f 91       	pop	r20
     952:	3f 91       	pop	r19
     954:	2f 91       	pop	r18
     956:	0f 90       	pop	r0
     958:	0b be       	out	0x3b, r0	; 59
     95a:	0f 90       	pop	r0
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	0f 90       	pop	r0
     960:	1f 90       	pop	r1
     962:	18 95       	reti

00000964 <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
     964:	1f 92       	push	r1
     966:	0f 92       	push	r0
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	0f 92       	push	r0
     96c:	11 24       	eor	r1, r1
     96e:	0b b6       	in	r0, 0x3b	; 59
     970:	0f 92       	push	r0
     972:	2f 93       	push	r18
     974:	3f 93       	push	r19
     976:	4f 93       	push	r20
     978:	5f 93       	push	r21
     97a:	6f 93       	push	r22
     97c:	7f 93       	push	r23
     97e:	8f 93       	push	r24
     980:	9f 93       	push	r25
     982:	af 93       	push	r26
     984:	bf 93       	push	r27
     986:	ef 93       	push	r30
     988:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
     98a:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <tc_tccr3_compc_callback>
     98e:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <tc_tccr3_compc_callback+0x1>
     992:	30 97       	sbiw	r30, 0x00	; 0
     994:	09 f0       	breq	.+2      	; 0x998 <__vector_34+0x34>
		tc_tccr3_compc_callback();
     996:	19 95       	eicall
	}
}
     998:	ff 91       	pop	r31
     99a:	ef 91       	pop	r30
     99c:	bf 91       	pop	r27
     99e:	af 91       	pop	r26
     9a0:	9f 91       	pop	r25
     9a2:	8f 91       	pop	r24
     9a4:	7f 91       	pop	r23
     9a6:	6f 91       	pop	r22
     9a8:	5f 91       	pop	r21
     9aa:	4f 91       	pop	r20
     9ac:	3f 91       	pop	r19
     9ae:	2f 91       	pop	r18
     9b0:	0f 90       	pop	r0
     9b2:	0b be       	out	0x3b, r0	; 59
     9b4:	0f 90       	pop	r0
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	0f 90       	pop	r0
     9ba:	1f 90       	pop	r1
     9bc:	18 95       	reti

000009be <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
     9be:	1f 92       	push	r1
     9c0:	0f 92       	push	r0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	0f 92       	push	r0
     9c6:	11 24       	eor	r1, r1
     9c8:	0b b6       	in	r0, 0x3b	; 59
     9ca:	0f 92       	push	r0
     9cc:	2f 93       	push	r18
     9ce:	3f 93       	push	r19
     9d0:	4f 93       	push	r20
     9d2:	5f 93       	push	r21
     9d4:	6f 93       	push	r22
     9d6:	7f 93       	push	r23
     9d8:	8f 93       	push	r24
     9da:	9f 93       	push	r25
     9dc:	af 93       	push	r26
     9de:	bf 93       	push	r27
     9e0:	ef 93       	push	r30
     9e2:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
     9e4:	e0 91 68 03 	lds	r30, 0x0368	; 0x800368 <tc_tccr4_ovf_callback>
     9e8:	f0 91 69 03 	lds	r31, 0x0369	; 0x800369 <tc_tccr4_ovf_callback+0x1>
     9ec:	30 97       	sbiw	r30, 0x00	; 0
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <__vector_45+0x34>
		tc_tccr4_ovf_callback();
     9f0:	19 95       	eicall
	}
}
     9f2:	ff 91       	pop	r31
     9f4:	ef 91       	pop	r30
     9f6:	bf 91       	pop	r27
     9f8:	af 91       	pop	r26
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	7f 91       	pop	r23
     a00:	6f 91       	pop	r22
     a02:	5f 91       	pop	r21
     a04:	4f 91       	pop	r20
     a06:	3f 91       	pop	r19
     a08:	2f 91       	pop	r18
     a0a:	0f 90       	pop	r0
     a0c:	0b be       	out	0x3b, r0	; 59
     a0e:	0f 90       	pop	r0
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	0f 90       	pop	r0
     a14:	1f 90       	pop	r1
     a16:	18 95       	reti

00000a18 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
     a18:	1f 92       	push	r1
     a1a:	0f 92       	push	r0
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	0f 92       	push	r0
     a20:	11 24       	eor	r1, r1
     a22:	0b b6       	in	r0, 0x3b	; 59
     a24:	0f 92       	push	r0
     a26:	2f 93       	push	r18
     a28:	3f 93       	push	r19
     a2a:	4f 93       	push	r20
     a2c:	5f 93       	push	r21
     a2e:	6f 93       	push	r22
     a30:	7f 93       	push	r23
     a32:	8f 93       	push	r24
     a34:	9f 93       	push	r25
     a36:	af 93       	push	r26
     a38:	bf 93       	push	r27
     a3a:	ef 93       	push	r30
     a3c:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
     a3e:	e0 91 66 03 	lds	r30, 0x0366	; 0x800366 <tc_tccr4_compa_callback>
     a42:	f0 91 67 03 	lds	r31, 0x0367	; 0x800367 <tc_tccr4_compa_callback+0x1>
     a46:	30 97       	sbiw	r30, 0x00	; 0
     a48:	09 f0       	breq	.+2      	; 0xa4c <__vector_42+0x34>
		tc_tccr4_compa_callback();
     a4a:	19 95       	eicall
	}
}
     a4c:	ff 91       	pop	r31
     a4e:	ef 91       	pop	r30
     a50:	bf 91       	pop	r27
     a52:	af 91       	pop	r26
     a54:	9f 91       	pop	r25
     a56:	8f 91       	pop	r24
     a58:	7f 91       	pop	r23
     a5a:	6f 91       	pop	r22
     a5c:	5f 91       	pop	r21
     a5e:	4f 91       	pop	r20
     a60:	3f 91       	pop	r19
     a62:	2f 91       	pop	r18
     a64:	0f 90       	pop	r0
     a66:	0b be       	out	0x3b, r0	; 59
     a68:	0f 90       	pop	r0
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	0f 90       	pop	r0
     a6e:	1f 90       	pop	r1
     a70:	18 95       	reti

00000a72 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	0f 92       	push	r0
     a7a:	11 24       	eor	r1, r1
     a7c:	0b b6       	in	r0, 0x3b	; 59
     a7e:	0f 92       	push	r0
     a80:	2f 93       	push	r18
     a82:	3f 93       	push	r19
     a84:	4f 93       	push	r20
     a86:	5f 93       	push	r21
     a88:	6f 93       	push	r22
     a8a:	7f 93       	push	r23
     a8c:	8f 93       	push	r24
     a8e:	9f 93       	push	r25
     a90:	af 93       	push	r26
     a92:	bf 93       	push	r27
     a94:	ef 93       	push	r30
     a96:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
     a98:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <tc_tccr4_compb_callback>
     a9c:	f0 91 65 03 	lds	r31, 0x0365	; 0x800365 <tc_tccr4_compb_callback+0x1>
     aa0:	30 97       	sbiw	r30, 0x00	; 0
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <__vector_43+0x34>
		tc_tccr4_compb_callback();
     aa4:	19 95       	eicall
	}
}
     aa6:	ff 91       	pop	r31
     aa8:	ef 91       	pop	r30
     aaa:	bf 91       	pop	r27
     aac:	af 91       	pop	r26
     aae:	9f 91       	pop	r25
     ab0:	8f 91       	pop	r24
     ab2:	7f 91       	pop	r23
     ab4:	6f 91       	pop	r22
     ab6:	5f 91       	pop	r21
     ab8:	4f 91       	pop	r20
     aba:	3f 91       	pop	r19
     abc:	2f 91       	pop	r18
     abe:	0f 90       	pop	r0
     ac0:	0b be       	out	0x3b, r0	; 59
     ac2:	0f 90       	pop	r0
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	0f 90       	pop	r0
     ac8:	1f 90       	pop	r1
     aca:	18 95       	reti

00000acc <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
     acc:	1f 92       	push	r1
     ace:	0f 92       	push	r0
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	0f 92       	push	r0
     ad4:	11 24       	eor	r1, r1
     ad6:	0b b6       	in	r0, 0x3b	; 59
     ad8:	0f 92       	push	r0
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
     af2:	e0 91 62 03 	lds	r30, 0x0362	; 0x800362 <tc_tccr4_compc_callback>
     af6:	f0 91 63 03 	lds	r31, 0x0363	; 0x800363 <tc_tccr4_compc_callback+0x1>
     afa:	30 97       	sbiw	r30, 0x00	; 0
     afc:	09 f0       	breq	.+2      	; 0xb00 <__vector_44+0x34>
		tc_tccr4_compc_callback();
     afe:	19 95       	eicall
	}
}
     b00:	ff 91       	pop	r31
     b02:	ef 91       	pop	r30
     b04:	bf 91       	pop	r27
     b06:	af 91       	pop	r26
     b08:	9f 91       	pop	r25
     b0a:	8f 91       	pop	r24
     b0c:	7f 91       	pop	r23
     b0e:	6f 91       	pop	r22
     b10:	5f 91       	pop	r21
     b12:	4f 91       	pop	r20
     b14:	3f 91       	pop	r19
     b16:	2f 91       	pop	r18
     b18:	0f 90       	pop	r0
     b1a:	0b be       	out	0x3b, r0	; 59
     b1c:	0f 90       	pop	r0
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti

00000b26 <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
     b26:	1f 92       	push	r1
     b28:	0f 92       	push	r0
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	0f 92       	push	r0
     b2e:	11 24       	eor	r1, r1
     b30:	0b b6       	in	r0, 0x3b	; 59
     b32:	0f 92       	push	r0
     b34:	2f 93       	push	r18
     b36:	3f 93       	push	r19
     b38:	4f 93       	push	r20
     b3a:	5f 93       	push	r21
     b3c:	6f 93       	push	r22
     b3e:	7f 93       	push	r23
     b40:	8f 93       	push	r24
     b42:	9f 93       	push	r25
     b44:	af 93       	push	r26
     b46:	bf 93       	push	r27
     b48:	ef 93       	push	r30
     b4a:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
     b4c:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <tc_tccr5_ovf_callback>
     b50:	f0 91 61 03 	lds	r31, 0x0361	; 0x800361 <tc_tccr5_ovf_callback+0x1>
     b54:	30 97       	sbiw	r30, 0x00	; 0
     b56:	09 f0       	breq	.+2      	; 0xb5a <__vector_50+0x34>
		tc_tccr5_ovf_callback();
     b58:	19 95       	eicall
	}
}
     b5a:	ff 91       	pop	r31
     b5c:	ef 91       	pop	r30
     b5e:	bf 91       	pop	r27
     b60:	af 91       	pop	r26
     b62:	9f 91       	pop	r25
     b64:	8f 91       	pop	r24
     b66:	7f 91       	pop	r23
     b68:	6f 91       	pop	r22
     b6a:	5f 91       	pop	r21
     b6c:	4f 91       	pop	r20
     b6e:	3f 91       	pop	r19
     b70:	2f 91       	pop	r18
     b72:	0f 90       	pop	r0
     b74:	0b be       	out	0x3b, r0	; 59
     b76:	0f 90       	pop	r0
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	0f 90       	pop	r0
     b7c:	1f 90       	pop	r1
     b7e:	18 95       	reti

00000b80 <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
     b80:	1f 92       	push	r1
     b82:	0f 92       	push	r0
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	0f 92       	push	r0
     b88:	11 24       	eor	r1, r1
     b8a:	0b b6       	in	r0, 0x3b	; 59
     b8c:	0f 92       	push	r0
     b8e:	2f 93       	push	r18
     b90:	3f 93       	push	r19
     b92:	4f 93       	push	r20
     b94:	5f 93       	push	r21
     b96:	6f 93       	push	r22
     b98:	7f 93       	push	r23
     b9a:	8f 93       	push	r24
     b9c:	9f 93       	push	r25
     b9e:	af 93       	push	r26
     ba0:	bf 93       	push	r27
     ba2:	ef 93       	push	r30
     ba4:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
     ba6:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <tc_tccr5_compa_callback>
     baa:	f0 91 5f 03 	lds	r31, 0x035F	; 0x80035f <tc_tccr5_compa_callback+0x1>
     bae:	30 97       	sbiw	r30, 0x00	; 0
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <__vector_47+0x34>
		tc_tccr5_compa_callback();
     bb2:	19 95       	eicall
	}
}
     bb4:	ff 91       	pop	r31
     bb6:	ef 91       	pop	r30
     bb8:	bf 91       	pop	r27
     bba:	af 91       	pop	r26
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	7f 91       	pop	r23
     bc2:	6f 91       	pop	r22
     bc4:	5f 91       	pop	r21
     bc6:	4f 91       	pop	r20
     bc8:	3f 91       	pop	r19
     bca:	2f 91       	pop	r18
     bcc:	0f 90       	pop	r0
     bce:	0b be       	out	0x3b, r0	; 59
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0
     bd6:	1f 90       	pop	r1
     bd8:	18 95       	reti

00000bda <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
     bda:	1f 92       	push	r1
     bdc:	0f 92       	push	r0
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	0f 92       	push	r0
     be2:	11 24       	eor	r1, r1
     be4:	0b b6       	in	r0, 0x3b	; 59
     be6:	0f 92       	push	r0
     be8:	2f 93       	push	r18
     bea:	3f 93       	push	r19
     bec:	4f 93       	push	r20
     bee:	5f 93       	push	r21
     bf0:	6f 93       	push	r22
     bf2:	7f 93       	push	r23
     bf4:	8f 93       	push	r24
     bf6:	9f 93       	push	r25
     bf8:	af 93       	push	r26
     bfa:	bf 93       	push	r27
     bfc:	ef 93       	push	r30
     bfe:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
     c00:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <tc_tccr5_compb_callback>
     c04:	f0 91 5d 03 	lds	r31, 0x035D	; 0x80035d <tc_tccr5_compb_callback+0x1>
     c08:	30 97       	sbiw	r30, 0x00	; 0
     c0a:	09 f0       	breq	.+2      	; 0xc0e <__vector_48+0x34>
		tc_tccr5_compb_callback();
     c0c:	19 95       	eicall
	}
}
     c0e:	ff 91       	pop	r31
     c10:	ef 91       	pop	r30
     c12:	bf 91       	pop	r27
     c14:	af 91       	pop	r26
     c16:	9f 91       	pop	r25
     c18:	8f 91       	pop	r24
     c1a:	7f 91       	pop	r23
     c1c:	6f 91       	pop	r22
     c1e:	5f 91       	pop	r21
     c20:	4f 91       	pop	r20
     c22:	3f 91       	pop	r19
     c24:	2f 91       	pop	r18
     c26:	0f 90       	pop	r0
     c28:	0b be       	out	0x3b, r0	; 59
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	0f 90       	pop	r0
     c30:	1f 90       	pop	r1
     c32:	18 95       	reti

00000c34 <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
     c34:	1f 92       	push	r1
     c36:	0f 92       	push	r0
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	0f 92       	push	r0
     c3c:	11 24       	eor	r1, r1
     c3e:	0b b6       	in	r0, 0x3b	; 59
     c40:	0f 92       	push	r0
     c42:	2f 93       	push	r18
     c44:	3f 93       	push	r19
     c46:	4f 93       	push	r20
     c48:	5f 93       	push	r21
     c4a:	6f 93       	push	r22
     c4c:	7f 93       	push	r23
     c4e:	8f 93       	push	r24
     c50:	9f 93       	push	r25
     c52:	af 93       	push	r26
     c54:	bf 93       	push	r27
     c56:	ef 93       	push	r30
     c58:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
     c5a:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <tc_tccr5_compc_callback>
     c5e:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <tc_tccr5_compc_callback+0x1>
     c62:	30 97       	sbiw	r30, 0x00	; 0
     c64:	09 f0       	breq	.+2      	; 0xc68 <__vector_49+0x34>
		tc_tccr5_compc_callback();
     c66:	19 95       	eicall
	}
}
     c68:	ff 91       	pop	r31
     c6a:	ef 91       	pop	r30
     c6c:	bf 91       	pop	r27
     c6e:	af 91       	pop	r26
     c70:	9f 91       	pop	r25
     c72:	8f 91       	pop	r24
     c74:	7f 91       	pop	r23
     c76:	6f 91       	pop	r22
     c78:	5f 91       	pop	r21
     c7a:	4f 91       	pop	r20
     c7c:	3f 91       	pop	r19
     c7e:	2f 91       	pop	r18
     c80:	0f 90       	pop	r0
     c82:	0b be       	out	0x3b, r0	; 59
     c84:	0f 90       	pop	r0
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	0f 90       	pop	r0
     c8a:	1f 90       	pop	r1
     c8c:	18 95       	reti

00000c8e <config_Ziggys_ADC>:
}
/*************************************************************************//**
*****************************************************************************/
/* Write ADC registers via SPI */
void config_Ziggys_ADC( void ){
	PORTD &= ~ ( 1 << SS2 );// Put SS LOW to start transmission.
     c8e:	5d 98       	cbi	0x0b, 5	; 11
	SPI_Transmit_no_IRQ(START_CONFIG);
     c90:	86 e4       	ldi	r24, 0x46	; 70
     c92:	88 da       	rcall	.-2800   	; 0x1a4 <SPI_Transmit_no_IRQ>
	SPI_Transmit_no_IRQ(CONFIG0);
     c94:	80 ef       	ldi	r24, 0xF0	; 240
     c96:	86 da       	rcall	.-2804   	; 0x1a4 <SPI_Transmit_no_IRQ>
	SPI_Transmit_no_IRQ(CONFIG1);
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	84 da       	rcall	.-2808   	; 0x1a4 <SPI_Transmit_no_IRQ>
	SPI_Transmit_no_IRQ(CONFIG2);
     c9c:	8b e8       	ldi	r24, 0x8B	; 139
     c9e:	82 da       	rcall	.-2812   	; 0x1a4 <SPI_Transmit_no_IRQ>
	SPI_Transmit_no_IRQ(CONFIG3);
     ca0:	80 e8       	ldi	r24, 0x80	; 128
     ca2:	80 da       	rcall	.-2816   	; 0x1a4 <SPI_Transmit_no_IRQ>
     ca4:	86 e0       	ldi	r24, 0x06	; 6
	SPI_Transmit_no_IRQ(ADC_IRQ);// Here we end the inc write of the ADC.
     ca6:	7e da       	rcall	.-2820   	; 0x1a4 <SPI_Transmit_no_IRQ>
     ca8:	5d 9a       	sbi	0x0b, 5	; 11
     caa:	08 95       	ret

00000cac <adc_start_conversions>:
	PORTD |= (1<<SS2);	  // Put SS HIGH to stop comm.
     cac:	8c b5       	in	r24, 0x2c	; 44
     cae:	8f 77       	andi	r24, 0x7F	; 127
/***************************************************************************************/
/* ADC start conversions */
/***************************************************************************************/
void adc_start_conversions(void)
{
	SPCR &= ~ (1<<SPIE);//disable SPI interrupt
     cb0:	8c bd       	out	0x2c, r24	; 44
	PORTD &= ~ ( 1 << SS2 );
     cb2:	5d 98       	cbi	0x0b, 5	; 11
	SPI_Transmit_no_IRQ(STRTCNV);
     cb4:	88 e6       	ldi	r24, 0x68	; 104
     cb6:	76 da       	rcall	.-2836   	; 0x1a4 <SPI_Transmit_no_IRQ>
	PORTD |= ( 1 << SS2 );
     cb8:	5d 9a       	sbi	0x0b, 5	; 11
     cba:	08 95       	ret

00000cbc <config_ext_DR_irq>:
/***************************************************************************************/
/* Configures external irq on PIND0 */
/***************************************************************************************/
void config_ext_DR_irq(void)
{
	DDRD |= (0<<DDD0);//External interrupt on pin D0
     cbc:	8a b1       	in	r24, 0x0a	; 10
     cbe:	8a b9       	out	0x0a, r24	; 10
	EICRA |= (0x00<<ISC00);// External interrupt 0 actives on falling edge
     cc0:	e9 e6       	ldi	r30, 0x69	; 105
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	80 83       	st	Z, r24
     cc8:	08 95       	ret

00000cca <check_adc>:
}
/*************************************************************************//**
*****************************************************************************/
/*Check for correct configuration of the ADC*/
uint8_t check_adc(void){
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
	
	PORTD &= ~ ( 1 << SS2 );
     cd8:	5d 98       	cbi	0x0b, 5	; 11
	uint8_t adc_ok = 0;
	SPI_Transmit_no_IRQ(R_ADC_CONFIG);
     cda:	87 e4       	ldi	r24, 0x47	; 71
     cdc:	63 da       	rcall	.-2874   	; 0x1a4 <SPI_Transmit_no_IRQ>
	SPCR |= (1<<SPIE);//enable SPI interrupt
     cde:	8c b5       	in	r24, 0x2c	; 44
     ce0:	80 68       	ori	r24, 0x80	; 128
     ce2:	8c bd       	out	0x2c, r24	; 44
	SPI_Transmit_IRQ(DNT_CARE);
     ce4:	80 e4       	ldi	r24, 0x40	; 64
     ce6:	56 da       	rcall	.-2900   	; 0x194 <SPI_Transmit_IRQ>
	SPI_Transmit_IRQ(DNT_CARE);
     ce8:	80 e4       	ldi	r24, 0x40	; 64
     cea:	54 da       	rcall	.-2904   	; 0x194 <SPI_Transmit_IRQ>
	SPI_Transmit_IRQ(DNT_CARE);
     cec:	80 e4       	ldi	r24, 0x40	; 64
     cee:	52 da       	rcall	.-2908   	; 0x194 <SPI_Transmit_IRQ>
	SPI_Transmit_IRQ(DNT_CARE);
     cf0:	80 e4       	ldi	r24, 0x40	; 64
     cf2:	50 da       	rcall	.-2912   	; 0x194 <SPI_Transmit_IRQ>
     cf4:	80 e4       	ldi	r24, 0x40	; 64
	SPI_Transmit_IRQ(DNT_CARE);
     cf6:	4e da       	rcall	.-2916   	; 0x194 <SPI_Transmit_IRQ>
     cf8:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD |= (1<<SS2);
     cfa:	6d e6       	ldi	r22, 0x6D	; 109
	spi_rx_length = spi_rx( rx_data, APP_RX_BUF_SIZE );
     cfc:	8e e7       	ldi	r24, 0x7E	; 126
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	57 da       	rcall	.-2898   	; 0x1b0 <spi_rx>
     d02:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <spi_rx_length>
     d06:	88 23       	and	r24, r24
     d08:	41 f1       	breq	.+80     	; 0xd5a <check_adc+0x90>
	if(spi_rx_length)
     d0a:	0e e7       	ldi	r16, 0x7E	; 126
     d0c:	13 e0       	ldi	r17, 0x03	; 3
     d0e:	c0 e0       	ldi	r28, 0x00	; 0
     d10:	d0 e0       	ldi	r29, 0x00	; 0
     d12:	f1 2c       	mov	r15, r1
     d14:	68 01       	movw	r12, r16
     d16:	f8 01       	movw	r30, r16
	{
		for (int i = 0; i < spi_rx_length; i++)
		{
			sio2host_putchar(rx_data[i]);
     d18:	81 91       	ld	r24, Z+
     d1a:	8f 01       	movw	r16, r30
     d1c:	92 dc       	rcall	.-1756   	; 0x642 <sio2host_putchar>
     d1e:	f6 01       	movw	r30, r12
     d20:	80 81       	ld	r24, Z
			switch( rx_data[i] )
     d22:	86 37       	cpi	r24, 0x76	; 118
     d24:	61 f0       	breq	.+24     	; 0xd3e <check_adc+0x74>
     d26:	28 f4       	brcc	.+10     	; 0xd32 <check_adc+0x68>
     d28:	88 23       	and	r24, r24
     d2a:	49 f0       	breq	.+18     	; 0xd3e <check_adc+0x74>
     d2c:	86 36       	cpi	r24, 0x66	; 102
     d2e:	41 f4       	brne	.+16     	; 0xd40 <check_adc+0x76>
     d30:	06 c0       	rjmp	.+12     	; 0xd3e <check_adc+0x74>
     d32:	8b 38       	cpi	r24, 0x8B	; 139
     d34:	21 f0       	breq	.+8      	; 0xd3e <check_adc+0x74>
     d36:	80 3f       	cpi	r24, 0xF0	; 240
     d38:	11 f0       	breq	.+4      	; 0xd3e <check_adc+0x74>
     d3a:	80 38       	cpi	r24, 0x80	; 128
     d3c:	09 f4       	brne	.+2      	; 0xd40 <check_adc+0x76>
     d3e:	f3 94       	inc	r15
     d40:	f5 e0       	ldi	r31, 0x05	; 5
				case CONFIG1:
				case CONFIG2:
				case CONFIG3:
				case ADC_IRQ_POR:
				case ADC_IRQ_no:
					adc_ok++;
     d42:	ff 12       	cpse	r15, r31
			}
			if( adc_ok == 5 )
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <check_adc+0x80>
     d46:	ff 24       	eor	r15, r15
     d48:	f3 94       	inc	r15
			{
				adc_ok = 1;
     d4a:	21 96       	adiw	r28, 0x01	; 1
     d4c:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <spi_rx_length>
	SPI_Transmit_IRQ(DNT_CARE);
	PORTD |= (1<<SS2);
	spi_rx_length = spi_rx( rx_data, APP_RX_BUF_SIZE );
	if(spi_rx_length)
	{
		for (int i = 0; i < spi_rx_length; i++)
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	c8 17       	cp	r28, r24
     d54:	d9 07       	cpc	r29, r25
     d56:	f4 f2       	brlt	.-68     	; 0xd14 <check_adc+0x4a>
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <check_adc+0x92>
     d5a:	f1 2c       	mov	r15, r1
     d5c:	8f 2d       	mov	r24, r15
*****************************************************************************/
/*Check for correct configuration of the ADC*/
uint8_t check_adc(void){
	
	PORTD &= ~ ( 1 << SS2 );
	uint8_t adc_ok = 0;
     d5e:	df 91       	pop	r29
				adc_ok = 1;
			}
		}
	}
	return adc_ok;
}
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	ff 90       	pop	r15
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	08 95       	ret

00000d6e <main>:
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
}

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	60 97       	sbiw	r28, 0x10	; 16
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
	sysclk_init();
     d82:	80 da       	rcall	.-2816   	; 0x284 <sysclk_init>
	board_init();
     d84:	11 db       	rcall	.-2526   	; 0x3a8 <board_init>
	//SYS_Init();
	cpu_irq_enable();
	sio2host_init();
     d86:	78 94       	sei
     d88:	fd db       	rcall	.-2054   	; 0x584 <sio2host_init>
	init_SPI_mstr();
     d8a:	f5 d9       	rcall	.-3094   	; 0x176 <init_SPI_mstr>
     d8c:	80 e1       	ldi	r24, 0x10	; 16
	uint8_t configuring[] = "Configuring ADC";
     d8e:	ed e0       	ldi	r30, 0x0D	; 13
     d90:	f2 e0       	ldi	r31, 0x02	; 2
     d92:	de 01       	movw	r26, r28
     d94:	11 96       	adiw	r26, 0x01	; 1
     d96:	01 90       	ld	r0, Z+
     d98:	0d 92       	st	X+, r0
     d9a:	8a 95       	dec	r24
     d9c:	e1 f7       	brne	.-8      	; 0xd96 <main+0x28>
	config_ext_DR_irq();
     d9e:	8e df       	rcall	.-228    	; 0xcbc <config_ext_DR_irq>
     da0:	f1 2c       	mov	r15, r1
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 0;

	// Check if button is high or low for the moment
	uint8_t current_state = (~PINE & (1<<PORTE4)) != 0;
     da2:	11 e0       	ldi	r17, 0x01	; 1
     da4:	0f 2d       	mov	r16, r15
     da6:	8c b1       	in	r24, 0x0c	; 12
     da8:	91 2f       	mov	r25, r17
     daa:	28 2f       	mov	r18, r24
     dac:	20 71       	andi	r18, 0x10	; 16
     dae:	84 fd       	sbrc	r24, 4
     db0:	90 2f       	mov	r25, r16
     db2:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <button_state.3317>
	if(current_state != button_state) {
     db6:	98 17       	cp	r25, r24
     db8:	81 f0       	breq	.+32     	; 0xdda <main+0x6c>
     dba:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <count.3316>
		// Button state is about to be changed, increase counter
		count++;
     dbe:	8f 5f       	subi	r24, 0xFF	; 255
     dc0:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <count.3316>
     dc4:	84 30       	cpi	r24, 0x04	; 4
		if(count >= 4) {
     dc6:	58 f0       	brcs	.+22     	; 0xdde <main+0x70>
     dc8:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <button_state.3317>
			// The button have not bounced for four checks, change state
			button_state = current_state;
     dcc:	21 11       	cpse	r18, r1
			// If the button was pressed (not released), tell main so
			if(current_state != 0) {
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <main+0x66>
     dd0:	10 93 f3 03 	sts	0x03F3, r17	; 0x8003f3 <button_down>
				button_down = true;
     dd4:	00 93 7a 03 	sts	0x037A, r16	; 0x80037a <count.3316>
			}
			count = 0;
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <main+0x70>
     dda:	00 93 7a 03 	sts	0x037A, r16	; 0x80037a <count.3316>
		}
	}
	else{
		// Reset counter
		count = 0;
     dde:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <button_down>
	init_SPI_mstr();
	uint8_t configuring[] = "Configuring ADC";
	config_ext_DR_irq();
	while (1) {			
		debounce();
		if( button_down )
     de2:	88 23       	and	r24, r24
     de4:	01 f3       	breq	.-64     	; 0xda6 <main+0x38>
     de6:	f0 92 f3 03 	sts	0x03F3, r15	; 0x8003f3 <button_down>
		{
			//clear button
			button_down = 0;
     dea:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <pushes>
			pushes++;	
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <pushes>
     df4:	82 30       	cpi	r24, 0x02	; 2
			switch(pushes)
     df6:	71 f0       	breq	.+28     	; 0xe14 <main+0xa6>
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	81 f0       	breq	.+32     	; 0xe1c <main+0xae>
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	99 f6       	brne	.-90     	; 0xda6 <main+0x38>
     e00:	4f e0       	ldi	r20, 0x0F	; 15
			{
				case 1:
					usart_serial_write_packet(USART_HOST,configuring, 15);
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	be 01       	movw	r22, r28
     e06:	6f 5f       	subi	r22, 0xFF	; 255
     e08:	7f 4f       	sbci	r23, 0xFF	; 255
     e0a:	88 ec       	ldi	r24, 0xC8	; 200
     e0c:	90 e0       	ldi	r25, 0x00	; 0
					config_Ziggys_ADC();
     e0e:	6d da       	rcall	.-2854   	; 0x2ea <usart_serial_write_packet>
					break;
     e10:	3e df       	rcall	.-388    	; 0xc8e <config_Ziggys_ADC>
				case 2:
					is_adc_ok = check_adc();
     e12:	c9 cf       	rjmp	.-110    	; 0xda6 <main+0x38>
     e14:	5a df       	rcall	.-332    	; 0xcca <check_adc>
     e16:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <is_adc_ok>
					break;
     e1a:	c5 cf       	rjmp	.-118    	; 0xda6 <main+0x38>
				case 3:
					EIMSK |= (1<<INT0);//External interrupt 0 enabled
     e1c:	e8 9a       	sbi	0x1d, 0	; 29
					adc_start_conversions();
     e1e:	46 df       	rcall	.-372    	; 0xcac <adc_start_conversions>
     e20:	c2 cf       	rjmp	.-124    	; 0xda6 <main+0x38>

00000e22 <__vector_1>:
					break;
     e22:	1f 92       	push	r1
		
/*************************************************************************//**
	External interrupt handler for external ADC data ready event
*****************************************************************************/
ISR(INT0_vect)
{
     e24:	0f 92       	push	r0
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	0f 92       	push	r0
     e2a:	11 24       	eor	r1, r1
     e2c:	0b b6       	in	r0, 0x3b	; 59
     e2e:	0f 92       	push	r0
     e30:	1f 93       	push	r17
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	4f 93       	push	r20
     e38:	5f 93       	push	r21
     e3a:	6f 93       	push	r22
     e3c:	7f 93       	push	r23
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	af 93       	push	r26
     e44:	bf 93       	push	r27
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	ef 93       	push	r30
     e4c:	ff 93       	push	r31
	uint8_t LADCs;
	uint8_t HADCs;
	uint8_t MADCs;
	uint8_t STATUS_byte = 0;
	/*Send don't care command to ADC to retrieve STATUS BYTE */
	PORTD &= ~ ( 1 << SS2 ); // Put Slave Select low to start transmission
     e4e:	5d 98       	cbi	0x0b, 5	; 11
	STATUS_byte = SPI_Transmit_no_IRQ(DNT_CARE);// While clocking-in the cmmnd byte, through its
     e50:	80 e4       	ldi	r24, 0x40	; 64
     e52:	a8 d9       	rcall	.-3248   	; 0x1a4 <SPI_Transmit_no_IRQ>
	PORTD |= ( 1 << SS2 );					  // SDO pin in the slave transmits its STATUS BYTE.
     e54:	5d 9a       	sbi	0x0b, 5	; 11
	if ( STATUS_byte == ADC_STAT_DR )         
     e56:	83 31       	cpi	r24, 0x13	; 19
     e58:	99 f4       	brne	.+38     	; 0xe80 <__vector_1+0x5e>
	{	 
		PORTD &= ~( 1 << SS2 );
     e5a:	5d 98       	cbi	0x0b, 5	; 11
		SPI_Transmit_no_IRQ(R_ADC_SAMPLES);
     e5c:	81 e4       	ldi	r24, 0x41	; 65
     e5e:	a2 d9       	rcall	.-3260   	; 0x1a4 <SPI_Transmit_no_IRQ>
		HADCs = SPI_Transmit_no_IRQ(DNT_CARE);
     e60:	80 e4       	ldi	r24, 0x40	; 64
     e62:	a0 d9       	rcall	.-3264   	; 0x1a4 <SPI_Transmit_no_IRQ>
     e64:	18 2f       	mov	r17, r24
		MADCs = SPI_Transmit_no_IRQ(DNT_CARE);
     e66:	80 e4       	ldi	r24, 0x40	; 64
     e68:	9d d9       	rcall	.-3270   	; 0x1a4 <SPI_Transmit_no_IRQ>
     e6a:	d8 2f       	mov	r29, r24
		LADCs = SPI_Transmit_no_IRQ(DNT_CARE);
     e6c:	80 e4       	ldi	r24, 0x40	; 64
     e6e:	9a d9       	rcall	.-3276   	; 0x1a4 <SPI_Transmit_no_IRQ>
     e70:	c8 2f       	mov	r28, r24
		PORTD |= ( 1 << SS2 );
     e72:	5d 9a       	sbi	0x0b, 5	; 11
		sio2host_putchar(HADCs);
     e74:	81 2f       	mov	r24, r17
     e76:	e5 db       	rcall	.-2102   	; 0x642 <sio2host_putchar>
		sio2host_putchar(MADCs);
     e78:	8d 2f       	mov	r24, r29
     e7a:	e3 db       	rcall	.-2106   	; 0x642 <sio2host_putchar>
     e7c:	8c 2f       	mov	r24, r28
		sio2host_putchar(LADCs);
     e7e:	e1 db       	rcall	.-2110   	; 0x642 <sio2host_putchar>
     e80:	80 e1       	ldi	r24, 0x10	; 16
     e82:	83 b9       	out	0x03, r24	; 3
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <pushes>
	}
	LED_Toggle(LED0);
	pushes = 2;
     e8a:	ff 91       	pop	r31
     e8c:	ef 91       	pop	r30
	//EIFR |= (1 << INTF0);
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	bf 91       	pop	r27
     e94:	af 91       	pop	r26
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	7f 91       	pop	r23
     e9c:	6f 91       	pop	r22
     e9e:	5f 91       	pop	r21
     ea0:	4f 91       	pop	r20
     ea2:	3f 91       	pop	r19
     ea4:	2f 91       	pop	r18
     ea6:	1f 91       	pop	r17
     ea8:	0f 90       	pop	r0
     eaa:	0b be       	out	0x3b, r0	; 59
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	0f 90       	pop	r0
     eb2:	1f 90       	pop	r1
     eb4:	18 95       	reti

00000eb6 <__udivmodsi4>:
     eb6:	a1 e2       	ldi	r26, 0x21	; 33
     eb8:	1a 2e       	mov	r1, r26
     eba:	aa 1b       	sub	r26, r26
     ebc:	bb 1b       	sub	r27, r27
     ebe:	fd 01       	movw	r30, r26
     ec0:	0d c0       	rjmp	.+26     	; 0xedc <__udivmodsi4_ep>

00000ec2 <__udivmodsi4_loop>:
     ec2:	aa 1f       	adc	r26, r26
     ec4:	bb 1f       	adc	r27, r27
     ec6:	ee 1f       	adc	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	a2 17       	cp	r26, r18
     ecc:	b3 07       	cpc	r27, r19
     ece:	e4 07       	cpc	r30, r20
     ed0:	f5 07       	cpc	r31, r21
     ed2:	20 f0       	brcs	.+8      	; 0xedc <__udivmodsi4_ep>
     ed4:	a2 1b       	sub	r26, r18
     ed6:	b3 0b       	sbc	r27, r19
     ed8:	e4 0b       	sbc	r30, r20
     eda:	f5 0b       	sbc	r31, r21

00000edc <__udivmodsi4_ep>:
     edc:	66 1f       	adc	r22, r22
     ede:	77 1f       	adc	r23, r23
     ee0:	88 1f       	adc	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	1a 94       	dec	r1
     ee6:	69 f7       	brne	.-38     	; 0xec2 <__udivmodsi4_loop>
     ee8:	60 95       	com	r22
     eea:	70 95       	com	r23
     eec:	80 95       	com	r24
     eee:	90 95       	com	r25
     ef0:	9b 01       	movw	r18, r22
     ef2:	ac 01       	movw	r20, r24
     ef4:	bd 01       	movw	r22, r26
     ef6:	cf 01       	movw	r24, r30
     ef8:	08 95       	ret

00000efa <fdevopen>:
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	31 f4       	brne	.+12     	; 0xf12 <fdevopen+0x18>
     f06:	61 15       	cp	r22, r1
     f08:	71 05       	cpc	r23, r1
     f0a:	19 f4       	brne	.+6      	; 0xf12 <fdevopen+0x18>
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	39 c0       	rjmp	.+114    	; 0xf84 <fdevopen+0x8a>
     f12:	8b 01       	movw	r16, r22
     f14:	ec 01       	movw	r28, r24
     f16:	6e e0       	ldi	r22, 0x0E	; 14
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	37 d0       	rcall	.+110    	; 0xf8e <calloc>
     f20:	fc 01       	movw	r30, r24
     f22:	89 2b       	or	r24, r25
     f24:	99 f3       	breq	.-26     	; 0xf0c <fdevopen+0x12>
     f26:	80 e8       	ldi	r24, 0x80	; 128
     f28:	83 83       	std	Z+3, r24	; 0x03
     f2a:	01 15       	cp	r16, r1
     f2c:	11 05       	cpc	r17, r1
     f2e:	71 f0       	breq	.+28     	; 0xf4c <fdevopen+0x52>
     f30:	13 87       	std	Z+11, r17	; 0x0b
     f32:	02 87       	std	Z+10, r16	; 0x0a
     f34:	81 e8       	ldi	r24, 0x81	; 129
     f36:	83 83       	std	Z+3, r24	; 0x03
     f38:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <__iob>
     f3c:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <__iob+0x1>
     f40:	89 2b       	or	r24, r25
     f42:	21 f4       	brne	.+8      	; 0xf4c <fdevopen+0x52>
     f44:	f0 93 f5 03 	sts	0x03F5, r31	; 0x8003f5 <__iob+0x1>
     f48:	e0 93 f4 03 	sts	0x03F4, r30	; 0x8003f4 <__iob>
     f4c:	20 97       	sbiw	r28, 0x00	; 0
     f4e:	c9 f0       	breq	.+50     	; 0xf82 <fdevopen+0x88>
     f50:	d1 87       	std	Z+9, r29	; 0x09
     f52:	c0 87       	std	Z+8, r28	; 0x08
     f54:	83 81       	ldd	r24, Z+3	; 0x03
     f56:	82 60       	ori	r24, 0x02	; 2
     f58:	83 83       	std	Z+3, r24	; 0x03
     f5a:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <__iob+0x2>
     f5e:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <__iob+0x3>
     f62:	89 2b       	or	r24, r25
     f64:	71 f4       	brne	.+28     	; 0xf82 <fdevopen+0x88>
     f66:	f0 93 f7 03 	sts	0x03F7, r31	; 0x8003f7 <__iob+0x3>
     f6a:	e0 93 f6 03 	sts	0x03F6, r30	; 0x8003f6 <__iob+0x2>
     f6e:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <__iob+0x4>
     f72:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <__iob+0x5>
     f76:	89 2b       	or	r24, r25
     f78:	21 f4       	brne	.+8      	; 0xf82 <fdevopen+0x88>
     f7a:	f0 93 f9 03 	sts	0x03F9, r31	; 0x8003f9 <__iob+0x5>
     f7e:	e0 93 f8 03 	sts	0x03F8, r30	; 0x8003f8 <__iob+0x4>
     f82:	cf 01       	movw	r24, r30
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	08 95       	ret

00000f8e <calloc>:
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	86 9f       	mul	r24, r22
     f98:	80 01       	movw	r16, r0
     f9a:	87 9f       	mul	r24, r23
     f9c:	10 0d       	add	r17, r0
     f9e:	96 9f       	mul	r25, r22
     fa0:	10 0d       	add	r17, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	c8 01       	movw	r24, r16
     fa6:	0d d0       	rcall	.+26     	; 0xfc2 <malloc>
     fa8:	ec 01       	movw	r28, r24
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	21 f0       	breq	.+8      	; 0xfb6 <calloc+0x28>
     fae:	a8 01       	movw	r20, r16
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	27 d1       	rcall	.+590    	; 0x1204 <memset>
     fb6:	ce 01       	movw	r24, r28
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	08 95       	ret

00000fc2 <malloc>:
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	91 05       	cpc	r25, r1
     fce:	10 f4       	brcc	.+4      	; 0xfd4 <malloc+0x12>
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <__flp>
     fd8:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <__flp+0x1>
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	a0 e0       	ldi	r26, 0x00	; 0
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	30 97       	sbiw	r30, 0x00	; 0
     fe6:	19 f1       	breq	.+70     	; 0x102e <malloc+0x6c>
     fe8:	40 81       	ld	r20, Z
     fea:	51 81       	ldd	r21, Z+1	; 0x01
     fec:	02 81       	ldd	r16, Z+2	; 0x02
     fee:	13 81       	ldd	r17, Z+3	; 0x03
     ff0:	48 17       	cp	r20, r24
     ff2:	59 07       	cpc	r21, r25
     ff4:	c8 f0       	brcs	.+50     	; 0x1028 <malloc+0x66>
     ff6:	84 17       	cp	r24, r20
     ff8:	95 07       	cpc	r25, r21
     ffa:	69 f4       	brne	.+26     	; 0x1016 <malloc+0x54>
     ffc:	10 97       	sbiw	r26, 0x00	; 0
     ffe:	31 f0       	breq	.+12     	; 0x100c <malloc+0x4a>
    1000:	12 96       	adiw	r26, 0x02	; 2
    1002:	0c 93       	st	X, r16
    1004:	12 97       	sbiw	r26, 0x02	; 2
    1006:	13 96       	adiw	r26, 0x03	; 3
    1008:	1c 93       	st	X, r17
    100a:	27 c0       	rjmp	.+78     	; 0x105a <malloc+0x98>
    100c:	00 93 fc 03 	sts	0x03FC, r16	; 0x8003fc <__flp>
    1010:	10 93 fd 03 	sts	0x03FD, r17	; 0x8003fd <__flp+0x1>
    1014:	22 c0       	rjmp	.+68     	; 0x105a <malloc+0x98>
    1016:	21 15       	cp	r18, r1
    1018:	31 05       	cpc	r19, r1
    101a:	19 f0       	breq	.+6      	; 0x1022 <malloc+0x60>
    101c:	42 17       	cp	r20, r18
    101e:	53 07       	cpc	r21, r19
    1020:	18 f4       	brcc	.+6      	; 0x1028 <malloc+0x66>
    1022:	9a 01       	movw	r18, r20
    1024:	bd 01       	movw	r22, r26
    1026:	ef 01       	movw	r28, r30
    1028:	df 01       	movw	r26, r30
    102a:	f8 01       	movw	r30, r16
    102c:	db cf       	rjmp	.-74     	; 0xfe4 <malloc+0x22>
    102e:	21 15       	cp	r18, r1
    1030:	31 05       	cpc	r19, r1
    1032:	f9 f0       	breq	.+62     	; 0x1072 <malloc+0xb0>
    1034:	28 1b       	sub	r18, r24
    1036:	39 0b       	sbc	r19, r25
    1038:	24 30       	cpi	r18, 0x04	; 4
    103a:	31 05       	cpc	r19, r1
    103c:	80 f4       	brcc	.+32     	; 0x105e <malloc+0x9c>
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	61 15       	cp	r22, r1
    1044:	71 05       	cpc	r23, r1
    1046:	21 f0       	breq	.+8      	; 0x1050 <malloc+0x8e>
    1048:	fb 01       	movw	r30, r22
    104a:	93 83       	std	Z+3, r25	; 0x03
    104c:	82 83       	std	Z+2, r24	; 0x02
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <malloc+0x96>
    1050:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <__flp+0x1>
    1054:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <__flp>
    1058:	fe 01       	movw	r30, r28
    105a:	32 96       	adiw	r30, 0x02	; 2
    105c:	44 c0       	rjmp	.+136    	; 0x10e6 <malloc+0x124>
    105e:	fe 01       	movw	r30, r28
    1060:	e2 0f       	add	r30, r18
    1062:	f3 1f       	adc	r31, r19
    1064:	81 93       	st	Z+, r24
    1066:	91 93       	st	Z+, r25
    1068:	22 50       	subi	r18, 0x02	; 2
    106a:	31 09       	sbc	r19, r1
    106c:	39 83       	std	Y+1, r19	; 0x01
    106e:	28 83       	st	Y, r18
    1070:	3a c0       	rjmp	.+116    	; 0x10e6 <malloc+0x124>
    1072:	20 91 fa 03 	lds	r18, 0x03FA	; 0x8003fa <__brkval>
    1076:	30 91 fb 03 	lds	r19, 0x03FB	; 0x8003fb <__brkval+0x1>
    107a:	23 2b       	or	r18, r19
    107c:	41 f4       	brne	.+16     	; 0x108e <malloc+0xcc>
    107e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1082:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1086:	30 93 fb 03 	sts	0x03FB, r19	; 0x8003fb <__brkval+0x1>
    108a:	20 93 fa 03 	sts	0x03FA, r18	; 0x8003fa <__brkval>
    108e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1092:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1096:	21 15       	cp	r18, r1
    1098:	31 05       	cpc	r19, r1
    109a:	41 f4       	brne	.+16     	; 0x10ac <malloc+0xea>
    109c:	2d b7       	in	r18, 0x3d	; 61
    109e:	3e b7       	in	r19, 0x3e	; 62
    10a0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    10a4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    10a8:	24 1b       	sub	r18, r20
    10aa:	35 0b       	sbc	r19, r21
    10ac:	e0 91 fa 03 	lds	r30, 0x03FA	; 0x8003fa <__brkval>
    10b0:	f0 91 fb 03 	lds	r31, 0x03FB	; 0x8003fb <__brkval+0x1>
    10b4:	e2 17       	cp	r30, r18
    10b6:	f3 07       	cpc	r31, r19
    10b8:	a0 f4       	brcc	.+40     	; 0x10e2 <malloc+0x120>
    10ba:	2e 1b       	sub	r18, r30
    10bc:	3f 0b       	sbc	r19, r31
    10be:	28 17       	cp	r18, r24
    10c0:	39 07       	cpc	r19, r25
    10c2:	78 f0       	brcs	.+30     	; 0x10e2 <malloc+0x120>
    10c4:	ac 01       	movw	r20, r24
    10c6:	4e 5f       	subi	r20, 0xFE	; 254
    10c8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ca:	24 17       	cp	r18, r20
    10cc:	35 07       	cpc	r19, r21
    10ce:	48 f0       	brcs	.+18     	; 0x10e2 <malloc+0x120>
    10d0:	4e 0f       	add	r20, r30
    10d2:	5f 1f       	adc	r21, r31
    10d4:	50 93 fb 03 	sts	0x03FB, r21	; 0x8003fb <__brkval+0x1>
    10d8:	40 93 fa 03 	sts	0x03FA, r20	; 0x8003fa <__brkval>
    10dc:	81 93       	st	Z+, r24
    10de:	91 93       	st	Z+, r25
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <malloc+0x124>
    10e2:	e0 e0       	ldi	r30, 0x00	; 0
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	cf 01       	movw	r24, r30
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	08 95       	ret

000010f2 <free>:
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	09 f4       	brne	.+2      	; 0x10fc <free+0xa>
    10fa:	81 c0       	rjmp	.+258    	; 0x11fe <free+0x10c>
    10fc:	fc 01       	movw	r30, r24
    10fe:	32 97       	sbiw	r30, 0x02	; 2
    1100:	13 82       	std	Z+3, r1	; 0x03
    1102:	12 82       	std	Z+2, r1	; 0x02
    1104:	a0 91 fc 03 	lds	r26, 0x03FC	; 0x8003fc <__flp>
    1108:	b0 91 fd 03 	lds	r27, 0x03FD	; 0x8003fd <__flp+0x1>
    110c:	10 97       	sbiw	r26, 0x00	; 0
    110e:	81 f4       	brne	.+32     	; 0x1130 <free+0x3e>
    1110:	20 81       	ld	r18, Z
    1112:	31 81       	ldd	r19, Z+1	; 0x01
    1114:	82 0f       	add	r24, r18
    1116:	93 1f       	adc	r25, r19
    1118:	20 91 fa 03 	lds	r18, 0x03FA	; 0x8003fa <__brkval>
    111c:	30 91 fb 03 	lds	r19, 0x03FB	; 0x8003fb <__brkval+0x1>
    1120:	28 17       	cp	r18, r24
    1122:	39 07       	cpc	r19, r25
    1124:	51 f5       	brne	.+84     	; 0x117a <free+0x88>
    1126:	f0 93 fb 03 	sts	0x03FB, r31	; 0x8003fb <__brkval+0x1>
    112a:	e0 93 fa 03 	sts	0x03FA, r30	; 0x8003fa <__brkval>
    112e:	67 c0       	rjmp	.+206    	; 0x11fe <free+0x10c>
    1130:	ed 01       	movw	r28, r26
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	ce 17       	cp	r28, r30
    1138:	df 07       	cpc	r29, r31
    113a:	40 f4       	brcc	.+16     	; 0x114c <free+0x5a>
    113c:	4a 81       	ldd	r20, Y+2	; 0x02
    113e:	5b 81       	ldd	r21, Y+3	; 0x03
    1140:	9e 01       	movw	r18, r28
    1142:	41 15       	cp	r20, r1
    1144:	51 05       	cpc	r21, r1
    1146:	f1 f0       	breq	.+60     	; 0x1184 <free+0x92>
    1148:	ea 01       	movw	r28, r20
    114a:	f5 cf       	rjmp	.-22     	; 0x1136 <free+0x44>
    114c:	d3 83       	std	Z+3, r29	; 0x03
    114e:	c2 83       	std	Z+2, r28	; 0x02
    1150:	40 81       	ld	r20, Z
    1152:	51 81       	ldd	r21, Z+1	; 0x01
    1154:	84 0f       	add	r24, r20
    1156:	95 1f       	adc	r25, r21
    1158:	c8 17       	cp	r28, r24
    115a:	d9 07       	cpc	r29, r25
    115c:	59 f4       	brne	.+22     	; 0x1174 <free+0x82>
    115e:	88 81       	ld	r24, Y
    1160:	99 81       	ldd	r25, Y+1	; 0x01
    1162:	84 0f       	add	r24, r20
    1164:	95 1f       	adc	r25, r21
    1166:	02 96       	adiw	r24, 0x02	; 2
    1168:	91 83       	std	Z+1, r25	; 0x01
    116a:	80 83       	st	Z, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	9b 81       	ldd	r25, Y+3	; 0x03
    1170:	93 83       	std	Z+3, r25	; 0x03
    1172:	82 83       	std	Z+2, r24	; 0x02
    1174:	21 15       	cp	r18, r1
    1176:	31 05       	cpc	r19, r1
    1178:	29 f4       	brne	.+10     	; 0x1184 <free+0x92>
    117a:	f0 93 fd 03 	sts	0x03FD, r31	; 0x8003fd <__flp+0x1>
    117e:	e0 93 fc 03 	sts	0x03FC, r30	; 0x8003fc <__flp>
    1182:	3d c0       	rjmp	.+122    	; 0x11fe <free+0x10c>
    1184:	e9 01       	movw	r28, r18
    1186:	fb 83       	std	Y+3, r31	; 0x03
    1188:	ea 83       	std	Y+2, r30	; 0x02
    118a:	49 91       	ld	r20, Y+
    118c:	59 91       	ld	r21, Y+
    118e:	c4 0f       	add	r28, r20
    1190:	d5 1f       	adc	r29, r21
    1192:	ec 17       	cp	r30, r28
    1194:	fd 07       	cpc	r31, r29
    1196:	61 f4       	brne	.+24     	; 0x11b0 <free+0xbe>
    1198:	80 81       	ld	r24, Z
    119a:	91 81       	ldd	r25, Z+1	; 0x01
    119c:	84 0f       	add	r24, r20
    119e:	95 1f       	adc	r25, r21
    11a0:	02 96       	adiw	r24, 0x02	; 2
    11a2:	e9 01       	movw	r28, r18
    11a4:	99 83       	std	Y+1, r25	; 0x01
    11a6:	88 83       	st	Y, r24
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	9b 83       	std	Y+3, r25	; 0x03
    11ae:	8a 83       	std	Y+2, r24	; 0x02
    11b0:	e0 e0       	ldi	r30, 0x00	; 0
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	12 96       	adiw	r26, 0x02	; 2
    11b6:	8d 91       	ld	r24, X+
    11b8:	9c 91       	ld	r25, X
    11ba:	13 97       	sbiw	r26, 0x03	; 3
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	19 f0       	breq	.+6      	; 0x11c6 <free+0xd4>
    11c0:	fd 01       	movw	r30, r26
    11c2:	dc 01       	movw	r26, r24
    11c4:	f7 cf       	rjmp	.-18     	; 0x11b4 <free+0xc2>
    11c6:	8d 91       	ld	r24, X+
    11c8:	9c 91       	ld	r25, X
    11ca:	11 97       	sbiw	r26, 0x01	; 1
    11cc:	9d 01       	movw	r18, r26
    11ce:	2e 5f       	subi	r18, 0xFE	; 254
    11d0:	3f 4f       	sbci	r19, 0xFF	; 255
    11d2:	82 0f       	add	r24, r18
    11d4:	93 1f       	adc	r25, r19
    11d6:	20 91 fa 03 	lds	r18, 0x03FA	; 0x8003fa <__brkval>
    11da:	30 91 fb 03 	lds	r19, 0x03FB	; 0x8003fb <__brkval+0x1>
    11de:	28 17       	cp	r18, r24
    11e0:	39 07       	cpc	r19, r25
    11e2:	69 f4       	brne	.+26     	; 0x11fe <free+0x10c>
    11e4:	30 97       	sbiw	r30, 0x00	; 0
    11e6:	29 f4       	brne	.+10     	; 0x11f2 <free+0x100>
    11e8:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <__flp+0x1>
    11ec:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <__flp>
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <free+0x104>
    11f2:	13 82       	std	Z+3, r1	; 0x03
    11f4:	12 82       	std	Z+2, r1	; 0x02
    11f6:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <__brkval+0x1>
    11fa:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <__brkval>
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <memset>:
    1204:	dc 01       	movw	r26, r24
    1206:	01 c0       	rjmp	.+2      	; 0x120a <memset+0x6>
    1208:	6d 93       	st	X+, r22
    120a:	41 50       	subi	r20, 0x01	; 1
    120c:	50 40       	sbci	r21, 0x00	; 0
    120e:	e0 f7       	brcc	.-8      	; 0x1208 <memset+0x4>
    1210:	08 95       	ret

00001212 <_exit>:
    1212:	f8 94       	cli

00001214 <__stop_program>:
    1214:	ff cf       	rjmp	.-2      	; 0x1214 <__stop_program>
