
MCU_ctrl_ADC_serial2Matlab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  000011aa  0000123e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001aa  0080021e  0080021e  0000125c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004667  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024ed  00000000  00000000  00005c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000046c7  00000000  00000000  000080f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b94  00000000  00000000  0000c7b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00019d38  00000000  00000000  0000d34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d3b  00000000  00000000  00027084  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  00029dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007c0d  00000000  00000000  0002a03f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	e5 c6       	rjmp	.+3530   	; 0xdd0 <__vector_1>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	9f c0       	rjmp	.+318    	; 0x174 <__bad_interrupt>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	64 c3       	rjmp	.+1736   	; 0x70e <__vector_17>
      46:	00 00       	nop
      48:	8f c3       	rjmp	.+1822   	; 0x768 <__vector_18>
      4a:	00 00       	nop
      4c:	ba c3       	rjmp	.+1908   	; 0x7c2 <__vector_19>
      4e:	00 00       	nop
      50:	31 c3       	rjmp	.+1634   	; 0x6b4 <__vector_20>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e7 c0       	rjmp	.+462    	; 0x230 <__vector_24>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fa c3       	rjmp	.+2036   	; 0x876 <__vector_32>
      82:	00 00       	nop
      84:	25 c4       	rjmp	.+2122   	; 0x8d0 <__vector_33>
      86:	00 00       	nop
      88:	50 c4       	rjmp	.+2208   	; 0x92a <__vector_34>
      8a:	00 00       	nop
      8c:	c7 c3       	rjmp	.+1934   	; 0x81c <__vector_35>
      8e:	00 00       	nop
      90:	c9 c2       	rjmp	.+1426   	; 0x624 <__vector_36>
      92:	00 00       	nop
      94:	6f c0       	rjmp	.+222    	; 0x174 <__bad_interrupt>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	9a c4       	rjmp	.+2356   	; 0x9de <__vector_42>
      aa:	00 00       	nop
      ac:	c5 c4       	rjmp	.+2442   	; 0xa38 <__vector_43>
      ae:	00 00       	nop
      b0:	f0 c4       	rjmp	.+2528   	; 0xa92 <__vector_44>
      b2:	00 00       	nop
      b4:	67 c4       	rjmp	.+2254   	; 0x984 <__vector_45>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c5       	rjmp	.+2696   	; 0xb46 <__vector_47>
      be:	00 00       	nop
      c0:	6f c5       	rjmp	.+2782   	; 0xba0 <__vector_48>
      c2:	00 00       	nop
      c4:	9a c5       	rjmp	.+2868   	; 0xbfa <__vector_49>
      c6:	00 00       	nop
      c8:	11 c5       	rjmp	.+2594   	; 0xaec <__vector_50>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	ea ea       	ldi	r30, 0xAA	; 170
     14c:	f1 e1       	ldi	r31, 0x11	; 17
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	ae 31       	cpi	r26, 0x1E	; 30
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	23 e0       	ldi	r18, 0x03	; 3
     160:	ae e1       	ldi	r26, 0x1E	; 30
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a8 3c       	cpi	r26, 0xC8	; 200
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	e0 d5       	rcall	.+3008   	; 0xd30 <main>
     170:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <init_SPI_mstr>:
static uint8_t spi_rx_count;

/* Initiate SPI module */
void init_SPI_mstr(void){

	sysclk_enable_module( POWER_RED_REG0, PRSPI_bm );
     176:	64 e0       	ldi	r22, 0x04	; 4
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	a0 d0       	rcall	.+320    	; 0x2bc <sysclk_enable_module>
	
	/* Set MOSI and SCK output, all others input */
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK);
     17c:	84 b1       	in	r24, 0x04	; 4
     17e:	86 60       	ori	r24, 0x06	; 6
     180:	84 b9       	out	0x04, r24	; 4
	/*	No end of tx irq, enable SPI, Master, set clock rate fck/2, dord MSB first, */
	SPCR |= ((0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|
     182:	8c b5       	in	r24, 0x2c	; 44
     184:	80 65       	ori	r24, 0x50	; 80
     186:	8c bd       	out	0x2c, r24	; 44
	(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0));  // SPI enable, Master, f/2 with TxRx OSC
	SPSR |= (1 <<SPI2X); //double speed enabled
     188:	8d b5       	in	r24, 0x2d	; 45
     18a:	81 60       	ori	r24, 0x01	; 1
     18c:	8d bd       	out	0x2d, r24	; 45
	DDRD = (1<<DDD5);//SS outputs
     18e:	80 e2       	ldi	r24, 0x20	; 32
     190:	8a b9       	out	0x0a, r24	; 10
	
	PORTD |= (1<<SS2); //Put Slave Select high
     192:	5d 9a       	sbi	0x0b, 5	; 11
     194:	08 95       	ret

00000196 <SPI_Transmit_IRQ>:
}

/* SPI transmit and receive function */
uint8_t SPI_Transmit_IRQ(uint8_t Data)
{	
	spi_buf_complete = 0;
     196:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <spi_buf_complete>
	SPDR = Data;
     19a:	8e bd       	out	0x2e, r24	; 46
	while(!spi_buf_complete){};
     19c:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <spi_buf_complete>
     1a0:	88 23       	and	r24, r24
     1a2:	e1 f3       	breq	.-8      	; 0x19c <SPI_Transmit_IRQ+0x6>
}
     1a4:	08 95       	ret

000001a6 <SPI_Transmit_no_IRQ>:
uint8_t SPI_Transmit_no_IRQ(uint8_t Data)
{	
	SPDR = Data;
     1a6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){};
     1a8:	0d b4       	in	r0, 0x2d	; 45
     1aa:	07 fe       	sbrs	r0, 7
     1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <SPI_Transmit_no_IRQ+0x2>
	return SPDR;
     1ae:	8e b5       	in	r24, 0x2e	; 46
}
     1b0:	08 95       	ret

000001b2 <spi_rx>:
uint8_t spi_rx(uint8_t *data, uint8_t max_length)
{
     1b2:	dc 01       	movw	r26, r24
	uint8_t data_received = 0;
	if(spi_rx_buf_tail >= spi_rx_buf_head)
     1b4:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <spi_rx_buf_tail>
     1b8:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <spi_rx_buf_head>
     1bc:	89 17       	cp	r24, r25
     1be:	28 f0       	brcs	.+10     	; 0x1ca <spi_rx+0x18>
	{
		spi_rx_count = spi_rx_buf_tail - spi_rx_buf_head;
     1c0:	28 2f       	mov	r18, r24
     1c2:	29 1b       	sub	r18, r25
     1c4:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <__data_end>
     1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <spi_rx+0x22>
	}
	else
	{
		spi_rx_count = spi_rx_buf_tail + (SPI_RX_BUF_SIZE_HOST - spi_rx_buf_head);
     1ca:	24 e6       	ldi	r18, 0x64	; 100
     1cc:	28 0f       	add	r18, r24
     1ce:	29 1b       	sub	r18, r25
     1d0:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <__data_end>
	}
	
	if (0 == spi_rx_count) {
     1d4:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <__data_end>
     1d8:	99 23       	and	r25, r25
     1da:	31 f1       	breq	.+76     	; 0x228 <spi_rx+0x76>
		return 0;
	}

	if (SPI_RX_BUF_SIZE_HOST <= spi_rx_count) {
     1dc:	94 36       	cpi	r25, 0x64	; 100
     1de:	40 f0       	brcs	.+16     	; 0x1f0 <spi_rx+0x3e>
		/*
		 * Bytes between head and tail are overwritten by new data.
		 * The oldest data in buffer is the one to which the tail is
		 * pointing. So reading operation should start from the tail.
		 */
		spi_rx_buf_head = spi_rx_buf_tail;
     1e0:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <spi_rx_buf_head>
		/*
		 * This is a buffer overflow case. But still only the number of
		 * bytes equivalent to
		 * full buffer size are useful.
		 */
		spi_rx_count = SPI_RX_BUF_SIZE_HOST;
     1e4:	84 e6       	ldi	r24, 0x64	; 100
     1e6:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>

		/* Bytes received is more than or equal to buffer. */
		if (SPI_RX_BUF_SIZE_HOST <= max_length) {
     1ea:	64 36       	cpi	r22, 0x64	; 100
     1ec:	38 f4       	brcc	.+14     	; 0x1fc <spi_rx+0x4a>
     1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <spi_rx+0x44>
     1f0:	96 17       	cp	r25, r22
     1f2:	08 f4       	brcc	.+2      	; 0x1f6 <spi_rx+0x44>
     1f4:	69 2f       	mov	r22, r25
			max_length = spi_rx_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
     1f6:	61 11       	cpse	r22, r1
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <spi_rx+0x4c>
     1fa:	18 c0       	rjmp	.+48     	; 0x22c <spi_rx+0x7a>
			 * Requested receive length (max_length) is more than
			 * the
			 * max size of receive buffer, but at max the full
			 * buffer can be read.
			 */
			max_length = SPI_RX_BUF_SIZE_HOST;
     1fc:	64 e6       	ldi	r22, 0x64	; 100
     1fe:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <spi_rx_buf_head>
     202:	26 2f       	mov	r18, r22
	}

	data_received = max_length;
	while (max_length > 0) {
		/* Start to copy from head. */
		*data = spi_rx_buf[spi_rx_buf_head];
     204:	e9 2f       	mov	r30, r25
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	ef 5d       	subi	r30, 0xDF	; 223
     20a:	fd 4f       	sbci	r31, 0xFD	; 253
     20c:	30 81       	ld	r19, Z
     20e:	3d 93       	st	X+, r19
		data++;
		max_length--;
     210:	21 50       	subi	r18, 0x01	; 1
		if ((SPI_RX_BUF_SIZE_HOST - 1) == spi_rx_buf_head) {
     212:	93 36       	cpi	r25, 0x63	; 99
     214:	11 f0       	breq	.+4      	; 0x21a <spi_rx+0x68>
			spi_rx_buf_head = 0;
		}
		else
		{
			spi_rx_buf_head++;
     216:	9f 5f       	subi	r25, 0xFF	; 255
     218:	01 c0       	rjmp	.+2      	; 0x21c <spi_rx+0x6a>
		/* Start to copy from head. */
		*data = spi_rx_buf[spi_rx_buf_head];
		data++;
		max_length--;
		if ((SPI_RX_BUF_SIZE_HOST - 1) == spi_rx_buf_head) {
			spi_rx_buf_head = 0;
     21a:	90 e0       	ldi	r25, 0x00	; 0
			max_length = spi_rx_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
     21c:	21 11       	cpse	r18, r1
     21e:	f2 cf       	rjmp	.-28     	; 0x204 <spi_rx+0x52>
     220:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <spi_rx_buf_head>
     224:	86 2f       	mov	r24, r22
     226:	08 95       	ret
	{
		spi_rx_count = spi_rx_buf_tail + (SPI_RX_BUF_SIZE_HOST - spi_rx_buf_head);
	}
	
	if (0 == spi_rx_count) {
		return 0;
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	08 95       	ret
		else
		{
			spi_rx_buf_head++;
		}
	}
	return data_received;
     22c:	80 e0       	ldi	r24, 0x00	; 0
}
     22e:	08 95       	ret

00000230 <__vector_24>:
/*************************************************************************//**
	Interrupt handler for SPI data received
*****************************************************************************/

SPI_HOST_ISR_VECT(){
     230:	1f 92       	push	r1
     232:	0f 92       	push	r0
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	0f 92       	push	r0
     238:	11 24       	eor	r1, r1
     23a:	0b b6       	in	r0, 0x3b	; 59
     23c:	0f 92       	push	r0
     23e:	8f 93       	push	r24
     240:	9f 93       	push	r25
     242:	ef 93       	push	r30
     244:	ff 93       	push	r31
	uint8_t temp;

	temp = SPDR;
     246:	9e b5       	in	r25, 0x2e	; 46

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     248:	f8 94       	cli

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	spi_rx_buf[spi_rx_buf_tail] = temp;
     24a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <spi_rx_buf_tail>
     24e:	e8 2f       	mov	r30, r24
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ef 5d       	subi	r30, 0xDF	; 223
     254:	fd 4f       	sbci	r31, 0xFD	; 253
     256:	90 83       	st	Z, r25

	if ((SPI_RX_BUF_SIZE_HOST - 1) == spi_rx_buf_tail) {
     258:	83 36       	cpi	r24, 0x63	; 99
     25a:	19 f4       	brne	.+6      	; 0x262 <__vector_24+0x32>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		spi_rx_buf_tail = 0x00;
     25c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <spi_rx_buf_tail>
     260:	03 c0       	rjmp	.+6      	; 0x268 <__vector_24+0x38>
	} else {
		spi_rx_buf_tail++;
     262:	8f 5f       	subi	r24, 0xFF	; 255
     264:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <spi_rx_buf_tail>
	}

	cpu_irq_enable();
     268:	78 94       	sei
	spi_buf_complete = 1;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <spi_buf_complete>
}
     270:	ff 91       	pop	r31
     272:	ef 91       	pop	r30
     274:	9f 91       	pop	r25
     276:	8f 91       	pop	r24
     278:	0f 90       	pop	r0
     27a:	0b be       	out	0x3b, r0	; 59
     27c:	0f 90       	pop	r0
     27e:	0f be       	out	0x3f, r0	; 63
     280:	0f 90       	pop	r0
     282:	1f 90       	pop	r1
     284:	18 95       	reti

00000286 <sysclk_init>:
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	1f 92       	push	r1
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     296:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
     29a:	8f b7       	in	r24, 0x3f	; 63
     29c:	89 83       	std	Y+1, r24	; 0x01
     29e:	f8 94       	cli
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	5f 93       	push	r21
     2a4:	50 e8       	ldi	r21, 0x80	; 128
     2a6:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     2b0:	5f 91       	pop	r21
     2b2:	8f bf       	out	0x3f, r24	; 63
     2b4:	0f 90       	pop	r0
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <sysclk_enable_module>:
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	1f 92       	push	r1
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
     2c6:	9f b7       	in	r25, 0x3f	; 63
     2c8:	99 83       	std	Y+1, r25	; 0x01
     2ca:	f8 94       	cli
     2cc:	99 81       	ldd	r25, Y+1	; 0x01
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	40 f4       	brcc	.+16     	; 0x2e2 <sysclk_enable_module+0x26>
     2d2:	e8 2f       	mov	r30, r24
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	ec 59       	subi	r30, 0x9C	; 156
     2d8:	ff 4f       	sbci	r31, 0xFF	; 255
     2da:	60 95       	com	r22
     2dc:	80 81       	ld	r24, Z
     2de:	68 23       	and	r22, r24
     2e0:	60 83       	st	Z, r22
     2e2:	9f bf       	out	0x3f, r25	; 63
     2e4:	0f 90       	pop	r0
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	08 95       	ret

000002ec <usart_serial_write_packet>:
     2ec:	ef 92       	push	r14
     2ee:	ff 92       	push	r15
     2f0:	0f 93       	push	r16
     2f2:	1f 93       	push	r17
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	7c 01       	movw	r14, r24
     2fa:	8b 01       	movw	r16, r22
     2fc:	ea 01       	movw	r28, r20
     2fe:	20 97       	sbiw	r28, 0x00	; 0
     300:	39 f0       	breq	.+14     	; 0x310 <usart_serial_write_packet+0x24>
     302:	f8 01       	movw	r30, r16
     304:	61 91       	ld	r22, Z+
     306:	8f 01       	movw	r16, r30
     308:	c7 01       	movw	r24, r14
     30a:	54 d0       	rcall	.+168    	; 0x3b4 <usart_putchar>
     30c:	21 97       	sbiw	r28, 0x01	; 1
     30e:	c9 f7       	brne	.-14     	; 0x302 <usart_serial_write_packet+0x16>
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	08 95       	ret

00000320 <usart_serial_read_packet>:
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	7c 01       	movw	r14, r24
     32e:	8b 01       	movw	r16, r22
     330:	ea 01       	movw	r28, r20
     332:	20 97       	sbiw	r28, 0x00	; 0
     334:	39 f0       	breq	.+14     	; 0x344 <usart_serial_read_packet+0x24>
     336:	c7 01       	movw	r24, r14
     338:	44 d0       	rcall	.+136    	; 0x3c2 <usart_getchar>
     33a:	f8 01       	movw	r30, r16
     33c:	81 93       	st	Z+, r24
     33e:	8f 01       	movw	r16, r30
     340:	21 97       	sbiw	r28, 0x01	; 1
     342:	c9 f7       	brne	.-14     	; 0x336 <usart_serial_read_packet+0x16>
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	1f 91       	pop	r17
     34c:	0f 91       	pop	r16
     34e:	ff 90       	pop	r15
     350:	ef 90       	pop	r14
     352:	08 95       	ret

00000354 <_read>:
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	1f 92       	push	r1
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
     35e:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <stdio_base>
     362:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <stdio_base+0x1>
     366:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <ptr_get>
     36a:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <ptr_get+0x1>
     36e:	be 01       	movw	r22, r28
     370:	6f 5f       	subi	r22, 0xFF	; 255
     372:	7f 4f       	sbci	r23, 0xFF	; 255
     374:	19 95       	eicall
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	08 2e       	mov	r0, r24
     37a:	00 0c       	add	r0, r0
     37c:	99 0b       	sbc	r25, r25
     37e:	0f 90       	pop	r0
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <_write>:
     386:	68 2f       	mov	r22, r24
     388:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <stdio_base>
     38c:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <stdio_base+0x1>
     390:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <ptr_put>
     394:	f0 91 b7 03 	lds	r31, 0x03B7	; 0x8003b7 <ptr_put+0x1>
     398:	19 95       	eicall
     39a:	99 23       	and	r25, r25
     39c:	1c f0       	brlt	.+6      	; 0x3a4 <_write+0x1e>
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	08 95       	ret
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	9f ef       	ldi	r25, 0xFF	; 255
     3a8:	08 95       	ret

000003aa <board_init>:
     3aa:	2c 9a       	sbi	0x05, 4	; 5
     3ac:	24 9a       	sbi	0x04, 4	; 4
     3ae:	6c 98       	cbi	0x0d, 4	; 13
     3b0:	74 9a       	sbi	0x0e, 4	; 14
     3b2:	08 95       	ret

000003b4 <usart_putchar>:
     3b4:	fc 01       	movw	r30, r24
     3b6:	90 81       	ld	r25, Z
     3b8:	95 ff       	sbrs	r25, 5
     3ba:	fd cf       	rjmp	.-6      	; 0x3b6 <usart_putchar+0x2>
     3bc:	66 83       	std	Z+6, r22	; 0x06
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	08 95       	ret

000003c2 <usart_getchar>:
     3c2:	fc 01       	movw	r30, r24
     3c4:	90 81       	ld	r25, Z
     3c6:	99 23       	and	r25, r25
     3c8:	ec f7       	brge	.-6      	; 0x3c4 <usart_getchar+0x2>
     3ca:	86 81       	ldd	r24, Z+6	; 0x06
     3cc:	08 95       	ret

000003ce <usart_set_baudrate>:
     3ce:	8f 92       	push	r8
     3d0:	9f 92       	push	r9
     3d2:	af 92       	push	r10
     3d4:	bf 92       	push	r11
     3d6:	cf 92       	push	r12
     3d8:	df 92       	push	r13
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	ec 01       	movw	r28, r24
     3e8:	6a 01       	movw	r12, r20
     3ea:	7b 01       	movw	r14, r22
     3ec:	c9 01       	movw	r24, r18
     3ee:	b8 01       	movw	r22, r16
     3f0:	68 94       	set
     3f2:	12 f8       	bld	r1, 2
     3f4:	96 95       	lsr	r25
     3f6:	87 95       	ror	r24
     3f8:	77 95       	ror	r23
     3fa:	67 95       	ror	r22
     3fc:	16 94       	lsr	r1
     3fe:	d1 f7       	brne	.-12     	; 0x3f4 <usart_set_baudrate+0x26>
     400:	6c 15       	cp	r22, r12
     402:	7d 05       	cpc	r23, r13
     404:	8e 05       	cpc	r24, r14
     406:	9f 05       	cpc	r25, r15
     408:	68 f1       	brcs	.+90     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     40a:	48 01       	movw	r8, r16
     40c:	59 01       	movw	r10, r18
     40e:	68 94       	set
     410:	13 f8       	bld	r1, 3
     412:	b6 94       	lsr	r11
     414:	a7 94       	ror	r10
     416:	97 94       	ror	r9
     418:	87 94       	ror	r8
     41a:	16 94       	lsr	r1
     41c:	d1 f7       	brne	.-12     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     41e:	8c 14       	cp	r8, r12
     420:	9d 04       	cpc	r9, r13
     422:	ae 04       	cpc	r10, r14
     424:	bf 04       	cpc	r11, r15
     426:	10 f5       	brcc	.+68     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     428:	e8 81       	ld	r30, Y
     42a:	e2 60       	ori	r30, 0x02	; 2
     42c:	e8 83       	st	Y, r30
     42e:	1e c0       	rjmp	.+60     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     430:	28 81       	ld	r18, Y
     432:	21 ff       	sbrs	r18, 1
     434:	09 c0       	rjmp	.+18     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     436:	a7 01       	movw	r20, r14
     438:	96 01       	movw	r18, r12
     43a:	07 d5       	rcall	.+2574   	; 0xe4a <__udivmodsi4>
     43c:	da 01       	movw	r26, r20
     43e:	c9 01       	movw	r24, r18
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	a1 09       	sbc	r26, r1
     444:	b1 09       	sbc	r27, r1
     446:	0a c0       	rjmp	.+20     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     448:	c5 01       	movw	r24, r10
     44a:	b4 01       	movw	r22, r8
     44c:	a7 01       	movw	r20, r14
     44e:	96 01       	movw	r18, r12
     450:	fc d4       	rcall	.+2552   	; 0xe4a <__udivmodsi4>
     452:	da 01       	movw	r26, r20
     454:	c9 01       	movw	r24, r18
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	a1 09       	sbc	r26, r1
     45a:	b1 09       	sbc	r27, r1
     45c:	9d 83       	std	Y+5, r25	; 0x05
     45e:	8c 83       	std	Y+4, r24	; 0x04
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	13 c0       	rjmp	.+38     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	11 c0       	rjmp	.+34     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	0f c0       	rjmp	.+30     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     46c:	0f 2e       	mov	r0, r31
     46e:	f3 e1       	ldi	r31, 0x13	; 19
     470:	36 95       	lsr	r19
     472:	27 95       	ror	r18
     474:	17 95       	ror	r17
     476:	07 95       	ror	r16
     478:	fa 95       	dec	r31
     47a:	d1 f7       	brne	.-12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     47c:	f0 2d       	mov	r31, r0
     47e:	c0 16       	cp	r12, r16
     480:	d1 06       	cpc	r13, r17
     482:	e2 06       	cpc	r14, r18
     484:	f3 06       	cpc	r15, r19
     486:	a0 f6       	brcc	.-88     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     488:	ef cf       	rjmp	.-34     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	df 90       	pop	r13
     498:	cf 90       	pop	r12
     49a:	bf 90       	pop	r11
     49c:	af 90       	pop	r10
     49e:	9f 90       	pop	r9
     4a0:	8f 90       	pop	r8
     4a2:	08 95       	ret

000004a4 <usart_init_rs232>:
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	ec 01       	movw	r28, r24
     4ae:	8b 01       	movw	r16, r22
     4b0:	80 3c       	cpi	r24, 0xC0	; 192
     4b2:	91 05       	cpc	r25, r1
     4b4:	21 f4       	brne	.+8      	; 0x4be <usart_init_rs232+0x1a>
     4b6:	62 e0       	ldi	r22, 0x02	; 2
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	00 df       	rcall	.-512    	; 0x2bc <sysclk_enable_module>
     4bc:	06 c0       	rjmp	.+12     	; 0x4ca <usart_init_rs232+0x26>
     4be:	88 3c       	cpi	r24, 0xC8	; 200
     4c0:	91 05       	cpc	r25, r1
     4c2:	19 f4       	brne	.+6      	; 0x4ca <usart_init_rs232+0x26>
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	f9 de       	rcall	.-526    	; 0x2bc <sysclk_enable_module>
     4ca:	8a 81       	ldd	r24, Y+2	; 0x02
     4cc:	8f 73       	andi	r24, 0x3F	; 63
     4ce:	8a 83       	std	Y+2, r24	; 0x02
     4d0:	f8 01       	movw	r30, r16
     4d2:	26 81       	ldd	r18, Z+6	; 0x06
     4d4:	35 81       	ldd	r19, Z+5	; 0x05
     4d6:	84 81       	ldd	r24, Z+4	; 0x04
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	48 2f       	mov	r20, r24
     4dc:	43 70       	andi	r20, 0x03	; 3
     4de:	44 0f       	add	r20, r20
     4e0:	99 7f       	andi	r25, 0xF9	; 249
     4e2:	94 2b       	or	r25, r20
     4e4:	9a 83       	std	Y+2, r25	; 0x02
     4e6:	99 81       	ldd	r25, Y+1	; 0x01
     4e8:	84 70       	andi	r24, 0x04	; 4
     4ea:	88 0f       	add	r24, r24
     4ec:	88 0f       	add	r24, r24
     4ee:	9b 7f       	andi	r25, 0xFB	; 251
     4f0:	89 2b       	or	r24, r25
     4f2:	89 83       	std	Y+1, r24	; 0x01
     4f4:	8a 81       	ldd	r24, Y+2	; 0x02
     4f6:	8f 7c       	andi	r24, 0xCF	; 207
     4f8:	83 2b       	or	r24, r19
     4fa:	8a 83       	std	Y+2, r24	; 0x02
     4fc:	9a 81       	ldd	r25, Y+2	; 0x02
     4fe:	97 7f       	andi	r25, 0xF7	; 247
     500:	82 2f       	mov	r24, r18
     502:	88 0f       	add	r24, r24
     504:	88 0f       	add	r24, r24
     506:	88 0f       	add	r24, r24
     508:	89 2b       	or	r24, r25
     50a:	8a 83       	std	Y+2, r24	; 0x02
     50c:	40 81       	ld	r20, Z
     50e:	51 81       	ldd	r21, Z+1	; 0x01
     510:	62 81       	ldd	r22, Z+2	; 0x02
     512:	73 81       	ldd	r23, Z+3	; 0x03
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	14 e2       	ldi	r17, 0x24	; 36
     518:	24 ef       	ldi	r18, 0xF4	; 244
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	ce 01       	movw	r24, r28
     51e:	57 df       	rcall	.-338    	; 0x3ce <usart_set_baudrate>
     520:	99 81       	ldd	r25, Y+1	; 0x01
     522:	98 60       	ori	r25, 0x08	; 8
     524:	99 83       	std	Y+1, r25	; 0x01
     526:	99 81       	ldd	r25, Y+1	; 0x01
     528:	90 61       	ori	r25, 0x10	; 16
     52a:	99 83       	std	Y+1, r25	; 0x01
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <usart_serial_getchar>:
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	eb 01       	movw	r28, r22
     53c:	42 df       	rcall	.-380    	; 0x3c2 <usart_getchar>
     53e:	88 83       	st	Y, r24
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <usart_serial_putchar>:
     546:	36 cf       	rjmp	.-404    	; 0x3b4 <usart_putchar>
     548:	08 95       	ret

0000054a <sio2host_init>:
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	27 97       	sbiw	r28, 0x07	; 7
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	08 ec       	ldi	r16, 0xC8	; 200
     564:	10 e0       	ldi	r17, 0x00	; 0
     566:	10 93 b9 03 	sts	0x03B9, r17	; 0x8003b9 <stdio_base+0x1>
     56a:	00 93 b8 03 	sts	0x03B8, r16	; 0x8003b8 <stdio_base>
     56e:	83 ea       	ldi	r24, 0xA3	; 163
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <ptr_put+0x1>
     576:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <ptr_put>
     57a:	8b e9       	ldi	r24, 0x9B	; 155
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <ptr_get+0x1>
     582:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <ptr_get>
     586:	e6 e0       	ldi	r30, 0x06	; 6
     588:	f2 e0       	ldi	r31, 0x02	; 2
     58a:	84 81       	ldd	r24, Z+4	; 0x04
     58c:	8d 83       	std	Y+5, r24	; 0x05
     58e:	85 81       	ldd	r24, Z+5	; 0x05
     590:	8e 83       	std	Y+6, r24	; 0x06
     592:	86 81       	ldd	r24, Z+6	; 0x06
     594:	8f 83       	std	Y+7, r24	; 0x07
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	a2 81       	ldd	r26, Z+2	; 0x02
     59c:	b3 81       	ldd	r27, Z+3	; 0x03
     59e:	89 83       	std	Y+1, r24	; 0x01
     5a0:	9a 83       	std	Y+2, r25	; 0x02
     5a2:	ab 83       	std	Y+3, r26	; 0x03
     5a4:	bc 83       	std	Y+4, r27	; 0x04
     5a6:	be 01       	movw	r22, r28
     5a8:	6f 5f       	subi	r22, 0xFF	; 255
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	88 ec       	ldi	r24, 0xC8	; 200
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	79 df       	rcall	.-270    	; 0x4a4 <usart_init_rs232>
     5b2:	6a ea       	ldi	r22, 0xAA	; 170
     5b4:	71 e0       	ldi	r23, 0x01	; 1
     5b6:	83 ec       	ldi	r24, 0xC3	; 195
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	69 d4       	rcall	.+2258   	; 0xe8e <fdevopen>
     5bc:	f8 01       	movw	r30, r16
     5be:	81 81       	ldd	r24, Z+1	; 0x01
     5c0:	80 68       	ori	r24, 0x80	; 128
     5c2:	81 83       	std	Z+1, r24	; 0x01
     5c4:	27 96       	adiw	r28, 0x07	; 7
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	08 95       	ret

000005da <sio2host_tx>:
     5da:	ff 92       	push	r15
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	8c 01       	movw	r16, r24
     5e6:	f6 2e       	mov	r15, r22
     5e8:	c6 2f       	mov	r28, r22
     5ea:	d0 e0       	ldi	r29, 0x00	; 0
     5ec:	ae 01       	movw	r20, r28
     5ee:	b8 01       	movw	r22, r16
     5f0:	88 ec       	ldi	r24, 0xC8	; 200
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	7b de       	rcall	.-778    	; 0x2ec <usart_serial_write_packet>
     5f6:	81 11       	cpse	r24, r1
     5f8:	f9 cf       	rjmp	.-14     	; 0x5ec <sio2host_tx+0x12>
     5fa:	8f 2d       	mov	r24, r15
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	08 95       	ret

00000608 <sio2host_putchar>:
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	1f 92       	push	r1
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	89 83       	std	Y+1, r24	; 0x01
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	ce 01       	movw	r24, r28
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	df df       	rcall	.-66     	; 0x5da <sio2host_tx>
     61c:	0f 90       	pop	r0
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <__vector_36>:
     624:	1f 92       	push	r1
     626:	0f 92       	push	r0
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	0f 92       	push	r0
     62c:	11 24       	eor	r1, r1
     62e:	0b b6       	in	r0, 0x3b	; 59
     630:	0f 92       	push	r0
     632:	2f 93       	push	r18
     634:	3f 93       	push	r19
     636:	4f 93       	push	r20
     638:	5f 93       	push	r21
     63a:	6f 93       	push	r22
     63c:	7f 93       	push	r23
     63e:	8f 93       	push	r24
     640:	9f 93       	push	r25
     642:	af 93       	push	r26
     644:	bf 93       	push	r27
     646:	ef 93       	push	r30
     648:	ff 93       	push	r31
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	1f 92       	push	r1
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	41 e0       	ldi	r20, 0x01	; 1
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	be 01       	movw	r22, r28
     65a:	6f 5f       	subi	r22, 0xFF	; 255
     65c:	7f 4f       	sbci	r23, 0xFF	; 255
     65e:	88 ec       	ldi	r24, 0xC8	; 200
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	5e de       	rcall	.-836    	; 0x320 <usart_serial_read_packet>
     664:	f8 94       	cli
     666:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <serial_rx_buf_tail>
     66a:	e8 2f       	mov	r30, r24
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	ea 57       	subi	r30, 0x7A	; 122
     670:	fd 4f       	sbci	r31, 0xFD	; 253
     672:	99 81       	ldd	r25, Y+1	; 0x01
     674:	90 83       	st	Z, r25
     676:	8b 39       	cpi	r24, 0x9B	; 155
     678:	19 f4       	brne	.+6      	; 0x680 <__vector_36+0x5c>
     67a:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <serial_rx_buf_tail>
     67e:	03 c0       	rjmp	.+6      	; 0x686 <__vector_36+0x62>
     680:	8f 5f       	subi	r24, 0xFF	; 255
     682:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <serial_rx_buf_tail>
     686:	78 94       	sei
     688:	0f 90       	pop	r0
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	ff 91       	pop	r31
     690:	ef 91       	pop	r30
     692:	bf 91       	pop	r27
     694:	af 91       	pop	r26
     696:	9f 91       	pop	r25
     698:	8f 91       	pop	r24
     69a:	7f 91       	pop	r23
     69c:	6f 91       	pop	r22
     69e:	5f 91       	pop	r21
     6a0:	4f 91       	pop	r20
     6a2:	3f 91       	pop	r19
     6a4:	2f 91       	pop	r18
     6a6:	0f 90       	pop	r0
     6a8:	0b be       	out	0x3b, r0	; 59
     6aa:	0f 90       	pop	r0
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	0f 90       	pop	r0
     6b0:	1f 90       	pop	r1
     6b2:	18 95       	reti

000006b4 <__vector_20>:
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	0b b6       	in	r0, 0x3b	; 59
     6c0:	0f 92       	push	r0
     6c2:	2f 93       	push	r18
     6c4:	3f 93       	push	r19
     6c6:	4f 93       	push	r20
     6c8:	5f 93       	push	r21
     6ca:	6f 93       	push	r22
     6cc:	7f 93       	push	r23
     6ce:	8f 93       	push	r24
     6d0:	9f 93       	push	r25
     6d2:	af 93       	push	r26
     6d4:	bf 93       	push	r27
     6d6:	ef 93       	push	r30
     6d8:	ff 93       	push	r31
     6da:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <tc_tccr1_ovf_callback>
     6de:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <tc_tccr1_ovf_callback+0x1>
     6e2:	30 97       	sbiw	r30, 0x00	; 0
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <__vector_20+0x34>
     6e6:	19 95       	eicall
     6e8:	ff 91       	pop	r31
     6ea:	ef 91       	pop	r30
     6ec:	bf 91       	pop	r27
     6ee:	af 91       	pop	r26
     6f0:	9f 91       	pop	r25
     6f2:	8f 91       	pop	r24
     6f4:	7f 91       	pop	r23
     6f6:	6f 91       	pop	r22
     6f8:	5f 91       	pop	r21
     6fa:	4f 91       	pop	r20
     6fc:	3f 91       	pop	r19
     6fe:	2f 91       	pop	r18
     700:	0f 90       	pop	r0
     702:	0b be       	out	0x3b, r0	; 59
     704:	0f 90       	pop	r0
     706:	0f be       	out	0x3f, r0	; 63
     708:	0f 90       	pop	r0
     70a:	1f 90       	pop	r1
     70c:	18 95       	reti

0000070e <__vector_17>:
     70e:	1f 92       	push	r1
     710:	0f 92       	push	r0
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	0f 92       	push	r0
     716:	11 24       	eor	r1, r1
     718:	0b b6       	in	r0, 0x3b	; 59
     71a:	0f 92       	push	r0
     71c:	2f 93       	push	r18
     71e:	3f 93       	push	r19
     720:	4f 93       	push	r20
     722:	5f 93       	push	r21
     724:	6f 93       	push	r22
     726:	7f 93       	push	r23
     728:	8f 93       	push	r24
     72a:	9f 93       	push	r25
     72c:	af 93       	push	r26
     72e:	bf 93       	push	r27
     730:	ef 93       	push	r30
     732:	ff 93       	push	r31
     734:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <tc_tccr1_compa_callback>
     738:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <tc_tccr1_compa_callback+0x1>
     73c:	30 97       	sbiw	r30, 0x00	; 0
     73e:	09 f0       	breq	.+2      	; 0x742 <__vector_17+0x34>
     740:	19 95       	eicall
     742:	ff 91       	pop	r31
     744:	ef 91       	pop	r30
     746:	bf 91       	pop	r27
     748:	af 91       	pop	r26
     74a:	9f 91       	pop	r25
     74c:	8f 91       	pop	r24
     74e:	7f 91       	pop	r23
     750:	6f 91       	pop	r22
     752:	5f 91       	pop	r21
     754:	4f 91       	pop	r20
     756:	3f 91       	pop	r19
     758:	2f 91       	pop	r18
     75a:	0f 90       	pop	r0
     75c:	0b be       	out	0x3b, r0	; 59
     75e:	0f 90       	pop	r0
     760:	0f be       	out	0x3f, r0	; 63
     762:	0f 90       	pop	r0
     764:	1f 90       	pop	r1
     766:	18 95       	reti

00000768 <__vector_18>:
     768:	1f 92       	push	r1
     76a:	0f 92       	push	r0
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	0f 92       	push	r0
     770:	11 24       	eor	r1, r1
     772:	0b b6       	in	r0, 0x3b	; 59
     774:	0f 92       	push	r0
     776:	2f 93       	push	r18
     778:	3f 93       	push	r19
     77a:	4f 93       	push	r20
     77c:	5f 93       	push	r21
     77e:	6f 93       	push	r22
     780:	7f 93       	push	r23
     782:	8f 93       	push	r24
     784:	9f 93       	push	r25
     786:	af 93       	push	r26
     788:	bf 93       	push	r27
     78a:	ef 93       	push	r30
     78c:	ff 93       	push	r31
     78e:	e0 91 3c 03 	lds	r30, 0x033C	; 0x80033c <tc_tccr1_compb_callback>
     792:	f0 91 3d 03 	lds	r31, 0x033D	; 0x80033d <tc_tccr1_compb_callback+0x1>
     796:	30 97       	sbiw	r30, 0x00	; 0
     798:	09 f0       	breq	.+2      	; 0x79c <__vector_18+0x34>
     79a:	19 95       	eicall
     79c:	ff 91       	pop	r31
     79e:	ef 91       	pop	r30
     7a0:	bf 91       	pop	r27
     7a2:	af 91       	pop	r26
     7a4:	9f 91       	pop	r25
     7a6:	8f 91       	pop	r24
     7a8:	7f 91       	pop	r23
     7aa:	6f 91       	pop	r22
     7ac:	5f 91       	pop	r21
     7ae:	4f 91       	pop	r20
     7b0:	3f 91       	pop	r19
     7b2:	2f 91       	pop	r18
     7b4:	0f 90       	pop	r0
     7b6:	0b be       	out	0x3b, r0	; 59
     7b8:	0f 90       	pop	r0
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	0f 90       	pop	r0
     7be:	1f 90       	pop	r1
     7c0:	18 95       	reti

000007c2 <__vector_19>:
     7c2:	1f 92       	push	r1
     7c4:	0f 92       	push	r0
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	0f 92       	push	r0
     7ca:	11 24       	eor	r1, r1
     7cc:	0b b6       	in	r0, 0x3b	; 59
     7ce:	0f 92       	push	r0
     7d0:	2f 93       	push	r18
     7d2:	3f 93       	push	r19
     7d4:	4f 93       	push	r20
     7d6:	5f 93       	push	r21
     7d8:	6f 93       	push	r22
     7da:	7f 93       	push	r23
     7dc:	8f 93       	push	r24
     7de:	9f 93       	push	r25
     7e0:	af 93       	push	r26
     7e2:	bf 93       	push	r27
     7e4:	ef 93       	push	r30
     7e6:	ff 93       	push	r31
     7e8:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <tc_tccr1_compc_callback>
     7ec:	f0 91 3b 03 	lds	r31, 0x033B	; 0x80033b <tc_tccr1_compc_callback+0x1>
     7f0:	30 97       	sbiw	r30, 0x00	; 0
     7f2:	09 f0       	breq	.+2      	; 0x7f6 <__vector_19+0x34>
     7f4:	19 95       	eicall
     7f6:	ff 91       	pop	r31
     7f8:	ef 91       	pop	r30
     7fa:	bf 91       	pop	r27
     7fc:	af 91       	pop	r26
     7fe:	9f 91       	pop	r25
     800:	8f 91       	pop	r24
     802:	7f 91       	pop	r23
     804:	6f 91       	pop	r22
     806:	5f 91       	pop	r21
     808:	4f 91       	pop	r20
     80a:	3f 91       	pop	r19
     80c:	2f 91       	pop	r18
     80e:	0f 90       	pop	r0
     810:	0b be       	out	0x3b, r0	; 59
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	0f 90       	pop	r0
     818:	1f 90       	pop	r1
     81a:	18 95       	reti

0000081c <__vector_35>:
     81c:	1f 92       	push	r1
     81e:	0f 92       	push	r0
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	0f 92       	push	r0
     824:	11 24       	eor	r1, r1
     826:	0b b6       	in	r0, 0x3b	; 59
     828:	0f 92       	push	r0
     82a:	2f 93       	push	r18
     82c:	3f 93       	push	r19
     82e:	4f 93       	push	r20
     830:	5f 93       	push	r21
     832:	6f 93       	push	r22
     834:	7f 93       	push	r23
     836:	8f 93       	push	r24
     838:	9f 93       	push	r25
     83a:	af 93       	push	r26
     83c:	bf 93       	push	r27
     83e:	ef 93       	push	r30
     840:	ff 93       	push	r31
     842:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <tc_tccr3_ovf_callback>
     846:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <tc_tccr3_ovf_callback+0x1>
     84a:	30 97       	sbiw	r30, 0x00	; 0
     84c:	09 f0       	breq	.+2      	; 0x850 <__vector_35+0x34>
     84e:	19 95       	eicall
     850:	ff 91       	pop	r31
     852:	ef 91       	pop	r30
     854:	bf 91       	pop	r27
     856:	af 91       	pop	r26
     858:	9f 91       	pop	r25
     85a:	8f 91       	pop	r24
     85c:	7f 91       	pop	r23
     85e:	6f 91       	pop	r22
     860:	5f 91       	pop	r21
     862:	4f 91       	pop	r20
     864:	3f 91       	pop	r19
     866:	2f 91       	pop	r18
     868:	0f 90       	pop	r0
     86a:	0b be       	out	0x3b, r0	; 59
     86c:	0f 90       	pop	r0
     86e:	0f be       	out	0x3f, r0	; 63
     870:	0f 90       	pop	r0
     872:	1f 90       	pop	r1
     874:	18 95       	reti

00000876 <__vector_32>:
     876:	1f 92       	push	r1
     878:	0f 92       	push	r0
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	0f 92       	push	r0
     87e:	11 24       	eor	r1, r1
     880:	0b b6       	in	r0, 0x3b	; 59
     882:	0f 92       	push	r0
     884:	2f 93       	push	r18
     886:	3f 93       	push	r19
     888:	4f 93       	push	r20
     88a:	5f 93       	push	r21
     88c:	6f 93       	push	r22
     88e:	7f 93       	push	r23
     890:	8f 93       	push	r24
     892:	9f 93       	push	r25
     894:	af 93       	push	r26
     896:	bf 93       	push	r27
     898:	ef 93       	push	r30
     89a:	ff 93       	push	r31
     89c:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <tc_tccr3_compa_callback>
     8a0:	f0 91 37 03 	lds	r31, 0x0337	; 0x800337 <tc_tccr3_compa_callback+0x1>
     8a4:	30 97       	sbiw	r30, 0x00	; 0
     8a6:	09 f0       	breq	.+2      	; 0x8aa <__vector_32+0x34>
     8a8:	19 95       	eicall
     8aa:	ff 91       	pop	r31
     8ac:	ef 91       	pop	r30
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	0b be       	out	0x3b, r0	; 59
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	0f 90       	pop	r0
     8cc:	1f 90       	pop	r1
     8ce:	18 95       	reti

000008d0 <__vector_33>:
     8d0:	1f 92       	push	r1
     8d2:	0f 92       	push	r0
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	0f 92       	push	r0
     8d8:	11 24       	eor	r1, r1
     8da:	0b b6       	in	r0, 0x3b	; 59
     8dc:	0f 92       	push	r0
     8de:	2f 93       	push	r18
     8e0:	3f 93       	push	r19
     8e2:	4f 93       	push	r20
     8e4:	5f 93       	push	r21
     8e6:	6f 93       	push	r22
     8e8:	7f 93       	push	r23
     8ea:	8f 93       	push	r24
     8ec:	9f 93       	push	r25
     8ee:	af 93       	push	r26
     8f0:	bf 93       	push	r27
     8f2:	ef 93       	push	r30
     8f4:	ff 93       	push	r31
     8f6:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <tc_tccr3_compb_callback>
     8fa:	f0 91 35 03 	lds	r31, 0x0335	; 0x800335 <tc_tccr3_compb_callback+0x1>
     8fe:	30 97       	sbiw	r30, 0x00	; 0
     900:	09 f0       	breq	.+2      	; 0x904 <__vector_33+0x34>
     902:	19 95       	eicall
     904:	ff 91       	pop	r31
     906:	ef 91       	pop	r30
     908:	bf 91       	pop	r27
     90a:	af 91       	pop	r26
     90c:	9f 91       	pop	r25
     90e:	8f 91       	pop	r24
     910:	7f 91       	pop	r23
     912:	6f 91       	pop	r22
     914:	5f 91       	pop	r21
     916:	4f 91       	pop	r20
     918:	3f 91       	pop	r19
     91a:	2f 91       	pop	r18
     91c:	0f 90       	pop	r0
     91e:	0b be       	out	0x3b, r0	; 59
     920:	0f 90       	pop	r0
     922:	0f be       	out	0x3f, r0	; 63
     924:	0f 90       	pop	r0
     926:	1f 90       	pop	r1
     928:	18 95       	reti

0000092a <__vector_34>:
     92a:	1f 92       	push	r1
     92c:	0f 92       	push	r0
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	0f 92       	push	r0
     932:	11 24       	eor	r1, r1
     934:	0b b6       	in	r0, 0x3b	; 59
     936:	0f 92       	push	r0
     938:	2f 93       	push	r18
     93a:	3f 93       	push	r19
     93c:	4f 93       	push	r20
     93e:	5f 93       	push	r21
     940:	6f 93       	push	r22
     942:	7f 93       	push	r23
     944:	8f 93       	push	r24
     946:	9f 93       	push	r25
     948:	af 93       	push	r26
     94a:	bf 93       	push	r27
     94c:	ef 93       	push	r30
     94e:	ff 93       	push	r31
     950:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <tc_tccr3_compc_callback>
     954:	f0 91 33 03 	lds	r31, 0x0333	; 0x800333 <tc_tccr3_compc_callback+0x1>
     958:	30 97       	sbiw	r30, 0x00	; 0
     95a:	09 f0       	breq	.+2      	; 0x95e <__vector_34+0x34>
     95c:	19 95       	eicall
     95e:	ff 91       	pop	r31
     960:	ef 91       	pop	r30
     962:	bf 91       	pop	r27
     964:	af 91       	pop	r26
     966:	9f 91       	pop	r25
     968:	8f 91       	pop	r24
     96a:	7f 91       	pop	r23
     96c:	6f 91       	pop	r22
     96e:	5f 91       	pop	r21
     970:	4f 91       	pop	r20
     972:	3f 91       	pop	r19
     974:	2f 91       	pop	r18
     976:	0f 90       	pop	r0
     978:	0b be       	out	0x3b, r0	; 59
     97a:	0f 90       	pop	r0
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	0f 90       	pop	r0
     980:	1f 90       	pop	r1
     982:	18 95       	reti

00000984 <__vector_45>:
     984:	1f 92       	push	r1
     986:	0f 92       	push	r0
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	0f 92       	push	r0
     98c:	11 24       	eor	r1, r1
     98e:	0b b6       	in	r0, 0x3b	; 59
     990:	0f 92       	push	r0
     992:	2f 93       	push	r18
     994:	3f 93       	push	r19
     996:	4f 93       	push	r20
     998:	5f 93       	push	r21
     99a:	6f 93       	push	r22
     99c:	7f 93       	push	r23
     99e:	8f 93       	push	r24
     9a0:	9f 93       	push	r25
     9a2:	af 93       	push	r26
     9a4:	bf 93       	push	r27
     9a6:	ef 93       	push	r30
     9a8:	ff 93       	push	r31
     9aa:	e0 91 30 03 	lds	r30, 0x0330	; 0x800330 <tc_tccr4_ovf_callback>
     9ae:	f0 91 31 03 	lds	r31, 0x0331	; 0x800331 <tc_tccr4_ovf_callback+0x1>
     9b2:	30 97       	sbiw	r30, 0x00	; 0
     9b4:	09 f0       	breq	.+2      	; 0x9b8 <__vector_45+0x34>
     9b6:	19 95       	eicall
     9b8:	ff 91       	pop	r31
     9ba:	ef 91       	pop	r30
     9bc:	bf 91       	pop	r27
     9be:	af 91       	pop	r26
     9c0:	9f 91       	pop	r25
     9c2:	8f 91       	pop	r24
     9c4:	7f 91       	pop	r23
     9c6:	6f 91       	pop	r22
     9c8:	5f 91       	pop	r21
     9ca:	4f 91       	pop	r20
     9cc:	3f 91       	pop	r19
     9ce:	2f 91       	pop	r18
     9d0:	0f 90       	pop	r0
     9d2:	0b be       	out	0x3b, r0	; 59
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f 90       	pop	r0
     9da:	1f 90       	pop	r1
     9dc:	18 95       	reti

000009de <__vector_42>:
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	0b b6       	in	r0, 0x3b	; 59
     9ea:	0f 92       	push	r0
     9ec:	2f 93       	push	r18
     9ee:	3f 93       	push	r19
     9f0:	4f 93       	push	r20
     9f2:	5f 93       	push	r21
     9f4:	6f 93       	push	r22
     9f6:	7f 93       	push	r23
     9f8:	8f 93       	push	r24
     9fa:	9f 93       	push	r25
     9fc:	af 93       	push	r26
     9fe:	bf 93       	push	r27
     a00:	ef 93       	push	r30
     a02:	ff 93       	push	r31
     a04:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <tc_tccr4_compa_callback>
     a08:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <tc_tccr4_compa_callback+0x1>
     a0c:	30 97       	sbiw	r30, 0x00	; 0
     a0e:	09 f0       	breq	.+2      	; 0xa12 <__vector_42+0x34>
     a10:	19 95       	eicall
     a12:	ff 91       	pop	r31
     a14:	ef 91       	pop	r30
     a16:	bf 91       	pop	r27
     a18:	af 91       	pop	r26
     a1a:	9f 91       	pop	r25
     a1c:	8f 91       	pop	r24
     a1e:	7f 91       	pop	r23
     a20:	6f 91       	pop	r22
     a22:	5f 91       	pop	r21
     a24:	4f 91       	pop	r20
     a26:	3f 91       	pop	r19
     a28:	2f 91       	pop	r18
     a2a:	0f 90       	pop	r0
     a2c:	0b be       	out	0x3b, r0	; 59
     a2e:	0f 90       	pop	r0
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	0f 90       	pop	r0
     a34:	1f 90       	pop	r1
     a36:	18 95       	reti

00000a38 <__vector_43>:
     a38:	1f 92       	push	r1
     a3a:	0f 92       	push	r0
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	0f 92       	push	r0
     a40:	11 24       	eor	r1, r1
     a42:	0b b6       	in	r0, 0x3b	; 59
     a44:	0f 92       	push	r0
     a46:	2f 93       	push	r18
     a48:	3f 93       	push	r19
     a4a:	4f 93       	push	r20
     a4c:	5f 93       	push	r21
     a4e:	6f 93       	push	r22
     a50:	7f 93       	push	r23
     a52:	8f 93       	push	r24
     a54:	9f 93       	push	r25
     a56:	af 93       	push	r26
     a58:	bf 93       	push	r27
     a5a:	ef 93       	push	r30
     a5c:	ff 93       	push	r31
     a5e:	e0 91 2c 03 	lds	r30, 0x032C	; 0x80032c <tc_tccr4_compb_callback>
     a62:	f0 91 2d 03 	lds	r31, 0x032D	; 0x80032d <tc_tccr4_compb_callback+0x1>
     a66:	30 97       	sbiw	r30, 0x00	; 0
     a68:	09 f0       	breq	.+2      	; 0xa6c <__vector_43+0x34>
     a6a:	19 95       	eicall
     a6c:	ff 91       	pop	r31
     a6e:	ef 91       	pop	r30
     a70:	bf 91       	pop	r27
     a72:	af 91       	pop	r26
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	7f 91       	pop	r23
     a7a:	6f 91       	pop	r22
     a7c:	5f 91       	pop	r21
     a7e:	4f 91       	pop	r20
     a80:	3f 91       	pop	r19
     a82:	2f 91       	pop	r18
     a84:	0f 90       	pop	r0
     a86:	0b be       	out	0x3b, r0	; 59
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	0f 90       	pop	r0
     a8e:	1f 90       	pop	r1
     a90:	18 95       	reti

00000a92 <__vector_44>:
     a92:	1f 92       	push	r1
     a94:	0f 92       	push	r0
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	0f 92       	push	r0
     a9a:	11 24       	eor	r1, r1
     a9c:	0b b6       	in	r0, 0x3b	; 59
     a9e:	0f 92       	push	r0
     aa0:	2f 93       	push	r18
     aa2:	3f 93       	push	r19
     aa4:	4f 93       	push	r20
     aa6:	5f 93       	push	r21
     aa8:	6f 93       	push	r22
     aaa:	7f 93       	push	r23
     aac:	8f 93       	push	r24
     aae:	9f 93       	push	r25
     ab0:	af 93       	push	r26
     ab2:	bf 93       	push	r27
     ab4:	ef 93       	push	r30
     ab6:	ff 93       	push	r31
     ab8:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <tc_tccr4_compc_callback>
     abc:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <tc_tccr4_compc_callback+0x1>
     ac0:	30 97       	sbiw	r30, 0x00	; 0
     ac2:	09 f0       	breq	.+2      	; 0xac6 <__vector_44+0x34>
     ac4:	19 95       	eicall
     ac6:	ff 91       	pop	r31
     ac8:	ef 91       	pop	r30
     aca:	bf 91       	pop	r27
     acc:	af 91       	pop	r26
     ace:	9f 91       	pop	r25
     ad0:	8f 91       	pop	r24
     ad2:	7f 91       	pop	r23
     ad4:	6f 91       	pop	r22
     ad6:	5f 91       	pop	r21
     ad8:	4f 91       	pop	r20
     ada:	3f 91       	pop	r19
     adc:	2f 91       	pop	r18
     ade:	0f 90       	pop	r0
     ae0:	0b be       	out	0x3b, r0	; 59
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	0f 90       	pop	r0
     ae8:	1f 90       	pop	r1
     aea:	18 95       	reti

00000aec <__vector_50>:
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	0b b6       	in	r0, 0x3b	; 59
     af8:	0f 92       	push	r0
     afa:	2f 93       	push	r18
     afc:	3f 93       	push	r19
     afe:	4f 93       	push	r20
     b00:	5f 93       	push	r21
     b02:	6f 93       	push	r22
     b04:	7f 93       	push	r23
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	af 93       	push	r26
     b0c:	bf 93       	push	r27
     b0e:	ef 93       	push	r30
     b10:	ff 93       	push	r31
     b12:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <tc_tccr5_ovf_callback>
     b16:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <tc_tccr5_ovf_callback+0x1>
     b1a:	30 97       	sbiw	r30, 0x00	; 0
     b1c:	09 f0       	breq	.+2      	; 0xb20 <__vector_50+0x34>
     b1e:	19 95       	eicall
     b20:	ff 91       	pop	r31
     b22:	ef 91       	pop	r30
     b24:	bf 91       	pop	r27
     b26:	af 91       	pop	r26
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	7f 91       	pop	r23
     b2e:	6f 91       	pop	r22
     b30:	5f 91       	pop	r21
     b32:	4f 91       	pop	r20
     b34:	3f 91       	pop	r19
     b36:	2f 91       	pop	r18
     b38:	0f 90       	pop	r0
     b3a:	0b be       	out	0x3b, r0	; 59
     b3c:	0f 90       	pop	r0
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	0f 90       	pop	r0
     b42:	1f 90       	pop	r1
     b44:	18 95       	reti

00000b46 <__vector_47>:
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	0b b6       	in	r0, 0x3b	; 59
     b52:	0f 92       	push	r0
     b54:	2f 93       	push	r18
     b56:	3f 93       	push	r19
     b58:	4f 93       	push	r20
     b5a:	5f 93       	push	r21
     b5c:	6f 93       	push	r22
     b5e:	7f 93       	push	r23
     b60:	8f 93       	push	r24
     b62:	9f 93       	push	r25
     b64:	af 93       	push	r26
     b66:	bf 93       	push	r27
     b68:	ef 93       	push	r30
     b6a:	ff 93       	push	r31
     b6c:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <tc_tccr5_compa_callback>
     b70:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <tc_tccr5_compa_callback+0x1>
     b74:	30 97       	sbiw	r30, 0x00	; 0
     b76:	09 f0       	breq	.+2      	; 0xb7a <__vector_47+0x34>
     b78:	19 95       	eicall
     b7a:	ff 91       	pop	r31
     b7c:	ef 91       	pop	r30
     b7e:	bf 91       	pop	r27
     b80:	af 91       	pop	r26
     b82:	9f 91       	pop	r25
     b84:	8f 91       	pop	r24
     b86:	7f 91       	pop	r23
     b88:	6f 91       	pop	r22
     b8a:	5f 91       	pop	r21
     b8c:	4f 91       	pop	r20
     b8e:	3f 91       	pop	r19
     b90:	2f 91       	pop	r18
     b92:	0f 90       	pop	r0
     b94:	0b be       	out	0x3b, r0	; 59
     b96:	0f 90       	pop	r0
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	0f 90       	pop	r0
     b9c:	1f 90       	pop	r1
     b9e:	18 95       	reti

00000ba0 <__vector_48>:
     ba0:	1f 92       	push	r1
     ba2:	0f 92       	push	r0
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	0f 92       	push	r0
     ba8:	11 24       	eor	r1, r1
     baa:	0b b6       	in	r0, 0x3b	; 59
     bac:	0f 92       	push	r0
     bae:	2f 93       	push	r18
     bb0:	3f 93       	push	r19
     bb2:	4f 93       	push	r20
     bb4:	5f 93       	push	r21
     bb6:	6f 93       	push	r22
     bb8:	7f 93       	push	r23
     bba:	8f 93       	push	r24
     bbc:	9f 93       	push	r25
     bbe:	af 93       	push	r26
     bc0:	bf 93       	push	r27
     bc2:	ef 93       	push	r30
     bc4:	ff 93       	push	r31
     bc6:	e0 91 24 03 	lds	r30, 0x0324	; 0x800324 <tc_tccr5_compb_callback>
     bca:	f0 91 25 03 	lds	r31, 0x0325	; 0x800325 <tc_tccr5_compb_callback+0x1>
     bce:	30 97       	sbiw	r30, 0x00	; 0
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <__vector_48+0x34>
     bd2:	19 95       	eicall
     bd4:	ff 91       	pop	r31
     bd6:	ef 91       	pop	r30
     bd8:	bf 91       	pop	r27
     bda:	af 91       	pop	r26
     bdc:	9f 91       	pop	r25
     bde:	8f 91       	pop	r24
     be0:	7f 91       	pop	r23
     be2:	6f 91       	pop	r22
     be4:	5f 91       	pop	r21
     be6:	4f 91       	pop	r20
     be8:	3f 91       	pop	r19
     bea:	2f 91       	pop	r18
     bec:	0f 90       	pop	r0
     bee:	0b be       	out	0x3b, r0	; 59
     bf0:	0f 90       	pop	r0
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	0f 90       	pop	r0
     bf6:	1f 90       	pop	r1
     bf8:	18 95       	reti

00000bfa <__vector_49>:
     bfa:	1f 92       	push	r1
     bfc:	0f 92       	push	r0
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	0f 92       	push	r0
     c02:	11 24       	eor	r1, r1
     c04:	0b b6       	in	r0, 0x3b	; 59
     c06:	0f 92       	push	r0
     c08:	2f 93       	push	r18
     c0a:	3f 93       	push	r19
     c0c:	4f 93       	push	r20
     c0e:	5f 93       	push	r21
     c10:	6f 93       	push	r22
     c12:	7f 93       	push	r23
     c14:	8f 93       	push	r24
     c16:	9f 93       	push	r25
     c18:	af 93       	push	r26
     c1a:	bf 93       	push	r27
     c1c:	ef 93       	push	r30
     c1e:	ff 93       	push	r31
     c20:	e0 91 22 03 	lds	r30, 0x0322	; 0x800322 <tc_tccr5_compc_callback>
     c24:	f0 91 23 03 	lds	r31, 0x0323	; 0x800323 <tc_tccr5_compc_callback+0x1>
     c28:	30 97       	sbiw	r30, 0x00	; 0
     c2a:	09 f0       	breq	.+2      	; 0xc2e <__vector_49+0x34>
     c2c:	19 95       	eicall
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	0f 90       	pop	r0
     c48:	0b be       	out	0x3b, r0	; 59
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <config_Ziggys_ADC>:
}
/*************************************************************************//**
*****************************************************************************/
/* Write ADC registers via SPI */
void config_Ziggys_ADC( void ){
	PORTD &= ~ ( 1 << SS2 );// Put SS LOW to start transmission.
     c54:	5d 98       	cbi	0x0b, 5	; 11
	SPI_Transmit_no_IRQ(START_CONFIG);
     c56:	86 e4       	ldi	r24, 0x46	; 70
     c58:	a6 da       	rcall	.-2740   	; 0x1a6 <SPI_Transmit_no_IRQ>
	SPI_Transmit_no_IRQ(CONFIG0);
     c5a:	80 ef       	ldi	r24, 0xF0	; 240
     c5c:	a4 da       	rcall	.-2744   	; 0x1a6 <SPI_Transmit_no_IRQ>
	SPI_Transmit_no_IRQ(CONFIG1);
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	a2 da       	rcall	.-2748   	; 0x1a6 <SPI_Transmit_no_IRQ>
	SPI_Transmit_no_IRQ(CONFIG2);
     c62:	8b e8       	ldi	r24, 0x8B	; 139
     c64:	a0 da       	rcall	.-2752   	; 0x1a6 <SPI_Transmit_no_IRQ>
	SPI_Transmit_no_IRQ(CONFIG3);
     c66:	80 ec       	ldi	r24, 0xC0	; 192
     c68:	9e da       	rcall	.-2756   	; 0x1a6 <SPI_Transmit_no_IRQ>
     c6a:	86 e0       	ldi	r24, 0x06	; 6
	SPI_Transmit_no_IRQ(ADC_IRQ);// Here we end the inc write of the ADC.
     c6c:	9c da       	rcall	.-2760   	; 0x1a6 <SPI_Transmit_no_IRQ>
     c6e:	5d 9a       	sbi	0x0b, 5	; 11
     c70:	08 95       	ret

00000c72 <adc_start_conversions>:
	PORTD |= (1<<SS2);	  // Put SS HIGH to stop comm.
     c72:	8c b5       	in	r24, 0x2c	; 44
     c74:	8f 77       	andi	r24, 0x7F	; 127
/***************************************************************************************/
/* ADC start conversions */
/***************************************************************************************/
void adc_start_conversions(void)
{
	SPCR &= ~ (1<<SPIE);//disable SPI interrupt
     c76:	8c bd       	out	0x2c, r24	; 44
	PORTD &= ~ ( 1 << SS2 );
     c78:	5d 98       	cbi	0x0b, 5	; 11
	SPI_Transmit_no_IRQ(STRTCNV);
     c7a:	88 e6       	ldi	r24, 0x68	; 104
     c7c:	94 da       	rcall	.-2776   	; 0x1a6 <SPI_Transmit_no_IRQ>
	PORTD |= ( 1 << SS2 );
     c7e:	5d 9a       	sbi	0x0b, 5	; 11
     c80:	08 95       	ret

00000c82 <config_ext_DR_irq>:
/***************************************************************************************/
/* Configures external irq on PIND0 */
/***************************************************************************************/
void config_ext_DR_irq(void)
{
	DDRD |= (0<<DDD0);//External interrupt on pin D0
     c82:	8a b1       	in	r24, 0x0a	; 10
     c84:	8a b9       	out	0x0a, r24	; 10
	EICRA |= (0x00<<ISC00);// External interrupt 0 actives on falling edge
     c86:	e9 e6       	ldi	r30, 0x69	; 105
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	80 83       	st	Z, r24
     c8e:	08 95       	ret

00000c90 <check_adc>:
}
/*************************************************************************//**
/*Check for correct configuration of the ADC*/
/*****************************************************************************/
uint8_t check_adc(void){
     c90:	cf 92       	push	r12
     c92:	df 92       	push	r13
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
	
	PORTD &= ~ ( 1 << SS2 );
     c9e:	5d 98       	cbi	0x0b, 5	; 11
	uint8_t adc_ok = 0;
	SPI_Transmit_no_IRQ(R_ADC_CONFIG);
     ca0:	87 e4       	ldi	r24, 0x47	; 71
     ca2:	81 da       	rcall	.-2814   	; 0x1a6 <SPI_Transmit_no_IRQ>
	SPCR |= (1<<SPIE);//enable SPI interrupt
     ca4:	8c b5       	in	r24, 0x2c	; 44
     ca6:	80 68       	ori	r24, 0x80	; 128
     ca8:	8c bd       	out	0x2c, r24	; 44
	SPI_Transmit_IRQ(DNT_CARE);
     caa:	80 e4       	ldi	r24, 0x40	; 64
     cac:	74 da       	rcall	.-2840   	; 0x196 <SPI_Transmit_IRQ>
	SPI_Transmit_IRQ(DNT_CARE);
     cae:	80 e4       	ldi	r24, 0x40	; 64
     cb0:	72 da       	rcall	.-2844   	; 0x196 <SPI_Transmit_IRQ>
	SPI_Transmit_IRQ(DNT_CARE);
     cb2:	80 e4       	ldi	r24, 0x40	; 64
     cb4:	70 da       	rcall	.-2848   	; 0x196 <SPI_Transmit_IRQ>
	SPI_Transmit_IRQ(DNT_CARE);
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	6e da       	rcall	.-2852   	; 0x196 <SPI_Transmit_IRQ>
     cba:	80 e4       	ldi	r24, 0x40	; 64
	SPI_Transmit_IRQ(DNT_CARE);
     cbc:	6c da       	rcall	.-2856   	; 0x196 <SPI_Transmit_IRQ>
     cbe:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD |= (1<<SS2);
     cc0:	6d e6       	ldi	r22, 0x6D	; 109
	spi_rx_length = spi_rx( rx_data, APP_RX_BUF_SIZE );
     cc2:	86 e4       	ldi	r24, 0x46	; 70
     cc4:	93 e0       	ldi	r25, 0x03	; 3
     cc6:	75 da       	rcall	.-2838   	; 0x1b2 <spi_rx>
     cc8:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <spi_rx_length>
     ccc:	88 23       	and	r24, r24
     cce:	31 f1       	breq	.+76     	; 0xd1c <check_adc+0x8c>
	if(spi_rx_length)
     cd0:	06 e4       	ldi	r16, 0x46	; 70
     cd2:	13 e0       	ldi	r17, 0x03	; 3
     cd4:	c0 e0       	ldi	r28, 0x00	; 0
     cd6:	d0 e0       	ldi	r29, 0x00	; 0
     cd8:	f1 2c       	mov	r15, r1
     cda:	68 01       	movw	r12, r16
     cdc:	f8 01       	movw	r30, r16
	{
		for (int i = 0; i < spi_rx_length; i++)
		{
			sio2host_putchar(rx_data[i]);
     cde:	81 91       	ld	r24, Z+
     ce0:	8f 01       	movw	r16, r30
     ce2:	92 dc       	rcall	.-1756   	; 0x608 <sio2host_putchar>
     ce4:	f6 01       	movw	r30, r12
     ce6:	80 81       	ld	r24, Z
			switch( rx_data[i] )
     ce8:	86 37       	cpi	r24, 0x76	; 118
     cea:	51 f0       	breq	.+20     	; 0xd00 <check_adc+0x70>
     cec:	28 f4       	brcc	.+10     	; 0xcf8 <check_adc+0x68>
     cee:	88 23       	and	r24, r24
     cf0:	39 f0       	breq	.+14     	; 0xd00 <check_adc+0x70>
     cf2:	86 36       	cpi	r24, 0x66	; 102
     cf4:	31 f4       	brne	.+12     	; 0xd02 <check_adc+0x72>
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <check_adc+0x70>
     cf8:	8b 38       	cpi	r24, 0x8B	; 139
     cfa:	11 f0       	breq	.+4      	; 0xd00 <check_adc+0x70>
     cfc:	80 3f       	cpi	r24, 0xF0	; 240
     cfe:	09 f4       	brne	.+2      	; 0xd02 <check_adc+0x72>
     d00:	f3 94       	inc	r15
     d02:	f5 e0       	ldi	r31, 0x05	; 5
				case CONFIG1:
				case CONFIG2:
				//case CONFIG3:
				case ADC_IRQ_POR:
				case ADC_IRQ_no:
					adc_ok++;
     d04:	ff 12       	cpse	r15, r31
			}
			if( adc_ok == 5 )
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <check_adc+0x7c>
     d08:	ff 24       	eor	r15, r15
     d0a:	f3 94       	inc	r15
			{
				adc_ok = 1;
     d0c:	21 96       	adiw	r28, 0x01	; 1
     d0e:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <spi_rx_length>
	SPI_Transmit_IRQ(DNT_CARE);
	PORTD |= (1<<SS2);
	spi_rx_length = spi_rx( rx_data, APP_RX_BUF_SIZE );
	if(spi_rx_length)
	{
		for (int i = 0; i < spi_rx_length; i++)
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	c8 17       	cp	r28, r24
     d16:	d9 07       	cpc	r29, r25
     d18:	04 f3       	brlt	.-64     	; 0xcda <check_adc+0x4a>
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <check_adc+0x8e>
     d1c:	f1 2c       	mov	r15, r1
     d1e:	8f 2d       	mov	r24, r15
/*Check for correct configuration of the ADC*/
/*****************************************************************************/
uint8_t check_adc(void){
	
	PORTD &= ~ ( 1 << SS2 );
	uint8_t adc_ok = 0;
     d20:	df 91       	pop	r29
				adc_ok = 1;
			}
		}
	}
	return adc_ok;
}
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	ff 90       	pop	r15
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	08 95       	ret

00000d30 <main>:
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
}

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	60 97       	sbiw	r28, 0x10	; 16
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
	irq_initialize_vectors();
	sysclk_init();
     d44:	a0 da       	rcall	.-2752   	; 0x286 <sysclk_init>
	board_init();
     d46:	31 db       	rcall	.-2462   	; 0x3aa <board_init>
	//SYS_Init();
	cpu_irq_enable();
	sio2host_init();
     d48:	78 94       	sei
     d4a:	ff db       	rcall	.-2050   	; 0x54a <sio2host_init>
	init_SPI_mstr();
     d4c:	14 da       	rcall	.-3032   	; 0x176 <init_SPI_mstr>
     d4e:	80 e1       	ldi	r24, 0x10	; 16
	uint8_t configuring[] = "Configuring ADC";
     d50:	ed e0       	ldi	r30, 0x0D	; 13
     d52:	f2 e0       	ldi	r31, 0x02	; 2
     d54:	de 01       	movw	r26, r28
     d56:	11 96       	adiw	r26, 0x01	; 1
     d58:	01 90       	ld	r0, Z+
     d5a:	0d 92       	st	X+, r0
     d5c:	8a 95       	dec	r24
     d5e:	e1 f7       	brne	.-8      	; 0xd58 <main+0x28>
	config_ext_DR_irq();
     d60:	90 df       	rcall	.-224    	; 0xc82 <config_ext_DR_irq>
     d62:	4f e0       	ldi	r20, 0x0F	; 15
	usart_serial_write_packet(USART_HOST,configuring, 15);
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	be 01       	movw	r22, r28
     d68:	6f 5f       	subi	r22, 0xFF	; 255
     d6a:	7f 4f       	sbci	r23, 0xFF	; 255
     d6c:	88 ec       	ldi	r24, 0xC8	; 200
     d6e:	90 e0       	ldi	r25, 0x00	; 0
	config_Ziggys_ADC();
     d70:	bd da       	rcall	.-2694   	; 0x2ec <usart_serial_write_packet>
     d72:	70 df       	rcall	.-288    	; 0xc54 <config_Ziggys_ADC>
	check_adc();
     d74:	8d df       	rcall	.-230    	; 0xc90 <check_adc>
     d76:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <sample_ready>
	sample_ready = false;
     d7a:	11 e0       	ldi	r17, 0x01	; 1
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 0;
	// Check if button is high or low for the moment
	uint8_t current_state = (~PINE & (1<<PORTE4)) != 0;
     d7c:	00 e0       	ldi	r16, 0x00	; 0
     d7e:	23 c0       	rjmp	.+70     	; 0xdc6 <main+0x96>
     d80:	8c b1       	in	r24, 0x0c	; 12
     d82:	91 2f       	mov	r25, r17
     d84:	28 2f       	mov	r18, r24
     d86:	20 71       	andi	r18, 0x10	; 16
     d88:	84 fd       	sbrc	r24, 4
     d8a:	90 2f       	mov	r25, r16
     d8c:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <button_state.3326>
	if(current_state != button_state) {
     d90:	98 17       	cp	r25, r24
     d92:	a1 f0       	breq	.+40     	; 0xdbc <main+0x8c>
     d94:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <count.3325>
		// Button state is about to be changed, increase counter
		count++;
     d98:	8f 5f       	subi	r24, 0xFF	; 255
     d9a:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <count.3325>
     d9e:	84 30       	cpi	r24, 0x04	; 4
		if(count >= 4) {
     da0:	90 f0       	brcs	.+36     	; 0xdc6 <main+0x96>
     da2:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <button_state.3326>
			// The button have not bounced for four checks, change state
			button_state = current_state;
     da6:	21 11       	cpse	r18, r1
			// If the button was pressed (not released), tell main so
			if(current_state != 0) {
     da8:	02 c0       	rjmp	.+4      	; 0xdae <main+0x7e>
     daa:	10 93 bd 03 	sts	0x03BD, r17	; 0x8003bd <button_down>
				button_down = true;
     dae:	00 93 42 03 	sts	0x0342, r16	; 0x800342 <count.3325>
			}
			count = 0;
     db2:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <button_down>
			UDR1 = LADCs;
		}*/
		while(!button_down)
		{
			debounce();
			if(button_down)
     db6:	88 23       	and	r24, r24
     db8:	31 f0       	breq	.+12     	; 0xdc6 <main+0x96>
     dba:	03 c0       	rjmp	.+6      	; 0xdc2 <main+0x92>
			count = 0;
		}
	}
	else{
		// Reset counter
		count = 0;
     dbc:	00 93 42 03 	sts	0x0342, r16	; 0x800342 <count.3325>
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <main+0x96>
		while(!button_down)
		{
			debounce();
			if(button_down)
			{
				EIMSK |= (1<<INT0);//External interrupt 0 enabled
     dc2:	e8 9a       	sbi	0x1d, 0	; 29
				adc_start_conversions();
     dc4:	56 df       	rcall	.-340    	; 0xc72 <adc_start_conversions>
     dc6:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <button_down>
			while(!UCSR1A & USART_DRE_bm);
			UDR1 = MADCs;
			while(!UCSR1A & USART_DRE_bm);
			UDR1 = LADCs;
		}*/
		while(!button_down)
     dca:	88 23       	and	r24, r24
     dcc:	c9 f2       	breq	.-78     	; 0xd80 <main+0x50>
     dce:	fd cf       	rjmp	.-6      	; 0xdca <main+0x9a>

00000dd0 <__vector_1>:
     dd0:	1f 92       	push	r1
		
/*************************************************************************//**
	External interrupt handler for external ADC data ready event
*****************************************************************************/
ISR(INT0_vect)
{
     dd2:	0f 92       	push	r0
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	0f 92       	push	r0
     dd8:	11 24       	eor	r1, r1
     dda:	0b b6       	in	r0, 0x3b	; 59
     ddc:	0f 92       	push	r0
     dde:	8f 93       	push	r24
     de0:	af 93       	push	r26
     de2:	bf 93       	push	r27
     de4:	ef 93       	push	r30
     de6:	ff 93       	push	r31
	/*Optimized code*/
	cpu_irq_disable();
     de8:	f8 94       	cli
	STATUS_byte = SPDR;
	PORTD |= ( 1 << SS2 );
	if ( STATUS_byte == ADC_STAT_DR )         
	{*/
		
		PORTD &= ~ ( 1 << SS2 );
     dea:	5d 98       	cbi	0x0b, 5	; 11
		SPDR = R_ADC_SAMPLES;
     dec:	81 e4       	ldi	r24, 0x41	; 65
     dee:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF))){};
     df0:	0d b4       	in	r0, 0x2d	; 45
     df2:	07 fe       	sbrs	r0, 7
     df4:	fd cf       	rjmp	.-6      	; 0xdf0 <__vector_1+0x20>
		//STATUS_byte = SPDR; Consejo de Lenon, ya sabes a quien putear
		SPDR = DNT_CARE;
     df6:	80 e4       	ldi	r24, 0x40	; 64
     df8:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF))){};
     dfa:	0d b4       	in	r0, 0x2d	; 45
     dfc:	07 fe       	sbrs	r0, 7
     dfe:	fd cf       	rjmp	.-6      	; 0xdfa <__vector_1+0x2a>
		HADCs = SPDR;
     e00:	8e b5       	in	r24, 0x2e	; 46
     e02:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <HADCs>
		SPDR = DNT_CARE;
     e06:	80 e4       	ldi	r24, 0x40	; 64
     e08:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF))){};
     e0a:	0d b4       	in	r0, 0x2d	; 45
     e0c:	07 fe       	sbrs	r0, 7
     e0e:	fd cf       	rjmp	.-6      	; 0xe0a <__vector_1+0x3a>
		MADCs = SPDR;
     e10:	8e b5       	in	r24, 0x2e	; 46
     e12:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <MADCs>
		/*SPDR = DNT_CARE;
		while(!(SPSR & (1<<SPIF))){};
		LADCs = SPDR;*/
		PORTD |= ( 1 << SS2 );
     e16:	5d 9a       	sbi	0x0b, 5	; 11
		while(!UCSR1A & USART_DRE_bm);
     e18:	a8 ec       	ldi	r26, 0xC8	; 200
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	8c 91       	ld	r24, X
		UDR1 = HADCs;
     e1e:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <HADCs>
     e22:	ee ec       	ldi	r30, 0xCE	; 206
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 83       	st	Z, r24
		while(!UCSR1A & USART_DRE_bm);
     e28:	8c 91       	ld	r24, X
		UDR1 = MADCs;
     e2a:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <MADCs>
     e2e:	80 83       	st	Z, r24
		/*while(!UCSR1A & USART_DRE_bm);
		UDR1 = LADCs;*/
		//number_of_samples++;
	//}
	
	cpu_irq_enable();	
     e30:	78 94       	sei
     e32:	ff 91       	pop	r31
     e34:	ef 91       	pop	r30
     e36:	bf 91       	pop	r27
     e38:	af 91       	pop	r26
     e3a:	8f 91       	pop	r24
     e3c:	0f 90       	pop	r0
     e3e:	0b be       	out	0x3b, r0	; 59
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <__udivmodsi4>:
     e4a:	a1 e2       	ldi	r26, 0x21	; 33
     e4c:	1a 2e       	mov	r1, r26
     e4e:	aa 1b       	sub	r26, r26
     e50:	bb 1b       	sub	r27, r27
     e52:	fd 01       	movw	r30, r26
     e54:	0d c0       	rjmp	.+26     	; 0xe70 <__udivmodsi4_ep>

00000e56 <__udivmodsi4_loop>:
     e56:	aa 1f       	adc	r26, r26
     e58:	bb 1f       	adc	r27, r27
     e5a:	ee 1f       	adc	r30, r30
     e5c:	ff 1f       	adc	r31, r31
     e5e:	a2 17       	cp	r26, r18
     e60:	b3 07       	cpc	r27, r19
     e62:	e4 07       	cpc	r30, r20
     e64:	f5 07       	cpc	r31, r21
     e66:	20 f0       	brcs	.+8      	; 0xe70 <__udivmodsi4_ep>
     e68:	a2 1b       	sub	r26, r18
     e6a:	b3 0b       	sbc	r27, r19
     e6c:	e4 0b       	sbc	r30, r20
     e6e:	f5 0b       	sbc	r31, r21

00000e70 <__udivmodsi4_ep>:
     e70:	66 1f       	adc	r22, r22
     e72:	77 1f       	adc	r23, r23
     e74:	88 1f       	adc	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	1a 94       	dec	r1
     e7a:	69 f7       	brne	.-38     	; 0xe56 <__udivmodsi4_loop>
     e7c:	60 95       	com	r22
     e7e:	70 95       	com	r23
     e80:	80 95       	com	r24
     e82:	90 95       	com	r25
     e84:	9b 01       	movw	r18, r22
     e86:	ac 01       	movw	r20, r24
     e88:	bd 01       	movw	r22, r26
     e8a:	cf 01       	movw	r24, r30
     e8c:	08 95       	ret

00000e8e <fdevopen>:
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	31 f4       	brne	.+12     	; 0xea6 <fdevopen+0x18>
     e9a:	61 15       	cp	r22, r1
     e9c:	71 05       	cpc	r23, r1
     e9e:	19 f4       	brne	.+6      	; 0xea6 <fdevopen+0x18>
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	39 c0       	rjmp	.+114    	; 0xf18 <fdevopen+0x8a>
     ea6:	8b 01       	movw	r16, r22
     ea8:	ec 01       	movw	r28, r24
     eaa:	6e e0       	ldi	r22, 0x0E	; 14
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	37 d0       	rcall	.+110    	; 0xf22 <calloc>
     eb4:	fc 01       	movw	r30, r24
     eb6:	89 2b       	or	r24, r25
     eb8:	99 f3       	breq	.-26     	; 0xea0 <fdevopen+0x12>
     eba:	80 e8       	ldi	r24, 0x80	; 128
     ebc:	83 83       	std	Z+3, r24	; 0x03
     ebe:	01 15       	cp	r16, r1
     ec0:	11 05       	cpc	r17, r1
     ec2:	71 f0       	breq	.+28     	; 0xee0 <fdevopen+0x52>
     ec4:	13 87       	std	Z+11, r17	; 0x0b
     ec6:	02 87       	std	Z+10, r16	; 0x0a
     ec8:	81 e8       	ldi	r24, 0x81	; 129
     eca:	83 83       	std	Z+3, r24	; 0x03
     ecc:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <__iob>
     ed0:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <__iob+0x1>
     ed4:	89 2b       	or	r24, r25
     ed6:	21 f4       	brne	.+8      	; 0xee0 <fdevopen+0x52>
     ed8:	f0 93 bf 03 	sts	0x03BF, r31	; 0x8003bf <__iob+0x1>
     edc:	e0 93 be 03 	sts	0x03BE, r30	; 0x8003be <__iob>
     ee0:	20 97       	sbiw	r28, 0x00	; 0
     ee2:	c9 f0       	breq	.+50     	; 0xf16 <fdevopen+0x88>
     ee4:	d1 87       	std	Z+9, r29	; 0x09
     ee6:	c0 87       	std	Z+8, r28	; 0x08
     ee8:	83 81       	ldd	r24, Z+3	; 0x03
     eea:	82 60       	ori	r24, 0x02	; 2
     eec:	83 83       	std	Z+3, r24	; 0x03
     eee:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <__iob+0x2>
     ef2:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <__iob+0x3>
     ef6:	89 2b       	or	r24, r25
     ef8:	71 f4       	brne	.+28     	; 0xf16 <fdevopen+0x88>
     efa:	f0 93 c1 03 	sts	0x03C1, r31	; 0x8003c1 <__iob+0x3>
     efe:	e0 93 c0 03 	sts	0x03C0, r30	; 0x8003c0 <__iob+0x2>
     f02:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <__iob+0x4>
     f06:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <__iob+0x5>
     f0a:	89 2b       	or	r24, r25
     f0c:	21 f4       	brne	.+8      	; 0xf16 <fdevopen+0x88>
     f0e:	f0 93 c3 03 	sts	0x03C3, r31	; 0x8003c3 <__iob+0x5>
     f12:	e0 93 c2 03 	sts	0x03C2, r30	; 0x8003c2 <__iob+0x4>
     f16:	cf 01       	movw	r24, r30
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	08 95       	ret

00000f22 <calloc>:
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	86 9f       	mul	r24, r22
     f2c:	80 01       	movw	r16, r0
     f2e:	87 9f       	mul	r24, r23
     f30:	10 0d       	add	r17, r0
     f32:	96 9f       	mul	r25, r22
     f34:	10 0d       	add	r17, r0
     f36:	11 24       	eor	r1, r1
     f38:	c8 01       	movw	r24, r16
     f3a:	0d d0       	rcall	.+26     	; 0xf56 <malloc>
     f3c:	ec 01       	movw	r28, r24
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	21 f0       	breq	.+8      	; 0xf4a <calloc+0x28>
     f42:	a8 01       	movw	r20, r16
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	27 d1       	rcall	.+590    	; 0x1198 <memset>
     f4a:	ce 01       	movw	r24, r28
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	08 95       	ret

00000f56 <malloc>:
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	82 30       	cpi	r24, 0x02	; 2
     f60:	91 05       	cpc	r25, r1
     f62:	10 f4       	brcc	.+4      	; 0xf68 <malloc+0x12>
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	e0 91 c6 03 	lds	r30, 0x03C6	; 0x8003c6 <__flp>
     f6c:	f0 91 c7 03 	lds	r31, 0x03C7	; 0x8003c7 <__flp+0x1>
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	a0 e0       	ldi	r26, 0x00	; 0
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	30 97       	sbiw	r30, 0x00	; 0
     f7a:	19 f1       	breq	.+70     	; 0xfc2 <malloc+0x6c>
     f7c:	40 81       	ld	r20, Z
     f7e:	51 81       	ldd	r21, Z+1	; 0x01
     f80:	02 81       	ldd	r16, Z+2	; 0x02
     f82:	13 81       	ldd	r17, Z+3	; 0x03
     f84:	48 17       	cp	r20, r24
     f86:	59 07       	cpc	r21, r25
     f88:	c8 f0       	brcs	.+50     	; 0xfbc <malloc+0x66>
     f8a:	84 17       	cp	r24, r20
     f8c:	95 07       	cpc	r25, r21
     f8e:	69 f4       	brne	.+26     	; 0xfaa <malloc+0x54>
     f90:	10 97       	sbiw	r26, 0x00	; 0
     f92:	31 f0       	breq	.+12     	; 0xfa0 <malloc+0x4a>
     f94:	12 96       	adiw	r26, 0x02	; 2
     f96:	0c 93       	st	X, r16
     f98:	12 97       	sbiw	r26, 0x02	; 2
     f9a:	13 96       	adiw	r26, 0x03	; 3
     f9c:	1c 93       	st	X, r17
     f9e:	27 c0       	rjmp	.+78     	; 0xfee <malloc+0x98>
     fa0:	00 93 c6 03 	sts	0x03C6, r16	; 0x8003c6 <__flp>
     fa4:	10 93 c7 03 	sts	0x03C7, r17	; 0x8003c7 <__flp+0x1>
     fa8:	22 c0       	rjmp	.+68     	; 0xfee <malloc+0x98>
     faa:	21 15       	cp	r18, r1
     fac:	31 05       	cpc	r19, r1
     fae:	19 f0       	breq	.+6      	; 0xfb6 <malloc+0x60>
     fb0:	42 17       	cp	r20, r18
     fb2:	53 07       	cpc	r21, r19
     fb4:	18 f4       	brcc	.+6      	; 0xfbc <malloc+0x66>
     fb6:	9a 01       	movw	r18, r20
     fb8:	bd 01       	movw	r22, r26
     fba:	ef 01       	movw	r28, r30
     fbc:	df 01       	movw	r26, r30
     fbe:	f8 01       	movw	r30, r16
     fc0:	db cf       	rjmp	.-74     	; 0xf78 <malloc+0x22>
     fc2:	21 15       	cp	r18, r1
     fc4:	31 05       	cpc	r19, r1
     fc6:	f9 f0       	breq	.+62     	; 0x1006 <malloc+0xb0>
     fc8:	28 1b       	sub	r18, r24
     fca:	39 0b       	sbc	r19, r25
     fcc:	24 30       	cpi	r18, 0x04	; 4
     fce:	31 05       	cpc	r19, r1
     fd0:	80 f4       	brcc	.+32     	; 0xff2 <malloc+0x9c>
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	9b 81       	ldd	r25, Y+3	; 0x03
     fd6:	61 15       	cp	r22, r1
     fd8:	71 05       	cpc	r23, r1
     fda:	21 f0       	breq	.+8      	; 0xfe4 <malloc+0x8e>
     fdc:	fb 01       	movw	r30, r22
     fde:	93 83       	std	Z+3, r25	; 0x03
     fe0:	82 83       	std	Z+2, r24	; 0x02
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <malloc+0x96>
     fe4:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <__flp+0x1>
     fe8:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <__flp>
     fec:	fe 01       	movw	r30, r28
     fee:	32 96       	adiw	r30, 0x02	; 2
     ff0:	44 c0       	rjmp	.+136    	; 0x107a <malloc+0x124>
     ff2:	fe 01       	movw	r30, r28
     ff4:	e2 0f       	add	r30, r18
     ff6:	f3 1f       	adc	r31, r19
     ff8:	81 93       	st	Z+, r24
     ffa:	91 93       	st	Z+, r25
     ffc:	22 50       	subi	r18, 0x02	; 2
     ffe:	31 09       	sbc	r19, r1
    1000:	39 83       	std	Y+1, r19	; 0x01
    1002:	28 83       	st	Y, r18
    1004:	3a c0       	rjmp	.+116    	; 0x107a <malloc+0x124>
    1006:	20 91 c4 03 	lds	r18, 0x03C4	; 0x8003c4 <__brkval>
    100a:	30 91 c5 03 	lds	r19, 0x03C5	; 0x8003c5 <__brkval+0x1>
    100e:	23 2b       	or	r18, r19
    1010:	41 f4       	brne	.+16     	; 0x1022 <malloc+0xcc>
    1012:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1016:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    101a:	30 93 c5 03 	sts	0x03C5, r19	; 0x8003c5 <__brkval+0x1>
    101e:	20 93 c4 03 	sts	0x03C4, r18	; 0x8003c4 <__brkval>
    1022:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1026:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    102a:	21 15       	cp	r18, r1
    102c:	31 05       	cpc	r19, r1
    102e:	41 f4       	brne	.+16     	; 0x1040 <malloc+0xea>
    1030:	2d b7       	in	r18, 0x3d	; 61
    1032:	3e b7       	in	r19, 0x3e	; 62
    1034:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1038:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    103c:	24 1b       	sub	r18, r20
    103e:	35 0b       	sbc	r19, r21
    1040:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <__brkval>
    1044:	f0 91 c5 03 	lds	r31, 0x03C5	; 0x8003c5 <__brkval+0x1>
    1048:	e2 17       	cp	r30, r18
    104a:	f3 07       	cpc	r31, r19
    104c:	a0 f4       	brcc	.+40     	; 0x1076 <malloc+0x120>
    104e:	2e 1b       	sub	r18, r30
    1050:	3f 0b       	sbc	r19, r31
    1052:	28 17       	cp	r18, r24
    1054:	39 07       	cpc	r19, r25
    1056:	78 f0       	brcs	.+30     	; 0x1076 <malloc+0x120>
    1058:	ac 01       	movw	r20, r24
    105a:	4e 5f       	subi	r20, 0xFE	; 254
    105c:	5f 4f       	sbci	r21, 0xFF	; 255
    105e:	24 17       	cp	r18, r20
    1060:	35 07       	cpc	r19, r21
    1062:	48 f0       	brcs	.+18     	; 0x1076 <malloc+0x120>
    1064:	4e 0f       	add	r20, r30
    1066:	5f 1f       	adc	r21, r31
    1068:	50 93 c5 03 	sts	0x03C5, r21	; 0x8003c5 <__brkval+0x1>
    106c:	40 93 c4 03 	sts	0x03C4, r20	; 0x8003c4 <__brkval>
    1070:	81 93       	st	Z+, r24
    1072:	91 93       	st	Z+, r25
    1074:	02 c0       	rjmp	.+4      	; 0x107a <malloc+0x124>
    1076:	e0 e0       	ldi	r30, 0x00	; 0
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	cf 01       	movw	r24, r30
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	08 95       	ret

00001086 <free>:
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	09 f4       	brne	.+2      	; 0x1090 <free+0xa>
    108e:	81 c0       	rjmp	.+258    	; 0x1192 <free+0x10c>
    1090:	fc 01       	movw	r30, r24
    1092:	32 97       	sbiw	r30, 0x02	; 2
    1094:	13 82       	std	Z+3, r1	; 0x03
    1096:	12 82       	std	Z+2, r1	; 0x02
    1098:	a0 91 c6 03 	lds	r26, 0x03C6	; 0x8003c6 <__flp>
    109c:	b0 91 c7 03 	lds	r27, 0x03C7	; 0x8003c7 <__flp+0x1>
    10a0:	10 97       	sbiw	r26, 0x00	; 0
    10a2:	81 f4       	brne	.+32     	; 0x10c4 <free+0x3e>
    10a4:	20 81       	ld	r18, Z
    10a6:	31 81       	ldd	r19, Z+1	; 0x01
    10a8:	82 0f       	add	r24, r18
    10aa:	93 1f       	adc	r25, r19
    10ac:	20 91 c4 03 	lds	r18, 0x03C4	; 0x8003c4 <__brkval>
    10b0:	30 91 c5 03 	lds	r19, 0x03C5	; 0x8003c5 <__brkval+0x1>
    10b4:	28 17       	cp	r18, r24
    10b6:	39 07       	cpc	r19, r25
    10b8:	51 f5       	brne	.+84     	; 0x110e <free+0x88>
    10ba:	f0 93 c5 03 	sts	0x03C5, r31	; 0x8003c5 <__brkval+0x1>
    10be:	e0 93 c4 03 	sts	0x03C4, r30	; 0x8003c4 <__brkval>
    10c2:	67 c0       	rjmp	.+206    	; 0x1192 <free+0x10c>
    10c4:	ed 01       	movw	r28, r26
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	ce 17       	cp	r28, r30
    10cc:	df 07       	cpc	r29, r31
    10ce:	40 f4       	brcc	.+16     	; 0x10e0 <free+0x5a>
    10d0:	4a 81       	ldd	r20, Y+2	; 0x02
    10d2:	5b 81       	ldd	r21, Y+3	; 0x03
    10d4:	9e 01       	movw	r18, r28
    10d6:	41 15       	cp	r20, r1
    10d8:	51 05       	cpc	r21, r1
    10da:	f1 f0       	breq	.+60     	; 0x1118 <free+0x92>
    10dc:	ea 01       	movw	r28, r20
    10de:	f5 cf       	rjmp	.-22     	; 0x10ca <free+0x44>
    10e0:	d3 83       	std	Z+3, r29	; 0x03
    10e2:	c2 83       	std	Z+2, r28	; 0x02
    10e4:	40 81       	ld	r20, Z
    10e6:	51 81       	ldd	r21, Z+1	; 0x01
    10e8:	84 0f       	add	r24, r20
    10ea:	95 1f       	adc	r25, r21
    10ec:	c8 17       	cp	r28, r24
    10ee:	d9 07       	cpc	r29, r25
    10f0:	59 f4       	brne	.+22     	; 0x1108 <free+0x82>
    10f2:	88 81       	ld	r24, Y
    10f4:	99 81       	ldd	r25, Y+1	; 0x01
    10f6:	84 0f       	add	r24, r20
    10f8:	95 1f       	adc	r25, r21
    10fa:	02 96       	adiw	r24, 0x02	; 2
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	80 83       	st	Z, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	9b 81       	ldd	r25, Y+3	; 0x03
    1104:	93 83       	std	Z+3, r25	; 0x03
    1106:	82 83       	std	Z+2, r24	; 0x02
    1108:	21 15       	cp	r18, r1
    110a:	31 05       	cpc	r19, r1
    110c:	29 f4       	brne	.+10     	; 0x1118 <free+0x92>
    110e:	f0 93 c7 03 	sts	0x03C7, r31	; 0x8003c7 <__flp+0x1>
    1112:	e0 93 c6 03 	sts	0x03C6, r30	; 0x8003c6 <__flp>
    1116:	3d c0       	rjmp	.+122    	; 0x1192 <free+0x10c>
    1118:	e9 01       	movw	r28, r18
    111a:	fb 83       	std	Y+3, r31	; 0x03
    111c:	ea 83       	std	Y+2, r30	; 0x02
    111e:	49 91       	ld	r20, Y+
    1120:	59 91       	ld	r21, Y+
    1122:	c4 0f       	add	r28, r20
    1124:	d5 1f       	adc	r29, r21
    1126:	ec 17       	cp	r30, r28
    1128:	fd 07       	cpc	r31, r29
    112a:	61 f4       	brne	.+24     	; 0x1144 <free+0xbe>
    112c:	80 81       	ld	r24, Z
    112e:	91 81       	ldd	r25, Z+1	; 0x01
    1130:	84 0f       	add	r24, r20
    1132:	95 1f       	adc	r25, r21
    1134:	02 96       	adiw	r24, 0x02	; 2
    1136:	e9 01       	movw	r28, r18
    1138:	99 83       	std	Y+1, r25	; 0x01
    113a:	88 83       	st	Y, r24
    113c:	82 81       	ldd	r24, Z+2	; 0x02
    113e:	93 81       	ldd	r25, Z+3	; 0x03
    1140:	9b 83       	std	Y+3, r25	; 0x03
    1142:	8a 83       	std	Y+2, r24	; 0x02
    1144:	e0 e0       	ldi	r30, 0x00	; 0
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	12 96       	adiw	r26, 0x02	; 2
    114a:	8d 91       	ld	r24, X+
    114c:	9c 91       	ld	r25, X
    114e:	13 97       	sbiw	r26, 0x03	; 3
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	19 f0       	breq	.+6      	; 0x115a <free+0xd4>
    1154:	fd 01       	movw	r30, r26
    1156:	dc 01       	movw	r26, r24
    1158:	f7 cf       	rjmp	.-18     	; 0x1148 <free+0xc2>
    115a:	8d 91       	ld	r24, X+
    115c:	9c 91       	ld	r25, X
    115e:	11 97       	sbiw	r26, 0x01	; 1
    1160:	9d 01       	movw	r18, r26
    1162:	2e 5f       	subi	r18, 0xFE	; 254
    1164:	3f 4f       	sbci	r19, 0xFF	; 255
    1166:	82 0f       	add	r24, r18
    1168:	93 1f       	adc	r25, r19
    116a:	20 91 c4 03 	lds	r18, 0x03C4	; 0x8003c4 <__brkval>
    116e:	30 91 c5 03 	lds	r19, 0x03C5	; 0x8003c5 <__brkval+0x1>
    1172:	28 17       	cp	r18, r24
    1174:	39 07       	cpc	r19, r25
    1176:	69 f4       	brne	.+26     	; 0x1192 <free+0x10c>
    1178:	30 97       	sbiw	r30, 0x00	; 0
    117a:	29 f4       	brne	.+10     	; 0x1186 <free+0x100>
    117c:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <__flp+0x1>
    1180:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <__flp>
    1184:	02 c0       	rjmp	.+4      	; 0x118a <free+0x104>
    1186:	13 82       	std	Z+3, r1	; 0x03
    1188:	12 82       	std	Z+2, r1	; 0x02
    118a:	b0 93 c5 03 	sts	0x03C5, r27	; 0x8003c5 <__brkval+0x1>
    118e:	a0 93 c4 03 	sts	0x03C4, r26	; 0x8003c4 <__brkval>
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <memset>:
    1198:	dc 01       	movw	r26, r24
    119a:	01 c0       	rjmp	.+2      	; 0x119e <memset+0x6>
    119c:	6d 93       	st	X+, r22
    119e:	41 50       	subi	r20, 0x01	; 1
    11a0:	50 40       	sbci	r21, 0x00	; 0
    11a2:	e0 f7       	brcc	.-8      	; 0x119c <memset+0x4>
    11a4:	08 95       	ret

000011a6 <_exit>:
    11a6:	f8 94       	cli

000011a8 <__stop_program>:
    11a8:	ff cf       	rjmp	.-2      	; 0x11a8 <__stop_program>
