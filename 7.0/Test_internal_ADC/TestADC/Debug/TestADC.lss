
TestADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00000a5a  00000aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b2  0080020e  0080020e  00000afc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003925  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002187  00000000  00000000  00004649  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032a4  00000000  00000000  000067d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  00009a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000194dc  00000000  00000000  00009f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018cd  00000000  00000000  00023428  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00024cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007614  00000000  00000000  00024e95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
   6:	00 00       	nop
   8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
   a:	00 00       	nop
   c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
   e:	00 00       	nop
  10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
  12:	00 00       	nop
  14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
  16:	00 00       	nop
  18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
  22:	00 00       	nop
  24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
  26:	00 00       	nop
  28:	a4 c0       	rjmp	.+328    	; 0x172 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
  32:	00 00       	nop
  34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
  36:	00 00       	nop
  38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
  3e:	00 00       	nop
  40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
  42:	00 00       	nop
  44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
  46:	00 00       	nop
  48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
  4e:	00 00       	nop
  50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
  52:	00 00       	nop
  54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
  56:	00 00       	nop
  58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
  5e:	00 00       	nop
  60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
  62:	00 00       	nop
  64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
  66:	00 00       	nop
  68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
  6e:	00 00       	nop
  70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
  72:	00 00       	nop
  74:	0b c3       	rjmp	.+1558   	; 0x68c <__vector_29>
  76:	00 00       	nop
  78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
  7e:	00 00       	nop
  80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
  82:	00 00       	nop
  84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
  86:	00 00       	nop
  88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
  8e:	00 00       	nop
  90:	17 c2       	rjmp	.+1070   	; 0x4c0 <__vector_36>
  92:	00 00       	nop
  94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
  96:	00 00       	nop
  98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	64 c0       	rjmp	.+200    	; 0x172 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	62 c0       	rjmp	.+196    	; 0x172 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	60 c0       	rjmp	.+192    	; 0x172 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	5e c0       	rjmp	.+188    	; 0x172 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	5c c0       	rjmp	.+184    	; 0x172 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	5a c0       	rjmp	.+180    	; 0x172 <__bad_interrupt>
  be:	00 00       	nop
  c0:	58 c0       	rjmp	.+176    	; 0x172 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	56 c0       	rjmp	.+172    	; 0x172 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	54 c0       	rjmp	.+168    	; 0x172 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	52 c0       	rjmp	.+164    	; 0x172 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	50 c0       	rjmp	.+160    	; 0x172 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	4e c0       	rjmp	.+156    	; 0x172 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	4c c0       	rjmp	.+152    	; 0x172 <__bad_interrupt>
  da:	00 00       	nop
  dc:	4a c0       	rjmp	.+148    	; 0x172 <__bad_interrupt>
  de:	00 00       	nop
  e0:	48 c0       	rjmp	.+144    	; 0x172 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	46 c0       	rjmp	.+140    	; 0x172 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	44 c0       	rjmp	.+136    	; 0x172 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	42 c0       	rjmp	.+132    	; 0x172 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	40 c0       	rjmp	.+128    	; 0x172 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	3e c0       	rjmp	.+124    	; 0x172 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	3c c0       	rjmp	.+120    	; 0x172 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	3a c0       	rjmp	.+116    	; 0x172 <__bad_interrupt>
  fe:	00 00       	nop
 100:	38 c0       	rjmp	.+112    	; 0x172 <__bad_interrupt>
 102:	00 00       	nop
 104:	36 c0       	rjmp	.+108    	; 0x172 <__bad_interrupt>
 106:	00 00       	nop
 108:	34 c0       	rjmp	.+104    	; 0x172 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	32 c0       	rjmp	.+100    	; 0x172 <__bad_interrupt>
 10e:	00 00       	nop
 110:	30 c0       	rjmp	.+96     	; 0x172 <__bad_interrupt>
 112:	00 00       	nop
 114:	2e c0       	rjmp	.+92     	; 0x172 <__bad_interrupt>
 116:	00 00       	nop
 118:	2c c0       	rjmp	.+88     	; 0x172 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	2a c0       	rjmp	.+84     	; 0x172 <__bad_interrupt>
 11e:	00 00       	nop
 120:	28 c0       	rjmp	.+80     	; 0x172 <__bad_interrupt>
 122:	00 00       	nop
 124:	26 c0       	rjmp	.+76     	; 0x172 <__bad_interrupt>
 126:	00 00       	nop
 128:	24 c0       	rjmp	.+72     	; 0x172 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	22 c0       	rjmp	.+68     	; 0x172 <__bad_interrupt>
 12e:	00 00       	nop
 130:	20 c0       	rjmp	.+64     	; 0x172 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	ea e5       	ldi	r30, 0x5A	; 90
 14c:	fa e0       	ldi	r31, 0x0A	; 10
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	ae 30       	cpi	r26, 0x0E	; 14
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
 15e:	22 e0       	ldi	r18, 0x02	; 2
 160:	ae e0       	ldi	r26, 0x0E	; 14
 162:	b2 e0       	ldi	r27, 0x02	; 2
 164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
 166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
 168:	a0 3c       	cpi	r26, 0xC0	; 192
 16a:	b2 07       	cpc	r27, r18
 16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
 16e:	3b d2       	rcall	.+1142   	; 0x5e6 <main>
 170:	72 c4       	rjmp	.+2276   	; 0xa56 <_exit>

00000172 <__bad_interrupt>:
 172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	1f 92       	push	r1
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
 184:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
 188:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
 18c:	83 30       	cpi	r24, 0x03	; 3
 18e:	69 f0       	breq	.+26     	; 0x1aa <sysclk_init+0x36>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 190:	8f b7       	in	r24, 0x3f	; 63
 192:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 194:	f8 94       	cli
	return flags;
 196:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
 198:	5f 93       	push	r21
 19a:	50 e8       	ldi	r21, 0x80	; 128
 19c:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
 1a0:	53 e0       	ldi	r21, 0x03	; 3
 1a2:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
 1a6:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 1a8:	8f bf       	out	0x3f, r24	; 63
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
 1aa:	0f 90       	pop	r0
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	1f 92       	push	r1
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 1bc:	9f b7       	in	r25, 0x3f	; 63
 1be:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 1c0:	f8 94       	cli
	return flags;
 1c2:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	40 f4       	brcc	.+16     	; 0x1d8 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
 1c8:	e8 2f       	mov	r30, r24
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ec 59       	subi	r30, 0x9C	; 156
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	60 95       	com	r22
 1d2:	80 81       	ld	r24, Z
 1d4:	68 23       	and	r22, r24
 1d6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 1d8:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
 1da:	0f 90       	pop	r0
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	1f 92       	push	r1
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
 1ec:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <stdio_base>
 1f0:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <stdio_base+0x1>
 1f4:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <ptr_get>
 1f8:	f0 91 b0 02 	lds	r31, 0x02B0	; 0x8002b0 <ptr_get+0x1>
 1fc:	be 01       	movw	r22, r28
 1fe:	6f 5f       	subi	r22, 0xFF	; 255
 200:	7f 4f       	sbci	r23, 0xFF	; 255
 202:	19 95       	eicall
	return c;
 204:	89 81       	ldd	r24, Y+1	; 0x01
}
 206:	08 2e       	mov	r0, r24
 208:	00 0c       	add	r0, r0
 20a:	99 0b       	sbc	r25, r25
 20c:	0f 90       	pop	r0
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
 214:	fc 01       	movw	r30, r24
 216:	90 81       	ld	r25, Z
 218:	95 ff       	sbrs	r25, 5
 21a:	fd cf       	rjmp	.-6      	; 0x216 <usart_putchar+0x2>
 21c:	66 83       	std	Z+6, r22	; 0x06
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	08 95       	ret

00000222 <usart_getchar>:
 222:	fc 01       	movw	r30, r24
 224:	90 81       	ld	r25, Z
 226:	99 23       	and	r25, r25
 228:	ec f7       	brge	.-6      	; 0x224 <usart_getchar+0x2>
 22a:	86 81       	ldd	r24, Z+6	; 0x06
 22c:	08 95       	ret

0000022e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 22e:	4f 92       	push	r4
 230:	5f 92       	push	r5
 232:	6f 92       	push	r6
 234:	7f 92       	push	r7
 236:	8f 92       	push	r8
 238:	9f 92       	push	r9
 23a:	af 92       	push	r10
 23c:	bf 92       	push	r11
 23e:	cf 92       	push	r12
 240:	df 92       	push	r13
 242:	ef 92       	push	r14
 244:	ff 92       	push	r15
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	ec 01       	movw	r28, r24
 250:	6a 01       	movw	r12, r20
 252:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
 254:	28 01       	movw	r4, r16
 256:	39 01       	movw	r6, r18
 258:	68 94       	set
 25a:	12 f8       	bld	r1, 2
 25c:	76 94       	lsr	r7
 25e:	67 94       	ror	r6
 260:	57 94       	ror	r5
 262:	47 94       	ror	r4
 264:	16 94       	lsr	r1
 266:	d1 f7       	brne	.-12     	; 0x25c <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
 268:	88 81       	ld	r24, Y
 26a:	81 fd       	sbrc	r24, 1
 26c:	0e c0       	rjmp	.+28     	; 0x28a <usart_set_baudrate+0x5c>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
 26e:	48 01       	movw	r8, r16
 270:	59 01       	movw	r10, r18
 272:	07 2e       	mov	r0, r23
 274:	73 e1       	ldi	r23, 0x13	; 19
 276:	b6 94       	lsr	r11
 278:	a7 94       	ror	r10
 27a:	97 94       	ror	r9
 27c:	87 94       	ror	r8
 27e:	7a 95       	dec	r23
 280:	d1 f7       	brne	.-12     	; 0x276 <usart_set_baudrate+0x48>
 282:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
 284:	d3 01       	movw	r26, r6
 286:	c2 01       	movw	r24, r4
 288:	15 c0       	rjmp	.+42     	; 0x2b4 <usart_set_baudrate+0x86>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
 28a:	d9 01       	movw	r26, r18
 28c:	c8 01       	movw	r24, r16
 28e:	68 94       	set
 290:	13 f8       	bld	r1, 3
 292:	b6 95       	lsr	r27
 294:	a7 95       	ror	r26
 296:	97 95       	ror	r25
 298:	87 95       	ror	r24
 29a:	16 94       	lsr	r1
 29c:	d1 f7       	brne	.-12     	; 0x292 <usart_set_baudrate+0x64>
		min_rate /= 2;
 29e:	48 01       	movw	r8, r16
 2a0:	59 01       	movw	r10, r18
 2a2:	07 2e       	mov	r0, r23
 2a4:	74 e1       	ldi	r23, 0x14	; 20
 2a6:	b6 94       	lsr	r11
 2a8:	a7 94       	ror	r10
 2aa:	97 94       	ror	r9
 2ac:	87 94       	ror	r8
 2ae:	7a 95       	dec	r23
 2b0:	d1 f7       	brne	.-12     	; 0x2a6 <usart_set_baudrate+0x78>
 2b2:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
 2b4:	8c 15       	cp	r24, r12
 2b6:	9d 05       	cpc	r25, r13
 2b8:	ae 05       	cpc	r26, r14
 2ba:	bf 05       	cpc	r27, r15
 2bc:	68 f1       	brcs	.+90     	; 0x318 <usart_set_baudrate+0xea>
 2be:	c8 14       	cp	r12, r8
 2c0:	d9 04       	cpc	r13, r9
 2c2:	ea 04       	cpc	r14, r10
 2c4:	fb 04       	cpc	r15, r11
 2c6:	50 f1       	brcs	.+84     	; 0x31c <usart_set_baudrate+0xee>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
 2c8:	88 81       	ld	r24, Y
 2ca:	81 ff       	sbrs	r24, 1
 2cc:	0f c0       	rjmp	.+30     	; 0x2ec <usart_set_baudrate+0xbe>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
 2ce:	a7 01       	movw	r20, r14
 2d0:	96 01       	movw	r18, r12
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	44 1f       	adc	r20, r20
 2d8:	55 1f       	adc	r21, r21
 2da:	c3 01       	movw	r24, r6
 2dc:	b2 01       	movw	r22, r4
 2de:	0d d2       	rcall	.+1050   	; 0x6fa <__udivmodsi4>
 2e0:	da 01       	movw	r26, r20
 2e2:	c9 01       	movw	r24, r18
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	a1 09       	sbc	r26, r1
 2e8:	b1 09       	sbc	r27, r1
 2ea:	12 c0       	rjmp	.+36     	; 0x310 <usart_set_baudrate+0xe2>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
 2ec:	c9 01       	movw	r24, r18
 2ee:	b8 01       	movw	r22, r16
 2f0:	68 94       	set
 2f2:	13 f8       	bld	r1, 3
 2f4:	96 95       	lsr	r25
 2f6:	87 95       	ror	r24
 2f8:	77 95       	ror	r23
 2fa:	67 95       	ror	r22
 2fc:	16 94       	lsr	r1
 2fe:	d1 f7       	brne	.-12     	; 0x2f4 <usart_set_baudrate+0xc6>
 300:	a7 01       	movw	r20, r14
 302:	96 01       	movw	r18, r12
 304:	fa d1       	rcall	.+1012   	; 0x6fa <__udivmodsi4>
 306:	da 01       	movw	r26, r20
 308:	c9 01       	movw	r24, r18
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	a1 09       	sbc	r26, r1
 30e:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
 310:	9d 83       	std	Y+5, r25	; 0x05
 312:	8c 83       	std	Y+4, r24	; 0x04
	return true;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	03 c0       	rjmp	.+6      	; 0x31e <usart_set_baudrate+0xf0>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	01 c0       	rjmp	.+2      	; 0x31e <usart_set_baudrate+0xf0>
 31c:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	df 90       	pop	r13
 32c:	cf 90       	pop	r12
 32e:	bf 90       	pop	r11
 330:	af 90       	pop	r10
 332:	9f 90       	pop	r9
 334:	8f 90       	pop	r8
 336:	7f 90       	pop	r7
 338:	6f 90       	pop	r6
 33a:	5f 90       	pop	r5
 33c:	4f 90       	pop	r4
 33e:	08 95       	ret

00000340 <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	ec 01       	movw	r28, r24
 34a:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTA0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
 34c:	80 3c       	cpi	r24, 0xC0	; 192
 34e:	91 05       	cpc	r25, r1
 350:	21 f4       	brne	.+8      	; 0x35a <usart_init_rs232+0x1a>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
 352:	62 e0       	ldi	r22, 0x02	; 2
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	2d df       	rcall	.-422    	; 0x1b2 <sysclk_enable_module>
 358:	06 c0       	rjmp	.+12     	; 0x366 <usart_init_rs232+0x26>
	}
#endif
#ifdef USARTA1
	if ((uintptr_t)usart == (uintptr_t)&UCSR1A) {
 35a:	88 3c       	cpi	r24, 0xC8	; 200
 35c:	91 05       	cpc	r25, r1
 35e:	19 f4       	brne	.+6      	; 0x366 <usart_init_rs232+0x26>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	26 df       	rcall	.-436    	; 0x1b2 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	8f 73       	andi	r24, 0x3F	; 63
 36a:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
 36c:	f8 01       	movw	r30, r16
 36e:	26 81       	ldd	r18, Z+6	; 0x06
 370:	35 81       	ldd	r19, Z+5	; 0x05
 372:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
 374:	9a 81       	ldd	r25, Y+2	; 0x02
 376:	48 2f       	mov	r20, r24
 378:	43 70       	andi	r20, 0x03	; 3
 37a:	44 0f       	add	r20, r20
 37c:	99 7f       	andi	r25, 0xF9	; 249
 37e:	94 2b       	or	r25, r20
 380:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
 382:	99 81       	ldd	r25, Y+1	; 0x01
 384:	84 70       	andi	r24, 0x04	; 4
 386:	88 0f       	add	r24, r24
 388:	88 0f       	add	r24, r24
 38a:	9b 7f       	andi	r25, 0xFB	; 251
 38c:	89 2b       	or	r24, r25
 38e:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	8f 7c       	andi	r24, 0xCF	; 207
 394:	83 2b       	or	r24, r19
 396:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
 398:	9a 81       	ldd	r25, Y+2	; 0x02
 39a:	97 7f       	andi	r25, 0xF7	; 247
 39c:	82 2f       	mov	r24, r18
 39e:	88 0f       	add	r24, r24
 3a0:	88 0f       	add	r24, r24
 3a2:	88 0f       	add	r24, r24
 3a4:	89 2b       	or	r24, r25
 3a6:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
 3a8:	40 81       	ld	r20, Z
 3aa:	51 81       	ldd	r21, Z+1	; 0x01
 3ac:	62 81       	ldd	r22, Z+2	; 0x02
 3ae:	73 81       	ldd	r23, Z+3	; 0x03
 3b0:	00 e8       	ldi	r16, 0x80	; 128
 3b2:	14 e8       	ldi	r17, 0x84	; 132
 3b4:	2e e1       	ldi	r18, 0x1E	; 30
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	ce 01       	movw	r24, r28
 3ba:	39 df       	rcall	.-398    	; 0x22e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
 3bc:	99 81       	ldd	r25, Y+1	; 0x01
 3be:	98 60       	ori	r25, 0x08	; 8
 3c0:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
 3c2:	99 81       	ldd	r25, Y+1	; 0x01
 3c4:	90 61       	ori	r25, 0x10	; 16
 3c6:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <usart_serial_getchar>:
	if (back >= 1) {
		return c;
	} else {
		return (-1);
	}
}
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	eb 01       	movw	r28, r22
 3d8:	24 df       	rcall	.-440    	; 0x222 <usart_getchar>
 3da:	88 83       	st	Y, r24
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <usart_serial_putchar>:
 3e2:	18 cf       	rjmp	.-464    	; 0x214 <usart_putchar>
 3e4:	08 95       	ret

000003e6 <sio2host_init>:
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	27 97       	sbiw	r28, 0x07	; 7
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
 3fe:	08 ec       	ldi	r16, 0xC8	; 200
 400:	10 e0       	ldi	r17, 0x00	; 0
 402:	10 93 b4 02 	sts	0x02B4, r17	; 0x8002b4 <stdio_base+0x1>
 406:	00 93 b3 02 	sts	0x02B3, r16	; 0x8002b3 <stdio_base>
 40a:	81 ef       	ldi	r24, 0xF1	; 241
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <ptr_put+0x1>
 412:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <ptr_put>
 416:	89 ee       	ldi	r24, 0xE9	; 233
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <ptr_get+0x1>
 41e:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <ptr_get>
 422:	e6 e0       	ldi	r30, 0x06	; 6
 424:	f2 e0       	ldi	r31, 0x02	; 2
 426:	84 81       	ldd	r24, Z+4	; 0x04
 428:	8d 83       	std	Y+5, r24	; 0x05
 42a:	85 81       	ldd	r24, Z+5	; 0x05
 42c:	8e 83       	std	Y+6, r24	; 0x06
 42e:	86 81       	ldd	r24, Z+6	; 0x06
 430:	8f 83       	std	Y+7, r24	; 0x07
 432:	80 81       	ld	r24, Z
 434:	91 81       	ldd	r25, Z+1	; 0x01
 436:	a2 81       	ldd	r26, Z+2	; 0x02
 438:	b3 81       	ldd	r27, Z+3	; 0x03
 43a:	89 83       	std	Y+1, r24	; 0x01
 43c:	9a 83       	std	Y+2, r25	; 0x02
 43e:	ab 83       	std	Y+3, r26	; 0x03
 440:	bc 83       	std	Y+4, r27	; 0x04
 442:	be 01       	movw	r22, r28
 444:	6f 5f       	subi	r22, 0xFF	; 255
 446:	7f 4f       	sbci	r23, 0xFF	; 255
 448:	88 ec       	ldi	r24, 0xC8	; 200
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	79 df       	rcall	.-270    	; 0x340 <usart_init_rs232>
 44e:	61 ef       	ldi	r22, 0xF1	; 241
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	88 ea       	ldi	r24, 0xA8	; 168
 454:	92 e0       	ldi	r25, 0x02	; 2
 456:	73 d1       	rcall	.+742    	; 0x73e <fdevopen>
 458:	f8 01       	movw	r30, r16
 45a:	81 81       	ldd	r24, Z+1	; 0x01
 45c:	80 68       	ori	r24, 0x80	; 128
 45e:	81 83       	std	Z+1, r24	; 0x01
 460:	27 96       	adiw	r28, 0x07	; 7
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	de bf       	out	0x3e, r29	; 62
 468:	0f be       	out	0x3f, r0	; 63
 46a:	cd bf       	out	0x3d, r28	; 61
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	08 95       	ret

00000476 <sio2host_tx>:
 476:	ff 92       	push	r15
 478:	0f 93       	push	r16
 47a:	1f 93       	push	r17
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	8c 01       	movw	r16, r24
 482:	f6 2e       	mov	r15, r22
 484:	c6 2f       	mov	r28, r22
 486:	d0 e0       	ldi	r29, 0x00	; 0
 488:	ae 01       	movw	r20, r28
 48a:	b8 01       	movw	r22, r16
 48c:	88 ec       	ldi	r24, 0xC8	; 200
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	71 d0       	rcall	.+226    	; 0x574 <usart_serial_write_packet>
 492:	81 11       	cpse	r24, r1
 494:	f9 cf       	rjmp	.-14     	; 0x488 <sio2host_tx+0x12>
 496:	8f 2d       	mov	r24, r15
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	ff 90       	pop	r15
 4a2:	08 95       	ret

000004a4 <sio2host_putchar>:
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	1f 92       	push	r1
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
 4ae:	89 83       	std	Y+1, r24	; 0x01
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	ce 01       	movw	r24, r28
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	df df       	rcall	.-66     	; 0x476 <sio2host_tx>
 4b8:	0f 90       	pop	r0
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <__vector_36>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
 4c0:	1f 92       	push	r1
 4c2:	0f 92       	push	r0
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	0f 92       	push	r0
 4c8:	11 24       	eor	r1, r1
 4ca:	0b b6       	in	r0, 0x3b	; 59
 4cc:	0f 92       	push	r0
 4ce:	2f 93       	push	r18
 4d0:	3f 93       	push	r19
 4d2:	4f 93       	push	r20
 4d4:	5f 93       	push	r21
 4d6:	6f 93       	push	r22
 4d8:	7f 93       	push	r23
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	af 93       	push	r26
 4e0:	bf 93       	push	r27
 4e2:	ef 93       	push	r30
 4e4:	ff 93       	push	r31
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	1f 92       	push	r1
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
 4f0:	41 e0       	ldi	r20, 0x01	; 1
 4f2:	50 e0       	ldi	r21, 0x00	; 0
 4f4:	be 01       	movw	r22, r28
 4f6:	6f 5f       	subi	r22, 0xFF	; 255
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	88 ec       	ldi	r24, 0xC8	; 200
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	54 d0       	rcall	.+168    	; 0x5a8 <usart_serial_read_packet>
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
 500:	f8 94       	cli

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
 502:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__data_end>
 506:	e8 2f       	mov	r30, r24
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	e1 5f       	subi	r30, 0xF1	; 241
 50c:	fd 4f       	sbci	r31, 0xFD	; 253
 50e:	99 81       	ldd	r25, Y+1	; 0x01
 510:	90 83       	st	Z, r25

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
 512:	8b 39       	cpi	r24, 0x9B	; 155
 514:	19 f4       	brne	.+6      	; 0x51c <__vector_36+0x5c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
 516:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__data_end>
 51a:	03 c0       	rjmp	.+6      	; 0x522 <__vector_36+0x62>
	} else {
		serial_rx_buf_tail++;
 51c:	8f 5f       	subi	r24, 0xFF	; 255
 51e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <__data_end>
	}

	cpu_irq_enable();
 522:	78 94       	sei
}
 524:	0f 90       	pop	r0
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	ff 91       	pop	r31
 52c:	ef 91       	pop	r30
 52e:	bf 91       	pop	r27
 530:	af 91       	pop	r26
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	7f 91       	pop	r23
 538:	6f 91       	pop	r22
 53a:	5f 91       	pop	r21
 53c:	4f 91       	pop	r20
 53e:	3f 91       	pop	r19
 540:	2f 91       	pop	r18
 542:	0f 90       	pop	r0
 544:	0b be       	out	0x3b, r0	; 59
 546:	0f 90       	pop	r0
 548:	0f be       	out	0x3f, r0	; 63
 54a:	0f 90       	pop	r0
 54c:	1f 90       	pop	r1
 54e:	18 95       	reti

00000550 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
 550:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
 552:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <stdio_base>
 556:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <stdio_base+0x1>
 55a:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <ptr_put>
 55e:	f0 91 b2 02 	lds	r31, 0x02B2	; 0x8002b2 <ptr_put+0x1>
 562:	19 95       	eicall
 564:	99 23       	and	r25, r25
 566:	1c f0       	brlt	.+6      	; 0x56e <_write+0x1e>
		return -1;
	}
	return 1;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
 56e:	8f ef       	ldi	r24, 0xFF	; 255
 570:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
 572:	08 95       	ret

00000574 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
 574:	ef 92       	push	r14
 576:	ff 92       	push	r15
 578:	0f 93       	push	r16
 57a:	1f 93       	push	r17
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	7c 01       	movw	r14, r24
 582:	8b 01       	movw	r16, r22
 584:	ea 01       	movw	r28, r20
	while (len) {
 586:	20 97       	sbiw	r28, 0x00	; 0
 588:	39 f0       	breq	.+14     	; 0x598 <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
 58a:	f8 01       	movw	r30, r16
 58c:	61 91       	ld	r22, Z+
 58e:	8f 01       	movw	r16, r30
 590:	c7 01       	movw	r24, r14
 592:	40 de       	rcall	.-896    	; 0x214 <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
 594:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
 596:	c9 f7       	brne	.-14     	; 0x58a <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	ff 90       	pop	r15
 5a4:	ef 90       	pop	r14
 5a6:	08 95       	ret

000005a8 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
 5a8:	ef 92       	push	r14
 5aa:	ff 92       	push	r15
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	7c 01       	movw	r14, r24
 5b6:	8b 01       	movw	r16, r22
 5b8:	ea 01       	movw	r28, r20
	while (len) {
 5ba:	20 97       	sbiw	r28, 0x00	; 0
 5bc:	39 f0       	breq	.+14     	; 0x5cc <usart_serial_read_packet+0x24>
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
 5be:	c7 01       	movw	r24, r14
 5c0:	30 de       	rcall	.-928    	; 0x222 <usart_getchar>
 5c2:	f8 01       	movw	r30, r16
 5c4:	81 93       	st	Z+, r24
 5c6:	8f 01       	movw	r16, r30
		usart_serial_getchar(usart, data);
		len--;
 5c8:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
 5ca:	c9 f7       	brne	.-14     	; 0x5be <usart_serial_read_packet+0x16>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	ff 90       	pop	r15
 5d8:	ef 90       	pop	r14
 5da:	08 95       	ret

000005dc <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 5dc:	2c 9a       	sbi	0x05, 4	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 5de:	24 9a       	sbi	0x04, 4	; 4
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 5e0:	6c 98       	cbi	0x0d, 4	; 13
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 5e2:	74 9a       	sbi	0x0e, 4	; 14
 5e4:	08 95       	ret

000005e6 <main>:
	temp[0]=ADCH;
	return;
}
int main (void)
{
	sysclk_init();
 5e6:	c6 dd       	rcall	.-1140   	; 0x174 <sysclk_init>
	board_init();
 5e8:	f9 df       	rcall	.-14     	; 0x5dc <board_init>
	sio2host_init();
 5ea:	fd de       	rcall	.-518    	; 0x3e6 <sio2host_init>
 5ec:	80 b3       	in	r24, 0x10	; 16
	DDRF |= ( 0 << PORTF1 ) | ( 0 << PORTF0 );
 5ee:	80 bb       	out	0x10, r24	; 16
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler, enum adc_voltage_reference vref, enum adc_mux_setting input, bool irq_e, bool adate )
{
	sysclk_enable_module( POWER_RED_REG0,  PRADC_bm );
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	de dd       	rcall	.-1092   	; 0x1b2 <sysclk_enable_module>
 5f6:	84 e8       	ldi	r24, 0x84	; 132
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
 5f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 5fc:	eb e7       	ldi	r30, 0x7B	; 123
	while( ! (ADCSRB & (1 << AVDDOK) )); 
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	88 23       	and	r24, r24
 604:	ec f7       	brge	.-6      	; 0x600 <main+0x1a>
 606:	8a e0       	ldi	r24, 0x0A	; 10
	ADCSRC = 10<<ADSUT0; // set start-up time
 608:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <__TEXT_REGION_LENGTH__+0x700077>
 60c:	ea e7       	ldi	r30, 0x7A	; 122
	if(irq_e){
		ADCSRA |= (1 << ADIE); //Enable ADC interrupt
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	88 60       	ori	r24, 0x08	; 8
 614:	80 83       	st	Z, r24
 616:	80 81       	ld	r24, Z
}

/*  \brief Enable ADC Auto Trigger */
static inline void adc_enable_autotrigger(void)
{
	ADCSRA |= (1 << ADATE);
 618:	80 62       	ori	r24, 0x20	; 32
 61a:	80 83       	st	Z, r24
 61c:	ec e7       	ldi	r30, 0x7C	; 124
 */
static inline void adc_set_voltage_reference(enum adc_voltage_reference vref)
{
	uint8_t temp;

	temp = (ADMUX & ~(ADC_VREF_MASK));
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	80 6c       	ori	r24, 0xC0	; 192
	temp |= (uint8_t)vref;
 624:	80 83       	st	Z, r24
	ADMUX = temp;
 626:	80 81       	ld	r24, Z
 */
static inline void adc_set_mux(enum adc_mux_setting input)
{
	uint8_t temp;

	temp = (ADMUX & ~(ADC_MUX_MASK));
 628:	98 e0       	ldi	r25, 0x08	; 8

#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
 62a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 62e:	80 7e       	andi	r24, 0xE0	; 224
	} else {
		ADCSRB &= ~(1 << MUX5);
	}

	/* mask out MUX5 for ADMUX. */
	temp |= ((uint8_t)input & ADC_MUX_MASK);
 630:	89 60       	ori	r24, 0x09	; 9
 632:	80 83       	st	Z, r24
#else
	temp |= (uint8_t)input;
#endif
	ADMUX = temp;
 634:	78 94       	sei
	/*Initiates internal ADC, select temp sensor to test 
	ADC functionality. By default, cont conversions*/
	adc_init( ADC_PRESCALER_DIV16, ADC_VREF_1V6, ADC_MUX_TEMP_SENSOR, true, true );
	cpu_irq_enable();
 636:	50 e0       	ldi	r21, 0x00	; 0
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 0;

	// Check if button is high or low for the moment
	uint8_t current_state = (~PINE & (1<<PORTE4)) != 0;
 638:	31 e0       	ldi	r19, 0x01	; 1
 63a:	45 2f       	mov	r20, r21
 63c:	ea e7       	ldi	r30, 0x7A	; 122
}

/*  \brief Start ADC conversion */
static inline void adc_start_conversion(void)
{
	ADCSRA |= (1 << ADSC);
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	8c b1       	in	r24, 0x0c	; 12
 642:	93 2f       	mov	r25, r19
 644:	28 2f       	mov	r18, r24
 646:	20 71       	andi	r18, 0x10	; 16
 648:	84 fd       	sbrc	r24, 4
 64a:	94 2f       	mov	r25, r20
 64c:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <button_state.2883>
	if(current_state != button_state) {
 650:	98 17       	cp	r25, r24
 652:	81 f0       	breq	.+32     	; 0x674 <main+0x8e>
 654:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <count.2882>
		// Button state is about to be changed, increase counter
		count++;
 658:	8f 5f       	subi	r24, 0xFF	; 255
 65a:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <count.2882>
 65e:	84 30       	cpi	r24, 0x04	; 4
		if(count >= 4) {
 660:	58 f0       	brcs	.+22     	; 0x678 <main+0x92>
 662:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <button_state.2883>
			// The button have not bounced for four checks, change state
			button_state = current_state;
 666:	21 11       	cpse	r18, r1
			// If the button was pressed (not released), tell main so
			if(current_state != 0) {
 668:	02 c0       	rjmp	.+4      	; 0x66e <main+0x88>
 66a:	30 93 b5 02 	sts	0x02B5, r19	; 0x8002b5 <button_down>
				button_down = 1;
 66e:	40 93 ab 02 	sts	0x02AB, r20	; 0x8002ab <count.2882>
			}
			count = 0;
 672:	02 c0       	rjmp	.+4      	; 0x678 <main+0x92>
 674:	40 93 ab 02 	sts	0x02AB, r20	; 0x8002ab <count.2882>
		}
	}
	else{
		// Reset counter
		count = 0;
 678:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <button_down>
	cpu_irq_enable();
	
	while (1)
	{
		debounce();
		if ( button_down ){
 67c:	88 23       	and	r24, r24
 67e:	01 f3       	breq	.-64     	; 0x640 <main+0x5a>
 680:	50 93 b5 02 	sts	0x02B5, r21	; 0x8002b5 <button_down>
			// Clear flag
			button_down = 0;
 684:	80 81       	ld	r24, Z
 686:	80 64       	ori	r24, 0x40	; 64
 688:	80 83       	st	Z, r24
 68a:	da cf       	rjmp	.-76     	; 0x640 <main+0x5a>

0000068c <__vector_29>:
 68c:	1f 92       	push	r1
	}
}

/* ADC convertion complete IRQ */

ISR( ADC_vect ){
 68e:	0f 92       	push	r0
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	0f 92       	push	r0
 694:	11 24       	eor	r1, r1
 696:	0b b6       	in	r0, 0x3b	; 59
 698:	0f 92       	push	r0
 69a:	2f 93       	push	r18
 69c:	3f 93       	push	r19
 69e:	4f 93       	push	r20
 6a0:	5f 93       	push	r21
 6a2:	6f 93       	push	r22
 6a4:	7f 93       	push	r23
 6a6:	8f 93       	push	r24
 6a8:	9f 93       	push	r25
 6aa:	af 93       	push	r26
 6ac:	bf 93       	push	r27
 6ae:	cf 93       	push	r28
 6b0:	df 93       	push	r29
 6b2:	ef 93       	push	r30
 6b4:	ff 93       	push	r31

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
 6b6:	f8 94       	cli
	temp[1]=ADCL;
 6b8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 6bc:	cd ea       	ldi	r28, 0xAD	; 173
 6be:	d2 e0       	ldi	r29, 0x02	; 2
 6c0:	89 83       	std	Y+1, r24	; 0x01
	temp[0]=ADCH;
 6c2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 6c6:	88 83       	st	Y, r24
	if(count==APP_RX_BUF_SIZE){ count=0;}*/
	/*itoa( temperature, str_temp, 10 );
	for( uint8_t k = 0; k < sizeof(str_temp); k++ ){
		sio2host_putchar( str_temp[k] );
	}*/
	sio2host_putchar( temp[0] );
 6c8:	ed de       	rcall	.-550    	; 0x4a4 <sio2host_putchar>
	sio2host_putchar( temp[1] );
 6ca:	89 81       	ldd	r24, Y+1	; 0x01
 6cc:	eb de       	rcall	.-554    	; 0x4a4 <sio2host_putchar>
	cpu_irq_enable();
 6ce:	78 94       	sei
	}
 6d0:	ff 91       	pop	r31
 6d2:	ef 91       	pop	r30
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	bf 91       	pop	r27
 6da:	af 91       	pop	r26
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	7f 91       	pop	r23
 6e2:	6f 91       	pop	r22
 6e4:	5f 91       	pop	r21
 6e6:	4f 91       	pop	r20
 6e8:	3f 91       	pop	r19
 6ea:	2f 91       	pop	r18
 6ec:	0f 90       	pop	r0
 6ee:	0b be       	out	0x3b, r0	; 59
 6f0:	0f 90       	pop	r0
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	0f 90       	pop	r0
 6f6:	1f 90       	pop	r1
 6f8:	18 95       	reti

000006fa <__udivmodsi4>:
 6fa:	a1 e2       	ldi	r26, 0x21	; 33
 6fc:	1a 2e       	mov	r1, r26
 6fe:	aa 1b       	sub	r26, r26
 700:	bb 1b       	sub	r27, r27
 702:	fd 01       	movw	r30, r26
 704:	0d c0       	rjmp	.+26     	; 0x720 <__udivmodsi4_ep>

00000706 <__udivmodsi4_loop>:
 706:	aa 1f       	adc	r26, r26
 708:	bb 1f       	adc	r27, r27
 70a:	ee 1f       	adc	r30, r30
 70c:	ff 1f       	adc	r31, r31
 70e:	a2 17       	cp	r26, r18
 710:	b3 07       	cpc	r27, r19
 712:	e4 07       	cpc	r30, r20
 714:	f5 07       	cpc	r31, r21
 716:	20 f0       	brcs	.+8      	; 0x720 <__udivmodsi4_ep>
 718:	a2 1b       	sub	r26, r18
 71a:	b3 0b       	sbc	r27, r19
 71c:	e4 0b       	sbc	r30, r20
 71e:	f5 0b       	sbc	r31, r21

00000720 <__udivmodsi4_ep>:
 720:	66 1f       	adc	r22, r22
 722:	77 1f       	adc	r23, r23
 724:	88 1f       	adc	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	1a 94       	dec	r1
 72a:	69 f7       	brne	.-38     	; 0x706 <__udivmodsi4_loop>
 72c:	60 95       	com	r22
 72e:	70 95       	com	r23
 730:	80 95       	com	r24
 732:	90 95       	com	r25
 734:	9b 01       	movw	r18, r22
 736:	ac 01       	movw	r20, r24
 738:	bd 01       	movw	r22, r26
 73a:	cf 01       	movw	r24, r30
 73c:	08 95       	ret

0000073e <fdevopen>:
 73e:	0f 93       	push	r16
 740:	1f 93       	push	r17
 742:	cf 93       	push	r28
 744:	df 93       	push	r29
 746:	00 97       	sbiw	r24, 0x00	; 0
 748:	31 f4       	brne	.+12     	; 0x756 <fdevopen+0x18>
 74a:	61 15       	cp	r22, r1
 74c:	71 05       	cpc	r23, r1
 74e:	19 f4       	brne	.+6      	; 0x756 <fdevopen+0x18>
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	39 c0       	rjmp	.+114    	; 0x7c8 <fdevopen+0x8a>
 756:	8b 01       	movw	r16, r22
 758:	ec 01       	movw	r28, r24
 75a:	6e e0       	ldi	r22, 0x0E	; 14
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	37 d0       	rcall	.+110    	; 0x7d2 <calloc>
 764:	fc 01       	movw	r30, r24
 766:	89 2b       	or	r24, r25
 768:	99 f3       	breq	.-26     	; 0x750 <fdevopen+0x12>
 76a:	80 e8       	ldi	r24, 0x80	; 128
 76c:	83 83       	std	Z+3, r24	; 0x03
 76e:	01 15       	cp	r16, r1
 770:	11 05       	cpc	r17, r1
 772:	71 f0       	breq	.+28     	; 0x790 <fdevopen+0x52>
 774:	13 87       	std	Z+11, r17	; 0x0b
 776:	02 87       	std	Z+10, r16	; 0x0a
 778:	81 e8       	ldi	r24, 0x81	; 129
 77a:	83 83       	std	Z+3, r24	; 0x03
 77c:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__iob>
 780:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <__iob+0x1>
 784:	89 2b       	or	r24, r25
 786:	21 f4       	brne	.+8      	; 0x790 <fdevopen+0x52>
 788:	f0 93 b7 02 	sts	0x02B7, r31	; 0x8002b7 <__iob+0x1>
 78c:	e0 93 b6 02 	sts	0x02B6, r30	; 0x8002b6 <__iob>
 790:	20 97       	sbiw	r28, 0x00	; 0
 792:	c9 f0       	breq	.+50     	; 0x7c6 <fdevopen+0x88>
 794:	d1 87       	std	Z+9, r29	; 0x09
 796:	c0 87       	std	Z+8, r28	; 0x08
 798:	83 81       	ldd	r24, Z+3	; 0x03
 79a:	82 60       	ori	r24, 0x02	; 2
 79c:	83 83       	std	Z+3, r24	; 0x03
 79e:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__iob+0x2>
 7a2:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <__iob+0x3>
 7a6:	89 2b       	or	r24, r25
 7a8:	71 f4       	brne	.+28     	; 0x7c6 <fdevopen+0x88>
 7aa:	f0 93 b9 02 	sts	0x02B9, r31	; 0x8002b9 <__iob+0x3>
 7ae:	e0 93 b8 02 	sts	0x02B8, r30	; 0x8002b8 <__iob+0x2>
 7b2:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <__iob+0x4>
 7b6:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <__iob+0x5>
 7ba:	89 2b       	or	r24, r25
 7bc:	21 f4       	brne	.+8      	; 0x7c6 <fdevopen+0x88>
 7be:	f0 93 bb 02 	sts	0x02BB, r31	; 0x8002bb <__iob+0x5>
 7c2:	e0 93 ba 02 	sts	0x02BA, r30	; 0x8002ba <__iob+0x4>
 7c6:	cf 01       	movw	r24, r30
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	1f 91       	pop	r17
 7ce:	0f 91       	pop	r16
 7d0:	08 95       	ret

000007d2 <calloc>:
 7d2:	0f 93       	push	r16
 7d4:	1f 93       	push	r17
 7d6:	cf 93       	push	r28
 7d8:	df 93       	push	r29
 7da:	86 9f       	mul	r24, r22
 7dc:	80 01       	movw	r16, r0
 7de:	87 9f       	mul	r24, r23
 7e0:	10 0d       	add	r17, r0
 7e2:	96 9f       	mul	r25, r22
 7e4:	10 0d       	add	r17, r0
 7e6:	11 24       	eor	r1, r1
 7e8:	c8 01       	movw	r24, r16
 7ea:	0d d0       	rcall	.+26     	; 0x806 <malloc>
 7ec:	ec 01       	movw	r28, r24
 7ee:	00 97       	sbiw	r24, 0x00	; 0
 7f0:	21 f0       	breq	.+8      	; 0x7fa <calloc+0x28>
 7f2:	a8 01       	movw	r20, r16
 7f4:	60 e0       	ldi	r22, 0x00	; 0
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	27 d1       	rcall	.+590    	; 0xa48 <memset>
 7fa:	ce 01       	movw	r24, r28
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	1f 91       	pop	r17
 802:	0f 91       	pop	r16
 804:	08 95       	ret

00000806 <malloc>:
 806:	0f 93       	push	r16
 808:	1f 93       	push	r17
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	82 30       	cpi	r24, 0x02	; 2
 810:	91 05       	cpc	r25, r1
 812:	10 f4       	brcc	.+4      	; 0x818 <malloc+0x12>
 814:	82 e0       	ldi	r24, 0x02	; 2
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <__flp>
 81c:	f0 91 bf 02 	lds	r31, 0x02BF	; 0x8002bf <__flp+0x1>
 820:	20 e0       	ldi	r18, 0x00	; 0
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	a0 e0       	ldi	r26, 0x00	; 0
 826:	b0 e0       	ldi	r27, 0x00	; 0
 828:	30 97       	sbiw	r30, 0x00	; 0
 82a:	19 f1       	breq	.+70     	; 0x872 <malloc+0x6c>
 82c:	40 81       	ld	r20, Z
 82e:	51 81       	ldd	r21, Z+1	; 0x01
 830:	02 81       	ldd	r16, Z+2	; 0x02
 832:	13 81       	ldd	r17, Z+3	; 0x03
 834:	48 17       	cp	r20, r24
 836:	59 07       	cpc	r21, r25
 838:	c8 f0       	brcs	.+50     	; 0x86c <malloc+0x66>
 83a:	84 17       	cp	r24, r20
 83c:	95 07       	cpc	r25, r21
 83e:	69 f4       	brne	.+26     	; 0x85a <malloc+0x54>
 840:	10 97       	sbiw	r26, 0x00	; 0
 842:	31 f0       	breq	.+12     	; 0x850 <malloc+0x4a>
 844:	12 96       	adiw	r26, 0x02	; 2
 846:	0c 93       	st	X, r16
 848:	12 97       	sbiw	r26, 0x02	; 2
 84a:	13 96       	adiw	r26, 0x03	; 3
 84c:	1c 93       	st	X, r17
 84e:	27 c0       	rjmp	.+78     	; 0x89e <malloc+0x98>
 850:	00 93 be 02 	sts	0x02BE, r16	; 0x8002be <__flp>
 854:	10 93 bf 02 	sts	0x02BF, r17	; 0x8002bf <__flp+0x1>
 858:	22 c0       	rjmp	.+68     	; 0x89e <malloc+0x98>
 85a:	21 15       	cp	r18, r1
 85c:	31 05       	cpc	r19, r1
 85e:	19 f0       	breq	.+6      	; 0x866 <malloc+0x60>
 860:	42 17       	cp	r20, r18
 862:	53 07       	cpc	r21, r19
 864:	18 f4       	brcc	.+6      	; 0x86c <malloc+0x66>
 866:	9a 01       	movw	r18, r20
 868:	bd 01       	movw	r22, r26
 86a:	ef 01       	movw	r28, r30
 86c:	df 01       	movw	r26, r30
 86e:	f8 01       	movw	r30, r16
 870:	db cf       	rjmp	.-74     	; 0x828 <malloc+0x22>
 872:	21 15       	cp	r18, r1
 874:	31 05       	cpc	r19, r1
 876:	f9 f0       	breq	.+62     	; 0x8b6 <malloc+0xb0>
 878:	28 1b       	sub	r18, r24
 87a:	39 0b       	sbc	r19, r25
 87c:	24 30       	cpi	r18, 0x04	; 4
 87e:	31 05       	cpc	r19, r1
 880:	80 f4       	brcc	.+32     	; 0x8a2 <malloc+0x9c>
 882:	8a 81       	ldd	r24, Y+2	; 0x02
 884:	9b 81       	ldd	r25, Y+3	; 0x03
 886:	61 15       	cp	r22, r1
 888:	71 05       	cpc	r23, r1
 88a:	21 f0       	breq	.+8      	; 0x894 <malloc+0x8e>
 88c:	fb 01       	movw	r30, r22
 88e:	93 83       	std	Z+3, r25	; 0x03
 890:	82 83       	std	Z+2, r24	; 0x02
 892:	04 c0       	rjmp	.+8      	; 0x89c <malloc+0x96>
 894:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <__flp+0x1>
 898:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <__flp>
 89c:	fe 01       	movw	r30, r28
 89e:	32 96       	adiw	r30, 0x02	; 2
 8a0:	44 c0       	rjmp	.+136    	; 0x92a <malloc+0x124>
 8a2:	fe 01       	movw	r30, r28
 8a4:	e2 0f       	add	r30, r18
 8a6:	f3 1f       	adc	r31, r19
 8a8:	81 93       	st	Z+, r24
 8aa:	91 93       	st	Z+, r25
 8ac:	22 50       	subi	r18, 0x02	; 2
 8ae:	31 09       	sbc	r19, r1
 8b0:	39 83       	std	Y+1, r19	; 0x01
 8b2:	28 83       	st	Y, r18
 8b4:	3a c0       	rjmp	.+116    	; 0x92a <malloc+0x124>
 8b6:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__brkval>
 8ba:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__brkval+0x1>
 8be:	23 2b       	or	r18, r19
 8c0:	41 f4       	brne	.+16     	; 0x8d2 <malloc+0xcc>
 8c2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 8c6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 8ca:	30 93 bd 02 	sts	0x02BD, r19	; 0x8002bd <__brkval+0x1>
 8ce:	20 93 bc 02 	sts	0x02BC, r18	; 0x8002bc <__brkval>
 8d2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 8d6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 8da:	21 15       	cp	r18, r1
 8dc:	31 05       	cpc	r19, r1
 8de:	41 f4       	brne	.+16     	; 0x8f0 <malloc+0xea>
 8e0:	2d b7       	in	r18, 0x3d	; 61
 8e2:	3e b7       	in	r19, 0x3e	; 62
 8e4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 8e8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 8ec:	24 1b       	sub	r18, r20
 8ee:	35 0b       	sbc	r19, r21
 8f0:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <__brkval>
 8f4:	f0 91 bd 02 	lds	r31, 0x02BD	; 0x8002bd <__brkval+0x1>
 8f8:	e2 17       	cp	r30, r18
 8fa:	f3 07       	cpc	r31, r19
 8fc:	a0 f4       	brcc	.+40     	; 0x926 <malloc+0x120>
 8fe:	2e 1b       	sub	r18, r30
 900:	3f 0b       	sbc	r19, r31
 902:	28 17       	cp	r18, r24
 904:	39 07       	cpc	r19, r25
 906:	78 f0       	brcs	.+30     	; 0x926 <malloc+0x120>
 908:	ac 01       	movw	r20, r24
 90a:	4e 5f       	subi	r20, 0xFE	; 254
 90c:	5f 4f       	sbci	r21, 0xFF	; 255
 90e:	24 17       	cp	r18, r20
 910:	35 07       	cpc	r19, r21
 912:	48 f0       	brcs	.+18     	; 0x926 <malloc+0x120>
 914:	4e 0f       	add	r20, r30
 916:	5f 1f       	adc	r21, r31
 918:	50 93 bd 02 	sts	0x02BD, r21	; 0x8002bd <__brkval+0x1>
 91c:	40 93 bc 02 	sts	0x02BC, r20	; 0x8002bc <__brkval>
 920:	81 93       	st	Z+, r24
 922:	91 93       	st	Z+, r25
 924:	02 c0       	rjmp	.+4      	; 0x92a <malloc+0x124>
 926:	e0 e0       	ldi	r30, 0x00	; 0
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	cf 01       	movw	r24, r30
 92c:	df 91       	pop	r29
 92e:	cf 91       	pop	r28
 930:	1f 91       	pop	r17
 932:	0f 91       	pop	r16
 934:	08 95       	ret

00000936 <free>:
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
 93a:	00 97       	sbiw	r24, 0x00	; 0
 93c:	09 f4       	brne	.+2      	; 0x940 <free+0xa>
 93e:	81 c0       	rjmp	.+258    	; 0xa42 <free+0x10c>
 940:	fc 01       	movw	r30, r24
 942:	32 97       	sbiw	r30, 0x02	; 2
 944:	13 82       	std	Z+3, r1	; 0x03
 946:	12 82       	std	Z+2, r1	; 0x02
 948:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <__flp>
 94c:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <__flp+0x1>
 950:	10 97       	sbiw	r26, 0x00	; 0
 952:	81 f4       	brne	.+32     	; 0x974 <free+0x3e>
 954:	20 81       	ld	r18, Z
 956:	31 81       	ldd	r19, Z+1	; 0x01
 958:	82 0f       	add	r24, r18
 95a:	93 1f       	adc	r25, r19
 95c:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__brkval>
 960:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__brkval+0x1>
 964:	28 17       	cp	r18, r24
 966:	39 07       	cpc	r19, r25
 968:	51 f5       	brne	.+84     	; 0x9be <free+0x88>
 96a:	f0 93 bd 02 	sts	0x02BD, r31	; 0x8002bd <__brkval+0x1>
 96e:	e0 93 bc 02 	sts	0x02BC, r30	; 0x8002bc <__brkval>
 972:	67 c0       	rjmp	.+206    	; 0xa42 <free+0x10c>
 974:	ed 01       	movw	r28, r26
 976:	20 e0       	ldi	r18, 0x00	; 0
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	ce 17       	cp	r28, r30
 97c:	df 07       	cpc	r29, r31
 97e:	40 f4       	brcc	.+16     	; 0x990 <free+0x5a>
 980:	4a 81       	ldd	r20, Y+2	; 0x02
 982:	5b 81       	ldd	r21, Y+3	; 0x03
 984:	9e 01       	movw	r18, r28
 986:	41 15       	cp	r20, r1
 988:	51 05       	cpc	r21, r1
 98a:	f1 f0       	breq	.+60     	; 0x9c8 <free+0x92>
 98c:	ea 01       	movw	r28, r20
 98e:	f5 cf       	rjmp	.-22     	; 0x97a <free+0x44>
 990:	d3 83       	std	Z+3, r29	; 0x03
 992:	c2 83       	std	Z+2, r28	; 0x02
 994:	40 81       	ld	r20, Z
 996:	51 81       	ldd	r21, Z+1	; 0x01
 998:	84 0f       	add	r24, r20
 99a:	95 1f       	adc	r25, r21
 99c:	c8 17       	cp	r28, r24
 99e:	d9 07       	cpc	r29, r25
 9a0:	59 f4       	brne	.+22     	; 0x9b8 <free+0x82>
 9a2:	88 81       	ld	r24, Y
 9a4:	99 81       	ldd	r25, Y+1	; 0x01
 9a6:	84 0f       	add	r24, r20
 9a8:	95 1f       	adc	r25, r21
 9aa:	02 96       	adiw	r24, 0x02	; 2
 9ac:	91 83       	std	Z+1, r25	; 0x01
 9ae:	80 83       	st	Z, r24
 9b0:	8a 81       	ldd	r24, Y+2	; 0x02
 9b2:	9b 81       	ldd	r25, Y+3	; 0x03
 9b4:	93 83       	std	Z+3, r25	; 0x03
 9b6:	82 83       	std	Z+2, r24	; 0x02
 9b8:	21 15       	cp	r18, r1
 9ba:	31 05       	cpc	r19, r1
 9bc:	29 f4       	brne	.+10     	; 0x9c8 <free+0x92>
 9be:	f0 93 bf 02 	sts	0x02BF, r31	; 0x8002bf <__flp+0x1>
 9c2:	e0 93 be 02 	sts	0x02BE, r30	; 0x8002be <__flp>
 9c6:	3d c0       	rjmp	.+122    	; 0xa42 <free+0x10c>
 9c8:	e9 01       	movw	r28, r18
 9ca:	fb 83       	std	Y+3, r31	; 0x03
 9cc:	ea 83       	std	Y+2, r30	; 0x02
 9ce:	49 91       	ld	r20, Y+
 9d0:	59 91       	ld	r21, Y+
 9d2:	c4 0f       	add	r28, r20
 9d4:	d5 1f       	adc	r29, r21
 9d6:	ec 17       	cp	r30, r28
 9d8:	fd 07       	cpc	r31, r29
 9da:	61 f4       	brne	.+24     	; 0x9f4 <free+0xbe>
 9dc:	80 81       	ld	r24, Z
 9de:	91 81       	ldd	r25, Z+1	; 0x01
 9e0:	84 0f       	add	r24, r20
 9e2:	95 1f       	adc	r25, r21
 9e4:	02 96       	adiw	r24, 0x02	; 2
 9e6:	e9 01       	movw	r28, r18
 9e8:	99 83       	std	Y+1, r25	; 0x01
 9ea:	88 83       	st	Y, r24
 9ec:	82 81       	ldd	r24, Z+2	; 0x02
 9ee:	93 81       	ldd	r25, Z+3	; 0x03
 9f0:	9b 83       	std	Y+3, r25	; 0x03
 9f2:	8a 83       	std	Y+2, r24	; 0x02
 9f4:	e0 e0       	ldi	r30, 0x00	; 0
 9f6:	f0 e0       	ldi	r31, 0x00	; 0
 9f8:	12 96       	adiw	r26, 0x02	; 2
 9fa:	8d 91       	ld	r24, X+
 9fc:	9c 91       	ld	r25, X
 9fe:	13 97       	sbiw	r26, 0x03	; 3
 a00:	00 97       	sbiw	r24, 0x00	; 0
 a02:	19 f0       	breq	.+6      	; 0xa0a <free+0xd4>
 a04:	fd 01       	movw	r30, r26
 a06:	dc 01       	movw	r26, r24
 a08:	f7 cf       	rjmp	.-18     	; 0x9f8 <free+0xc2>
 a0a:	8d 91       	ld	r24, X+
 a0c:	9c 91       	ld	r25, X
 a0e:	11 97       	sbiw	r26, 0x01	; 1
 a10:	9d 01       	movw	r18, r26
 a12:	2e 5f       	subi	r18, 0xFE	; 254
 a14:	3f 4f       	sbci	r19, 0xFF	; 255
 a16:	82 0f       	add	r24, r18
 a18:	93 1f       	adc	r25, r19
 a1a:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__brkval>
 a1e:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__brkval+0x1>
 a22:	28 17       	cp	r18, r24
 a24:	39 07       	cpc	r19, r25
 a26:	69 f4       	brne	.+26     	; 0xa42 <free+0x10c>
 a28:	30 97       	sbiw	r30, 0x00	; 0
 a2a:	29 f4       	brne	.+10     	; 0xa36 <free+0x100>
 a2c:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__flp+0x1>
 a30:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__flp>
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <free+0x104>
 a36:	13 82       	std	Z+3, r1	; 0x03
 a38:	12 82       	std	Z+2, r1	; 0x02
 a3a:	b0 93 bd 02 	sts	0x02BD, r27	; 0x8002bd <__brkval+0x1>
 a3e:	a0 93 bc 02 	sts	0x02BC, r26	; 0x8002bc <__brkval>
 a42:	df 91       	pop	r29
 a44:	cf 91       	pop	r28
 a46:	08 95       	ret

00000a48 <memset>:
 a48:	dc 01       	movw	r26, r24
 a4a:	01 c0       	rjmp	.+2      	; 0xa4e <memset+0x6>
 a4c:	6d 93       	st	X+, r22
 a4e:	41 50       	subi	r20, 0x01	; 1
 a50:	50 40       	sbci	r21, 0x00	; 0
 a52:	e0 f7       	brcc	.-8      	; 0xa4c <memset+0x4>
 a54:	08 95       	ret

00000a56 <_exit>:
 a56:	f8 94       	cli

00000a58 <__stop_program>:
 a58:	ff cf       	rjmp	.-2      	; 0xa58 <__stop_program>
