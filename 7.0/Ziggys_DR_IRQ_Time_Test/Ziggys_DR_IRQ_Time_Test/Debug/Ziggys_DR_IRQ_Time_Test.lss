
Ziggys_DR_IRQ_Time_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000140  00800200  00800200  00000362  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027a9  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001459  00000000  00000000  00002ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002726  00000000  00000000  00004126  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ec  00000000  00000000  0000684c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014f75  00000000  00000000  00006c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014ef  00000000  00000000  0001bbad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0001d09c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001348  00000000  00000000  0001d1d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__bad_interrupt>
   6:	00 00       	nop
   8:	80 c0       	rjmp	.+256    	; 0x10a <__bad_interrupt>
   a:	00 00       	nop
   c:	7e c0       	rjmp	.+252    	; 0x10a <__bad_interrupt>
   e:	00 00       	nop
  10:	7c c0       	rjmp	.+248    	; 0x10a <__bad_interrupt>
  12:	00 00       	nop
  14:	7a c0       	rjmp	.+244    	; 0x10a <__bad_interrupt>
  16:	00 00       	nop
  18:	78 c0       	rjmp	.+240    	; 0x10a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	76 c0       	rjmp	.+236    	; 0x10a <__bad_interrupt>
  1e:	00 00       	nop
  20:	74 c0       	rjmp	.+232    	; 0x10a <__bad_interrupt>
  22:	00 00       	nop
  24:	72 c0       	rjmp	.+228    	; 0x10a <__bad_interrupt>
  26:	00 00       	nop
  28:	70 c0       	rjmp	.+224    	; 0x10a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6e c0       	rjmp	.+220    	; 0x10a <__bad_interrupt>
  2e:	00 00       	nop
  30:	6c c0       	rjmp	.+216    	; 0x10a <__bad_interrupt>
  32:	00 00       	nop
  34:	6a c0       	rjmp	.+212    	; 0x10a <__bad_interrupt>
  36:	00 00       	nop
  38:	68 c0       	rjmp	.+208    	; 0x10a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	66 c0       	rjmp	.+204    	; 0x10a <__bad_interrupt>
  3e:	00 00       	nop
  40:	64 c0       	rjmp	.+200    	; 0x10a <__bad_interrupt>
  42:	00 00       	nop
  44:	62 c0       	rjmp	.+196    	; 0x10a <__bad_interrupt>
  46:	00 00       	nop
  48:	60 c0       	rjmp	.+192    	; 0x10a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5e c0       	rjmp	.+188    	; 0x10a <__bad_interrupt>
  4e:	00 00       	nop
  50:	5c c0       	rjmp	.+184    	; 0x10a <__bad_interrupt>
  52:	00 00       	nop
  54:	5a c0       	rjmp	.+180    	; 0x10a <__bad_interrupt>
  56:	00 00       	nop
  58:	58 c0       	rjmp	.+176    	; 0x10a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	56 c0       	rjmp	.+172    	; 0x10a <__bad_interrupt>
  5e:	00 00       	nop
  60:	bd c0       	rjmp	.+378    	; 0x1dc <__vector_24>
  62:	00 00       	nop
  64:	52 c0       	rjmp	.+164    	; 0x10a <__bad_interrupt>
  66:	00 00       	nop
  68:	50 c0       	rjmp	.+160    	; 0x10a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4e c0       	rjmp	.+156    	; 0x10a <__bad_interrupt>
  6e:	00 00       	nop
  70:	4c c0       	rjmp	.+152    	; 0x10a <__bad_interrupt>
  72:	00 00       	nop
  74:	4a c0       	rjmp	.+148    	; 0x10a <__bad_interrupt>
  76:	00 00       	nop
  78:	48 c0       	rjmp	.+144    	; 0x10a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	46 c0       	rjmp	.+140    	; 0x10a <__bad_interrupt>
  7e:	00 00       	nop
  80:	44 c0       	rjmp	.+136    	; 0x10a <__bad_interrupt>
  82:	00 00       	nop
  84:	42 c0       	rjmp	.+132    	; 0x10a <__bad_interrupt>
  86:	00 00       	nop
  88:	40 c0       	rjmp	.+128    	; 0x10a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3e c0       	rjmp	.+124    	; 0x10a <__bad_interrupt>
  8e:	00 00       	nop
  90:	43 c0       	rjmp	.+134    	; 0x118 <__vector_36>
  92:	00 00       	nop
  94:	3a c0       	rjmp	.+116    	; 0x10a <__bad_interrupt>
  96:	00 00       	nop
  98:	38 c0       	rjmp	.+112    	; 0x10a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	36 c0       	rjmp	.+108    	; 0x10a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	34 c0       	rjmp	.+104    	; 0x10a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	32 c0       	rjmp	.+100    	; 0x10a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	30 c0       	rjmp	.+96     	; 0x10a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2e c0       	rjmp	.+92     	; 0x10a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2c c0       	rjmp	.+88     	; 0x10a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2a c0       	rjmp	.+84     	; 0x10a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	28 c0       	rjmp	.+80     	; 0x10a <__bad_interrupt>
  ba:	00 00       	nop
  bc:	26 c0       	rjmp	.+76     	; 0x10a <__bad_interrupt>
  be:	00 00       	nop
  c0:	24 c0       	rjmp	.+72     	; 0x10a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	22 c0       	rjmp	.+68     	; 0x10a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	20 c0       	rjmp	.+64     	; 0x10a <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	00 e0       	ldi	r16, 0x00	; 0
  da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
  dc:	12 e0       	ldi	r17, 0x02	; 2
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b2 e0       	ldi	r27, 0x02	; 2
  e2:	ee ee       	ldi	r30, 0xEE	; 238
  e4:	f2 e0       	ldi	r31, 0x02	; 2
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	0b bf       	out	0x3b, r16	; 59
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
  ec:	07 90       	elpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	a0 30       	cpi	r26, 0x00	; 0
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
  f6:	23 e0       	ldi	r18, 0x03	; 3
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a0 34       	cpi	r26, 0x40	; 64
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	95 d0       	rcall	.+298    	; 0x232 <main>
 108:	f0 c0       	rjmp	.+480    	; 0x2ea <_exit>

0000010a <__bad_interrupt>:
 10a:	7a cf       	rjmp	.-268    	; 0x0 <__vectors>

0000010c <usart_getchar>:
 * \param usart The USART module.
 *
 * \return The received data.
 */
uint8_t usart_getchar(USART_t *usart)
{
 10c:	fc 01       	movw	r30, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t *usart)
{
	return (usart)->UCSRnA & USART_RXC_bm;
 10e:	90 81       	ld	r25, Z
	while (usart_rx_is_complete(usart) == false) {
 110:	99 23       	and	r25, r25
 112:	ec f7       	brge	.-6      	; 0x10e <usart_getchar+0x2>
	}

	return ((uint8_t)usart->UDR);
 114:	86 81       	ldd	r24, Z+6	; 0x06
}
 116:	08 95       	ret

00000118 <__vector_36>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	0b b6       	in	r0, 0x3b	; 59
 124:	0f 92       	push	r0
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	1f 92       	push	r1
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	be 01       	movw	r22, r28
 14e:	6f 5f       	subi	r22, 0xFF	; 255
 150:	7f 4f       	sbci	r23, 0xFF	; 255
 152:	88 ec       	ldi	r24, 0xC8	; 200
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	28 d0       	rcall	.+80     	; 0x1a8 <usart_serial_read_packet>
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
 158:	f8 94       	cli

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
 15a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 15e:	e8 2f       	mov	r30, r24
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	ef 5f       	subi	r30, 0xFF	; 255
 164:	fd 4f       	sbci	r31, 0xFD	; 253
 166:	99 81       	ldd	r25, Y+1	; 0x01
 168:	90 83       	st	Z, r25

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
 16a:	8b 39       	cpi	r24, 0x9B	; 155
 16c:	19 f4       	brne	.+6      	; 0x174 <__vector_36+0x5c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
 16e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 172:	03 c0       	rjmp	.+6      	; 0x17a <__vector_36+0x62>
	} else {
		serial_rx_buf_tail++;
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	}

	cpu_irq_enable();
 17a:	78 94       	sei
}
 17c:	0f 90       	pop	r0
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0b be       	out	0x3b, r0	; 59
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	7c 01       	movw	r14, r24
 1b6:	8b 01       	movw	r16, r22
 1b8:	ea 01       	movw	r28, r20
	while (len) {
 1ba:	20 97       	sbiw	r28, 0x00	; 0
 1bc:	39 f0       	breq	.+14     	; 0x1cc <usart_serial_read_packet+0x24>
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
 1be:	c7 01       	movw	r24, r14
 1c0:	a5 df       	rcall	.-182    	; 0x10c <usart_getchar>
 1c2:	f8 01       	movw	r30, r16
 1c4:	81 93       	st	Z+, r24
 1c6:	8f 01       	movw	r16, r30
		usart_serial_getchar(usart, data);
		len--;
 1c8:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
 1ca:	c9 f7       	brne	.-14     	; 0x1be <usart_serial_read_packet+0x16>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	08 95       	ret

000001dc <__vector_24>:
}
/*************************************************************************//**
	Interrupt handler for SPI data received
*****************************************************************************/

SPI_HOST_ISR_VECT(){
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	0b b6       	in	r0, 0x3b	; 59
 1e8:	0f 92       	push	r0
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
	uint8_t temp;

	temp = SPDR;
 1f2:	9e b5       	in	r25, 0x2e	; 46

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
 1f4:	f8 94       	cli

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	spi_rx_buf[spi_rx_buf_tail] = temp;
 1f6:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <spi_rx_buf_tail>
 1fa:	e8 2f       	mov	r30, r24
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	e2 56       	subi	r30, 0x62	; 98
 200:	fd 4f       	sbci	r31, 0xFD	; 253
 202:	90 83       	st	Z, r25

	if ((SPI_RX_BUF_SIZE_HOST - 1) == spi_rx_buf_tail) {
 204:	8b 39       	cpi	r24, 0x9B	; 155
 206:	19 f4       	brne	.+6      	; 0x20e <__vector_24+0x32>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		spi_rx_buf_tail = 0x00;
 208:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <spi_rx_buf_tail>
 20c:	03 c0       	rjmp	.+6      	; 0x214 <__vector_24+0x38>
	} else {
		spi_rx_buf_tail++;
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <spi_rx_buf_tail>
	}

	cpu_irq_enable();
 214:	78 94       	sei
	spi_buf_complete = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <spi_buf_complete>
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0b be       	out	0x3b, r0	; 59
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <main>:
uint8_t STATUS_byte = 0;
bool sample_ready;

int main (void)
{
	sample_ready = 0;
 232:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <sample_ready>
	while(!UCSR1A & USART_DRE_bm);
 236:	a8 ec       	ldi	r26, 0xC8	; 200
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	8c 91       	ld	r24, X
	UDR1 = HADCs;
 23c:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <HADCs>
 240:	ee ec       	ldi	r30, 0xCE	; 206
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 83       	st	Z, r24
	while(!UCSR1A & USART_DRE_bm);
 246:	8c 91       	ld	r24, X
	UDR1 = MADCs;
 248:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <MADCs>
 24c:	80 83       	st	Z, r24
	while(!UCSR1A & USART_DRE_bm);
 24e:	8c 91       	ld	r24, X
	UDR1 = LADCs;
 250:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <LADCs>
 254:	80 83       	st	Z, r24
	
	cpu_irq_disable();
 256:	f8 94       	cli
	/*Send don't care command to ADC to retrieve STATUS BYTE */
	PORTD &= ~ ( 1 << SS2 ); // Put Slave Select low to start transmission
 258:	5d 98       	cbi	0x0b, 5	; 11
	SPDR = DNT_CARE;
 25a:	80 e4       	ldi	r24, 0x40	; 64
 25c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){};
 25e:	0d b4       	in	r0, 0x2d	; 45
 260:	07 fe       	sbrs	r0, 7
 262:	fd cf       	rjmp	.-6      	; 0x25e <main+0x2c>
	STATUS_byte = SPDR;
 264:	8e b5       	in	r24, 0x2e	; 46
 266:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <STATUS_byte>
	PORTD |= ( 1 << SS2 );					  // SDO pin in the slave transmits its STATUS BYTE.
 26a:	5d 9a       	sbi	0x0b, 5	; 11
	if ( STATUS_byte == ADC_STAT_DR )         
 26c:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <STATUS_byte>
 270:	83 31       	cpi	r24, 0x13	; 19
 272:	b9 f5       	brne	.+110    	; 0x2e2 <main+0xb0>
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
 274:	80 e1       	ldi	r24, 0x10	; 16
 276:	83 b9       	out	0x03, r24	; 3
	{
		LED_Toggle(LED0);	 
		PORTD &= ~( 1 << SS2 );
 278:	5d 98       	cbi	0x0b, 5	; 11
		SPDR = R_ADC_SAMPLES;
 27a:	81 e4       	ldi	r24, 0x41	; 65
 27c:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF))){};
 27e:	0d b4       	in	r0, 0x2d	; 45
 280:	07 fe       	sbrs	r0, 7
 282:	fd cf       	rjmp	.-6      	; 0x27e <main+0x4c>
		STATUS_byte = SPDR;
 284:	8e b5       	in	r24, 0x2e	; 46
 286:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <STATUS_byte>
		SPDR = DNT_CARE;
 28a:	80 e4       	ldi	r24, 0x40	; 64
 28c:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF))){};
 28e:	0d b4       	in	r0, 0x2d	; 45
 290:	07 fe       	sbrs	r0, 7
 292:	fd cf       	rjmp	.-6      	; 0x28e <main+0x5c>
		HADCs = SPDR;
 294:	8e b5       	in	r24, 0x2e	; 46
 296:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <HADCs>
		SPDR = DNT_CARE;
 29a:	80 e4       	ldi	r24, 0x40	; 64
 29c:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF))){};
 29e:	0d b4       	in	r0, 0x2d	; 45
 2a0:	07 fe       	sbrs	r0, 7
 2a2:	fd cf       	rjmp	.-6      	; 0x29e <main+0x6c>
		MADCs = SPDR;
 2a4:	8e b5       	in	r24, 0x2e	; 46
 2a6:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <MADCs>
		SPDR = DNT_CARE;
 2aa:	80 e4       	ldi	r24, 0x40	; 64
 2ac:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF))){};
 2ae:	0d b4       	in	r0, 0x2d	; 45
 2b0:	07 fe       	sbrs	r0, 7
 2b2:	fd cf       	rjmp	.-6      	; 0x2ae <main+0x7c>
		LADCs = SPDR;
 2b4:	8e b5       	in	r24, 0x2e	; 46
 2b6:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <LADCs>
		PORTD |= ( 1 << SS2 );
 2ba:	5d 9a       	sbi	0x0b, 5	; 11
		while(!UCSR1A & USART_DRE_bm);
 2bc:	a8 ec       	ldi	r26, 0xC8	; 200
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	8c 91       	ld	r24, X
		UDR1 = HADCs;
 2c2:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <HADCs>
 2c6:	ee ec       	ldi	r30, 0xCE	; 206
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 83       	st	Z, r24
		while(!UCSR1A & USART_DRE_bm);
 2cc:	8c 91       	ld	r24, X
		UDR1 = MADCs;
 2ce:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <MADCs>
 2d2:	80 83       	st	Z, r24
		while(!UCSR1A & USART_DRE_bm);
 2d4:	8c 91       	ld	r24, X
		UDR1 = LADCs;
 2d6:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <LADCs>
 2da:	80 83       	st	Z, r24
		sample_ready = 1;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <sample_ready>

	}
	cpu_irq_enable();
 2e2:	78 94       	sei
}
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	08 95       	ret

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
