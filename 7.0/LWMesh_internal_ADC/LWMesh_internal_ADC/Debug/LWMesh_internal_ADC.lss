
LWMesh_internal_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00002c48  00002cdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ccf  00800206  00800206  00002ce2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002ce2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006d8  00000000  00000000  00002d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a130  00000000  00000000  0000342c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000405d  00000000  00000000  0000d55c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009191  00000000  00000000  000115b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015bc  00000000  00000000  0001a74c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001d15f  00000000  00000000  0001bd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000055f0  00000000  00000000  00038e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e0  00000000  00000000  0003e457  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000929f  00000000  00000000  0003eb37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b8 c0       	rjmp	.+368    	; 0x176 <__bad_interrupt>
       6:	00 00       	nop
       8:	b6 c0       	rjmp	.+364    	; 0x176 <__bad_interrupt>
       a:	00 00       	nop
       c:	b4 c0       	rjmp	.+360    	; 0x176 <__bad_interrupt>
       e:	00 00       	nop
      10:	b2 c0       	rjmp	.+356    	; 0x176 <__bad_interrupt>
      12:	00 00       	nop
      14:	b0 c0       	rjmp	.+352    	; 0x176 <__bad_interrupt>
      16:	00 00       	nop
      18:	ae c0       	rjmp	.+348    	; 0x176 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ac c0       	rjmp	.+344    	; 0x176 <__bad_interrupt>
      1e:	00 00       	nop
      20:	aa c0       	rjmp	.+340    	; 0x176 <__bad_interrupt>
      22:	00 00       	nop
      24:	a8 c0       	rjmp	.+336    	; 0x176 <__bad_interrupt>
      26:	00 00       	nop
      28:	a6 c0       	rjmp	.+332    	; 0x176 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a4 c0       	rjmp	.+328    	; 0x176 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a2 c0       	rjmp	.+324    	; 0x176 <__bad_interrupt>
      32:	00 00       	nop
      34:	a0 c0       	rjmp	.+320    	; 0x176 <__bad_interrupt>
      36:	00 00       	nop
      38:	9e c0       	rjmp	.+316    	; 0x176 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9c c0       	rjmp	.+312    	; 0x176 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9a c0       	rjmp	.+308    	; 0x176 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__vector_17>
      48:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__vector_18>
      4c:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__vector_19>
      50:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__vector_20>
      54:	90 c0       	rjmp	.+288    	; 0x176 <__bad_interrupt>
      56:	00 00       	nop
      58:	8e c0       	rjmp	.+284    	; 0x176 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8c c0       	rjmp	.+280    	; 0x176 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8a c0       	rjmp	.+276    	; 0x176 <__bad_interrupt>
      62:	00 00       	nop
      64:	88 c0       	rjmp	.+272    	; 0x176 <__bad_interrupt>
      66:	00 00       	nop
      68:	86 c0       	rjmp	.+268    	; 0x176 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	84 c0       	rjmp	.+264    	; 0x176 <__bad_interrupt>
      6e:	00 00       	nop
      70:	82 c0       	rjmp	.+260    	; 0x176 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <__vector_29>
      78:	7e c0       	rjmp	.+252    	; 0x176 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7c c0       	rjmp	.+248    	; 0x176 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__vector_32>
      84:	0c 94 38 10 	jmp	0x2070	; 0x2070 <__vector_33>
      88:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__vector_34>
      8c:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <__vector_35>
      90:	37 c2       	rjmp	.+1134   	; 0x500 <__vector_36>
      92:	00 00       	nop
      94:	70 c0       	rjmp	.+224    	; 0x176 <__bad_interrupt>
      96:	00 00       	nop
      98:	6e c0       	rjmp	.+220    	; 0x176 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6c c0       	rjmp	.+216    	; 0x176 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6a c0       	rjmp	.+212    	; 0x176 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	68 c0       	rjmp	.+208    	; 0x176 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__vector_42>
      ac:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__vector_43>
      b0:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__vector_44>
      b4:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__vector_45>
      b8:	5e c0       	rjmp	.+188    	; 0x176 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__vector_47>
      c0:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__vector_48>
      c4:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__vector_49>
      c8:	0c 94 46 11 	jmp	0x228c	; 0x228c <__vector_50>
      cc:	54 c0       	rjmp	.+168    	; 0x176 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	52 c0       	rjmp	.+164    	; 0x176 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	50 c0       	rjmp	.+160    	; 0x176 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4e c0       	rjmp	.+156    	; 0x176 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4c c0       	rjmp	.+152    	; 0x176 <__bad_interrupt>
      de:	00 00       	nop
      e0:	4a c0       	rjmp	.+148    	; 0x176 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	48 c0       	rjmp	.+144    	; 0x176 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	46 c0       	rjmp	.+140    	; 0x176 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	44 c0       	rjmp	.+136    	; 0x176 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	42 c0       	rjmp	.+132    	; 0x176 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	40 c0       	rjmp	.+128    	; 0x176 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3e c0       	rjmp	.+124    	; 0x176 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3c c0       	rjmp	.+120    	; 0x176 <__bad_interrupt>
      fe:	00 00       	nop
     100:	3a c0       	rjmp	.+116    	; 0x176 <__bad_interrupt>
     102:	00 00       	nop
     104:	38 c0       	rjmp	.+112    	; 0x176 <__bad_interrupt>
     106:	00 00       	nop
     108:	36 c0       	rjmp	.+108    	; 0x176 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	34 c0       	rjmp	.+104    	; 0x176 <__bad_interrupt>
     10e:	00 00       	nop
     110:	32 c0       	rjmp	.+100    	; 0x176 <__bad_interrupt>
     112:	00 00       	nop
     114:	30 c0       	rjmp	.+96     	; 0x176 <__bad_interrupt>
     116:	00 00       	nop
     118:	2e c0       	rjmp	.+92     	; 0x176 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2c c0       	rjmp	.+88     	; 0x176 <__bad_interrupt>
     11e:	00 00       	nop
     120:	2a c0       	rjmp	.+84     	; 0x176 <__bad_interrupt>
     122:	00 00       	nop
     124:	28 c0       	rjmp	.+80     	; 0x176 <__bad_interrupt>
     126:	00 00       	nop
     128:	26 c0       	rjmp	.+76     	; 0x176 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	24 c0       	rjmp	.+72     	; 0x176 <__bad_interrupt>
     12e:	00 00       	nop
     130:	22 c0       	rjmp	.+68     	; 0x176 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e8 e4       	ldi	r30, 0x48	; 72
     14c:	fc e2       	ldi	r31, 0x2C	; 44
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a6 30       	cpi	r26, 0x06	; 6
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2e e0       	ldi	r18, 0x0E	; 14
     160:	a6 e0       	ldi	r26, 0x06	; 6
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a5 3d       	cpi	r26, 0xD5	; 213
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <main>
     172:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <_exit>

00000176 <__bad_interrupt>:
     176:	44 cf       	rjmp	.-376    	; 0x0 <__vectors>

00000178 <common_tc_read_count>:
     178:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <tmr_read_count>
     17c:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <timer_mul_var>
     180:	22 23       	and	r18, r18
     182:	d9 f0       	breq	.+54     	; 0x1ba <common_tc_read_count+0x42>
     184:	40 91 d4 0e 	lds	r20, 0x0ED4	; 0x800ed4 <timer_multiplier>
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <timer_mul_var>
     18e:	64 2f       	mov	r22, r20
     190:	73 2f       	mov	r23, r19
     192:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <__udivmodhi4>
     196:	fb 01       	movw	r30, r22
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	9f ef       	ldi	r25, 0xFF	; 255
     19c:	64 2f       	mov	r22, r20
     19e:	73 2f       	mov	r23, r19
     1a0:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <__udivmodhi4>
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	62 9f       	mul	r22, r18
     1a8:	c0 01       	movw	r24, r0
     1aa:	63 9f       	mul	r22, r19
     1ac:	90 0d       	add	r25, r0
     1ae:	72 9f       	mul	r23, r18
     1b0:	90 0d       	add	r25, r0
     1b2:	11 24       	eor	r1, r1
     1b4:	8e 0f       	add	r24, r30
     1b6:	9f 1f       	adc	r25, r31
     1b8:	08 95       	ret
     1ba:	60 91 d4 0e 	lds	r22, 0x0ED4	; 0x800ed4 <timer_multiplier>
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <__udivmodhi4>
     1c4:	cb 01       	movw	r24, r22
     1c6:	08 95       	ret

000001c8 <common_tc_compare_stop>:
     1c8:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <tmr_disable_cc_interrupt>
     1cc:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <save_cpu_interrupt>
     1d0:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
     1d4:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__data_end+0x1>
     1d8:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__data_end+0x2>
     1dc:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__data_end+0x3>
     1e0:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <compare_value+0x1>
     1e4:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <compare_value>
     1e8:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <restore_cpu_interrupt>

000001ec <common_tc_overflow_stop>:
     1ec:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <tmr_disable_ovf_interrupt>
     1f0:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <timer_mul_var>
     1f4:	08 95       	ret

000001f6 <common_tc_stop>:
     1f6:	e8 df       	rcall	.-48     	; 0x1c8 <common_tc_compare_stop>
     1f8:	f9 df       	rcall	.-14     	; 0x1ec <common_tc_overflow_stop>
     1fa:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <tmr_stop>

000001fe <common_tc_delay>:
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	ec 01       	movw	r28, r24
     208:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <tmr_read_count>
     20c:	8c 01       	movw	r16, r24
     20e:	be 01       	movw	r22, r28
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	20 91 d4 0e 	lds	r18, 0x0ED4	; 0x800ed4 <timer_multiplier>
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	0e 94 44 15 	call	0x2a88	; 0x2a88 <__mulsi3>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	a8 01       	movw	r20, r16
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	48 0f       	add	r20, r24
     22e:	59 1f       	adc	r21, r25
     230:	6a 1f       	adc	r22, r26
     232:	7b 1f       	adc	r23, r27
     234:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <__data_end>
     238:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <__data_end+0x1>
     23c:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <__data_end+0x2>
     240:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <__data_end+0x3>
     244:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <__data_end>
     248:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <__data_end+0x1>
     24c:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <__data_end+0x2>
     250:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <__data_end+0x3>
     254:	ab 01       	movw	r20, r22
     256:	66 27       	eor	r22, r22
     258:	77 27       	eor	r23, r23
     25a:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <__data_end>
     25e:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <__data_end+0x1>
     262:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <__data_end+0x2>
     266:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <__data_end+0x3>
     26a:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <__data_end>
     26e:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <__data_end+0x1>
     272:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <__data_end+0x2>
     276:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <__data_end+0x3>
     27a:	41 15       	cp	r20, r1
     27c:	51 05       	cpc	r21, r1
     27e:	61 05       	cpc	r22, r1
     280:	71 05       	cpc	r23, r1
     282:	91 f0       	breq	.+36     	; 0x2a8 <common_tc_delay+0xaa>
     284:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <__data_end>
     288:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <__data_end+0x1>
     28c:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <__data_end+0x2>
     290:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <__data_end+0x3>
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	08 0f       	add	r16, r24
     298:	19 1f       	adc	r17, r25
     29a:	10 93 0c 02 	sts	0x020C, r17	; 0x80020c <compare_value+0x1>
     29e:	00 93 0b 02 	sts	0x020B, r16	; 0x80020b <compare_value>
     2a2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <tmr_disable_cc_interrupt>
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <common_tc_delay+0xba>
     2a8:	08 0f       	add	r16, r24
     2aa:	19 1f       	adc	r17, r25
     2ac:	10 93 0c 02 	sts	0x020C, r17	; 0x80020c <compare_value+0x1>
     2b0:	00 93 0b 02 	sts	0x020B, r16	; 0x80020b <compare_value>
     2b4:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <tmr_enable_cc_interrupt>
     2b8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <compare_value>
     2bc:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <compare_value+0x1>
     2c0:	84 36       	cpi	r24, 0x64	; 100
     2c2:	91 05       	cpc	r25, r1
     2c4:	30 f4       	brcc	.+12     	; 0x2d2 <common_tc_delay+0xd4>
     2c6:	8c 59       	subi	r24, 0x9C	; 156
     2c8:	9f 4f       	sbci	r25, 0xFF	; 255
     2ca:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <compare_value+0x1>
     2ce:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <compare_value>
     2d2:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <compare_value>
     2d6:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <compare_value+0x1>
     2da:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <tmr_write_cmpreg>
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	08 95       	ret

000002e8 <common_tc_init>:
     2e8:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <timer_mul_var>
     2ec:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <tmr_init>
     2f0:	80 93 d4 0e 	sts	0x0ED4, r24	; 0x800ed4 <timer_multiplier>
     2f4:	08 95       	ret

000002f6 <tmr_ovf_callback>:
     2f6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
     2fa:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
     2fe:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__data_end+0x2>
     302:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__data_end+0x3>
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	a1 05       	cpc	r26, r1
     30a:	b1 05       	cpc	r27, r1
     30c:	c9 f0       	breq	.+50     	; 0x340 <tmr_ovf_callback+0x4a>
     30e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
     312:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
     316:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__data_end+0x2>
     31a:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__data_end+0x3>
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	a1 09       	sbc	r26, r1
     322:	b1 09       	sbc	r27, r1
     324:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
     328:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x1>
     32c:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <__data_end+0x2>
     330:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <__data_end+0x3>
     334:	00 97       	sbiw	r24, 0x00	; 0
     336:	a1 05       	cpc	r26, r1
     338:	b1 05       	cpc	r27, r1
     33a:	11 f4       	brne	.+4      	; 0x340 <tmr_ovf_callback+0x4a>
     33c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <tmr_enable_cc_interrupt>
     340:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <timer_mul_var>
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <timer_mul_var>
     34a:	90 91 d4 0e 	lds	r25, 0x0ED4	; 0x800ed4 <timer_multiplier>
     34e:	89 17       	cp	r24, r25
     350:	48 f0       	brcs	.+18     	; 0x364 <tmr_ovf_callback+0x6e>
     352:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <timer_mul_var>
     356:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <common_tc_ovf_callback>
     35a:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <common_tc_ovf_callback+0x1>
     35e:	30 97       	sbiw	r30, 0x00	; 0
     360:	09 f0       	breq	.+2      	; 0x364 <tmr_ovf_callback+0x6e>
     362:	19 95       	eicall
     364:	08 95       	ret

00000366 <tmr_cca_callback>:
     366:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <tmr_disable_cc_interrupt>
     36a:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <common_tc_cca_callback>
     36e:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <common_tc_cca_callback+0x1>
     372:	30 97       	sbiw	r30, 0x00	; 0
     374:	09 f0       	breq	.+2      	; 0x378 <tmr_cca_callback+0x12>
     376:	19 95       	eicall
     378:	08 95       	ret

0000037a <set_common_tc_overflow_callback>:
     37a:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <common_tc_ovf_callback+0x1>
     37e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <common_tc_ovf_callback>
     382:	08 95       	ret

00000384 <set_common_tc_expiry_callback>:
     384:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <common_tc_cca_callback+0x1>
     388:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <common_tc_cca_callback>
     38c:	08 95       	ret

0000038e <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	1f 92       	push	r1
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     398:	8f ef       	ldi	r24, 0xFF	; 255
     39a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     39e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
     3a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
     3a6:	83 30       	cpi	r24, 0x03	; 3
     3a8:	69 f0       	breq	.+26     	; 0x3c4 <sysclk_init+0x36>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3aa:	8f b7       	in	r24, 0x3f	; 63
     3ac:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     3ae:	f8 94       	cli
	return flags;
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     3b2:	5f 93       	push	r21
     3b4:	50 e8       	ldi	r21, 0x80	; 128
     3b6:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     3ba:	53 e0       	ldi	r21, 0x03	; 3
     3bc:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     3c0:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3c2:	8f bf       	out	0x3f, r24	; 63
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     3c4:	0f 90       	pop	r0
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	1f 92       	push	r1
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3d6:	9f b7       	in	r25, 0x3f	; 63
     3d8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     3da:	f8 94       	cli
	return flags;
     3dc:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     3de:	82 30       	cpi	r24, 0x02	; 2
     3e0:	40 f4       	brcc	.+16     	; 0x3f2 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     3e2:	e8 2f       	mov	r30, r24
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	ec 59       	subi	r30, 0x9C	; 156
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	60 95       	com	r22
     3ec:	80 81       	ld	r24, Z
     3ee:	68 23       	and	r22, r24
     3f0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3f2:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     3f4:	0f 90       	pop	r0
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	1f 92       	push	r1
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     406:	9f b7       	in	r25, 0x3f	; 63
     408:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     40a:	f8 94       	cli
	return flags;
     40c:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     40e:	82 30       	cpi	r24, 0x02	; 2
     410:	38 f4       	brcc	.+14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		*(reg + port) |= id;
     412:	e8 2f       	mov	r30, r24
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	ec 59       	subi	r30, 0x9C	; 156
     418:	ff 4f       	sbci	r31, 0xFF	; 255
     41a:	80 81       	ld	r24, Z
     41c:	68 2b       	or	r22, r24
     41e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     420:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     422:	0f 90       	pop	r0
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
     42a:	ef 92       	push	r14
     42c:	ff 92       	push	r15
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	7c 01       	movw	r14, r24
     438:	8b 01       	movw	r16, r22
     43a:	ea 01       	movw	r28, r20
	while (len) {
     43c:	20 97       	sbiw	r28, 0x00	; 0
     43e:	39 f0       	breq	.+14     	; 0x44e <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     440:	f8 01       	movw	r30, r16
     442:	61 91       	ld	r22, Z+
     444:	8f 01       	movw	r16, r30
     446:	c7 01       	movw	r24, r14
     448:	29 d0       	rcall	.+82     	; 0x49c <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
     44a:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
     44c:	c9 f7       	brne	.-14     	; 0x440 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	08 95       	ret

0000045e <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	7c 01       	movw	r14, r24
     46c:	8b 01       	movw	r16, r22
     46e:	ea 01       	movw	r28, r20
	while (len) {
     470:	20 97       	sbiw	r28, 0x00	; 0
     472:	39 f0       	breq	.+14     	; 0x482 <usart_serial_read_packet+0x24>
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
     474:	c7 01       	movw	r24, r14
     476:	19 d0       	rcall	.+50     	; 0x4aa <usart_getchar>
     478:	f8 01       	movw	r30, r16
     47a:	81 93       	st	Z+, r24
     47c:	8f 01       	movw	r16, r30
		usart_serial_getchar(usart, data);
		len--;
     47e:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
     480:	c9 f7       	brne	.-14     	; 0x474 <usart_serial_read_packet+0x16>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	ff 90       	pop	r15
     48e:	ef 90       	pop	r14
     490:	08 95       	ret

00000492 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     492:	2c 9a       	sbi	0x05, 4	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     494:	24 9a       	sbi	0x04, 4	; 4
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     496:	6c 98       	cbi	0x0d, 4	; 13
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     498:	74 9a       	sbi	0x0e, 4	; 14
     49a:	08 95       	ret

0000049c <usart_putchar>:
 * \param c The data to send.
 *
 * \return STATUS_OK
 */
status_code_t usart_putchar(USART_t *usart, uint8_t c)
{
     49c:	fc 01       	movw	r30, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t *usart)
{
	return (usart)->UCSRnA & USART_DRE_bm;
     49e:	90 81       	ld	r25, Z
	while (usart_data_register_is_empty(usart) == false) {
     4a0:	95 ff       	sbrs	r25, 5
     4a2:	fd cf       	rjmp	.-6      	; 0x49e <usart_putchar+0x2>
	}

	usart->UDR = c;
     4a4:	66 83       	std	Z+6, r22	; 0x06
	return STATUS_OK;
}
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	08 95       	ret

000004aa <usart_getchar>:
 * \param usart The USART module.
 *
 * \return The received data.
 */
uint8_t usart_getchar(USART_t *usart)
{
     4aa:	fc 01       	movw	r30, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t *usart)
{
	return (usart)->UCSRnA & USART_RXC_bm;
     4ac:	90 81       	ld	r25, Z
	while (usart_rx_is_complete(usart) == false) {
     4ae:	99 23       	and	r25, r25
     4b0:	ec f7       	brge	.-6      	; 0x4ac <usart_getchar+0x2>
	}

	return ((uint8_t)usart->UDR);
     4b2:	86 81       	ldd	r24, Z+6	; 0x06
}
     4b4:	08 95       	ret

000004b6 <sio2host_tx>:
	if (back >= 1) {
		return c;
	} else {
		return (-1);
	}
}
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	8c 01       	movw	r16, r24
     4c2:	f6 2e       	mov	r15, r22
     4c4:	c6 2f       	mov	r28, r22
     4c6:	d0 e0       	ldi	r29, 0x00	; 0
     4c8:	ae 01       	movw	r20, r28
     4ca:	b8 01       	movw	r22, r16
     4cc:	88 ec       	ldi	r24, 0xC8	; 200
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	ac df       	rcall	.-168    	; 0x42a <usart_serial_write_packet>
     4d2:	81 11       	cpse	r24, r1
     4d4:	f9 cf       	rjmp	.-14     	; 0x4c8 <sio2host_tx+0x12>
     4d6:	8f 2d       	mov	r24, r15
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	ff 90       	pop	r15
     4e2:	08 95       	ret

000004e4 <sio2host_putchar>:
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	1f 92       	push	r1
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	89 83       	std	Y+1, r24	; 0x01
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	df df       	rcall	.-66     	; 0x4b6 <sio2host_tx>
     4f8:	0f 90       	pop	r0
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <__vector_36>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	0b b6       	in	r0, 0x3b	; 59
     50c:	0f 92       	push	r0
     50e:	2f 93       	push	r18
     510:	3f 93       	push	r19
     512:	4f 93       	push	r20
     514:	5f 93       	push	r21
     516:	6f 93       	push	r22
     518:	7f 93       	push	r23
     51a:	8f 93       	push	r24
     51c:	9f 93       	push	r25
     51e:	af 93       	push	r26
     520:	bf 93       	push	r27
     522:	ef 93       	push	r30
     524:	ff 93       	push	r31
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	1f 92       	push	r1
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
     530:	41 e0       	ldi	r20, 0x01	; 1
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	be 01       	movw	r22, r28
     536:	6f 5f       	subi	r22, 0xFF	; 255
     538:	7f 4f       	sbci	r23, 0xFF	; 255
     53a:	88 ec       	ldi	r24, 0xC8	; 200
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	8f df       	rcall	.-226    	; 0x45e <usart_serial_read_packet>
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     540:	f8 94       	cli

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
     542:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <serial_rx_buf_tail>
     546:	e8 2f       	mov	r30, r24
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	ee 5e       	subi	r30, 0xEE	; 238
     54c:	fd 4f       	sbci	r31, 0xFD	; 253
     54e:	99 81       	ldd	r25, Y+1	; 0x01
     550:	90 83       	st	Z, r25

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
     552:	8b 39       	cpi	r24, 0x9B	; 155
     554:	19 f4       	brne	.+6      	; 0x55c <__vector_36+0x5c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
     556:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <serial_rx_buf_tail>
     55a:	03 c0       	rjmp	.+6      	; 0x562 <__vector_36+0x62>
	} else {
		serial_rx_buf_tail++;
     55c:	8f 5f       	subi	r24, 0xFF	; 255
     55e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <serial_rx_buf_tail>
	}

	cpu_irq_enable();
     562:	78 94       	sei
}
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	ff 91       	pop	r31
     56c:	ef 91       	pop	r30
     56e:	bf 91       	pop	r27
     570:	af 91       	pop	r26
     572:	9f 91       	pop	r25
     574:	8f 91       	pop	r24
     576:	7f 91       	pop	r23
     578:	6f 91       	pop	r22
     57a:	5f 91       	pop	r21
     57c:	4f 91       	pop	r20
     57e:	3f 91       	pop	r19
     580:	2f 91       	pop	r18
     582:	0f 90       	pop	r0
     584:	0b be       	out	0x3b, r0	; 59
     586:	0f 90       	pop	r0
     588:	0f be       	out	0x3f, r0	; 63
     58a:	0f 90       	pop	r0
     58c:	1f 90       	pop	r1
     58e:	18 95       	reti

00000590 <NWK_Init>:

		cl += 25;
	}

	return 255;
}
     590:	ea e9       	ldi	r30, 0x9A	; 154
     592:	fe e0       	ldi	r31, 0x0E	; 14
     594:	14 82       	std	Z+4, r1	; 0x04
     596:	15 82       	std	Z+5, r1	; 0x05
     598:	11 82       	std	Z+1, r1	; 0x01
     59a:	10 82       	st	Z, r1
     59c:	17 aa       	std	Z+55, r1	; 0x37
     59e:	16 aa       	std	Z+54, r1	; 0x36
     5a0:	e0 ea       	ldi	r30, 0xA0	; 160
     5a2:	fe e0       	ldi	r31, 0x0E	; 14
     5a4:	80 ec       	ldi	r24, 0xC0	; 192
     5a6:	9e e0       	ldi	r25, 0x0E	; 14
     5a8:	11 92       	st	Z+, r1
     5aa:	11 92       	st	Z+, r1
     5ac:	e8 17       	cp	r30, r24
     5ae:	f9 07       	cpc	r31, r25
     5b0:	d9 f7       	brne	.-10     	; 0x5a8 <NWK_Init+0x18>
     5b2:	b2 d7       	rcall	.+3940   	; 0x1518 <nwkTxInit>
     5b4:	6a d3       	rcall	.+1748   	; 0xc8a <nwkRxInit>
     5b6:	18 d1       	rcall	.+560    	; 0x7e8 <nwkFrameInit>
     5b8:	43 d0       	rcall	.+134    	; 0x640 <nwkDataReqInit>
     5ba:	9b d1       	rcall	.+822    	; 0x8f2 <nwkRouteInit>
     5bc:	09 c6       	rjmp	.+3090   	; 0x11d0 <nwkSecurityInit>
     5be:	08 95       	ret

000005c0 <NWK_SetAddr>:
     5c0:	90 93 9b 0e 	sts	0x0E9B, r25	; 0x800e9b <nwkIb+0x1>
     5c4:	80 93 9a 0e 	sts	0x0E9A, r24	; 0x800e9a <nwkIb>
     5c8:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <PHY_SetShortAddr>
     5cc:	08 95       	ret

000005ce <NWK_SetPanId>:
     5ce:	90 93 9d 0e 	sts	0x0E9D, r25	; 0x800e9d <nwkIb+0x3>
     5d2:	80 93 9c 0e 	sts	0x0E9C, r24	; 0x800e9c <nwkIb+0x2>
     5d6:	0c 94 96 0c 	jmp	0x192c	; 0x192c <PHY_SetPanId>
     5da:	08 95       	ret

000005dc <NWK_OpenEndpoint>:
     5dc:	e8 2f       	mov	r30, r24
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	ee 0f       	add	r30, r30
     5e2:	ff 1f       	adc	r31, r31
     5e4:	e0 56       	subi	r30, 0x60	; 96
     5e6:	f1 4f       	sbci	r31, 0xF1	; 241
     5e8:	71 83       	std	Z+1, r23	; 0x01
     5ea:	60 83       	st	Z, r22
     5ec:	08 95       	ret

000005ee <NWK_TaskHandler>:
/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
	nwkRxTaskHandler();
     5ee:	9f d3       	rcall	.+1854   	; 0xd2e <nwkRxTaskHandler>
	nwkTxTaskHandler();
     5f0:	0e 94 95 0b 	call	0x172a	; 0x172a <nwkTxTaskHandler>
	nwkDataReqTaskHandler();
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
     5f4:	4e d0       	rcall	.+156    	; 0x692 <nwkDataReqTaskHandler>
     5f6:	43 c6       	rjmp	.+3206   	; 0x127e <nwkSecurityTaskHandler>
     5f8:	08 95       	ret

000005fa <nwkDataReqTxConf>:
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     5fa:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <nwkDataReqQueue>
     5fe:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <nwkDataReqQueue+0x1>
     602:	30 97       	sbiw	r30, 0x00	; 0
     604:	d9 f0       	breq	.+54     	; 0x63c <nwkDataReqTxConf+0x42>
		if (req->frame == frame) {
     606:	22 81       	ldd	r18, Z+2	; 0x02
     608:	33 81       	ldd	r19, Z+3	; 0x03
     60a:	82 17       	cp	r24, r18
     60c:	93 07       	cpc	r25, r19
     60e:	89 f4       	brne	.+34     	; 0x632 <nwkDataReqTxConf+0x38>
     610:	05 c0       	rjmp	.+10     	; 0x61c <nwkDataReqTxConf+0x22>
     612:	22 81       	ldd	r18, Z+2	; 0x02
     614:	33 81       	ldd	r19, Z+3	; 0x03
     616:	28 17       	cp	r18, r24
     618:	39 07       	cpc	r19, r25
     61a:	59 f4       	brne	.+22     	; 0x632 <nwkDataReqTxConf+0x38>
			req->status = frame->tx.status;
     61c:	dc 01       	movw	r26, r24
     61e:	ad 57       	subi	r26, 0x7D	; 125
     620:	bf 4f       	sbci	r27, 0xFF	; 255
     622:	2c 91       	ld	r18, X
     624:	27 87       	std	Z+15, r18	; 0x0f
			req->control = frame->tx.control;
     626:	13 96       	adiw	r26, 0x03	; 3
     628:	2c 91       	ld	r18, X
     62a:	20 8b       	std	Z+16, r18	; 0x10
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
     62c:	22 e0       	ldi	r18, 0x02	; 2
     62e:	24 83       	std	Z+4, r18	; 0x04
			break;
     630:	05 c0       	rjmp	.+10     	; 0x63c <nwkDataReqTxConf+0x42>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     632:	01 90       	ld	r0, Z+
     634:	f0 81       	ld	r31, Z
     636:	e0 2d       	mov	r30, r0
     638:	30 97       	sbiw	r30, 0x00	; 0
     63a:	59 f7       	brne	.-42     	; 0x612 <nwkDataReqTxConf+0x18>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
     63c:	17 c1       	rjmp	.+558    	; 0x86c <nwkFrameFree>
     63e:	08 95       	ret

00000640 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
     640:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <nwkDataReqQueue+0x1>
     644:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <nwkDataReqQueue>
     648:	08 95       	ret

0000064a <NWK_DataReq>:
/*************************************************************************//**
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     64a:	fc 01       	movw	r30, r24
	req->state = NWK_DATA_REQ_STATE_INITIAL;
     64c:	14 82       	std	Z+4, r1	; 0x04
	req->status = NWK_SUCCESS_STATUS;
     64e:	17 86       	std	Z+15, r1	; 0x0f
	req->frame = NULL;
     650:	13 82       	std	Z+3, r1	; 0x03
     652:	12 82       	std	Z+2, r1	; 0x02

	nwkIb.lock++;
     654:	aa e9       	ldi	r26, 0x9A	; 154
     656:	be e0       	ldi	r27, 0x0E	; 14
     658:	d6 96       	adiw	r26, 0x36	; 54
     65a:	8d 91       	ld	r24, X+
     65c:	9c 91       	ld	r25, X
     65e:	d7 97       	sbiw	r26, 0x37	; 55
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	d7 96       	adiw	r26, 0x37	; 55
     664:	9c 93       	st	X, r25
     666:	8e 93       	st	-X, r24
     668:	d6 97       	sbiw	r26, 0x36	; 54

	if (NULL == nwkDataReqQueue) {
     66a:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <nwkDataReqQueue>
     66e:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <nwkDataReqQueue+0x1>
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	39 f4       	brne	.+14     	; 0x684 <NWK_DataReq+0x3a>
		req->next = NULL;
     676:	11 82       	std	Z+1, r1	; 0x01
     678:	10 82       	st	Z, r1
		nwkDataReqQueue = req;
     67a:	f0 93 af 02 	sts	0x02AF, r31	; 0x8002af <nwkDataReqQueue+0x1>
     67e:	e0 93 ae 02 	sts	0x02AE, r30	; 0x8002ae <nwkDataReqQueue>
     682:	08 95       	ret
	} else {
		req->next = nwkDataReqQueue;
     684:	91 83       	std	Z+1, r25	; 0x01
     686:	80 83       	st	Z, r24
		nwkDataReqQueue = req;
     688:	f0 93 af 02 	sts	0x02AF, r31	; 0x8002af <nwkDataReqQueue+0x1>
     68c:	e0 93 ae 02 	sts	0x02AE, r30	; 0x8002ae <nwkDataReqQueue>
     690:	08 95       	ret

00000692 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     69a:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <nwkDataReqQueue>
     69e:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <nwkDataReqQueue+0x1>
     6a2:	30 97       	sbiw	r30, 0x00	; 0
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <nwkDataReqTaskHandler+0x16>
     6a6:	9b c0       	rjmp	.+310    	; 0x7de <nwkDataReqTaskHandler+0x14c>
     6a8:	ef 01       	movw	r28, r30
		switch (req->state) {
     6aa:	8c 81       	ldd	r24, Y+4	; 0x04
     6ac:	88 23       	and	r24, r24
     6ae:	21 f0       	breq	.+8      	; 0x6b8 <nwkDataReqTaskHandler+0x26>
     6b0:	82 30       	cpi	r24, 0x02	; 2
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <nwkDataReqTaskHandler+0x24>
     6b4:	6e c0       	rjmp	.+220    	; 0x792 <nwkDataReqTaskHandler+0x100>
     6b6:	8d c0       	rjmp	.+282    	; 0x7d2 <nwkDataReqTaskHandler+0x140>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
     6b8:	a2 d0       	rcall	.+324    	; 0x7fe <nwkFrameAlloc>
     6ba:	8c 01       	movw	r16, r24
     6bc:	00 97       	sbiw	r24, 0x00	; 0
     6be:	21 f4       	brne	.+8      	; 0x6c8 <nwkDataReqTaskHandler+0x36>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	8c 83       	std	Y+4, r24	; 0x04
		req->status = NWK_OUT_OF_MEMORY_STATUS;
     6c4:	8f 87       	std	Y+15, r24	; 0x0f
     6c6:	8b c0       	rjmp	.+278    	; 0x7de <nwkDataReqTaskHandler+0x14c>
		return;
	}

	req->frame = frame;
     6c8:	9b 83       	std	Y+3, r25	; 0x03
     6ca:	8a 83       	std	Y+2, r24	; 0x02
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	8c 83       	std	Y+4, r24	; 0x04

	frame->tx.confirm = nwkDataReqTxConf;
     6d0:	f8 01       	movw	r30, r16
     6d2:	e9 57       	subi	r30, 0x79	; 121
     6d4:	ff 4f       	sbci	r31, 0xFF	; 255
     6d6:	8d ef       	ldi	r24, 0xFD	; 253
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	91 83       	std	Z+1, r25	; 0x01
     6dc:	80 83       	st	Z, r24
	frame->tx.control = req->options &
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	89 85       	ldd	r24, Y+9	; 0x09
     6e2:	82 fb       	bst	r24, 2
     6e4:	88 27       	eor	r24, r24
     6e6:	80 f9       	bld	r24, 0
     6e8:	80 83       	st	Z, r24
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
     6ea:	99 85       	ldd	r25, Y+9	; 0x09
     6ec:	d8 01       	movw	r26, r16
     6ee:	1b 96       	adiw	r26, 0x0b	; 11
     6f0:	8c 91       	ld	r24, X
     6f2:	1b 97       	sbiw	r26, 0x0b	; 11
     6f4:	90 fb       	bst	r25, 0
     6f6:	80 f9       	bld	r24, 0
     6f8:	1b 96       	adiw	r26, 0x0b	; 11
     6fa:	8c 93       	st	X, r24
     6fc:	1b 97       	sbiw	r26, 0x0b	; 11
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
     6fe:	99 85       	ldd	r25, Y+9	; 0x09
     700:	93 fb       	bst	r25, 3
     702:	99 27       	eor	r25, r25
     704:	90 f9       	bld	r25, 0
     706:	90 fb       	bst	r25, 0
     708:	82 f9       	bld	r24, 2
     70a:	1b 96       	adiw	r26, 0x0b	; 11
     70c:	8c 93       	st	X, r24
     70e:	1b 97       	sbiw	r26, 0x0b	; 11
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
     710:	99 85       	ldd	r25, Y+9	; 0x09
     712:	96 95       	lsr	r25
     714:	91 70       	andi	r25, 0x01	; 1
     716:	90 fb       	bst	r25, 0
     718:	81 f9       	bld	r24, 1
     71a:	1b 96       	adiw	r26, 0x0b	; 11
     71c:	8c 93       	st	X, r24
     71e:	1b 97       	sbiw	r26, 0x0b	; 11
		frame->payload += sizeof(NwkFrameMulticastHeader_t);
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}
#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     720:	ea e9       	ldi	r30, 0x9A	; 154
     722:	fe e0       	ldi	r31, 0x0E	; 14
     724:	84 81       	ldd	r24, Z+4	; 0x04
     726:	8f 5f       	subi	r24, 0xFF	; 255
     728:	84 83       	std	Z+4, r24	; 0x04
     72a:	1c 96       	adiw	r26, 0x0c	; 12
     72c:	8c 93       	st	X, r24
     72e:	1c 97       	sbiw	r26, 0x0c	; 12
	frame->header.nwkSrcAddr = nwkIb.addr;
     730:	80 81       	ld	r24, Z
     732:	91 81       	ldd	r25, Z+1	; 0x01
     734:	1e 96       	adiw	r26, 0x0e	; 14
     736:	9c 93       	st	X, r25
     738:	8e 93       	st	-X, r24
     73a:	1d 97       	sbiw	r26, 0x0d	; 13
	frame->header.nwkDstAddr = req->dstAddr;
     73c:	8d 81       	ldd	r24, Y+5	; 0x05
     73e:	9e 81       	ldd	r25, Y+6	; 0x06
     740:	50 96       	adiw	r26, 0x10	; 16
     742:	9c 93       	st	X, r25
     744:	8e 93       	st	-X, r24
     746:	1f 97       	sbiw	r26, 0x0f	; 15
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
     748:	88 85       	ldd	r24, Y+8	; 0x08
     74a:	98 2f       	mov	r25, r24
     74c:	9f 70       	andi	r25, 0x0F	; 15
     74e:	51 96       	adiw	r26, 0x11	; 17
     750:	8c 91       	ld	r24, X
     752:	51 97       	sbiw	r26, 0x11	; 17
     754:	80 7f       	andi	r24, 0xF0	; 240
     756:	89 2b       	or	r24, r25
     758:	51 96       	adiw	r26, 0x11	; 17
     75a:	8c 93       	st	X, r24
     75c:	51 97       	sbiw	r26, 0x11	; 17
	frame->header.nwkDstEndpoint = req->dstEndpoint;
     75e:	9f 81       	ldd	r25, Y+7	; 0x07
     760:	92 95       	swap	r25
     762:	90 7f       	andi	r25, 0xF0	; 240
     764:	8f 70       	andi	r24, 0x0F	; 15
     766:	89 2b       	or	r24, r25
     768:	51 96       	adiw	r26, 0x11	; 17
     76a:	8c 93       	st	X, r24

	memcpy(frame->payload, req->data, req->size);
     76c:	f8 01       	movw	r30, r16
     76e:	ef 57       	subi	r30, 0x7F	; 127
     770:	ff 4f       	sbci	r31, 0xFF	; 255
     772:	4c 85       	ldd	r20, Y+12	; 0x0c
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	6a 85       	ldd	r22, Y+10	; 0x0a
     778:	7b 85       	ldd	r23, Y+11	; 0x0b
     77a:	80 81       	ld	r24, Z
     77c:	91 81       	ldd	r25, Z+1	; 0x01
     77e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <memcpy>
	frame->size += req->size;
     782:	f8 01       	movw	r30, r16
     784:	91 81       	ldd	r25, Z+1	; 0x01
     786:	8c 85       	ldd	r24, Y+12	; 0x0c
     788:	89 0f       	add	r24, r25
     78a:	81 83       	std	Z+1, r24	; 0x01

	nwkTxFrame(frame);
     78c:	c8 01       	movw	r24, r16
     78e:	e7 d6       	rcall	.+3534   	; 0x155e <nwkTxFrame>
     790:	26 c0       	rjmp	.+76     	; 0x7de <nwkDataReqTaskHandler+0x14c>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
     792:	ec 17       	cp	r30, r28
     794:	fd 07       	cpc	r31, r29
     796:	41 f4       	brne	.+16     	; 0x7a8 <nwkDataReqTaskHandler+0x116>
		nwkDataReqQueue = nwkDataReqQueue->next;
     798:	80 81       	ld	r24, Z
     79a:	91 81       	ldd	r25, Z+1	; 0x01
     79c:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <nwkDataReqQueue+0x1>
     7a0:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <nwkDataReqQueue>
     7a4:	0a c0       	rjmp	.+20     	; 0x7ba <nwkDataReqTaskHandler+0x128>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
			prev = prev->next;
     7a6:	fc 01       	movw	r30, r24
{
	if (nwkDataReqQueue == req) {
		nwkDataReqQueue = nwkDataReqQueue->next;
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
     7a8:	80 81       	ld	r24, Z
     7aa:	91 81       	ldd	r25, Z+1	; 0x01
     7ac:	8c 17       	cp	r24, r28
     7ae:	9d 07       	cpc	r25, r29
     7b0:	d1 f7       	brne	.-12     	; 0x7a6 <nwkDataReqTaskHandler+0x114>
			prev = prev->next;
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
     7b2:	88 81       	ld	r24, Y
     7b4:	99 81       	ldd	r25, Y+1	; 0x01
     7b6:	91 83       	std	Z+1, r25	; 0x01
     7b8:	80 83       	st	Z, r24
	}

	nwkIb.lock--;
     7ba:	ea e9       	ldi	r30, 0x9A	; 154
     7bc:	fe e0       	ldi	r31, 0x0E	; 14
     7be:	86 a9       	ldd	r24, Z+54	; 0x36
     7c0:	97 a9       	ldd	r25, Z+55	; 0x37
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	97 ab       	std	Z+55, r25	; 0x37
     7c6:	86 ab       	std	Z+54, r24	; 0x36
	req->confirm(req);
     7c8:	ed 85       	ldd	r30, Y+13	; 0x0d
     7ca:	fe 85       	ldd	r31, Y+14	; 0x0e
     7cc:	ce 01       	movw	r24, r28
     7ce:	19 95       	eicall
     7d0:	06 c0       	rjmp	.+12     	; 0x7de <nwkDataReqTaskHandler+0x14c>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     7d2:	09 90       	ld	r0, Y+
     7d4:	d8 81       	ld	r29, Y
     7d6:	c0 2d       	mov	r28, r0
     7d8:	20 97       	sbiw	r28, 0x00	; 0
     7da:	09 f0       	breq	.+2      	; 0x7de <nwkDataReqTaskHandler+0x14c>
     7dc:	66 cf       	rjmp	.-308    	; 0x6aa <nwkDataReqTaskHandler+0x18>

		default:
			break;
		}
	}
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	08 95       	ret

000007e8 <nwkFrameInit>:

/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     7e8:	e0 eb       	ldi	r30, 0xB0	; 176
     7ea:	f2 e0       	ldi	r31, 0x02	; 2
     7ec:	8a e0       	ldi	r24, 0x0A	; 10
     7ee:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     7f0:	10 82       	st	Z, r1
     7f2:	e7 57       	subi	r30, 0x77	; 119
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
     7f6:	e8 17       	cp	r30, r24
     7f8:	f9 07       	cpc	r31, r25
     7fa:	d1 f7       	brne	.-12     	; 0x7f0 <nwkFrameInit+0x8>
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
	}
}
     7fc:	08 95       	ret

000007fe <nwkFrameAlloc>:
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
     7fe:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <nwkFrameFrames>
     802:	88 23       	and	r24, r24
     804:	49 f0       	breq	.+18     	; 0x818 <nwkFrameAlloc+0x1a>
     806:	e9 e3       	ldi	r30, 0x39	; 57
     808:	f3 e0       	ldi	r31, 0x03	; 3
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	ac 01       	movw	r20, r24
     810:	20 81       	ld	r18, Z
     812:	21 11       	cpse	r18, r1
     814:	22 c0       	rjmp	.+68     	; 0x85a <nwkFrameAlloc+0x5c>
     816:	02 c0       	rjmp	.+4      	; 0x81c <nwkFrameAlloc+0x1e>
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	50 e0       	ldi	r21, 0x00	; 0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     81c:	69 e8       	ldi	r22, 0x89	; 137
     81e:	64 9f       	mul	r22, r20
     820:	90 01       	movw	r18, r0
     822:	65 9f       	mul	r22, r21
     824:	30 0d       	add	r19, r0
     826:	11 24       	eor	r1, r1
     828:	c9 01       	movw	r24, r18
     82a:	80 55       	subi	r24, 0x50	; 80
     82c:	9d 4f       	sbci	r25, 0xFD	; 253
     82e:	fc 01       	movw	r30, r24
     830:	11 92       	st	Z+, r1
     832:	6a 95       	dec	r22
     834:	e9 f7       	brne	.-6      	; 0x830 <nwkFrameAlloc+0x32>
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     836:	40 e1       	ldi	r20, 0x10	; 16
     838:	fc 01       	movw	r30, r24
     83a:	41 83       	std	Z+1, r20	; 0x01
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
     83c:	ef 57       	subi	r30, 0x7F	; 127
     83e:	ff 4f       	sbci	r31, 0xFF	; 255
     840:	2e 53       	subi	r18, 0x3E	; 62
     842:	3d 4f       	sbci	r19, 0xFD	; 253
     844:	31 83       	std	Z+1, r19	; 0x01
     846:	20 83       	st	Z, r18
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
     848:	ea e9       	ldi	r30, 0x9A	; 154
     84a:	fe e0       	ldi	r31, 0x0E	; 14
     84c:	26 a9       	ldd	r18, Z+54	; 0x36
     84e:	37 a9       	ldd	r19, Z+55	; 0x37
     850:	2f 5f       	subi	r18, 0xFF	; 255
     852:	3f 4f       	sbci	r19, 0xFF	; 255
     854:	37 ab       	std	Z+55, r19	; 0x37
     856:	26 ab       	std	Z+54, r18	; 0x36
			return &nwkFrameFrames[i];
     858:	08 95       	ret
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	e7 57       	subi	r30, 0x77	; 119
     85e:	ff 4f       	sbci	r31, 0xFF	; 255
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
     860:	8a 30       	cpi	r24, 0x0A	; 10
     862:	91 05       	cpc	r25, r1
     864:	a1 f6       	brne	.-88     	; 0x80e <nwkFrameAlloc+0x10>
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
}
     86a:	08 95       	ret

0000086c <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
     86c:	fc 01       	movw	r30, r24
     86e:	10 82       	st	Z, r1
	nwkIb.lock--;
     870:	ea e9       	ldi	r30, 0x9A	; 154
     872:	fe e0       	ldi	r31, 0x0E	; 14
     874:	86 a9       	ldd	r24, Z+54	; 0x36
     876:	97 a9       	ldd	r25, Z+55	; 0x37
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	97 ab       	std	Z+55, r25	; 0x37
     87c:	86 ab       	std	Z+54, r24	; 0x36
     87e:	08 95       	ret

00000880 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
     880:	00 97       	sbiw	r24, 0x00	; 0
     882:	41 f0       	breq	.+16     	; 0x894 <nwkFrameNext+0x14>
		frame = nwkFrameFrames;
	} else {
		frame++;
     884:	fc 01       	movw	r30, r24
     886:	e7 57       	subi	r30, 0x77	; 119
     888:	ff 4f       	sbci	r31, 0xFF	; 255
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     88a:	88 e0       	ldi	r24, 0x08	; 8
     88c:	ea 30       	cpi	r30, 0x0A	; 10
     88e:	f8 07       	cpc	r31, r24
     890:	18 f0       	brcs	.+6      	; 0x898 <nwkFrameNext+0x18>
     892:	12 c0       	rjmp	.+36     	; 0x8b8 <nwkFrameNext+0x38>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
     894:	e0 eb       	ldi	r30, 0xB0	; 176
     896:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
     898:	80 81       	ld	r24, Z
     89a:	88 23       	and	r24, r24
     89c:	21 f0       	breq	.+8      	; 0x8a6 <nwkFrameNext+0x26>
     89e:	0f c0       	rjmp	.+30     	; 0x8be <nwkFrameNext+0x3e>
     8a0:	80 81       	ld	r24, Z
     8a2:	81 11       	cpse	r24, r1
     8a4:	0f c0       	rjmp	.+30     	; 0x8c4 <nwkFrameNext+0x44>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     8a6:	e7 57       	subi	r30, 0x77	; 119
     8a8:	ff 4f       	sbci	r31, 0xFF	; 255
     8aa:	88 e0       	ldi	r24, 0x08	; 8
     8ac:	ea 30       	cpi	r30, 0x0A	; 10
     8ae:	f8 07       	cpc	r31, r24
     8b0:	b8 f3       	brcs	.-18     	; 0x8a0 <nwkFrameNext+0x20>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	08 95       	ret
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	08 95       	ret
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
     8be:	8e 2f       	mov	r24, r30
     8c0:	9f 2f       	mov	r25, r31
     8c2:	08 95       	ret
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     8c4:	8e 2f       	mov	r24, r30
     8c6:	9f 2f       	mov	r25, r31
			return frame;
		}
	}

	return NULL;
}
     8c8:	08 95       	ret

000008ca <nwkFrameCommandInit>:
/*************************************************************************//**
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     8ca:	fc 01       	movw	r30, r24
	frame->tx.status = NWK_SUCCESS_STATUS;
     8cc:	dc 01       	movw	r26, r24
     8ce:	ad 57       	subi	r26, 0x7D	; 125
     8d0:	bf 4f       	sbci	r27, 0xFF	; 255
     8d2:	1c 92       	st	X, r1
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     8d4:	aa e9       	ldi	r26, 0x9A	; 154
     8d6:	be e0       	ldi	r27, 0x0E	; 14
     8d8:	14 96       	adiw	r26, 0x04	; 4
     8da:	9c 91       	ld	r25, X
     8dc:	14 97       	sbiw	r26, 0x04	; 4
     8de:	9f 5f       	subi	r25, 0xFF	; 255
     8e0:	14 96       	adiw	r26, 0x04	; 4
     8e2:	9c 93       	st	X, r25
     8e4:	14 97       	sbiw	r26, 0x04	; 4
     8e6:	94 87       	std	Z+12, r25	; 0x0c
	frame->header.nwkSrcAddr = nwkIb.addr;
     8e8:	8d 91       	ld	r24, X+
     8ea:	9c 91       	ld	r25, X
     8ec:	96 87       	std	Z+14, r25	; 0x0e
     8ee:	85 87       	std	Z+13, r24	; 0x0d
     8f0:	08 95       	ret

000008f2 <nwkRouteInit>:
	entry->nextHopAddr = nextHop;
	entry->multicast = multicast;
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
	entry->lqi = lqi;
}
     8f2:	ab e0       	ldi	r26, 0x0B	; 11
     8f4:	b8 e0       	ldi	r27, 0x08	; 8
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	4f ef       	ldi	r20, 0xFF	; 255
     8fc:	5f ef       	ldi	r21, 0xFF	; 255
     8fe:	11 96       	adiw	r26, 0x01	; 1
     900:	5c 93       	st	X, r21
     902:	4e 93       	st	-X, r20
     904:	fc 01       	movw	r30, r24
     906:	ee 0f       	add	r30, r30
     908:	ff 1f       	adc	r31, r31
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	ee 0f       	add	r30, r30
     910:	ff 1f       	adc	r31, r31
     912:	e8 1b       	sub	r30, r24
     914:	f9 0b       	sbc	r31, r25
     916:	e6 5f       	subi	r30, 0xF6	; 246
     918:	f7 4f       	sbci	r31, 0xF7	; 247
     91a:	20 81       	ld	r18, Z
     91c:	2e 7f       	andi	r18, 0xFE	; 254
     91e:	20 83       	st	Z, r18
     920:	14 96       	adiw	r26, 0x04	; 4
     922:	1c 92       	st	X, r1
     924:	14 97       	sbiw	r26, 0x04	; 4
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	17 96       	adiw	r26, 0x07	; 7
     92a:	84 36       	cpi	r24, 0x64	; 100
     92c:	91 05       	cpc	r25, r1
     92e:	39 f7       	brne	.-50     	; 0x8fe <nwkRouteInit+0xc>
     930:	08 95       	ret

00000932 <NWK_RouteFindEntry>:
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	eb e0       	ldi	r30, 0x0B	; 11
     93c:	f8 e0       	ldi	r31, 0x08	; 8
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	06 2f       	mov	r16, r22
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	40 81       	ld	r20, Z
     948:	51 81       	ldd	r21, Z+1	; 0x01
     94a:	48 17       	cp	r20, r24
     94c:	59 07       	cpc	r21, r25
     94e:	b1 f4       	brne	.+44     	; 0x97c <NWK_RouteFindEntry+0x4a>
     950:	d9 01       	movw	r26, r18
     952:	aa 0f       	add	r26, r26
     954:	bb 1f       	adc	r27, r27
     956:	aa 0f       	add	r26, r26
     958:	bb 1f       	adc	r27, r27
     95a:	aa 0f       	add	r26, r26
     95c:	bb 1f       	adc	r27, r27
     95e:	a2 1b       	sub	r26, r18
     960:	b3 0b       	sbc	r27, r19
     962:	a6 5f       	subi	r26, 0xF6	; 246
     964:	b7 4f       	sbci	r27, 0xF7	; 247
     966:	4c 91       	ld	r20, X
     968:	46 95       	lsr	r20
     96a:	41 70       	andi	r20, 0x01	; 1
     96c:	c4 2f       	mov	r28, r20
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	d4 2f       	mov	r29, r20
     972:	c0 17       	cp	r28, r16
     974:	d1 07       	cpc	r29, r17
     976:	11 f4       	brne	.+4      	; 0x97c <NWK_RouteFindEntry+0x4a>
     978:	cd 01       	movw	r24, r26
     97a:	08 c0       	rjmp	.+16     	; 0x98c <NWK_RouteFindEntry+0x5a>
     97c:	2f 5f       	subi	r18, 0xFF	; 255
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	37 96       	adiw	r30, 0x07	; 7
     982:	24 36       	cpi	r18, 0x64	; 100
     984:	31 05       	cpc	r19, r1
     986:	f9 f6       	brne	.-66     	; 0x946 <NWK_RouteFindEntry+0x14>
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <NWK_RouteNewEntry>:
     996:	a0 e0       	ldi	r26, 0x00	; 0
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	ea e0       	ldi	r30, 0x0A	; 10
     99c:	f8 e0       	ldi	r31, 0x08	; 8
     99e:	80 81       	ld	r24, Z
     9a0:	80 fd       	sbrc	r24, 0
     9a2:	0d c0       	rjmp	.+26     	; 0x9be <NWK_RouteNewEntry+0x28>
     9a4:	85 81       	ldd	r24, Z+5	; 0x05
     9a6:	88 23       	and	r24, r24
     9a8:	81 f0       	breq	.+32     	; 0x9ca <NWK_RouteNewEntry+0x34>
     9aa:	10 97       	sbiw	r26, 0x00	; 0
     9ac:	39 f0       	breq	.+14     	; 0x9bc <NWK_RouteNewEntry+0x26>
     9ae:	15 96       	adiw	r26, 0x05	; 5
     9b0:	9c 91       	ld	r25, X
     9b2:	15 97       	sbiw	r26, 0x05	; 5
     9b4:	89 17       	cp	r24, r25
     9b6:	18 f4       	brcc	.+6      	; 0x9be <NWK_RouteNewEntry+0x28>
     9b8:	df 01       	movw	r26, r30
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <NWK_RouteNewEntry+0x28>
     9bc:	df 01       	movw	r26, r30
     9be:	37 96       	adiw	r30, 0x07	; 7
     9c0:	8a e0       	ldi	r24, 0x0A	; 10
     9c2:	e6 3c       	cpi	r30, 0xC6	; 198
     9c4:	f8 07       	cpc	r31, r24
     9c6:	59 f7       	brne	.-42     	; 0x99e <NWK_RouteNewEntry+0x8>
     9c8:	fd 01       	movw	r30, r26
     9ca:	80 81       	ld	r24, Z
     9cc:	8d 70       	andi	r24, 0x0D	; 13
     9ce:	80 63       	ori	r24, 0x30	; 48
     9d0:	80 83       	st	Z, r24
     9d2:	80 e8       	ldi	r24, 0x80	; 128
     9d4:	85 83       	std	Z+5, r24	; 0x05
     9d6:	cf 01       	movw	r24, r30
     9d8:	08 95       	ret

000009da <NWK_RouteFreeEntry>:
     9da:	fc 01       	movw	r30, r24
     9dc:	80 81       	ld	r24, Z
     9de:	80 fd       	sbrc	r24, 0
     9e0:	05 c0       	rjmp	.+10     	; 0x9ec <NWK_RouteFreeEntry+0x12>
     9e2:	8f ef       	ldi	r24, 0xFF	; 255
     9e4:	9f ef       	ldi	r25, 0xFF	; 255
     9e6:	92 83       	std	Z+2, r25	; 0x02
     9e8:	81 83       	std	Z+1, r24	; 0x01
     9ea:	15 82       	std	Z+5, r1	; 0x05
     9ec:	08 95       	ret

000009ee <NWK_RouteNextHop>:
     9ee:	a1 df       	rcall	.-190    	; 0x932 <NWK_RouteFindEntry>
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	21 f0       	breq	.+8      	; 0x9fc <NWK_RouteNextHop+0xe>
     9f4:	fc 01       	movw	r30, r24
     9f6:	83 81       	ldd	r24, Z+3	; 0x03
     9f8:	94 81       	ldd	r25, Z+4	; 0x04
     9fa:	08 95       	ret
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	9f ef       	ldi	r25, 0xFF	; 255
     a00:	08 95       	ret

00000a02 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
     a02:	97 df       	rcall	.-210    	; 0x932 <NWK_RouteFindEntry>
	if (entry) {
     a04:	00 97       	sbiw	r24, 0x00	; 0
		NWK_RouteFreeEntry(entry);
     a06:	09 f0       	breq	.+2      	; 0xa0a <nwkRouteRemove+0x8>
     a08:	e8 cf       	rjmp	.-48     	; 0x9da <NWK_RouteFreeEntry>
     a0a:	08 95       	ret

00000a0c <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     a16:	01 85       	ldd	r16, Z+9	; 0x09
     a18:	12 85       	ldd	r17, Z+10	; 0x0a
     a1a:	11 23       	and	r17, r17
     a1c:	2c f4       	brge	.+10     	; 0xa28 <nwkRouteFrameReceived+0x1c>
     a1e:	85 85       	ldd	r24, Z+13	; 0x0d
     a20:	96 85       	ldd	r25, Z+14	; 0x0e
     a22:	08 17       	cp	r16, r24
     a24:	19 07       	cpc	r17, r25
     a26:	e1 f5       	brne	.+120    	; 0xaa0 <nwkRouteFrameReceived+0x94>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
     a28:	85 81       	ldd	r24, Z+5	; 0x05
     a2a:	96 81       	ldd	r25, Z+6	; 0x06
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	c1 f1       	breq	.+112    	; 0xaa0 <nwkRouteFrameReceived+0x94>
     a30:	ef 01       	movw	r28, r30
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	85 85       	ldd	r24, Z+13	; 0x0d
     a36:	96 85       	ldd	r25, Z+14	; 0x0e
     a38:	7c df       	rcall	.-264    	; 0x932 <NWK_RouteFindEntry>
     a3a:	fc 01       	movw	r30, r24

	if (entry) {
     a3c:	89 2b       	or	r24, r25
     a3e:	a1 f0       	breq	.+40     	; 0xa68 <nwkRouteFrameReceived+0x5c>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     a40:	8f 81       	ldd	r24, Y+7	; 0x07
     a42:	98 85       	ldd	r25, Y+8	; 0x08
     a44:	01 96       	adiw	r24, 0x01	; 1
     a46:	f9 f4       	brne	.+62     	; 0xa86 <nwkRouteFrameReceived+0x7a>
     a48:	20 91 9a 0e 	lds	r18, 0x0E9A	; 0x800e9a <nwkIb>
     a4c:	30 91 9b 0e 	lds	r19, 0x0E9B	; 0x800e9b <nwkIb+0x1>
     a50:	8f 85       	ldd	r24, Y+15	; 0x0f
     a52:	98 89       	ldd	r25, Y+16	; 0x10
     a54:	28 17       	cp	r18, r24
     a56:	39 07       	cpc	r19, r25
     a58:	b1 f4       	brne	.+44     	; 0xa86 <nwkRouteFrameReceived+0x7a>
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
				entry->lqi) || discovery) {
			entry->nextHopAddr = header->macSrcAddr;
     a5a:	14 83       	std	Z+4, r17	; 0x04
     a5c:	03 83       	std	Z+3, r16	; 0x03
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
     a5e:	80 81       	ld	r24, Z
     a60:	8f 70       	andi	r24, 0x0F	; 15
     a62:	80 63       	ori	r24, 0x30	; 48
     a64:	80 83       	st	Z, r24
		}
	} else {
		entry = NWK_RouteNewEntry();
     a66:	0a c0       	rjmp	.+20     	; 0xa7c <nwkRouteFrameReceived+0x70>
     a68:	96 df       	rcall	.-212    	; 0x996 <NWK_RouteNewEntry>
     a6a:	fc 01       	movw	r30, r24

		entry->dstAddr = header->nwkSrcAddr;
     a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a70:	92 83       	std	Z+2, r25	; 0x02
     a72:	81 83       	std	Z+1, r24	; 0x01
		entry->nextHopAddr = header->macSrcAddr;
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	94 83       	std	Z+4, r25	; 0x04
     a7a:	83 83       	std	Z+3, r24	; 0x03
	}

	entry->lqi = frame->rx.lqi;
     a7c:	cd 57       	subi	r28, 0x7D	; 125
     a7e:	df 4f       	sbci	r29, 0xFF	; 255
     a80:	88 81       	ld	r24, Y
     a82:	86 83       	std	Z+6, r24	; 0x06
     a84:	0d c0       	rjmp	.+26     	; 0xaa0 <nwkRouteFrameReceived+0x94>

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
     a86:	83 81       	ldd	r24, Z+3	; 0x03
     a88:	94 81       	ldd	r25, Z+4	; 0x04
     a8a:	08 17       	cp	r16, r24
     a8c:	19 07       	cpc	r17, r25
     a8e:	b1 f3       	breq	.-20     	; 0xa7c <nwkRouteFrameReceived+0x70>
     a90:	96 81       	ldd	r25, Z+6	; 0x06
     a92:	de 01       	movw	r26, r28
     a94:	ad 57       	subi	r26, 0x7D	; 125
     a96:	bf 4f       	sbci	r27, 0xFF	; 255
     a98:	8c 91       	ld	r24, X
     a9a:	98 17       	cp	r25, r24
     a9c:	f0 f2       	brcs	.-68     	; 0xa5a <nwkRouteFrameReceived+0x4e>
     a9e:	ee cf       	rjmp	.-36     	; 0xa7c <nwkRouteFrameReceived+0x70>

	entry->lqi = frame->rx.lqi;
#else
	(void)frame;
#endif
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	08 95       	ret

00000aaa <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	fc 01       	movw	r30, r24
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
     ab0:	87 85       	ldd	r24, Z+15	; 0x0f
     ab2:	90 89       	ldd	r25, Z+16	; 0x10
     ab4:	8f 3f       	cpi	r24, 0xFF	; 255
     ab6:	2f ef       	ldi	r18, 0xFF	; 255
     ab8:	92 07       	cpc	r25, r18
     aba:	d9 f1       	breq	.+118    	; 0xb32 <nwkRouteFrameSent+0x88>
     abc:	ef 01       	movw	r28, r30
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
     abe:	63 85       	ldd	r22, Z+11	; 0x0b
     ac0:	63 fb       	bst	r22, 3
     ac2:	66 27       	eor	r22, r22
     ac4:	60 f9       	bld	r22, 0

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
     ac6:	35 df       	rcall	.-406    	; 0x932 <NWK_RouteFindEntry>
     ac8:	dc 01       	movw	r26, r24
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
     aca:	89 2b       	or	r24, r25
     acc:	91 f1       	breq	.+100    	; 0xb32 <nwkRouteFrameSent+0x88>
     ace:	8c 91       	ld	r24, X
     ad0:	80 fd       	sbrc	r24, 0
     ad2:	2f c0       	rjmp	.+94     	; 0xb32 <nwkRouteFrameSent+0x88>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
     ad4:	fe 01       	movw	r30, r28
     ad6:	ed 57       	subi	r30, 0x7D	; 125
     ad8:	ff 4f       	sbci	r31, 0xFF	; 255
     ada:	80 81       	ld	r24, Z
     adc:	81 11       	cpse	r24, r1
     ade:	19 c0       	rjmp	.+50     	; 0xb12 <nwkRouteFrameSent+0x68>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
     ae0:	8c 91       	ld	r24, X
     ae2:	8f 70       	andi	r24, 0x0F	; 15
     ae4:	80 63       	ori	r24, 0x30	; 48
     ae6:	8c 93       	st	X, r24

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
     ae8:	15 96       	adiw	r26, 0x05	; 5
     aea:	8c 91       	ld	r24, X
     aec:	15 97       	sbiw	r26, 0x05	; 5
     aee:	8f 5f       	subi	r24, 0xFF	; 255
     af0:	15 96       	adiw	r26, 0x05	; 5
     af2:	8c 93       	st	X, r24
     af4:	8f 3f       	cpi	r24, 0xFF	; 255
     af6:	e9 f4       	brne	.+58     	; 0xb32 <nwkRouteFrameSent+0x88>
     af8:	ef e0       	ldi	r30, 0x0F	; 15
     afa:	f8 e0       	ldi	r31, 0x08	; 8
     afc:	2b ec       	ldi	r18, 0xCB	; 203
     afe:	3a e0       	ldi	r19, 0x0A	; 10
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     b00:	80 81       	ld	r24, Z
     b02:	86 95       	lsr	r24
     b04:	8f 5f       	subi	r24, 0xFF	; 255
     b06:	80 83       	st	Z, r24
     b08:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
     b0a:	e2 17       	cp	r30, r18
     b0c:	f3 07       	cpc	r31, r19
     b0e:	c1 f7       	brne	.-16     	; 0xb00 <nwkRouteFrameSent+0x56>
     b10:	10 c0       	rjmp	.+32     	; 0xb32 <nwkRouteFrameSent+0x88>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
     b12:	9c 91       	ld	r25, X
     b14:	89 2f       	mov	r24, r25
     b16:	82 95       	swap	r24
     b18:	8f 70       	andi	r24, 0x0F	; 15
     b1a:	81 5f       	subi	r24, 0xF1	; 241
     b1c:	8f 70       	andi	r24, 0x0F	; 15
     b1e:	28 2f       	mov	r18, r24
     b20:	22 95       	swap	r18
     b22:	20 7f       	andi	r18, 0xF0	; 240
     b24:	9f 70       	andi	r25, 0x0F	; 15
     b26:	92 2b       	or	r25, r18
     b28:	9c 93       	st	X, r25
     b2a:	81 11       	cpse	r24, r1
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <nwkRouteFrameSent+0x88>
			NWK_RouteFreeEntry(entry);
     b2e:	cd 01       	movw	r24, r26
     b30:	54 df       	rcall	.-344    	; 0x9da <NWK_RouteFreeEntry>
		}
	}
}
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	fc 01       	movw	r30, r24
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
     b3e:	87 85       	ldd	r24, Z+15	; 0x0f
     b40:	90 89       	ldd	r25, Z+16	; 0x10
     b42:	8f 3f       	cpi	r24, 0xFF	; 255
     b44:	2f ef       	ldi	r18, 0xFF	; 255
     b46:	92 07       	cpc	r25, r18
     b48:	29 f4       	brne	.+10     	; 0xb54 <nwkRoutePrepareTx+0x1c>
		header->macDstAddr = NWK_BROADCAST_ADDR;
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	9f ef       	ldi	r25, 0xFF	; 255
     b4e:	90 87       	std	Z+8, r25	; 0x08
     b50:	87 83       	std	Z+7, r24	; 0x07
     b52:	0e c0       	rjmp	.+28     	; 0xb70 <nwkRoutePrepareTx+0x38>
	} else if (header->nwkFcf.linkLocal) {
     b54:	23 85       	ldd	r18, Z+11	; 0x0b
     b56:	22 ff       	sbrs	r18, 2
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
     b5a:	90 87       	std	Z+8, r25	; 0x08
     b5c:	87 83       	std	Z+7, r24	; 0x07
     b5e:	08 c0       	rjmp	.+16     	; 0xb70 <nwkRoutePrepareTx+0x38>
     b60:	ef 01       	movw	r28, r30
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
     b62:	63 85       	ldd	r22, Z+11	; 0x0b
     b64:	63 fb       	bst	r22, 3
     b66:	66 27       	eor	r22, r22
     b68:	60 f9       	bld	r22, 0
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
     b6a:	41 df       	rcall	.-382    	; 0x9ee <NWK_RouteNextHop>
     b6c:	98 87       	std	Y+8, r25	; 0x08
     b6e:	8f 83       	std	Y+7, r24	; 0x07
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
			nwkRouteDiscoveryRequest(frame);
		}
  #endif
	}
}
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     b76:	af 92       	push	r10
     b78:	bf 92       	push	r11
     b7a:	cf 92       	push	r12
     b7c:	df 92       	push	r13
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	ec 01       	movw	r28, r24
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
     b8a:	1b 85       	ldd	r17, Y+11	; 0x0b
     b8c:	13 fb       	bst	r17, 3
     b8e:	11 27       	eor	r17, r17
     b90:	10 f9       	bld	r17, 0
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
     b92:	cf 84       	ldd	r12, Y+15	; 0x0f
     b94:	d8 88       	ldd	r13, Y+16	; 0x10
     b96:	61 2f       	mov	r22, r17
     b98:	c6 01       	movw	r24, r12
     b9a:	29 df       	rcall	.-430    	; 0x9ee <NWK_RouteNextHop>
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	59 f0       	breq	.+22     	; 0xbb6 <nwkRouteFrame+0x40>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
     ba0:	fe 01       	movw	r30, r28
     ba2:	e9 57       	subi	r30, 0x79	; 121
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	11 82       	std	Z+1, r1	; 0x01
     ba8:	10 82       	st	Z, r1
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	80 83       	st	Z, r24
		nwkTxFrame(frame);
     bb0:	ce 01       	movw	r24, r28
     bb2:	d5 d4       	rcall	.+2474   	; 0x155e <nwkTxFrame>
     bb4:	22 c0       	rjmp	.+68     	; 0xbfa <nwkRouteFrame+0x84>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
     bb6:	ad 84       	ldd	r10, Y+13	; 0x0d
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
     bb8:	be 84       	ldd	r11, Y+14	; 0x0e
     bba:	21 de       	rcall	.-958    	; 0x7fe <nwkFrameAlloc>
     bbc:	7c 01       	movw	r14, r24
     bbe:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}

	nwkFrameCommandInit(frame);
     bc0:	d1 f0       	breq	.+52     	; 0xbf6 <nwkRouteFrame+0x80>
     bc2:	83 de       	rcall	.-762    	; 0x8ca <nwkFrameCommandInit>

	frame->size += sizeof(NwkCommandRouteError_t);
     bc4:	f7 01       	movw	r30, r14
     bc6:	81 81       	ldd	r24, Z+1	; 0x01
     bc8:	8a 5f       	subi	r24, 0xFA	; 250
     bca:	81 83       	std	Z+1, r24	; 0x01
	frame->tx.confirm = NULL;
     bcc:	e9 57       	subi	r30, 0x79	; 121
     bce:	ff 4f       	sbci	r31, 0xFF	; 255
     bd0:	11 82       	std	Z+1, r1	; 0x01
     bd2:	10 82       	st	Z, r1

	frame->header.nwkDstAddr = src;
     bd4:	f7 01       	movw	r30, r14
     bd6:	b0 8a       	std	Z+16, r11	; 0x10
     bd8:	a7 86       	std	Z+15, r10	; 0x0f

	command = (NwkCommandRouteError_t *)frame->payload;
     bda:	ef 57       	subi	r30, 0x7F	; 127
     bdc:	ff 4f       	sbci	r31, 0xFF	; 255
     bde:	01 90       	ld	r0, Z+
     be0:	f0 81       	ld	r31, Z
     be2:	e0 2d       	mov	r30, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 83       	st	Z, r24
	command->srcAddr = src;
     be8:	b2 82       	std	Z+2, r11	; 0x02
     bea:	a1 82       	std	Z+1, r10	; 0x01
	command->dstAddr = dst;
     bec:	d4 82       	std	Z+4, r13	; 0x04
	command->multicast = multicast;

	nwkTxFrame(frame);
     bee:	c3 82       	std	Z+3, r12	; 0x03
     bf0:	15 83       	std	Z+5, r17	; 0x05
     bf2:	c7 01       	movw	r24, r14
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
     bf4:	b4 d4       	rcall	.+2408   	; 0x155e <nwkTxFrame>
     bf6:	ce 01       	movw	r24, r28
     bf8:	39 de       	rcall	.-910    	; 0x86c <nwkFrameFree>
	}
}
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	df 90       	pop	r13
     c06:	cf 90       	pop	r12
     c08:	bf 90       	pop	r11
     c0a:	af 90       	pop	r10
     c0c:	08 95       	ret

00000c0e <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
     c0e:	fc 01       	movw	r30, r24
     c10:	21 85       	ldd	r18, Z+9	; 0x09
     c12:	26 30       	cpi	r18, 0x06	; 6
     c14:	49 f4       	brne	.+18     	; 0xc28 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     c16:	07 80       	ldd	r0, Z+7	; 0x07
     c18:	f0 85       	ldd	r31, Z+8	; 0x08
     c1a:	e0 2d       	mov	r30, r0

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
     c1c:	65 81       	ldd	r22, Z+5	; 0x05
     c1e:	83 81       	ldd	r24, Z+3	; 0x03
     c20:	94 81       	ldd	r25, Z+4	; 0x04
     c22:	ef de       	rcall	.-546    	; 0xa02 <nwkRouteRemove>

	return true;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
     c28:	80 e0       	ldi	r24, 0x00	; 0
	}

	nwkRouteRemove(command->dstAddr, command->multicast);

	return true;
}
     c2a:	08 95       	ret

00000c2c <nwkRxSeriveDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
	nwkRxAckControl = control;
     c2c:	dc 01       	movw	r26, r24
     c2e:	19 96       	adiw	r26, 0x09	; 9
     c30:	2c 91       	ld	r18, X
     c32:	19 97       	sbiw	r26, 0x09	; 9
     c34:	22 23       	and	r18, r18
     c36:	71 f0       	breq	.+28     	; 0xc54 <nwkRxSeriveDataInd+0x28>
     c38:	17 96       	adiw	r26, 0x07	; 7
     c3a:	ed 91       	ld	r30, X+
     c3c:	fc 91       	ld	r31, X
     c3e:	18 97       	sbiw	r26, 0x08	; 8
     c40:	20 81       	ld	r18, Z
     c42:	22 23       	and	r18, r18
     c44:	19 f0       	breq	.+6      	; 0xc4c <nwkRxSeriveDataInd+0x20>
     c46:	21 30       	cpi	r18, 0x01	; 1
     c48:	19 f0       	breq	.+6      	; 0xc50 <nwkRxSeriveDataInd+0x24>
     c4a:	06 c0       	rjmp	.+12     	; 0xc58 <nwkRxSeriveDataInd+0x2c>
     c4c:	22 c5       	rjmp	.+2628   	; 0x1692 <nwkTxAckReceived>
     c4e:	08 95       	ret
     c50:	de cf       	rjmp	.-68     	; 0xc0e <nwkRouteErrorReceived>
     c52:	08 95       	ret
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	08 95       	ret
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	08 95       	ret

00000c5c <nwkRxDuplicateRejectionTimerHandler>:
     c5c:	bc 01       	movw	r22, r24
     c5e:	e8 ed       	ldi	r30, 0xD8	; 216
     c60:	fa e0       	ldi	r31, 0x0A	; 10
     c62:	22 ed       	ldi	r18, 0xD2	; 210
     c64:	3b e0       	ldi	r19, 0x0B	; 11
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	51 e0       	ldi	r21, 0x01	; 1
     c6a:	90 81       	ld	r25, Z
     c6c:	99 23       	and	r25, r25
     c6e:	19 f0       	breq	.+6      	; 0xc76 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     c70:	91 50       	subi	r25, 0x01	; 1
     c72:	90 83       	st	Z, r25
     c74:	45 2f       	mov	r20, r21
     c76:	35 96       	adiw	r30, 0x05	; 5
     c78:	e2 17       	cp	r30, r18
     c7a:	f3 07       	cpc	r31, r19
     c7c:	b1 f7       	brne	.-20     	; 0xc6a <nwkRxDuplicateRejectionTimerHandler+0xe>
     c7e:	44 23       	and	r20, r20
     c80:	19 f0       	breq	.+6      	; 0xc88 <nwkRxDuplicateRejectionTimerHandler+0x2c>
     c82:	cb 01       	movw	r24, r22
     c84:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <SYS_TimerStart>
     c88:	08 95       	ret

00000c8a <nwkRxInit>:
     c8a:	e8 ed       	ldi	r30, 0xD8	; 216
     c8c:	fa e0       	ldi	r31, 0x0A	; 10
     c8e:	82 ed       	ldi	r24, 0xD2	; 210
     c90:	9b e0       	ldi	r25, 0x0B	; 11
     c92:	10 82       	st	Z, r1
     c94:	35 96       	adiw	r30, 0x05	; 5
     c96:	e8 17       	cp	r30, r24
     c98:	f9 07       	cpc	r31, r25
     c9a:	d9 f7       	brne	.-10     	; 0xc92 <nwkRxInit+0x8>
     c9c:	e6 ec       	ldi	r30, 0xC6	; 198
     c9e:	fa e0       	ldi	r31, 0x0A	; 10
     ca0:	84 e6       	ldi	r24, 0x64	; 100
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	a0 e0       	ldi	r26, 0x00	; 0
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	86 83       	std	Z+6, r24	; 0x06
     caa:	97 83       	std	Z+7, r25	; 0x07
     cac:	a0 87       	std	Z+8, r26	; 0x08
     cae:	b1 87       	std	Z+9, r27	; 0x09
     cb0:	12 86       	std	Z+10, r1	; 0x0a
     cb2:	8e e2       	ldi	r24, 0x2E	; 46
     cb4:	96 e0       	ldi	r25, 0x06	; 6
     cb6:	94 87       	std	Z+12, r25	; 0x0c
     cb8:	83 87       	std	Z+11, r24	; 0x0b
     cba:	66 e1       	ldi	r22, 0x16	; 22
     cbc:	76 e0       	ldi	r23, 0x06	; 6
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	8d cc       	rjmp	.-1766   	; 0x5dc <NWK_OpenEndpoint>
     cc2:	08 95       	ret

00000cc4 <PHY_DataInd>:
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	dc 01       	movw	r26, r24
     cca:	ed 91       	ld	r30, X+
     ccc:	fc 91       	ld	r31, X
     cce:	11 97       	sbiw	r26, 0x01	; 1
     cd0:	21 81       	ldd	r18, Z+1	; 0x01
     cd2:	28 38       	cpi	r18, 0x88	; 136
     cd4:	f9 f4       	brne	.+62     	; 0xd14 <PHY_DataInd+0x50>
     cd6:	20 81       	ld	r18, Z
     cd8:	2f 7d       	andi	r18, 0xDF	; 223
     cda:	21 34       	cpi	r18, 0x41	; 65
     cdc:	d9 f4       	brne	.+54     	; 0xd14 <PHY_DataInd+0x50>
     cde:	12 96       	adiw	r26, 0x02	; 2
     ce0:	2c 91       	ld	r18, X
     ce2:	20 31       	cpi	r18, 0x10	; 16
     ce4:	b8 f0       	brcs	.+46     	; 0xd14 <PHY_DataInd+0x50>
     ce6:	ec 01       	movw	r28, r24
     ce8:	8a dd       	rcall	.-1260   	; 0x7fe <nwkFrameAlloc>
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	99 f0       	breq	.+38     	; 0xd14 <PHY_DataInd+0x50>
     cee:	20 e2       	ldi	r18, 0x20	; 32
     cf0:	fc 01       	movw	r30, r24
     cf2:	20 83       	st	Z, r18
     cf4:	2a 81       	ldd	r18, Y+2	; 0x02
     cf6:	21 83       	std	Z+1, r18	; 0x01
     cf8:	2b 81       	ldd	r18, Y+3	; 0x03
     cfa:	ed 57       	subi	r30, 0x7D	; 125
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	20 83       	st	Z, r18
     d00:	2c 81       	ldd	r18, Y+4	; 0x04
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	20 83       	st	Z, r18
     d06:	4a 81       	ldd	r20, Y+2	; 0x02
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	68 81       	ld	r22, Y
     d0c:	79 81       	ldd	r23, Y+1	; 0x01
     d0e:	02 96       	adiw	r24, 0x02	; 2
     d10:	0e 94 f7 15 	call	0x2bee	; 0x2bee <memcpy>
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	08 95       	ret

00000d1a <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
     d1a:	66 23       	and	r22, r22
     d1c:	21 f0       	breq	.+8      	; 0xd26 <nwkRxDecryptConf+0xc>
		frame->state = NWK_RX_STATE_INDICATE;
     d1e:	22 e2       	ldi	r18, 0x22	; 34
     d20:	fc 01       	movw	r30, r24
     d22:	20 83       	st	Z, r18
     d24:	08 95       	ret
	} else {
		frame->state = NWK_RX_STATE_FINISH;
     d26:	24 e2       	ldi	r18, 0x24	; 36
     d28:	fc 01       	movw	r30, r24
     d2a:	20 83       	st	Z, r18
     d2c:	08 95       	ret

00000d2e <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     d2e:	2f 92       	push	r2
     d30:	3f 92       	push	r3
     d32:	4f 92       	push	r4
     d34:	5f 92       	push	r5
     d36:	6f 92       	push	r6
     d38:	7f 92       	push	r7
     d3a:	8f 92       	push	r8
     d3c:	9f 92       	push	r9
     d3e:	af 92       	push	r10
     d40:	bf 92       	push	r11
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	2c 97       	sbiw	r28, 0x0c	; 12
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
	NwkFrame_t *frame = NULL;
     d62:	00 e0       	ldi	r16, 0x00	; 0
     d64:	10 e0       	ldi	r17, 0x00	; 0

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
     d66:	0f 2e       	mov	r0, r31
     d68:	f4 e2       	ldi	r31, 0x24	; 36
     d6a:	bf 2e       	mov	r11, r31
     d6c:	f0 2d       	mov	r31, r0

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
     d6e:	0f 2e       	mov	r0, r31
     d70:	fa e9       	ldi	r31, 0x9A	; 154
     d72:	ef 2e       	mov	r14, r31
     d74:	fe e0       	ldi	r31, 0x0E	; 14
     d76:	ff 2e       	mov	r15, r31
     d78:	f0 2d       	mov	r31, r0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
     d7a:	44 24       	eor	r4, r4
     d7c:	43 94       	inc	r4
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
     d7e:	68 94       	set
     d80:	77 24       	eor	r7, r7
     d82:	74 f8       	bld	r7, 4
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
     d84:	68 94       	set
     d86:	66 24       	eor	r6, r6
     d88:	63 f8       	bld	r6, 3
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
     d8a:	68 94       	set
     d8c:	55 24       	eor	r5, r5
     d8e:	52 f8       	bld	r5, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     d90:	21 2c       	mov	r2, r1
     d92:	31 2c       	mov	r3, r1
	}

	freeEntry->src = header->nwkSrcAddr;
	freeEntry->seq = header->nwkSeq;
	freeEntry->mask = 1;
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     d94:	0f 2e       	mov	r0, r31
     d96:	ff e1       	ldi	r31, 0x1F	; 31
     d98:	af 2e       	mov	r10, r31
     d9a:	f0 2d       	mov	r31, r0
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
     d9c:	cc 24       	eor	r12, r12
     d9e:	c3 94       	inc	r12
     da0:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
     da2:	ef c1       	rjmp	.+990    	; 0x1182 <nwkRxTaskHandler+0x454>
		switch (frame->state) {
     da4:	d8 01       	movw	r26, r16
     da6:	8c 91       	ld	r24, X
     da8:	82 32       	cpi	r24, 0x22	; 34
     daa:	09 f4       	brne	.+2      	; 0xdae <nwkRxTaskHandler+0x80>
     dac:	1a c1       	rjmp	.+564    	; 0xfe2 <nwkRxTaskHandler+0x2b4>
     dae:	30 f4       	brcc	.+12     	; 0xdbc <nwkRxTaskHandler+0x8e>
     db0:	80 32       	cpi	r24, 0x20	; 32
     db2:	59 f0       	breq	.+22     	; 0xdca <nwkRxTaskHandler+0x9c>
     db4:	81 32       	cpi	r24, 0x21	; 33
     db6:	09 f4       	brne	.+2      	; 0xdba <nwkRxTaskHandler+0x8c>
     db8:	10 c1       	rjmp	.+544    	; 0xfda <nwkRxTaskHandler+0x2ac>
     dba:	e3 c1       	rjmp	.+966    	; 0x1182 <nwkRxTaskHandler+0x454>
     dbc:	83 32       	cpi	r24, 0x23	; 35
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <nwkRxTaskHandler+0x94>
     dc0:	db c1       	rjmp	.+950    	; 0x1178 <nwkRxTaskHandler+0x44a>
     dc2:	84 32       	cpi	r24, 0x24	; 36
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <nwkRxTaskHandler+0x9a>
     dc6:	db c1       	rjmp	.+950    	; 0x117e <nwkRxTaskHandler+0x450>
     dc8:	dc c1       	rjmp	.+952    	; 0x1182 <nwkRxTaskHandler+0x454>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
     dca:	f8 01       	movw	r30, r16
     dcc:	b0 82       	st	Z, r11
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
     dce:	83 85       	ldd	r24, Z+11	; 0x0b
     dd0:	83 fd       	sbrc	r24, 3
     dd2:	d7 c1       	rjmp	.+942    	; 0x1182 <nwkRxTaskHandler+0x454>
		return;
	}
#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
     dd4:	25 81       	ldd	r18, Z+5	; 0x05
     dd6:	36 81       	ldd	r19, Z+6	; 0x06
     dd8:	2f 3f       	cpi	r18, 0xFF	; 255
     dda:	3f 4f       	sbci	r19, 0xFF	; 255
     ddc:	c9 f4       	brne	.+50     	; 0xe10 <nwkRxTaskHandler+0xe2>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
     dde:	d8 01       	movw	r26, r16
     de0:	1f 96       	adiw	r26, 0x0f	; 15
     de2:	2d 91       	ld	r18, X+
     de4:	3c 91       	ld	r19, X
     de6:	50 97       	sbiw	r26, 0x10	; 16
     de8:	f7 01       	movw	r30, r14
     dea:	40 81       	ld	r20, Z
     dec:	51 81       	ldd	r21, Z+1	; 0x01
     dee:	42 17       	cp	r20, r18
     df0:	53 07       	cpc	r21, r19
     df2:	21 f0       	breq	.+8      	; 0xdfc <nwkRxTaskHandler+0xce>
     df4:	2f 3f       	cpi	r18, 0xFF	; 255
     df6:	3f 4f       	sbci	r19, 0xFF	; 255
     df8:	09 f0       	breq	.+2      	; 0xdfc <nwkRxTaskHandler+0xce>
     dfa:	c3 c1       	rjmp	.+902    	; 0x1182 <nwkRxTaskHandler+0x454>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
     dfc:	81 ff       	sbrs	r24, 1
     dfe:	04 c0       	rjmp	.+8      	; 0xe08 <nwkRxTaskHandler+0xda>
				frame->state = NWK_RX_STATE_DECRYPT;
     e00:	e1 e2       	ldi	r30, 0x21	; 33
     e02:	d8 01       	movw	r26, r16
     e04:	ec 93       	st	X, r30
     e06:	bd c1       	rjmp	.+890    	; 0x1182 <nwkRxTaskHandler+0x454>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
     e08:	e2 e2       	ldi	r30, 0x22	; 34
     e0a:	d8 01       	movw	r26, r16
     e0c:	ec 93       	st	X, r30
     e0e:	b9 c1       	rjmp	.+882    	; 0x1182 <nwkRxTaskHandler+0x454>
	if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi)) {
		return;
	}
#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
     e10:	d8 01       	movw	r26, r16
     e12:	1f 96       	adiw	r26, 0x0f	; 15
     e14:	2d 91       	ld	r18, X+
     e16:	3c 91       	ld	r19, X
     e18:	50 97       	sbiw	r26, 0x10	; 16
     e1a:	2f 3f       	cpi	r18, 0xFF	; 255
     e1c:	3f 4f       	sbci	r19, 0xFF	; 255
     e1e:	11 f4       	brne	.+4      	; 0xe24 <nwkRxTaskHandler+0xf6>
     e20:	80 fd       	sbrc	r24, 0
     e22:	af c1       	rjmp	.+862    	; 0x1182 <nwkRxTaskHandler+0x454>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
     e24:	f7 01       	movw	r30, r14
     e26:	20 81       	ld	r18, Z
     e28:	31 81       	ldd	r19, Z+1	; 0x01
     e2a:	d8 01       	movw	r26, r16
     e2c:	1d 96       	adiw	r26, 0x0d	; 13
     e2e:	8d 91       	ld	r24, X+
     e30:	9c 91       	ld	r25, X
     e32:	1e 97       	sbiw	r26, 0x0e	; 14
     e34:	28 17       	cp	r18, r24
     e36:	39 07       	cpc	r19, r25
     e38:	09 f4       	brne	.+2      	; 0xe3c <nwkRxTaskHandler+0x10e>
     e3a:	a3 c1       	rjmp	.+838    	; 0x1182 <nwkRxTaskHandler+0x454>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
     e3c:	c8 01       	movw	r24, r16
     e3e:	e6 dd       	rcall	.-1076   	; 0xa0c <nwkRouteFrameReceived>
     e40:	e4 ed       	ldi	r30, 0xD4	; 212
     e42:	fa e0       	ldi	r31, 0x0A	; 10
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     e48:	82 2c       	mov	r8, r2
     e4a:	93 2c       	mov	r9, r3

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
     e4c:	9c 01       	movw	r18, r24

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
     e4e:	44 81       	ldd	r20, Z+4	; 0x04
     e50:	44 23       	and	r20, r20
     e52:	09 f4       	brne	.+2      	; 0xe56 <nwkRxTaskHandler+0x128>
     e54:	74 c0       	rjmp	.+232    	; 0xf3e <nwkRxTaskHandler+0x210>
     e56:	d8 01       	movw	r26, r16
     e58:	1d 96       	adiw	r26, 0x0d	; 13
     e5a:	6d 91       	ld	r22, X+
     e5c:	7c 91       	ld	r23, X
     e5e:	1e 97       	sbiw	r26, 0x0e	; 14
     e60:	40 81       	ld	r20, Z
     e62:	51 81       	ldd	r21, Z+1	; 0x01
     e64:	64 17       	cp	r22, r20
     e66:	75 07       	cpc	r23, r21
     e68:	09 f0       	breq	.+2      	; 0xe6c <nwkRxTaskHandler+0x13e>
     e6a:	6a c0       	rjmp	.+212    	; 0xf40 <nwkRxTaskHandler+0x212>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     e6c:	1c 96       	adiw	r26, 0x0c	; 12
     e6e:	8c 91       	ld	r24, X
     e70:	1c 97       	sbiw	r26, 0x0c	; 12
     e72:	f9 01       	movw	r30, r18
     e74:	ee 0f       	add	r30, r30
     e76:	ff 1f       	adc	r31, r31
     e78:	ee 0f       	add	r30, r30
     e7a:	ff 1f       	adc	r31, r31
     e7c:	e2 0f       	add	r30, r18
     e7e:	f3 1f       	adc	r31, r19
     e80:	ec 52       	subi	r30, 0x2C	; 44
     e82:	f5 4f       	sbci	r31, 0xF5	; 245
     e84:	92 81       	ldd	r25, Z+2	; 0x02
     e86:	98 1b       	sub	r25, r24

			if (diff < 8) {
     e88:	98 30       	cpi	r25, 0x08	; 8
     e8a:	08 f0       	brcs	.+2      	; 0xe8e <nwkRxTaskHandler+0x160>
     e8c:	3e c0       	rjmp	.+124    	; 0xf0a <nwkRxTaskHandler+0x1dc>
				if (entry->mask & (1 << diff)) {
     e8e:	f9 01       	movw	r30, r18
     e90:	ee 0f       	add	r30, r30
     e92:	ff 1f       	adc	r31, r31
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	e2 0f       	add	r30, r18
     e9a:	f3 1f       	adc	r31, r19
     e9c:	ec 52       	subi	r30, 0x2C	; 44
     e9e:	f5 4f       	sbci	r31, 0xF5	; 245
     ea0:	83 81       	ldd	r24, Z+3	; 0x03
     ea2:	48 2f       	mov	r20, r24
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	09 2e       	mov	r0, r25
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <nwkRxTaskHandler+0x180>
     eaa:	55 95       	asr	r21
     eac:	47 95       	ror	r20
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <nwkRxTaskHandler+0x17c>
     eb2:	40 ff       	sbrs	r20, 0
     eb4:	17 c0       	rjmp	.+46     	; 0xee4 <nwkRxTaskHandler+0x1b6>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
     eb6:	f7 01       	movw	r30, r14
     eb8:	20 81       	ld	r18, Z
     eba:	31 81       	ldd	r19, Z+1	; 0x01
     ebc:	17 96       	adiw	r26, 0x07	; 7
     ebe:	8d 91       	ld	r24, X+
     ec0:	9c 91       	ld	r25, X
     ec2:	18 97       	sbiw	r26, 0x08	; 8
     ec4:	28 17       	cp	r18, r24
     ec6:	39 07       	cpc	r19, r25
     ec8:	09 f0       	breq	.+2      	; 0xecc <nwkRxTaskHandler+0x19e>
     eca:	5b c1       	rjmp	.+694    	; 0x1182 <nwkRxTaskHandler+0x454>
						nwkRouteRemove(
								header->nwkDstAddr,
								header->nwkFcf.multicast);
     ecc:	1b 96       	adiw	r26, 0x0b	; 11
     ece:	6c 91       	ld	r22, X
     ed0:	1b 97       	sbiw	r26, 0x0b	; 11
     ed2:	63 fb       	bst	r22, 3
     ed4:	66 27       	eor	r22, r22
     ed6:	60 f9       	bld	r22, 0

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
     ed8:	1f 96       	adiw	r26, 0x0f	; 15
     eda:	8d 91       	ld	r24, X+
     edc:	9c 91       	ld	r25, X
     ede:	50 97       	sbiw	r26, 0x10	; 16
     ee0:	90 dd       	rcall	.-1248   	; 0xa02 <nwkRouteRemove>
     ee2:	4f c1       	rjmp	.+670    	; 0x1182 <nwkRxTaskHandler+0x454>
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
     ee4:	f9 01       	movw	r30, r18
     ee6:	ee 0f       	add	r30, r30
     ee8:	ff 1f       	adc	r31, r31
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	2e 0f       	add	r18, r30
     ef0:	3f 1f       	adc	r19, r31
     ef2:	f9 01       	movw	r30, r18
     ef4:	ec 52       	subi	r30, 0x2C	; 44
     ef6:	f5 4f       	sbci	r31, 0xF5	; 245
     ef8:	96 01       	movw	r18, r12
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <nwkRxTaskHandler+0x1d2>
     efc:	22 0f       	add	r18, r18
     efe:	33 1f       	adc	r19, r19
     f00:	9a 95       	dec	r25
     f02:	e2 f7       	brpl	.-8      	; 0xefc <nwkRxTaskHandler+0x1ce>
     f04:	82 2b       	or	r24, r18
     f06:	83 83       	std	Z+3, r24	; 0x03
     f08:	43 c1       	rjmp	.+646    	; 0x1190 <nwkRxTaskHandler+0x462>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
     f0a:	f9 01       	movw	r30, r18
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	ee 0f       	add	r30, r30
     f12:	ff 1f       	adc	r31, r31
     f14:	2e 0f       	add	r18, r30
     f16:	3f 1f       	adc	r19, r31
     f18:	f9 01       	movw	r30, r18
     f1a:	ec 52       	subi	r30, 0x2C	; 44
     f1c:	f5 4f       	sbci	r31, 0xF5	; 245
     f1e:	82 83       	std	Z+2, r24	; 0x02
				entry->mask = (entry->mask << shift) | 1;
     f20:	83 81       	ldd	r24, Z+3	; 0x03
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	91 95       	neg	r25
     f28:	a9 01       	movw	r20, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <nwkRxTaskHandler+0x202>
     f2c:	44 0f       	add	r20, r20
     f2e:	55 1f       	adc	r21, r21
     f30:	9a 95       	dec	r25
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <nwkRxTaskHandler+0x1fe>
     f34:	ca 01       	movw	r24, r20
     f36:	81 60       	ori	r24, 0x01	; 1
     f38:	83 83       	std	Z+3, r24	; 0x03
				entry->ttl = DUPLICATE_REJECTION_TTL;
     f3a:	a4 82       	std	Z+4, r10	; 0x04
     f3c:	29 c1       	rjmp	.+594    	; 0x1190 <nwkRxTaskHandler+0x462>
				return false;
			}
		}

		if (0 == entry->ttl) {
			freeEntry = entry;
     f3e:	4f 01       	movw	r8, r30
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
     f44:	82 33       	cpi	r24, 0x32	; 50
     f46:	91 05       	cpc	r25, r1
     f48:	09 f0       	breq	.+2      	; 0xf4c <nwkRxTaskHandler+0x21e>
     f4a:	80 cf       	rjmp	.-256    	; 0xe4c <nwkRxTaskHandler+0x11e>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
     f4c:	81 14       	cp	r8, r1
     f4e:	91 04       	cpc	r9, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <nwkRxTaskHandler+0x226>
     f52:	17 c1       	rjmp	.+558    	; 0x1182 <nwkRxTaskHandler+0x454>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
     f54:	d8 01       	movw	r26, r16
     f56:	1d 96       	adiw	r26, 0x0d	; 13
     f58:	8d 91       	ld	r24, X+
     f5a:	9c 91       	ld	r25, X
     f5c:	1e 97       	sbiw	r26, 0x0e	; 14
     f5e:	f4 01       	movw	r30, r8
     f60:	91 83       	std	Z+1, r25	; 0x01
     f62:	80 83       	st	Z, r24
	freeEntry->seq = header->nwkSeq;
     f64:	1c 96       	adiw	r26, 0x0c	; 12
     f66:	8c 91       	ld	r24, X
     f68:	82 83       	std	Z+2, r24	; 0x02
	freeEntry->mask = 1;
     f6a:	43 82       	std	Z+3, r4	; 0x03
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     f6c:	a4 82       	std	Z+4, r10	; 0x04

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
     f6e:	86 ec       	ldi	r24, 0xC6	; 198
     f70:	9a e0       	ldi	r25, 0x0A	; 10
     f72:	9a d6       	rcall	.+3380   	; 0x1ca8 <SYS_TimerStart>
     f74:	0d c1       	rjmp	.+538    	; 0x1190 <nwkRxTaskHandler+0x462>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
     f76:	d7 01       	movw	r26, r14
     f78:	2d 91       	ld	r18, X+
     f7a:	3c 91       	ld	r19, X
				header->nwkDstAddr &&
     f7c:	f8 01       	movw	r30, r16
     f7e:	87 85       	ldd	r24, Z+15	; 0x0f
     f80:	90 89       	ldd	r25, Z+16	; 0x10
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
     f82:	28 17       	cp	r18, r24
     f84:	39 07       	cpc	r19, r25
     f86:	81 f0       	breq	.+32     	; 0xfa8 <nwkRxTaskHandler+0x27a>
				header->nwkDstAddr &&
     f88:	43 85       	ldd	r20, Z+11	; 0x0b
     f8a:	42 fd       	sbrc	r20, 2
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
     f8c:	0b c0       	rjmp	.+22     	; 0xfa4 <nwkRxTaskHandler+0x276>
     f8e:	c8 01       	movw	r24, r16
     f90:	3b d3       	rcall	.+1654   	; 0x1608 <nwkTxBroadcastFrame>
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
     f92:	d7 01       	movw	r26, r14
     f94:	2d 91       	ld	r18, X+
     f96:	3c 91       	ld	r19, X
     f98:	f8 01       	movw	r30, r16
     f9a:	87 85       	ldd	r24, Z+15	; 0x0f
     f9c:	90 89       	ldd	r25, Z+16	; 0x10
     f9e:	28 17       	cp	r18, r24
     fa0:	39 07       	cpc	r19, r25
     fa2:	11 f0       	breq	.+4      	; 0xfa8 <nwkRxTaskHandler+0x27a>
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	69 f4       	brne	.+26     	; 0xfc2 <nwkRxTaskHandler+0x294>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
     fa8:	d8 01       	movw	r26, r16
     faa:	1b 96       	adiw	r26, 0x0b	; 11
     fac:	8c 91       	ld	r24, X
     fae:	1b 97       	sbiw	r26, 0x0b	; 11
     fb0:	81 ff       	sbrs	r24, 1
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <nwkRxTaskHandler+0x28c>
				frame->state = NWK_RX_STATE_DECRYPT;
     fb4:	e1 e2       	ldi	r30, 0x21	; 33
     fb6:	ec 93       	st	X, r30
     fb8:	e4 c0       	rjmp	.+456    	; 0x1182 <nwkRxTaskHandler+0x454>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
     fba:	e2 e2       	ldi	r30, 0x22	; 34
     fbc:	d8 01       	movw	r26, r16
     fbe:	ec 93       	st	X, r30
     fc0:	e0 c0       	rjmp	.+448    	; 0x1182 <nwkRxTaskHandler+0x454>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
     fc2:	d8 01       	movw	r26, r16
     fc4:	17 96       	adiw	r26, 0x07	; 7
     fc6:	8d 91       	ld	r24, X+
     fc8:	9c 91       	ld	r25, X
     fca:	18 97       	sbiw	r26, 0x08	; 8
     fcc:	82 17       	cp	r24, r18
     fce:	93 07       	cpc	r25, r19
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <nwkRxTaskHandler+0x2a6>
     fd2:	d7 c0       	rjmp	.+430    	; 0x1182 <nwkRxTaskHandler+0x454>
			frame->state = NWK_RX_STATE_ROUTE;
     fd4:	e3 e2       	ldi	r30, 0x23	; 35
     fd6:	ec 93       	st	X, r30
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
     fd8:	d4 c0       	rjmp	.+424    	; 0x1182 <nwkRxTaskHandler+0x454>
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	c8 01       	movw	r24, r16
     fde:	ff d0       	rcall	.+510    	; 0x11de <nwkSecurityProcess>
		}
		break;
     fe0:	d0 c0       	rjmp	.+416    	; 0x1182 <nwkRxTaskHandler+0x454>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
     fe2:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
     fe6:	d8 01       	movw	r26, r16
     fe8:	51 96       	adiw	r26, 0x11	; 17
     fea:	8c 91       	ld	r24, X
     fec:	51 97       	sbiw	r26, 0x11	; 17
     fee:	82 95       	swap	r24
     ff0:	8f 70       	andi	r24, 0x0F	; 15
     ff2:	e8 2f       	mov	r30, r24
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	ee 0f       	add	r30, r30
     ff8:	ff 1f       	adc	r31, r31
     ffa:	e0 56       	subi	r30, 0x60	; 96
     ffc:	f1 4f       	sbci	r31, 0xF1	; 241
     ffe:	01 90       	ld	r0, Z+
    1000:	f0 81       	ld	r31, Z
    1002:	e0 2d       	mov	r30, r0
    1004:	30 97       	sbiw	r30, 0x00	; 0
    1006:	09 f4       	brne	.+2      	; 0x100a <nwkRxTaskHandler+0x2dc>
    1008:	60 c0       	rjmp	.+192    	; 0x10ca <nwkRxTaskHandler+0x39c>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    100a:	1d 96       	adiw	r26, 0x0d	; 13
    100c:	2d 91       	ld	r18, X+
    100e:	3c 91       	ld	r19, X
    1010:	1e 97       	sbiw	r26, 0x0e	; 14
    1012:	3a 83       	std	Y+2, r19	; 0x02
    1014:	29 83       	std	Y+1, r18	; 0x01
	ind.dstAddr = header->nwkDstAddr;
    1016:	1f 96       	adiw	r26, 0x0f	; 15
    1018:	4d 91       	ld	r20, X+
    101a:	5c 91       	ld	r21, X
    101c:	50 97       	sbiw	r26, 0x10	; 16
    101e:	5c 83       	std	Y+4, r21	; 0x04
    1020:	4b 83       	std	Y+3, r20	; 0x03
	ind.srcEndpoint = header->nwkSrcEndpoint;
    1022:	51 96       	adiw	r26, 0x11	; 17
    1024:	9c 91       	ld	r25, X
    1026:	51 97       	sbiw	r26, 0x11	; 17
    1028:	9f 70       	andi	r25, 0x0F	; 15
    102a:	9d 83       	std	Y+5, r25	; 0x05
	ind.dstEndpoint = header->nwkDstEndpoint;
    102c:	8e 83       	std	Y+6, r24	; 0x06
	ind.data = frame->payload;
    102e:	af 57       	subi	r26, 0x7F	; 127
    1030:	bf 4f       	sbci	r27, 0xFF	; 255
    1032:	8d 91       	ld	r24, X+
    1034:	9c 91       	ld	r25, X
    1036:	99 87       	std	Y+9, r25	; 0x09
    1038:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    103a:	b8 01       	movw	r22, r16
    103c:	6e 5f       	subi	r22, 0xFE	; 254
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
	ind.size = nwkFramePayloadSize(frame);
    1040:	86 1b       	sub	r24, r22
    1042:	97 0b       	sbc	r25, r23
    1044:	d8 01       	movw	r26, r16
    1046:	11 96       	adiw	r26, 0x01	; 1
    1048:	9c 91       	ld	r25, X
    104a:	11 97       	sbiw	r26, 0x01	; 1
    104c:	98 1b       	sub	r25, r24
    104e:	9a 87       	std	Y+10, r25	; 0x0a
	ind.lqi = frame->rx.lqi;
    1050:	ad 57       	subi	r26, 0x7D	; 125
    1052:	bf 4f       	sbci	r27, 0xFF	; 255
    1054:	8c 91       	ld	r24, X
    1056:	8b 87       	std	Y+11, r24	; 0x0b
	ind.rssi = frame->rx.rssi;
    1058:	11 96       	adiw	r26, 0x01	; 1
    105a:	8c 91       	ld	r24, X
    105c:	8c 87       	std	Y+12, r24	; 0x0c

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    105e:	d8 01       	movw	r26, r16
    1060:	1b 96       	adiw	r26, 0x0b	; 11
    1062:	9c 91       	ld	r25, X
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    1064:	69 2f       	mov	r22, r25
    1066:	63 70       	andi	r22, 0x03	; 3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1068:	92 fd       	sbrc	r25, 2
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <nwkRxTaskHandler+0x342>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <nwkRxTaskHandler+0x344>
    1070:	80 e2       	ldi	r24, 0x20	; 32
    1072:	86 2b       	or	r24, r22
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    1074:	93 fd       	sbrc	r25, 3
    1076:	02 c0       	rjmp	.+4      	; 0x107c <nwkRxTaskHandler+0x34e>
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	01 c0       	rjmp	.+2      	; 0x107e <nwkRxTaskHandler+0x350>
    107c:	90 e4       	ldi	r25, 0x40	; 64
    107e:	89 2b       	or	r24, r25
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    1080:	4f 3f       	cpi	r20, 0xFF	; 255
    1082:	5f 4f       	sbci	r21, 0xFF	; 255
    1084:	11 f0       	breq	.+4      	; 0x108a <nwkRxTaskHandler+0x35c>
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	01 c0       	rjmp	.+2      	; 0x108c <nwkRxTaskHandler+0x35e>
    108a:	95 2d       	mov	r25, r5
    108c:	89 2b       	or	r24, r25
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    108e:	d8 01       	movw	r26, r16
    1090:	19 96       	adiw	r26, 0x09	; 9
    1092:	4d 91       	ld	r20, X+
    1094:	5c 91       	ld	r21, X
    1096:	1a 97       	sbiw	r26, 0x0a	; 10
    1098:	24 17       	cp	r18, r20
    109a:	35 07       	cpc	r19, r21
    109c:	11 f0       	breq	.+4      	; 0x10a2 <nwkRxTaskHandler+0x374>
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <nwkRxTaskHandler+0x376>
    10a2:	96 2d       	mov	r25, r6
    10a4:	89 2b       	or	r24, r25
    10a6:	8f 83       	std	Y+7, r24	; 0x07
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    10a8:	d8 01       	movw	r26, r16
    10aa:	15 96       	adiw	r26, 0x05	; 5
    10ac:	2d 91       	ld	r18, X+
    10ae:	3c 91       	ld	r19, X
    10b0:	16 97       	sbiw	r26, 0x06	; 6
    10b2:	2f 3f       	cpi	r18, 0xFF	; 255
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    10b6:	11 f0       	breq	.+4      	; 0x10bc <nwkRxTaskHandler+0x38e>
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <nwkRxTaskHandler+0x390>
    10bc:	97 2d       	mov	r25, r7
    10be:	89 2b       	or	r24, r25
    10c0:	8f 83       	std	Y+7, r24	; 0x07
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    10c2:	ce 01       	movw	r24, r28
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	19 95       	eicall
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <nwkRxTaskHandler+0x39e>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    10ca:	80 e0       	ldi	r24, 0x00	; 0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    10cc:	f8 01       	movw	r30, r16
    10ce:	93 85       	ldd	r25, Z+11	; 0x0b
    10d0:	90 ff       	sbrs	r25, 0
		ack = false;
    10d2:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    10d4:	d8 01       	movw	r26, r16
    10d6:	17 96       	adiw	r26, 0x07	; 7
    10d8:	2d 91       	ld	r18, X+
    10da:	3c 91       	ld	r19, X
    10dc:	18 97       	sbiw	r26, 0x08	; 8
    10de:	2f 3f       	cpi	r18, 0xFF	; 255
    10e0:	3f 4f       	sbci	r19, 0xFF	; 255
    10e2:	69 f4       	brne	.+26     	; 0x10fe <nwkRxTaskHandler+0x3d0>
    10e4:	f7 01       	movw	r30, r14
    10e6:	40 81       	ld	r20, Z
    10e8:	51 81       	ldd	r21, Z+1	; 0x01
    10ea:	d8 01       	movw	r26, r16
    10ec:	1f 96       	adiw	r26, 0x0f	; 15
    10ee:	2d 91       	ld	r18, X+
    10f0:	3c 91       	ld	r19, X
    10f2:	50 97       	sbiw	r26, 0x10	; 16
    10f4:	42 17       	cp	r20, r18
    10f6:	53 07       	cpc	r21, r19
    10f8:	11 f4       	brne	.+4      	; 0x10fe <nwkRxTaskHandler+0x3d0>
			nwkIb.addr == frame->header.nwkDstAddr &&
    10fa:	93 ff       	sbrs	r25, 3
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    10fc:	84 2d       	mov	r24, r4
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    10fe:	f8 01       	movw	r30, r16
    1100:	25 81       	ldd	r18, Z+5	; 0x05
    1102:	36 81       	ldd	r19, Z+6	; 0x06
    1104:	2f 3f       	cpi	r18, 0xFF	; 255
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
    1108:	a1 f1       	breq	.+104    	; 0x1172 <nwkRxTaskHandler+0x444>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    110a:	d7 01       	movw	r26, r14
    110c:	2d 91       	ld	r18, X+
    110e:	3c 91       	ld	r19, X
    1110:	2f 3f       	cpi	r18, 0xFF	; 255
    1112:	3f 4f       	sbci	r19, 0xFF	; 255
		ack = false;
	}

	if (ack) {
    1114:	71 f1       	breq	.+92     	; 0x1172 <nwkRxTaskHandler+0x444>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    1116:	88 23       	and	r24, r24
    1118:	61 f1       	breq	.+88     	; 0x1172 <nwkRxTaskHandler+0x444>
    111a:	71 db       	rcall	.-2334   	; 0x7fe <nwkFrameAlloc>
    111c:	4c 01       	movw	r8, r24
    111e:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}

	nwkFrameCommandInit(ack);
    1120:	41 f1       	breq	.+80     	; 0x1172 <nwkRxTaskHandler+0x444>
    1122:	d3 db       	rcall	.-2138   	; 0x8ca <nwkFrameCommandInit>

	ack->size += sizeof(NwkCommandAck_t);
    1124:	f4 01       	movw	r30, r8
    1126:	81 81       	ldd	r24, Z+1	; 0x01
    1128:	8d 5f       	subi	r24, 0xFD	; 253
    112a:	81 83       	std	Z+1, r24	; 0x01
	ack->tx.confirm = NULL;
    112c:	e9 57       	subi	r30, 0x79	; 121
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	11 82       	std	Z+1, r1	; 0x01
    1132:	10 82       	st	Z, r1

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    1134:	d8 01       	movw	r26, r16
    1136:	1b 96       	adiw	r26, 0x0b	; 11
    1138:	8c 91       	ld	r24, X
    113a:	1b 97       	sbiw	r26, 0x0b	; 11
    113c:	86 95       	lsr	r24
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	f4 01       	movw	r30, r8
    1142:	93 85       	ldd	r25, Z+11	; 0x0b
    1144:	80 fb       	bst	r24, 0
    1146:	91 f9       	bld	r25, 1
    1148:	93 87       	std	Z+11, r25	; 0x0b
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    114a:	1d 96       	adiw	r26, 0x0d	; 13
    114c:	8d 91       	ld	r24, X+
    114e:	9c 91       	ld	r25, X
    1150:	1e 97       	sbiw	r26, 0x0e	; 14
    1152:	90 8b       	std	Z+16, r25	; 0x10
    1154:	87 87       	std	Z+15, r24	; 0x0f

	command = (NwkCommandAck_t *)ack->payload;
    1156:	ef 57       	subi	r30, 0x7F	; 127
    1158:	ff 4f       	sbci	r31, 0xFF	; 255
    115a:	01 90       	ld	r0, Z+
    115c:	f0 81       	ld	r31, Z
    115e:	e0 2d       	mov	r30, r0
	command->id = NWK_COMMAND_ACK;
    1160:	10 82       	st	Z, r1
	command->control = nwkRxAckControl;
    1162:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <nwkRxAckControl>
	command->seq = frame->header.nwkSeq;
    1166:	82 83       	std	Z+2, r24	; 0x02
    1168:	1c 96       	adiw	r26, 0x0c	; 12

	nwkTxFrame(ack);
    116a:	8c 91       	ld	r24, X
    116c:	81 83       	std	Z+1, r24	; 0x01

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    116e:	c4 01       	movw	r24, r8
    1170:	f6 d1       	rcall	.+1004   	; 0x155e <nwkTxFrame>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    1172:	d8 01       	movw	r26, r16
    1174:	bc 92       	st	X, r11
    1176:	05 c0       	rjmp	.+10     	; 0x1182 <nwkRxTaskHandler+0x454>
		}
		break;
    1178:	c8 01       	movw	r24, r16
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    117a:	fd dc       	rcall	.-1542   	; 0xb76 <nwkRouteFrame>
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <nwkRxTaskHandler+0x454>
    117e:	c8 01       	movw	r24, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1180:	75 db       	rcall	.-2326   	; 0x86c <nwkFrameFree>
    1182:	c8 01       	movw	r24, r16
    1184:	7d db       	rcall	.-2310   	; 0x880 <nwkFrameNext>
    1186:	8c 01       	movw	r16, r24
    1188:	89 2b       	or	r24, r25
    118a:	09 f0       	breq	.+2      	; 0x118e <nwkRxTaskHandler+0x460>
    118c:	0b ce       	rjmp	.-1002   	; 0xda4 <nwkRxTaskHandler+0x76>
    118e:	07 c0       	rjmp	.+14     	; 0x119e <nwkRxTaskHandler+0x470>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    1190:	f8 01       	movw	r30, r16
    1192:	87 81       	ldd	r24, Z+7	; 0x07
    1194:	90 85       	ldd	r25, Z+8	; 0x08
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	09 f0       	breq	.+2      	; 0x119c <nwkRxTaskHandler+0x46e>
    119a:	fb ce       	rjmp	.-522    	; 0xf92 <nwkRxTaskHandler+0x264>
    119c:	ec ce       	rjmp	.-552    	; 0xf76 <nwkRxTaskHandler+0x248>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    119e:	2c 96       	adiw	r28, 0x0c	; 12
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	ff 90       	pop	r15
    11b4:	ef 90       	pop	r14
    11b6:	df 90       	pop	r13
    11b8:	cf 90       	pop	r12
    11ba:	bf 90       	pop	r11
    11bc:	af 90       	pop	r10
    11be:	9f 90       	pop	r9
    11c0:	8f 90       	pop	r8
    11c2:	7f 90       	pop	r7
    11c4:	6f 90       	pop	r6
    11c6:	5f 90       	pop	r5
    11c8:	4f 90       	pop	r4
    11ca:	3f 90       	pop	r3
    11cc:	2f 90       	pop	r2
    11ce:	08 95       	ret

000011d0 <nwkSecurityInit>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    11d0:	10 92 e3 0b 	sts	0x0BE3, r1	; 0x800be3 <nwkSecurityActiveFrames>
    11d4:	10 92 e2 0b 	sts	0x0BE2, r1	; 0x800be2 <nwkSecurityActiveFrame+0x1>
    11d8:	10 92 e1 0b 	sts	0x0BE1, r1	; 0x800be1 <nwkSecurityActiveFrame>
    11dc:	08 95       	ret

000011de <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    11de:	66 23       	and	r22, r22
    11e0:	21 f0       	breq	.+8      	; 0x11ea <nwkSecurityProcess+0xc>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    11e2:	20 e3       	ldi	r18, 0x30	; 48
    11e4:	fc 01       	movw	r30, r24
    11e6:	20 83       	st	Z, r18
    11e8:	03 c0       	rjmp	.+6      	; 0x11f0 <nwkSecurityProcess+0x12>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    11ea:	21 e3       	ldi	r18, 0x31	; 49
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
	}

	++nwkSecurityActiveFrames;
    11f0:	80 91 e3 0b 	lds	r24, 0x0BE3	; 0x800be3 <nwkSecurityActiveFrames>
    11f4:	8f 5f       	subi	r24, 0xFF	; 255
    11f6:	80 93 e3 0b 	sts	0x0BE3, r24	; 0x800be3 <nwkSecurityActiveFrames>
    11fa:	08 95       	ret

000011fc <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    1200:	c0 91 e1 0b 	lds	r28, 0x0BE1	; 0x800be1 <nwkSecurityActiveFrame>
    1204:	d0 91 e2 0b 	lds	r29, 0x0BE2	; 0x800be2 <nwkSecurityActiveFrame+0x1>
    1208:	fe 01       	movw	r30, r28
    120a:	ef 57       	subi	r30, 0x7F	; 127
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	a0 81       	ld	r26, Z
    1210:	b1 81       	ldd	r27, Z+1	; 0x01
    1212:	70 91 df 0b 	lds	r23, 0x0BDF	; 0x800bdf <nwkSecurityOffset>
    1216:	87 2f       	mov	r24, r23
    1218:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t block;

	block
		= (nwkSecuritySize <
    121a:	50 91 e0 0b 	lds	r21, 0x0BE0	; 0x800be0 <nwkSecuritySize>
    121e:	65 2f       	mov	r22, r21
    1220:	51 31       	cpi	r21, 0x11	; 17
    1222:	08 f0       	brcs	.+2      	; 0x1226 <SYS_EncryptConf+0x2a>
    1224:	60 e1       	ldi	r22, 0x10	; 16
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    1226:	66 23       	and	r22, r22
    1228:	d1 f0       	breq	.+52     	; 0x125e <SYS_EncryptConf+0x62>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    122a:	40 91 de 0b 	lds	r20, 0x0BDE	; 0x800bde <nwkSecurityEncrypt>
    122e:	ee ec       	ldi	r30, 0xCE	; 206
    1230:	fb e0       	ldi	r31, 0x0B	; 11
    1232:	a8 0f       	add	r26, r24
    1234:	b9 1f       	adc	r27, r25
    1236:	2f ef       	ldi	r18, 0xFF	; 255
    1238:	26 0f       	add	r18, r22
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	21 53       	subi	r18, 0x31	; 49
    123e:	34 4f       	sbci	r19, 0xF4	; 244
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    1240:	9c 91       	ld	r25, X
    1242:	80 81       	ld	r24, Z
    1244:	89 27       	eor	r24, r25
    1246:	8d 93       	st	X+, r24

		if (nwkSecurityEncrypt) {
    1248:	44 23       	and	r20, r20
    124a:	11 f0       	breq	.+4      	; 0x1250 <SYS_EncryptConf+0x54>
			vector[i] = text[i];
    124c:	80 83       	st	Z, r24
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <SYS_EncryptConf+0x5a>
		} else {
			vector[i] ^= text[i];
    1250:	90 81       	ld	r25, Z
    1252:	89 27       	eor	r24, r25
    1254:	80 83       	st	Z, r24
    1256:	31 96       	adiw	r30, 0x01	; 1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    1258:	e2 17       	cp	r30, r18
    125a:	f3 07       	cpc	r31, r19
    125c:	89 f7       	brne	.-30     	; 0x1240 <SYS_EncryptConf+0x44>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    125e:	76 0f       	add	r23, r22
    1260:	70 93 df 0b 	sts	0x0BDF, r23	; 0x800bdf <nwkSecurityOffset>
	nwkSecuritySize -= block;
    1264:	56 1b       	sub	r21, r22
    1266:	50 93 e0 0b 	sts	0x0BE0, r21	; 0x800be0 <nwkSecuritySize>

	if (nwkSecuritySize > 0) {
    126a:	55 23       	and	r21, r21
    126c:	19 f0       	breq	.+6      	; 0x1274 <SYS_EncryptConf+0x78>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    126e:	82 e3       	ldi	r24, 0x32	; 50
    1270:	88 83       	st	Y, r24
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <SYS_EncryptConf+0x7c>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    1274:	84 e3       	ldi	r24, 0x34	; 52
    1276:	88 83       	st	Y, r24
	}
}
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	08 95       	ret

0000127e <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    1286:	80 91 e3 0b 	lds	r24, 0x0BE3	; 0x800be3 <nwkSecurityActiveFrames>
    128a:	88 23       	and	r24, r24
    128c:	09 f4       	brne	.+2      	; 0x1290 <nwkSecurityTaskHandler+0x12>
    128e:	e1 c0       	rjmp	.+450    	; 0x1452 <nwkSecurityTaskHandler+0x1d4>
		return;
	}

	if (nwkSecurityActiveFrame) {
    1290:	e0 91 e1 0b 	lds	r30, 0x0BE1	; 0x800be1 <nwkSecurityActiveFrame>
    1294:	f0 91 e2 0b 	lds	r31, 0x0BE2	; 0x800be2 <nwkSecurityActiveFrame+0x1>
    1298:	30 97       	sbiw	r30, 0x00	; 0
    129a:	09 f4       	brne	.+2      	; 0x129e <nwkSecurityTaskHandler+0x20>
    129c:	d4 c0       	rjmp	.+424    	; 0x1446 <nwkSecurityTaskHandler+0x1c8>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    129e:	80 81       	ld	r24, Z
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    12a0:	84 33       	cpi	r24, 0x34	; 52
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <nwkSecurityTaskHandler+0x28>
    12a4:	55 c0       	rjmp	.+170    	; 0x1350 <nwkSecurityTaskHandler+0xd2>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    12a6:	80 91 df 0b 	lds	r24, 0x0BDF	; 0x800bdf <nwkSecurityOffset>
    12aa:	df 01       	movw	r26, r30
    12ac:	af 57       	subi	r26, 0x7F	; 127
    12ae:	bf 4f       	sbci	r27, 0xFF	; 255
    12b0:	cd 91       	ld	r28, X+
    12b2:	dc 91       	ld	r29, X
    12b4:	c8 0f       	add	r28, r24
    12b6:	d1 1d       	adc	r29, r1
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    12b8:	ae ec       	ldi	r26, 0xCE	; 206
    12ba:	bb e0       	ldi	r27, 0x0B	; 11
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    12bc:	0d 91       	ld	r16, X+
    12be:	1d 91       	ld	r17, X+
    12c0:	2d 91       	ld	r18, X+
    12c2:	3c 91       	ld	r19, X
    12c4:	13 97       	sbiw	r26, 0x03	; 3
    12c6:	14 96       	adiw	r26, 0x04	; 4
    12c8:	4d 91       	ld	r20, X+
    12ca:	5d 91       	ld	r21, X+
    12cc:	6d 91       	ld	r22, X+
    12ce:	7c 91       	ld	r23, X
    12d0:	17 97       	sbiw	r26, 0x07	; 7
    12d2:	04 27       	eor	r16, r20
    12d4:	15 27       	eor	r17, r21
    12d6:	26 27       	eor	r18, r22
    12d8:	37 27       	eor	r19, r23
    12da:	18 96       	adiw	r26, 0x08	; 8
    12dc:	4d 91       	ld	r20, X+
    12de:	5d 91       	ld	r21, X+
    12e0:	6d 91       	ld	r22, X+
    12e2:	7c 91       	ld	r23, X
    12e4:	1b 97       	sbiw	r26, 0x0b	; 11
    12e6:	04 27       	eor	r16, r20
    12e8:	15 27       	eor	r17, r21
    12ea:	26 27       	eor	r18, r22
    12ec:	37 27       	eor	r19, r23
    12ee:	1c 96       	adiw	r26, 0x0c	; 12
    12f0:	4d 91       	ld	r20, X+
    12f2:	5d 91       	ld	r21, X+
    12f4:	6d 91       	ld	r22, X+
    12f6:	7c 91       	ld	r23, X
    12f8:	1f 97       	sbiw	r26, 0x0f	; 15
    12fa:	d9 01       	movw	r26, r18
    12fc:	c8 01       	movw	r24, r16
    12fe:	84 27       	eor	r24, r20
    1300:	95 27       	eor	r25, r21
    1302:	a6 27       	eor	r26, r22
    1304:	b7 27       	eor	r27, r23
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    1306:	20 91 de 0b 	lds	r18, 0x0BDE	; 0x800bde <nwkSecurityEncrypt>
    130a:	22 23       	and	r18, r18
    130c:	51 f0       	breq	.+20     	; 0x1322 <nwkSecurityTaskHandler+0xa4>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    130e:	88 83       	st	Y, r24
    1310:	99 83       	std	Y+1, r25	; 0x01
    1312:	aa 83       	std	Y+2, r26	; 0x02
    1314:	bb 83       	std	Y+3, r27	; 0x03
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    1316:	81 81       	ldd	r24, Z+1	; 0x01
    1318:	8c 5f       	subi	r24, 0xFC	; 252
    131a:	81 83       	std	Z+1, r24	; 0x01
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    131c:	cf 01       	movw	r24, r30
    131e:	de d1       	rcall	.+956    	; 0x16dc <nwkTxEncryptConf>
    1320:	0d c0       	rjmp	.+26     	; 0x133c <nwkSecurityTaskHandler+0xbe>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    1322:	61 e0       	ldi	r22, 0x01	; 1
    1324:	08 81       	ld	r16, Y
    1326:	19 81       	ldd	r17, Y+1	; 0x01
    1328:	2a 81       	ldd	r18, Y+2	; 0x02
    132a:	3b 81       	ldd	r19, Y+3	; 0x03
    132c:	08 17       	cp	r16, r24
    132e:	19 07       	cpc	r17, r25
    1330:	2a 07       	cpc	r18, r26
    1332:	3b 07       	cpc	r19, r27
    1334:	09 f0       	breq	.+2      	; 0x1338 <nwkSecurityTaskHandler+0xba>
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	cf 01       	movw	r24, r30
    133a:	ef dc       	rcall	.-1570   	; 0xd1a <nwkRxDecryptConf>
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    133c:	10 92 e2 0b 	sts	0x0BE2, r1	; 0x800be2 <nwkSecurityActiveFrame+0x1>
    1340:	10 92 e1 0b 	sts	0x0BE1, r1	; 0x800be1 <nwkSecurityActiveFrame>
			--nwkSecurityActiveFrames;
    1344:	80 91 e3 0b 	lds	r24, 0x0BE3	; 0x800be3 <nwkSecurityActiveFrames>
    1348:	81 50       	subi	r24, 0x01	; 1
    134a:	80 93 e3 0b 	sts	0x0BE3, r24	; 0x800be3 <nwkSecurityActiveFrames>
    134e:	81 c0       	rjmp	.+258    	; 0x1452 <nwkSecurityTaskHandler+0x1d4>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    1350:	82 33       	cpi	r24, 0x32	; 50
    1352:	09 f0       	breq	.+2      	; 0x1356 <nwkSecurityTaskHandler+0xd8>
    1354:	7e c0       	rjmp	.+252    	; 0x1452 <nwkSecurityTaskHandler+0x1d4>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    1356:	83 e3       	ldi	r24, 0x33	; 51
    1358:	80 83       	st	Z, r24
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    135a:	60 ec       	ldi	r22, 0xC0	; 192
    135c:	7e e0       	ldi	r23, 0x0E	; 14
    135e:	8e ec       	ldi	r24, 0xCE	; 206
    1360:	9b e0       	ldi	r25, 0x0B	; 11
    1362:	c9 d3       	rcall	.+1938   	; 0x1af6 <SYS_EncryptReq>
    1364:	76 c0       	rjmp	.+236    	; 0x1452 <nwkSecurityTaskHandler+0x1d4>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    1366:	dc 01       	movw	r26, r24
    1368:	2c 91       	ld	r18, X
    136a:	20 53       	subi	r18, 0x30	; 48
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	08 f0       	brcs	.+2      	; 0x1372 <nwkSecurityTaskHandler+0xf4>
    1370:	6c c0       	rjmp	.+216    	; 0x144a <nwkSecurityTaskHandler+0x1cc>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    1372:	90 93 e2 0b 	sts	0x0BE2, r25	; 0x800be2 <nwkSecurityActiveFrame+0x1>
    1376:	80 93 e1 0b 	sts	0x0BE1, r24	; 0x800be1 <nwkSecurityActiveFrame>
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    137a:	ee ec       	ldi	r30, 0xCE	; 206
    137c:	fb e0       	ldi	r31, 0x0B	; 11
    137e:	1c 96       	adiw	r26, 0x0c	; 12
    1380:	4c 91       	ld	r20, X
    1382:	1c 97       	sbiw	r26, 0x0c	; 12
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	40 83       	st	Z, r20
    138c:	51 83       	std	Z+1, r21	; 0x01
    138e:	62 83       	std	Z+2, r22	; 0x02
    1390:	73 83       	std	Z+3, r23	; 0x03
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    1392:	1f 96       	adiw	r26, 0x0f	; 15
    1394:	4d 91       	ld	r20, X+
    1396:	5c 91       	ld	r21, X
    1398:	50 97       	sbiw	r26, 0x10	; 16
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	ba 01       	movw	r22, r20
    13a0:	55 27       	eor	r21, r21
    13a2:	44 27       	eor	r20, r20
			16) | header->nwkDstEndpoint;
    13a4:	51 96       	adiw	r26, 0x11	; 17
    13a6:	2c 91       	ld	r18, X
    13a8:	51 97       	sbiw	r26, 0x11	; 17
    13aa:	22 95       	swap	r18
    13ac:	2f 70       	andi	r18, 0x0F	; 15
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    13ae:	42 2b       	or	r20, r18
    13b0:	44 83       	std	Z+4, r20	; 0x04
    13b2:	55 83       	std	Z+5, r21	; 0x05
    13b4:	66 83       	std	Z+6, r22	; 0x06
    13b6:	77 83       	std	Z+7, r23	; 0x07
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    13b8:	1d 96       	adiw	r26, 0x0d	; 13
    13ba:	4d 91       	ld	r20, X+
    13bc:	5c 91       	ld	r21, X
    13be:	1e 97       	sbiw	r26, 0x0e	; 14
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	ba 01       	movw	r22, r20
    13c6:	55 27       	eor	r21, r21
    13c8:	44 27       	eor	r20, r20
			16) | header->nwkSrcEndpoint;
    13ca:	51 96       	adiw	r26, 0x11	; 17
    13cc:	2c 91       	ld	r18, X
    13ce:	51 97       	sbiw	r26, 0x11	; 17
    13d0:	2f 70       	andi	r18, 0x0F	; 15
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    13d2:	42 2b       	or	r20, r18
    13d4:	40 87       	std	Z+8, r20	; 0x08
    13d6:	51 87       	std	Z+9, r21	; 0x09
    13d8:	62 87       	std	Z+10, r22	; 0x0a
    13da:	73 87       	std	Z+11, r23	; 0x0b
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    13dc:	15 96       	adiw	r26, 0x05	; 5
    13de:	4d 91       	ld	r20, X+
    13e0:	5c 91       	ld	r21, X
    13e2:	16 97       	sbiw	r26, 0x06	; 6
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	ba 01       	movw	r22, r20
    13ea:	55 27       	eor	r21, r21
    13ec:	44 27       	eor	r20, r20
    13ee:	1b 96       	adiw	r26, 0x0b	; 11
    13f0:	2c 91       	ld	r18, X
    13f2:	1b 97       	sbiw	r26, 0x0b	; 11
    13f4:	42 2b       	or	r20, r18
    13f6:	44 87       	std	Z+12, r20	; 0x0c
    13f8:	55 87       	std	Z+13, r21	; 0x0d
    13fa:	66 87       	std	Z+14, r22	; 0x0e
    13fc:	77 87       	std	Z+15, r23	; 0x0f
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
			nwkSecurityActiveFrame->state) {
    13fe:	6c 91       	ld	r22, X
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    1400:	61 33       	cpi	r22, 0x31	; 49
    1402:	31 f4       	brne	.+12     	; 0x1410 <nwkSecurityTaskHandler+0x192>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    1404:	11 96       	adiw	r26, 0x01	; 1
    1406:	2c 91       	ld	r18, X
    1408:	11 97       	sbiw	r26, 0x01	; 1
    140a:	24 50       	subi	r18, 0x04	; 4
    140c:	11 96       	adiw	r26, 0x01	; 1
    140e:	2c 93       	st	X, r18
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    1410:	fc 01       	movw	r30, r24
    1412:	ef 57       	subi	r30, 0x7F	; 127
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	40 81       	ld	r20, Z
    1418:	51 81       	ldd	r21, Z+1	; 0x01
    141a:	9c 01       	movw	r18, r24
    141c:	2e 5f       	subi	r18, 0xFE	; 254
    141e:	3f 4f       	sbci	r19, 0xFF	; 255
    1420:	42 1b       	sub	r20, r18
    1422:	53 0b       	sbc	r21, r19
    1424:	fc 01       	movw	r30, r24
    1426:	21 81       	ldd	r18, Z+1	; 0x01
    1428:	24 1b       	sub	r18, r20
    142a:	20 93 e0 0b 	sts	0x0BE0, r18	; 0x800be0 <nwkSecuritySize>
	nwkSecurityOffset = 0;
    142e:	10 92 df 0b 	sts	0x0BDF, r1	; 0x800bdf <nwkSecurityOffset>
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    1432:	21 e0       	ldi	r18, 0x01	; 1
    1434:	60 33       	cpi	r22, 0x30	; 48
    1436:	09 f0       	breq	.+2      	; 0x143a <nwkSecurityTaskHandler+0x1bc>
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	20 93 de 0b 	sts	0x0BDE, r18	; 0x800bde <nwkSecurityEncrypt>
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    143e:	22 e3       	ldi	r18, 0x32	; 50
    1440:	dc 01       	movw	r26, r24
    1442:	2c 93       	st	X, r18
    1444:	06 c0       	rjmp	.+12     	; 0x1452 <nwkSecurityTaskHandler+0x1d4>
    1446:	80 e0       	ldi	r24, 0x00	; 0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	1a da       	rcall	.-3020   	; 0x880 <nwkFrameNext>
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	09 f0       	breq	.+2      	; 0x1452 <nwkSecurityTaskHandler+0x1d4>
    1450:	8a cf       	rjmp	.-236    	; 0x1366 <nwkSecurityTaskHandler+0xe8>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	08 95       	ret

0000145c <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
	frame->tx.status = status;
    145c:	ef 92       	push	r14
    145e:	ff 92       	push	r15
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
    1464:	cf 93       	push	r28
    1466:	7c 01       	movw	r14, r24
    1468:	10 e0       	ldi	r17, 0x00	; 0
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	01 e0       	ldi	r16, 0x01	; 1
    1470:	c3 e1       	ldi	r28, 0x13	; 19
    1472:	13 c0       	rjmp	.+38     	; 0x149a <nwkTxDelayTimerHandler+0x3e>
    1474:	fc 01       	movw	r30, r24
    1476:	20 81       	ld	r18, Z
    1478:	21 31       	cpi	r18, 0x11	; 17
    147a:	79 f4       	brne	.+30     	; 0x149a <nwkTxDelayTimerHandler+0x3e>
    147c:	ec 57       	subi	r30, 0x7C	; 124
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	20 81       	ld	r18, Z
    1482:	31 81       	ldd	r19, Z+1	; 0x01
    1484:	21 50       	subi	r18, 0x01	; 1
    1486:	31 09       	sbc	r19, r1
    1488:	31 83       	std	Z+1, r19	; 0x01
    148a:	20 83       	st	Z, r18
    148c:	23 2b       	or	r18, r19
    148e:	21 f4       	brne	.+8      	; 0x1498 <nwkTxDelayTimerHandler+0x3c>
    1490:	fc 01       	movw	r30, r24
    1492:	c0 83       	st	Z, r28
    1494:	10 2f       	mov	r17, r16
    1496:	01 c0       	rjmp	.+2      	; 0x149a <nwkTxDelayTimerHandler+0x3e>
    1498:	10 2f       	mov	r17, r16
    149a:	f2 d9       	rcall	.-3100   	; 0x880 <nwkFrameNext>
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	51 f7       	brne	.-44     	; 0x1474 <nwkTxDelayTimerHandler+0x18>
    14a0:	11 23       	and	r17, r17
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <nwkTxDelayTimerHandler+0x4c>
    14a4:	c7 01       	movw	r24, r14
    14a6:	00 d4       	rcall	.+2048   	; 0x1ca8 <SYS_TimerStart>
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	08 95       	ret

000014b4 <nwkTxAckWaitTimerHandler>:
    14b4:	ef 92       	push	r14
    14b6:	ff 92       	push	r15
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	7c 01       	movw	r14, r24
    14c2:	10 e0       	ldi	r17, 0x00	; 0
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	01 e0       	ldi	r16, 0x01	; 1
    14ca:	d7 e1       	ldi	r29, 0x17	; 23
    14cc:	c0 e1       	ldi	r28, 0x10	; 16
    14ce:	16 c0       	rjmp	.+44     	; 0x14fc <nwkTxAckWaitTimerHandler+0x48>
    14d0:	fc 01       	movw	r30, r24
    14d2:	20 81       	ld	r18, Z
    14d4:	26 31       	cpi	r18, 0x16	; 22
    14d6:	91 f4       	brne	.+36     	; 0x14fc <nwkTxAckWaitTimerHandler+0x48>
    14d8:	ec 57       	subi	r30, 0x7C	; 124
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	20 81       	ld	r18, Z
    14de:	31 81       	ldd	r19, Z+1	; 0x01
    14e0:	21 50       	subi	r18, 0x01	; 1
    14e2:	31 09       	sbc	r19, r1
    14e4:	31 83       	std	Z+1, r19	; 0x01
    14e6:	20 83       	st	Z, r18
    14e8:	23 2b       	or	r18, r19
    14ea:	39 f4       	brne	.+14     	; 0x14fa <nwkTxAckWaitTimerHandler+0x46>
    14ec:	fc 01       	movw	r30, r24
    14ee:	d0 83       	st	Z, r29
    14f0:	ed 57       	subi	r30, 0x7D	; 125
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	c0 83       	st	Z, r28
    14f6:	10 2f       	mov	r17, r16
    14f8:	01 c0       	rjmp	.+2      	; 0x14fc <nwkTxAckWaitTimerHandler+0x48>
    14fa:	10 2f       	mov	r17, r16
    14fc:	c1 d9       	rcall	.-3198   	; 0x880 <nwkFrameNext>
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	39 f7       	brne	.-50     	; 0x14d0 <nwkTxAckWaitTimerHandler+0x1c>
    1502:	11 23       	and	r17, r17
    1504:	11 f0       	breq	.+4      	; 0x150a <nwkTxAckWaitTimerHandler+0x56>
    1506:	c7 01       	movw	r24, r14
    1508:	cf d3       	rcall	.+1950   	; 0x1ca8 <SYS_TimerStart>
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	ff 90       	pop	r15
    1514:	ef 90       	pop	r14
    1516:	08 95       	ret

00001518 <nwkTxInit>:
    1518:	10 92 ff 0b 	sts	0x0BFF, r1	; 0x800bff <nwkTxPhyActiveFrame+0x1>
    151c:	10 92 fe 0b 	sts	0x0BFE, r1	; 0x800bfe <nwkTxPhyActiveFrame>
    1520:	e1 ef       	ldi	r30, 0xF1	; 241
    1522:	fb e0       	ldi	r31, 0x0B	; 11
    1524:	82 e3       	ldi	r24, 0x32	; 50
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	a0 e0       	ldi	r26, 0x00	; 0
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	86 83       	std	Z+6, r24	; 0x06
    152e:	97 83       	std	Z+7, r25	; 0x07
    1530:	a0 87       	std	Z+8, r26	; 0x08
    1532:	b1 87       	std	Z+9, r27	; 0x09
    1534:	12 86       	std	Z+10, r1	; 0x0a
    1536:	8a e5       	ldi	r24, 0x5A	; 90
    1538:	9a e0       	ldi	r25, 0x0A	; 10
    153a:	94 87       	std	Z+12, r25	; 0x0c
    153c:	83 87       	std	Z+11, r24	; 0x0b
    153e:	e4 ee       	ldi	r30, 0xE4	; 228
    1540:	fb e0       	ldi	r31, 0x0B	; 11
    1542:	8a e0       	ldi	r24, 0x0A	; 10
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a0 e0       	ldi	r26, 0x00	; 0
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	86 83       	std	Z+6, r24	; 0x06
    154c:	97 83       	std	Z+7, r25	; 0x07
    154e:	a0 87       	std	Z+8, r26	; 0x08
    1550:	b1 87       	std	Z+9, r27	; 0x09
    1552:	12 86       	std	Z+10, r1	; 0x0a
    1554:	8e e2       	ldi	r24, 0x2E	; 46
    1556:	9a e0       	ldi	r25, 0x0A	; 10
    1558:	94 87       	std	Z+12, r25	; 0x0c
    155a:	83 87       	std	Z+11, r24	; 0x0b
    155c:	08 95       	ret

0000155e <nwkTxFrame>:
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	ec 01       	movw	r28, r24
    1564:	fc 01       	movw	r30, r24
    1566:	ea 57       	subi	r30, 0x7A	; 122
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	80 81       	ld	r24, Z
    156c:	81 ff       	sbrs	r24, 1
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <nwkTxFrame+0x18>
    1570:	92 e1       	ldi	r25, 0x12	; 18
    1572:	98 83       	st	Y, r25
    1574:	08 c0       	rjmp	.+16     	; 0x1586 <nwkTxFrame+0x28>
    1576:	9b 85       	ldd	r25, Y+11	; 0x0b
    1578:	91 ff       	sbrs	r25, 1
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <nwkTxFrame+0x24>
    157c:	90 e1       	ldi	r25, 0x10	; 16
    157e:	98 83       	st	Y, r25
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <nwkTxFrame+0x28>
    1582:	92 e1       	ldi	r25, 0x12	; 18
    1584:	98 83       	st	Y, r25
    1586:	fe 01       	movw	r30, r28
    1588:	ed 57       	subi	r30, 0x7D	; 125
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	10 82       	st	Z, r1
    158e:	80 ff       	sbrs	r24, 0
    1590:	05 c0       	rjmp	.+10     	; 0x159c <nwkTxFrame+0x3e>
    1592:	2f ef       	ldi	r18, 0xFF	; 255
    1594:	3f ef       	ldi	r19, 0xFF	; 255
    1596:	3e 83       	std	Y+6, r19	; 0x06
    1598:	2d 83       	std	Y+5, r18	; 0x05
    159a:	06 c0       	rjmp	.+12     	; 0x15a8 <nwkTxFrame+0x4a>
    159c:	20 91 9c 0e 	lds	r18, 0x0E9C	; 0x800e9c <nwkIb+0x2>
    15a0:	30 91 9d 0e 	lds	r19, 0x0E9D	; 0x800e9d <nwkIb+0x3>
    15a4:	3e 83       	std	Y+6, r19	; 0x06
    15a6:	2d 83       	std	Y+5, r18	; 0x05
    15a8:	85 70       	andi	r24, 0x05	; 5
    15aa:	19 f4       	brne	.+6      	; 0x15b2 <nwkTxFrame+0x54>
    15ac:	ce 01       	movw	r24, r28
    15ae:	c4 da       	rcall	.-2680   	; 0xb38 <nwkRoutePrepareTx>
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <nwkTxFrame+0x5c>
    15b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b4:	98 89       	ldd	r25, Y+16	; 0x10
    15b6:	98 87       	std	Y+8, r25	; 0x08
    15b8:	8f 83       	std	Y+7, r24	; 0x07
    15ba:	ea e9       	ldi	r30, 0x9A	; 154
    15bc:	fe e0       	ldi	r31, 0x0E	; 14
    15be:	80 81       	ld	r24, Z
    15c0:	91 81       	ldd	r25, Z+1	; 0x01
    15c2:	9a 87       	std	Y+10, r25	; 0x0a
    15c4:	89 87       	std	Y+9, r24	; 0x09
    15c6:	85 81       	ldd	r24, Z+5	; 0x05
    15c8:	8f 5f       	subi	r24, 0xFF	; 255
    15ca:	85 83       	std	Z+5, r24	; 0x05
    15cc:	8c 83       	std	Y+4, r24	; 0x04
    15ce:	8f 81       	ldd	r24, Y+7	; 0x07
    15d0:	98 85       	ldd	r25, Y+8	; 0x08
    15d2:	01 96       	adiw	r24, 0x01	; 1
    15d4:	71 f4       	brne	.+28     	; 0x15f2 <nwkTxFrame+0x94>
    15d6:	81 e4       	ldi	r24, 0x41	; 65
    15d8:	98 e8       	ldi	r25, 0x88	; 136
    15da:	9b 83       	std	Y+3, r25	; 0x03
    15dc:	8a 83       	std	Y+2, r24	; 0x02
    15de:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <rand>
    15e2:	cc 57       	subi	r28, 0x7C	; 124
    15e4:	df 4f       	sbci	r29, 0xFF	; 255
    15e6:	87 70       	andi	r24, 0x07	; 7
    15e8:	99 27       	eor	r25, r25
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	99 83       	std	Y+1, r25	; 0x01
    15ee:	88 83       	st	Y, r24
    15f0:	08 c0       	rjmp	.+16     	; 0x1602 <nwkTxFrame+0xa4>
    15f2:	81 e6       	ldi	r24, 0x61	; 97
    15f4:	98 e8       	ldi	r25, 0x88	; 136
    15f6:	9b 83       	std	Y+3, r25	; 0x03
    15f8:	8a 83       	std	Y+2, r24	; 0x02
    15fa:	cc 57       	subi	r28, 0x7C	; 124
    15fc:	df 4f       	sbci	r29, 0xFF	; 255
    15fe:	19 82       	std	Y+1, r1	; 0x01
    1600:	18 82       	st	Y, r1
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	08 95       	ret

00001608 <nwkTxBroadcastFrame>:
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	8c 01       	movw	r16, r24
    1612:	f5 d8       	rcall	.-3606   	; 0x7fe <nwkFrameAlloc>
    1614:	ec 01       	movw	r28, r24
    1616:	89 2b       	or	r24, r25
    1618:	b9 f1       	breq	.+110    	; 0x1688 <nwkTxBroadcastFrame+0x80>
    161a:	82 e1       	ldi	r24, 0x12	; 18
    161c:	88 83       	st	Y, r24
    161e:	f8 01       	movw	r30, r16
    1620:	81 81       	ldd	r24, Z+1	; 0x01
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	fe 01       	movw	r30, r28
    1626:	ed 57       	subi	r30, 0x7D	; 125
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	10 82       	st	Z, r1
    162c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <rand>
    1630:	fe 01       	movw	r30, r28
    1632:	ec 57       	subi	r30, 0x7C	; 124
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	87 70       	andi	r24, 0x07	; 7
    1638:	99 27       	eor	r25, r25
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	91 83       	std	Z+1, r25	; 0x01
    163e:	80 83       	st	Z, r24
    1640:	33 96       	adiw	r30, 0x03	; 3
    1642:	11 82       	std	Z+1, r1	; 0x01
    1644:	10 82       	st	Z, r1
    1646:	f8 01       	movw	r30, r16
    1648:	41 81       	ldd	r20, Z+1	; 0x01
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	b8 01       	movw	r22, r16
    164e:	6e 5f       	subi	r22, 0xFE	; 254
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	ce 01       	movw	r24, r28
    1654:	02 96       	adiw	r24, 0x02	; 2
    1656:	0e 94 f7 15 	call	0x2bee	; 0x2bee <memcpy>
    165a:	81 e4       	ldi	r24, 0x41	; 65
    165c:	98 e8       	ldi	r25, 0x88	; 136
    165e:	9b 83       	std	Y+3, r25	; 0x03
    1660:	8a 83       	std	Y+2, r24	; 0x02
    1662:	8f ef       	ldi	r24, 0xFF	; 255
    1664:	9f ef       	ldi	r25, 0xFF	; 255
    1666:	98 87       	std	Y+8, r25	; 0x08
    1668:	8f 83       	std	Y+7, r24	; 0x07
    166a:	f8 01       	movw	r30, r16
    166c:	85 81       	ldd	r24, Z+5	; 0x05
    166e:	96 81       	ldd	r25, Z+6	; 0x06
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	8d 83       	std	Y+5, r24	; 0x05
    1674:	ea e9       	ldi	r30, 0x9A	; 154
    1676:	fe e0       	ldi	r31, 0x0E	; 14
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	9a 87       	std	Y+10, r25	; 0x0a
    167e:	89 87       	std	Y+9, r24	; 0x09
    1680:	85 81       	ldd	r24, Z+5	; 0x05
    1682:	8f 5f       	subi	r24, 0xFF	; 255
    1684:	85 83       	std	Z+5, r24	; 0x05
    1686:	8c 83       	std	Y+4, r24	; 0x04
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	08 95       	ret

00001692 <nwkTxAckReceived>:
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	fc 01       	movw	r30, r24
    1698:	21 85       	ldd	r18, Z+9	; 0x09
    169a:	23 30       	cpi	r18, 0x03	; 3
    169c:	d9 f4       	brne	.+54     	; 0x16d4 <nwkTxAckReceived+0x42>
    169e:	10 c0       	rjmp	.+32     	; 0x16c0 <nwkTxAckReceived+0x2e>
    16a0:	fc 01       	movw	r30, r24
    16a2:	20 81       	ld	r18, Z
    16a4:	26 31       	cpi	r18, 0x16	; 22
    16a6:	89 f4       	brne	.+34     	; 0x16ca <nwkTxAckReceived+0x38>
    16a8:	34 85       	ldd	r19, Z+12	; 0x0c
    16aa:	29 81       	ldd	r18, Y+1	; 0x01
    16ac:	32 13       	cpse	r19, r18
    16ae:	0d c0       	rjmp	.+26     	; 0x16ca <nwkTxAckReceived+0x38>
    16b0:	27 e1       	ldi	r18, 0x17	; 23
    16b2:	20 83       	st	Z, r18
    16b4:	2a 81       	ldd	r18, Y+2	; 0x02
    16b6:	ea 57       	subi	r30, 0x7A	; 122
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	20 83       	st	Z, r18
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	0b c0       	rjmp	.+22     	; 0x16d6 <nwkTxAckReceived+0x44>
    16c0:	fc 01       	movw	r30, r24
    16c2:	c7 81       	ldd	r28, Z+7	; 0x07
    16c4:	d0 85       	ldd	r29, Z+8	; 0x08
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	da d8       	rcall	.-3660   	; 0x880 <nwkFrameNext>
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	41 f7       	brne	.-48     	; 0x16a0 <nwkTxAckReceived+0xe>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <nwkTxAckReceived+0x44>
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	08 95       	ret

000016dc <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    16dc:	22 e1       	ldi	r18, 0x12	; 18
    16de:	fc 01       	movw	r30, r24
    16e0:	20 83       	st	Z, r18
    16e2:	08 95       	ret

000016e4 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    16e4:	e0 91 fe 0b 	lds	r30, 0x0BFE	; 0x800bfe <nwkTxPhyActiveFrame>
    16e8:	f0 91 ff 0b 	lds	r31, 0x0BFF	; 0x800bff <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    16ec:	81 30       	cpi	r24, 0x01	; 1
    16ee:	21 f0       	breq	.+8      	; 0x16f8 <PHY_DataConf+0x14>
    16f0:	48 f0       	brcs	.+18     	; 0x1704 <PHY_DataConf+0x20>
    16f2:	82 30       	cpi	r24, 0x02	; 2
    16f4:	19 f0       	breq	.+6      	; 0x16fc <PHY_DataConf+0x18>
    16f6:	04 c0       	rjmp	.+8      	; 0x1700 <PHY_DataConf+0x1c>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    16f8:	80 e2       	ldi	r24, 0x20	; 32
    16fa:	05 c0       	rjmp	.+10     	; 0x1706 <PHY_DataConf+0x22>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    16fc:	81 e2       	ldi	r24, 0x21	; 33
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <PHY_DataConf+0x22>

	default:
		return NWK_ERROR_STATUS;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <PHY_DataConf+0x22>
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    1704:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1706:	df 01       	movw	r26, r30
    1708:	ad 57       	subi	r26, 0x7D	; 125
    170a:	bf 4f       	sbci	r27, 0xFF	; 255
    170c:	8c 93       	st	X, r24
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    170e:	85 e1       	ldi	r24, 0x15	; 21
    1710:	80 83       	st	Z, r24
	nwkTxPhyActiveFrame = NULL;
    1712:	10 92 ff 0b 	sts	0x0BFF, r1	; 0x800bff <nwkTxPhyActiveFrame+0x1>
    1716:	10 92 fe 0b 	sts	0x0BFE, r1	; 0x800bfe <nwkTxPhyActiveFrame>
	nwkIb.lock--;
    171a:	ea e9       	ldi	r30, 0x9A	; 154
    171c:	fe e0       	ldi	r31, 0x0E	; 14
    171e:	86 a9       	ldd	r24, Z+54	; 0x36
    1720:	97 a9       	ldd	r25, Z+55	; 0x37
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	97 ab       	std	Z+55, r25	; 0x37
    1726:	86 ab       	std	Z+54, r24	; 0x36
    1728:	08 95       	ret

0000172a <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    172a:	9f 92       	push	r9
    172c:	af 92       	push	r10
    172e:	bf 92       	push	r11
    1730:	cf 92       	push	r12
    1732:	df 92       	push	r13
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
	NwkFrame_t *frame = NULL;
    1740:	c0 e0       	ldi	r28, 0x00	; 0
    1742:	d0 e0       	ldi	r29, 0x00	; 0

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
				nwkTxPhyActiveFrame = frame;
				frame->state = NWK_TX_STATE_WAIT_CONF;
    1744:	0f 2e       	mov	r0, r31
    1746:	f4 e1       	ldi	r31, 0x14	; 20
    1748:	af 2e       	mov	r10, r31
    174a:	f0 2d       	mov	r31, r0
				PHY_DataReq(&(frame->size));
				nwkIb.lock++;
    174c:	0a e9       	ldi	r16, 0x9A	; 154
    174e:	1e e0       	ldi	r17, 0x0E	; 14
					SYS_TimerStart(&nwkTxAckWaitTimer);
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    1750:	0f 2e       	mov	r0, r31
    1752:	f7 e1       	ldi	r31, 0x17	; 23
    1754:	df 2e       	mov	r13, r31
    1756:	f0 2d       	mov	r31, r0
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    1758:	0f 2e       	mov	r0, r31
    175a:	f6 e1       	ldi	r31, 0x16	; 22
    175c:	9f 2e       	mov	r9, r31
    175e:	f0 2d       	mov	r31, r0
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    1760:	0f 2e       	mov	r0, r31
    1762:	f5 e1       	ldi	r31, 0x15	; 21
    1764:	ef 2e       	mov	r14, r31
    1766:	f1 2c       	mov	r15, r1
    1768:	f0 2d       	mov	r31, r0
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
				SYS_TimerStart(&nwkTxDelayTimer);
			} else {
				frame->state = NWK_TX_STATE_SEND;
    176a:	0f 2e       	mov	r0, r31
    176c:	f3 e1       	ldi	r31, 0x13	; 19
    176e:	cf 2e       	mov	r12, r31
    1770:	f0 2d       	mov	r31, r0
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    1772:	0f 2e       	mov	r0, r31
    1774:	f1 e1       	ldi	r31, 0x11	; 17
    1776:	bf 2e       	mov	r11, r31
    1778:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    177a:	65 c0       	rjmp	.+202    	; 0x1846 <nwkTxTaskHandler+0x11c>
		switch (frame->state) {
    177c:	88 81       	ld	r24, Y
    177e:	83 31       	cpi	r24, 0x13	; 19
    1780:	f1 f0       	breq	.+60     	; 0x17be <nwkTxTaskHandler+0x94>
    1782:	28 f4       	brcc	.+10     	; 0x178e <nwkTxTaskHandler+0x64>
    1784:	80 31       	cpi	r24, 0x10	; 16
    1786:	49 f0       	breq	.+18     	; 0x179a <nwkTxTaskHandler+0x70>
    1788:	82 31       	cpi	r24, 0x12	; 18
    178a:	59 f0       	breq	.+22     	; 0x17a2 <nwkTxTaskHandler+0x78>
    178c:	5c c0       	rjmp	.+184    	; 0x1846 <nwkTxTaskHandler+0x11c>
    178e:	85 31       	cpi	r24, 0x15	; 21
    1790:	61 f1       	breq	.+88     	; 0x17ea <nwkTxTaskHandler+0xc0>
    1792:	87 31       	cpi	r24, 0x17	; 23
    1794:	09 f4       	brne	.+2      	; 0x1798 <nwkTxTaskHandler+0x6e>
    1796:	48 c0       	rjmp	.+144    	; 0x1828 <nwkTxTaskHandler+0xfe>
    1798:	56 c0       	rjmp	.+172    	; 0x1846 <nwkTxTaskHandler+0x11c>
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    179a:	61 e0       	ldi	r22, 0x01	; 1
    179c:	ce 01       	movw	r24, r28
    179e:	1f dd       	rcall	.-1474   	; 0x11de <nwkSecurityProcess>
		}
		break;
    17a0:	52 c0       	rjmp	.+164    	; 0x1846 <nwkTxTaskHandler+0x11c>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    17a2:	fe 01       	movw	r30, r28
    17a4:	ec 57       	subi	r30, 0x7C	; 124
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	80 81       	ld	r24, Z
    17aa:	91 81       	ldd	r25, Z+1	; 0x01
    17ac:	89 2b       	or	r24, r25
    17ae:	29 f0       	breq	.+10     	; 0x17ba <nwkTxTaskHandler+0x90>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    17b0:	b8 82       	st	Y, r11
				SYS_TimerStart(&nwkTxDelayTimer);
    17b2:	84 ee       	ldi	r24, 0xE4	; 228
    17b4:	9b e0       	ldi	r25, 0x0B	; 11
    17b6:	78 d2       	rcall	.+1264   	; 0x1ca8 <SYS_TimerStart>
    17b8:	46 c0       	rjmp	.+140    	; 0x1846 <nwkTxTaskHandler+0x11c>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    17ba:	c8 82       	st	Y, r12
    17bc:	44 c0       	rjmp	.+136    	; 0x1846 <nwkTxTaskHandler+0x11c>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    17be:	80 91 fe 0b 	lds	r24, 0x0BFE	; 0x800bfe <nwkTxPhyActiveFrame>
    17c2:	90 91 ff 0b 	lds	r25, 0x0BFF	; 0x800bff <nwkTxPhyActiveFrame+0x1>
    17c6:	89 2b       	or	r24, r25
    17c8:	09 f0       	breq	.+2      	; 0x17cc <nwkTxTaskHandler+0xa2>
    17ca:	3d c0       	rjmp	.+122    	; 0x1846 <nwkTxTaskHandler+0x11c>
				nwkTxPhyActiveFrame = frame;
    17cc:	d0 93 ff 0b 	sts	0x0BFF, r29	; 0x800bff <nwkTxPhyActiveFrame+0x1>
    17d0:	c0 93 fe 0b 	sts	0x0BFE, r28	; 0x800bfe <nwkTxPhyActiveFrame>
				frame->state = NWK_TX_STATE_WAIT_CONF;
    17d4:	fe 01       	movw	r30, r28
    17d6:	a1 92       	st	Z+, r10
				PHY_DataReq(&(frame->size));
    17d8:	cf 01       	movw	r24, r30
    17da:	d1 d0       	rcall	.+418    	; 0x197e <PHY_DataReq>
				nwkIb.lock++;
    17dc:	f8 01       	movw	r30, r16
    17de:	86 a9       	ldd	r24, Z+54	; 0x36
    17e0:	97 a9       	ldd	r25, Z+55	; 0x37
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	97 ab       	std	Z+55, r25	; 0x37
    17e6:	86 ab       	std	Z+54, r24	; 0x36
    17e8:	2e c0       	rjmp	.+92     	; 0x1846 <nwkTxTaskHandler+0x11c>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    17ea:	fe 01       	movw	r30, r28
    17ec:	ed 57       	subi	r30, 0x7D	; 125
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	80 81       	ld	r24, Z
    17f2:	81 11       	cpse	r24, r1
    17f4:	17 c0       	rjmp	.+46     	; 0x1824 <nwkTxTaskHandler+0xfa>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    17f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    17f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    17fa:	f8 01       	movw	r30, r16
    17fc:	80 81       	ld	r24, Z
    17fe:	91 81       	ldd	r25, Z+1	; 0x01
    1800:	28 17       	cp	r18, r24
    1802:	39 07       	cpc	r19, r25
    1804:	69 f4       	brne	.+26     	; 0x1820 <nwkTxTaskHandler+0xf6>
    1806:	8b 85       	ldd	r24, Y+11	; 0x0b
    1808:	80 ff       	sbrs	r24, 0
    180a:	0a c0       	rjmp	.+20     	; 0x1820 <nwkTxTaskHandler+0xf6>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    180c:	98 82       	st	Y, r9
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    180e:	fe 01       	movw	r30, r28
    1810:	ec 57       	subi	r30, 0x7C	; 124
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	f1 82       	std	Z+1, r15	; 0x01
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    1816:	e0 82       	st	Z, r14
    1818:	81 ef       	ldi	r24, 0xF1	; 241
    181a:	9b e0       	ldi	r25, 0x0B	; 11
    181c:	45 d2       	rcall	.+1162   	; 0x1ca8 <SYS_TimerStart>
    181e:	13 c0       	rjmp	.+38     	; 0x1846 <nwkTxTaskHandler+0x11c>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    1820:	d8 82       	st	Y, r13
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    1822:	11 c0       	rjmp	.+34     	; 0x1846 <nwkTxTaskHandler+0x11c>
    1824:	d8 82       	st	Y, r13
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    1826:	0f c0       	rjmp	.+30     	; 0x1846 <nwkTxTaskHandler+0x11c>
    1828:	ce 01       	movw	r24, r28
    182a:	3f d9       	rcall	.-3458   	; 0xaaa <nwkRouteFrameSent>
#endif
			if (NULL == frame->tx.confirm) {
    182c:	fe 01       	movw	r30, r28
    182e:	e9 57       	subi	r30, 0x79	; 121
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	01 90       	ld	r0, Z+
    1834:	f0 81       	ld	r31, Z
    1836:	e0 2d       	mov	r30, r0
    1838:	30 97       	sbiw	r30, 0x00	; 0
				nwkFrameFree(frame);
    183a:	19 f4       	brne	.+6      	; 0x1842 <nwkTxTaskHandler+0x118>
    183c:	ce 01       	movw	r24, r28
    183e:	16 d8       	rcall	.-4052   	; 0x86c <nwkFrameFree>
			} else {
				frame->tx.confirm(frame);
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <nwkTxTaskHandler+0x11c>
    1842:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1844:	19 95       	eicall
    1846:	ce 01       	movw	r24, r28
    1848:	1b d8       	rcall	.-4042   	; 0x880 <nwkFrameNext>
    184a:	ec 01       	movw	r28, r24
    184c:	89 2b       	or	r24, r25
    184e:	09 f0       	breq	.+2      	; 0x1852 <nwkTxTaskHandler+0x128>
    1850:	95 cf       	rjmp	.-214    	; 0x177c <nwkTxTaskHandler+0x52>

		default:
			break;
		}
	}
}
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	df 90       	pop	r13
    1860:	cf 90       	pop	r12
    1862:	bf 90       	pop	r11
    1864:	af 90       	pop	r10
    1866:	9f 90       	pop	r9
    1868:	08 95       	ret

0000186a <phySetChannel>:
	IEEE_ADDR_2_REG = *ptr_to_reg++;
	IEEE_ADDR_3_REG = *ptr_to_reg++;
	IEEE_ADDR_4_REG = *ptr_to_reg++;
	IEEE_ADDR_5_REG = *ptr_to_reg++;
	IEEE_ADDR_6_REG = *ptr_to_reg++;
	IEEE_ADDR_7_REG = *ptr_to_reg;
    186a:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <phyBand>
    186e:	98 2f       	mov	r25, r24
    1870:	9f 70       	andi	r25, 0x0F	; 15
    1872:	e4 e5       	ldi	r30, 0x54	; 84
    1874:	f1 e0       	ldi	r31, 0x01	; 1
    1876:	80 81       	ld	r24, Z
    1878:	80 7f       	andi	r24, 0xF0	; 240
    187a:	89 2b       	or	r24, r25
    187c:	80 83       	st	Z, r24
    187e:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <phyBand>
    1882:	88 23       	and	r24, r24
    1884:	29 f0       	breq	.+10     	; 0x1890 <phySetChannel+0x26>
    1886:	80 91 01 0c 	lds	r24, 0x0C01	; 0x800c01 <phyChannel>
    188a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
    188e:	08 95       	ret
    1890:	80 91 01 0c 	lds	r24, 0x0C01	; 0x800c01 <phyChannel>
    1894:	98 2f       	mov	r25, r24
    1896:	9f 71       	andi	r25, 0x1F	; 31
    1898:	e8 e4       	ldi	r30, 0x48	; 72
    189a:	f1 e0       	ldi	r31, 0x01	; 1
    189c:	80 81       	ld	r24, Z
    189e:	80 7e       	andi	r24, 0xE0	; 224
    18a0:	89 2b       	or	r24, r25
    18a2:	80 83       	st	Z, r24
    18a4:	08 95       	ret

000018a6 <phyTrxSetState>:
    18a6:	a2 e4       	ldi	r26, 0x42	; 66
    18a8:	b1 e0       	ldi	r27, 0x01	; 1
    18aa:	23 e0       	ldi	r18, 0x03	; 3
    18ac:	e1 e4       	ldi	r30, 0x41	; 65
    18ae:	f1 e0       	ldi	r31, 0x01	; 1
    18b0:	2c 93       	st	X, r18
    18b2:	90 81       	ld	r25, Z
    18b4:	9f 71       	andi	r25, 0x1F	; 31
    18b6:	98 30       	cpi	r25, 0x08	; 8
    18b8:	d9 f7       	brne	.-10     	; 0x18b0 <phyTrxSetState+0xa>
    18ba:	a2 e4       	ldi	r26, 0x42	; 66
    18bc:	b1 e0       	ldi	r27, 0x01	; 1
    18be:	e1 e4       	ldi	r30, 0x41	; 65
    18c0:	f1 e0       	ldi	r31, 0x01	; 1
    18c2:	8c 93       	st	X, r24
    18c4:	90 81       	ld	r25, Z
    18c6:	9f 71       	andi	r25, 0x1F	; 31
    18c8:	89 13       	cpse	r24, r25
    18ca:	fb cf       	rjmp	.-10     	; 0x18c2 <phyTrxSetState+0x1c>
    18cc:	08 95       	ret

000018ce <phySetRxState>:
    18ce:	88 e0       	ldi	r24, 0x08	; 8
    18d0:	ea df       	rcall	.-44     	; 0x18a6 <phyTrxSetState>
    18d2:	8f ef       	ldi	r24, 0xFF	; 255
    18d4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    18d8:	80 91 02 0c 	lds	r24, 0x0C02	; 0x800c02 <phyRxState>
    18dc:	88 23       	and	r24, r24
    18de:	11 f0       	breq	.+4      	; 0x18e4 <phySetRxState+0x16>
    18e0:	86 e1       	ldi	r24, 0x16	; 22
    18e2:	e1 cf       	rjmp	.-62     	; 0x18a6 <phyTrxSetState>
    18e4:	08 95       	ret

000018e6 <PHY_Init>:
    18e6:	60 e4       	ldi	r22, 0x40	; 64
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
    18ee:	e9 e3       	ldi	r30, 0x39	; 57
    18f0:	f1 e0       	ldi	r31, 0x01	; 1
    18f2:	80 81       	ld	r24, Z
    18f4:	81 60       	ori	r24, 0x01	; 1
    18f6:	80 83       	st	Z, r24
    18f8:	10 92 02 0c 	sts	0x0C02, r1	; 0x800c02 <phyRxState>
    18fc:	10 92 00 0c 	sts	0x0C00, r1	; 0x800c00 <phyBand>
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	80 93 83 0c 	sts	0x0C83, r24	; 0x800c83 <phyState>
    1906:	88 e0       	ldi	r24, 0x08	; 8
    1908:	ce df       	rcall	.-100    	; 0x18a6 <phyTrxSetState>
    190a:	8b ee       	ldi	r24, 0xEB	; 235
    190c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x700156>
    1910:	ec e4       	ldi	r30, 0x4C	; 76
    1912:	f1 e0       	ldi	r31, 0x01	; 1
    1914:	80 81       	ld	r24, Z
    1916:	80 68       	ori	r24, 0x80	; 128
    1918:	80 83       	st	Z, r24
    191a:	08 95       	ret

0000191c <PHY_SetRxState>:
    191c:	80 93 02 0c 	sts	0x0C02, r24	; 0x800c02 <phyRxState>
    1920:	d6 cf       	rjmp	.-84     	; 0x18ce <phySetRxState>
    1922:	08 95       	ret

00001924 <PHY_SetChannel>:
    1924:	80 93 01 0c 	sts	0x0C01, r24	; 0x800c01 <phyChannel>
    1928:	a0 cf       	rjmp	.-192    	; 0x186a <phySetChannel>
    192a:	08 95       	ret

0000192c <PHY_SetPanId>:
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	1f 92       	push	r1
    1932:	1f 92       	push	r1
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x700162>
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x700163>
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	08 95       	ret

00001950 <PHY_SetShortAddr>:
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	1f 92       	push	r1
    1956:	1f 92       	push	r1
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	9a 83       	std	Y+2, r25	; 0x02
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x700160>
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x700161>
    196a:	99 81       	ldd	r25, Y+1	; 0x01
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	89 0f       	add	r24, r25
    1970:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x70016d>
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

0000197e <PHY_DataReq>:
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	ec 01       	movw	r28, r24
    1984:	89 e1       	ldi	r24, 0x19	; 25
    1986:	8f df       	rcall	.-226    	; 0x18a6 <phyTrxSetState>
    1988:	8f ef       	ldi	r24, 0xFF	; 255
    198a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    198e:	88 81       	ld	r24, Y
    1990:	8e 5f       	subi	r24, 0xFE	; 254
    1992:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
    1996:	88 81       	ld	r24, Y
    1998:	88 23       	and	r24, r24
    199a:	81 f0       	breq	.+32     	; 0x19bc <PHY_DataReq+0x3e>
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	82 2f       	mov	r24, r18
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	fc 01       	movw	r30, r24
    19a4:	ef 57       	subi	r30, 0x7F	; 127
    19a6:	fe 4f       	sbci	r31, 0xFE	; 254
    19a8:	de 01       	movw	r26, r28
    19aa:	a8 0f       	add	r26, r24
    19ac:	b9 1f       	adc	r27, r25
    19ae:	11 96       	adiw	r26, 0x01	; 1
    19b0:	8c 91       	ld	r24, X
    19b2:	80 83       	st	Z, r24
    19b4:	2f 5f       	subi	r18, 0xFF	; 255
    19b6:	88 81       	ld	r24, Y
    19b8:	28 17       	cp	r18, r24
    19ba:	88 f3       	brcs	.-30     	; 0x199e <PHY_DataReq+0x20>
    19bc:	83 e0       	ldi	r24, 0x03	; 3
    19be:	80 93 83 0c 	sts	0x0C83, r24	; 0x800c83 <phyState>
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	08 95       	ret

000019ce <PHY_EncryptReq>:
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	ec 01       	movw	r28, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	51 d6       	rcall	.+3234   	; 0x267e <sal_aes_setup>
    19dc:	ce 01       	movw	r24, r28
    19de:	39 d6       	rcall	.+3186   	; 0x2652 <sal_aes_exec>
    19e0:	ce 01       	movw	r24, r28
    19e2:	db d6       	rcall	.+3510   	; 0x279a <sal_aes_read>
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <PHY_TaskHandler+0x8>
    19f2:	1f 92       	push	r1
    19f4:	1f 92       	push	r1
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
	if (PHY_STATE_SLEEP == phyState) {
    19fa:	80 91 83 0c 	lds	r24, 0x0C83	; 0x800c83 <phyState>
    19fe:	82 30       	cpi	r24, 0x02	; 2
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <PHY_TaskHandler+0x1a>
    1a02:	65 c0       	rjmp	.+202    	; 0x1ace <PHY_TaskHandler+0xe4>
		return;
	}

	if (IRQ_STATUS_REG_s.rxEnd) {
    1a04:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1a08:	83 ff       	sbrs	r24, 3
    1a0a:	3e c0       	rjmp	.+124    	; 0x1a88 <PHY_TaskHandler+0x9e>
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;
    1a0c:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x70017b>

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    1a10:	6a 2f       	mov	r22, r26
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	ab 01       	movw	r20, r22
    1a16:	4f 5f       	subi	r20, 0xFF	; 255
    1a18:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1a20:	fc 01       	movw	r30, r24
    1a22:	e0 58       	subi	r30, 0x80	; 128
    1a24:	fe 4f       	sbci	r31, 0xFE	; 254
    1a26:	30 81       	ld	r19, Z
    1a28:	fc 01       	movw	r30, r24
    1a2a:	ed 5f       	subi	r30, 0xFD	; 253
    1a2c:	f3 4f       	sbci	r31, 0xF3	; 243
    1a2e:	30 83       	st	Z, r19

	if (IRQ_STATUS_REG_s.rxEnd) {
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    1a30:	2f 5f       	subi	r18, 0xFF	; 255
    1a32:	82 2f       	mov	r24, r18
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	84 17       	cp	r24, r20
    1a38:	95 07       	cpc	r25, r21
    1a3a:	94 f3       	brlt	.-28     	; 0x1a20 <PHY_TaskHandler+0x36>
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
		}

		ind.data = phyRxBuffer;
    1a3c:	83 e0       	ldi	r24, 0x03	; 3
    1a3e:	9c e0       	ldi	r25, 0x0C	; 12
    1a40:	9a 83       	std	Y+2, r25	; 0x02
    1a42:	89 83       	std	Y+1, r24	; 0x01
		ind.size = size - PHY_CRC_SIZE;
    1a44:	a2 50       	subi	r26, 0x02	; 2
    1a46:	ab 83       	std	Y+3, r26	; 0x03
		ind.lqi  = phyRxBuffer[size];
    1a48:	fb 01       	movw	r30, r22
    1a4a:	ed 5f       	subi	r30, 0xFD	; 253
    1a4c:	f3 4f       	sbci	r31, 0xF3	; 243
    1a4e:	80 81       	ld	r24, Z
    1a50:	8c 83       	std	Y+4, r24	; 0x04
		ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1a52:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    1a56:	8a 55       	subi	r24, 0x5A	; 90
    1a58:	8d 83       	std	Y+5, r24	; 0x05
		PHY_DataInd(&ind);
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	32 d9       	rcall	.-3484   	; 0xcc4 <PHY_DataInd>

		while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus) {
    1a60:	e1 e4       	ldi	r30, 0x41	; 65
    1a62:	f1 e0       	ldi	r31, 0x01	; 1
    1a64:	80 81       	ld	r24, Z
    1a66:	8f 71       	andi	r24, 0x1F	; 31
    1a68:	86 31       	cpi	r24, 0x16	; 22
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <PHY_TaskHandler+0x7a>
		}

		IRQ_STATUS_REG_s.rxEnd = 1;
    1a6c:	ef e4       	ldi	r30, 0x4F	; 79
    1a6e:	f1 e0       	ldi	r31, 0x01	; 1
    1a70:	80 81       	ld	r24, Z
    1a72:	88 60       	ori	r24, 0x08	; 8
    1a74:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 0;
    1a76:	ec e4       	ldi	r30, 0x4C	; 76
    1a78:	f1 e0       	ldi	r31, 0x01	; 1
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8f 77       	andi	r24, 0x7F	; 127
    1a7e:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1a80:	80 81       	ld	r24, Z
    1a82:	80 68       	ori	r24, 0x80	; 128
    1a84:	80 83       	st	Z, r24
    1a86:	23 c0       	rjmp	.+70     	; 0x1ace <PHY_TaskHandler+0xe4>
	} else if (IRQ_STATUS_REG_s.txEnd) {
    1a88:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1a8c:	86 ff       	sbrs	r24, 6
    1a8e:	1f c0       	rjmp	.+62     	; 0x1ace <PHY_TaskHandler+0xe4>
		if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus) {
    1a90:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1a94:	8f 71       	andi	r24, 0x1F	; 31
    1a96:	89 31       	cpi	r24, 0x19	; 25
    1a98:	a9 f4       	brne	.+42     	; 0x1ac4 <PHY_TaskHandler+0xda>
			uint8_t status = TRX_STATE_REG_s.tracStatus;
    1a9a:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1a9e:	12 95       	swap	r17
    1aa0:	16 95       	lsr	r17
    1aa2:	17 70       	andi	r17, 0x07	; 7

			if (TRAC_STATUS_SUCCESS == status) {
    1aa4:	49 f0       	breq	.+18     	; 0x1ab8 <PHY_TaskHandler+0xce>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    1aa6:	13 30       	cpi	r17, 0x03	; 3
    1aa8:	21 f0       	breq	.+8      	; 0x1ab2 <PHY_TaskHandler+0xc8>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
    1aaa:	15 30       	cpi	r17, 0x05	; 5
    1aac:	21 f0       	breq	.+8      	; 0x1ab6 <PHY_TaskHandler+0xcc>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
    1aae:	13 e0       	ldi	r17, 0x03	; 3
    1ab0:	03 c0       	rjmp	.+6      	; 0x1ab8 <PHY_TaskHandler+0xce>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1ab2:	11 e0       	ldi	r17, 0x01	; 1
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <PHY_TaskHandler+0xce>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    1ab6:	12 e0       	ldi	r17, 0x02	; 2
    1ab8:	0a df       	rcall	.-492    	; 0x18ce <phySetRxState>
			phyState = PHY_STATE_IDLE;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	80 93 83 0c 	sts	0x0C83, r24	; 0x800c83 <phyState>

			PHY_DataConf(status);
    1ac0:	81 2f       	mov	r24, r17
    1ac2:	10 de       	rcall	.-992    	; 0x16e4 <PHY_DataConf>
		}

		IRQ_STATUS_REG_s.txEnd = 1;
    1ac4:	ef e4       	ldi	r30, 0x4F	; 79
    1ac6:	f1 e0       	ldi	r31, 0x01	; 1
    1ac8:	80 81       	ld	r24, Z
    1aca:	80 64       	ori	r24, 0x40	; 64
    1acc:	80 83       	st	Z, r24
	}
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	08 95       	ret

00001ae0 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
	SYS_TimerInit();
    1ae0:	7b d0       	rcall	.+246    	; 0x1bd8 <SYS_TimerInit>
#if SYS_SECURITY_MODE == 0
	sal_init();
    1ae2:	b6 d5       	rcall	.+2924   	; 0x2650 <sal_init>
#endif
	PHY_Init();
    1ae4:	00 df       	rcall	.-512    	; 0x18e6 <PHY_Init>
    1ae6:	0c 94 c8 02 	jmp	0x590	; 0x590 <NWK_Init>
	NWK_Init();
    1aea:	08 95       	ret

00001aec <SYS_TaskHandler>:
    1aec:	7e df       	rcall	.-260    	; 0x19ea <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
	PHY_TaskHandler();
	NWK_TaskHandler();
    1aee:	0e 94 f7 02 	call	0x5ee	; 0x5ee <NWK_TaskHandler>
	SYS_TimerTaskHandler();
    1af2:	e5 c0       	rjmp	.+458    	; 0x1cbe <SYS_TimerTaskHandler>
    1af4:	08 95       	ret

00001af6 <SYS_EncryptReq>:
/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    1af6:	6b df       	rcall	.-298    	; 0x19ce <PHY_EncryptReq>
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    1af8:	81 cb       	rjmp	.-2302   	; 0x11fc <SYS_EncryptConf>
    1afa:	08 95       	ret

00001afc <placeTimer>:
    1afc:	0f 93       	push	r16
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	ec 01       	movw	r28, r24
	if (timers) {
    1b06:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <timers>
    1b0a:	90 91 85 0c 	lds	r25, 0x0C85	; 0x800c85 <timers+0x1>
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <placeTimer+0x18>
    1b12:	45 c0       	rjmp	.+138    	; 0x1b9e <placeTimer+0xa2>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    1b14:	4e 81       	ldd	r20, Y+6	; 0x06
    1b16:	5f 81       	ldd	r21, Y+7	; 0x07
    1b18:	68 85       	ldd	r22, Y+8	; 0x08
    1b1a:	79 85       	ldd	r23, Y+9	; 0x09

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	02 81       	ldd	r16, Z+2	; 0x02
    1b20:	13 81       	ldd	r17, Z+3	; 0x03
    1b22:	24 81       	ldd	r18, Z+4	; 0x04
    1b24:	35 81       	ldd	r19, Z+5	; 0x05
    1b26:	40 17       	cp	r20, r16
    1b28:	51 07       	cpc	r21, r17
    1b2a:	62 07       	cpc	r22, r18
    1b2c:	73 07       	cpc	r23, r19
    1b2e:	60 f0       	brcs	.+24     	; 0x1b48 <placeTimer+0x4c>
    1b30:	dc 01       	movw	r26, r24
    1b32:	17 c0       	rjmp	.+46     	; 0x1b62 <placeTimer+0x66>
    1b34:	02 81       	ldd	r16, Z+2	; 0x02
    1b36:	13 81       	ldd	r17, Z+3	; 0x03
    1b38:	24 81       	ldd	r18, Z+4	; 0x04
    1b3a:	35 81       	ldd	r19, Z+5	; 0x05
    1b3c:	40 17       	cp	r20, r16
    1b3e:	51 07       	cpc	r21, r17
    1b40:	62 07       	cpc	r22, r18
    1b42:	73 07       	cpc	r23, r19
    1b44:	68 f4       	brcc	.+26     	; 0x1b60 <placeTimer+0x64>
    1b46:	03 c0       	rjmp	.+6      	; 0x1b4e <placeTimer+0x52>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1b48:	fc 01       	movw	r30, r24
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    1b4a:	a0 e0       	ldi	r26, 0x00	; 0
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    1b4e:	04 1b       	sub	r16, r20
    1b50:	15 0b       	sbc	r17, r21
    1b52:	26 0b       	sbc	r18, r22
    1b54:	37 0b       	sbc	r19, r23
    1b56:	02 83       	std	Z+2, r16	; 0x02
    1b58:	13 83       	std	Z+3, r17	; 0x03
    1b5a:	24 83       	std	Z+4, r18	; 0x04
    1b5c:	35 83       	std	Z+5, r19	; 0x05
				break;
    1b5e:	0a c0       	rjmp	.+20     	; 0x1b74 <placeTimer+0x78>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1b60:	df 01       	movw	r26, r30
			if (timeout < t->timeout) {
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    1b62:	40 1b       	sub	r20, r16
    1b64:	51 0b       	sbc	r21, r17
    1b66:	62 0b       	sbc	r22, r18
    1b68:	73 0b       	sbc	r23, r19
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1b6a:	ed 91       	ld	r30, X+
    1b6c:	fc 91       	ld	r31, X
    1b6e:	11 97       	sbiw	r26, 0x01	; 1
    1b70:	30 97       	sbiw	r30, 0x00	; 0
    1b72:	01 f7       	brne	.-64     	; 0x1b34 <placeTimer+0x38>
			}

			prev = t;
		}

		timer->timeout = timeout;
    1b74:	4a 83       	std	Y+2, r20	; 0x02
    1b76:	5b 83       	std	Y+3, r21	; 0x03
    1b78:	6c 83       	std	Y+4, r22	; 0x04
    1b7a:	7d 83       	std	Y+5, r23	; 0x05

		if (prev) {
    1b7c:	10 97       	sbiw	r26, 0x00	; 0
    1b7e:	41 f0       	breq	.+16     	; 0x1b90 <placeTimer+0x94>
			timer->next = prev->next;
    1b80:	8d 91       	ld	r24, X+
    1b82:	9c 91       	ld	r25, X
    1b84:	11 97       	sbiw	r26, 0x01	; 1
    1b86:	99 83       	std	Y+1, r25	; 0x01
    1b88:	88 83       	st	Y, r24
			prev->next = timer;
    1b8a:	cd 93       	st	X+, r28
    1b8c:	dc 93       	st	X, r29
    1b8e:	15 c0       	rjmp	.+42     	; 0x1bba <placeTimer+0xbe>
		} else {
			timer->next = timers;
    1b90:	99 83       	std	Y+1, r25	; 0x01
    1b92:	88 83       	st	Y, r24
			timers = timer;
    1b94:	d0 93 85 0c 	sts	0x0C85, r29	; 0x800c85 <timers+0x1>
    1b98:	c0 93 84 0c 	sts	0x0C84, r28	; 0x800c84 <timers>
    1b9c:	0e c0       	rjmp	.+28     	; 0x1bba <placeTimer+0xbe>
		}
	} else {
		timer->next = NULL;
    1b9e:	19 82       	std	Y+1, r1	; 0x01
    1ba0:	18 82       	st	Y, r1
		timer->timeout = timer->interval;
    1ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba6:	a8 85       	ldd	r26, Y+8	; 0x08
    1ba8:	b9 85       	ldd	r27, Y+9	; 0x09
    1baa:	8a 83       	std	Y+2, r24	; 0x02
    1bac:	9b 83       	std	Y+3, r25	; 0x03
    1bae:	ac 83       	std	Y+4, r26	; 0x04
    1bb0:	bd 83       	std	Y+5, r27	; 0x05
		timers = timer;
    1bb2:	d0 93 85 0c 	sts	0x0C85, r29	; 0x800c85 <timers+0x1>
    1bb6:	c0 93 84 0c 	sts	0x0C84, r28	; 0x800c84 <timers>
	}
}
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	08 95       	ret

00001bc4 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
	SysTimerIrqCount++;
    1bc4:	80 91 d2 0e 	lds	r24, 0x0ED2	; 0x800ed2 <SysTimerIrqCount>
    1bc8:	8f 5f       	subi	r24, 0xFF	; 255
    1bca:	80 93 d2 0e 	sts	0x0ED2, r24	; 0x800ed2 <SysTimerIrqCount>
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1bce:	80 e1       	ldi	r24, 0x10	; 16
    1bd0:	97 e2       	ldi	r25, 0x27	; 39
    1bd2:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <common_tc_delay>
    1bd6:	08 95       	ret

00001bd8 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
	SysTimerIrqCount = 0;
    1bd8:	10 92 d2 0e 	sts	0x0ED2, r1	; 0x800ed2 <SysTimerIrqCount>
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    1bdc:	82 ee       	ldi	r24, 0xE2	; 226
    1bde:	9d e0       	ldi	r25, 0x0D	; 13
    1be0:	0e 94 c2 01 	call	0x384	; 0x384 <set_common_tc_expiry_callback>
	common_tc_init();
    1be4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <common_tc_init>
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1be8:	80 e1       	ldi	r24, 0x10	; 16
    1bea:	97 e2       	ldi	r25, 0x27	; 39
    1bec:	0e 94 ff 00 	call	0x1fe	; 0x1fe <common_tc_delay>
	timers = NULL;
    1bf0:	10 92 85 0c 	sts	0x0C85, r1	; 0x800c85 <timers+0x1>
    1bf4:	10 92 84 0c 	sts	0x0C84, r1	; 0x800c84 <timers>
    1bf8:	08 95       	ret

00001bfa <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1bfe:	a0 91 84 0c 	lds	r26, 0x0C84	; 0x800c84 <timers>
    1c02:	b0 91 85 0c 	lds	r27, 0x0C85	; 0x800c85 <timers+0x1>
    1c06:	10 97       	sbiw	r26, 0x00	; 0
    1c08:	91 f1       	breq	.+100    	; 0x1c6e <SYS_TimerStop+0x74>
		if (t == timer) {
    1c0a:	a8 17       	cp	r26, r24
    1c0c:	b9 07       	cpc	r27, r25
    1c0e:	51 f5       	brne	.+84     	; 0x1c64 <SYS_TimerStop+0x6a>
    1c10:	0a c0       	rjmp	.+20     	; 0x1c26 <SYS_TimerStop+0x2c>
    1c12:	8e 17       	cp	r24, r30
    1c14:	9f 07       	cpc	r25, r31
    1c16:	29 f5       	brne	.+74     	; 0x1c62 <SYS_TimerStop+0x68>
			if (prev) {
    1c18:	10 97       	sbiw	r26, 0x00	; 0
    1c1a:	31 f0       	breq	.+12     	; 0x1c28 <SYS_TimerStop+0x2e>
				prev->next = t->next;
    1c1c:	20 81       	ld	r18, Z
    1c1e:	31 81       	ldd	r19, Z+1	; 0x01
    1c20:	2d 93       	st	X+, r18
    1c22:	3c 93       	st	X, r19
    1c24:	07 c0       	rjmp	.+14     	; 0x1c34 <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1c26:	fc 01       	movw	r30, r24
		if (t == timer) {
			if (prev) {
				prev->next = t->next;
			} else {
				timers = t->next;
    1c28:	20 81       	ld	r18, Z
    1c2a:	31 81       	ldd	r19, Z+1	; 0x01
    1c2c:	30 93 85 0c 	sts	0x0C85, r19	; 0x800c85 <timers+0x1>
    1c30:	20 93 84 0c 	sts	0x0C84, r18	; 0x800c84 <timers>
			}

			if (t->next) {
    1c34:	01 90       	ld	r0, Z+
    1c36:	f0 81       	ld	r31, Z
    1c38:	e0 2d       	mov	r30, r0
    1c3a:	30 97       	sbiw	r30, 0x00	; 0
    1c3c:	c1 f0       	breq	.+48     	; 0x1c6e <SYS_TimerStop+0x74>
				t->next->timeout += timer->timeout;
    1c3e:	42 81       	ldd	r20, Z+2	; 0x02
    1c40:	53 81       	ldd	r21, Z+3	; 0x03
    1c42:	64 81       	ldd	r22, Z+4	; 0x04
    1c44:	75 81       	ldd	r23, Z+5	; 0x05
    1c46:	ec 01       	movw	r28, r24
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4c:	ac 81       	ldd	r26, Y+4	; 0x04
    1c4e:	bd 81       	ldd	r27, Y+5	; 0x05
    1c50:	84 0f       	add	r24, r20
    1c52:	95 1f       	adc	r25, r21
    1c54:	a6 1f       	adc	r26, r22
    1c56:	b7 1f       	adc	r27, r23
    1c58:	82 83       	std	Z+2, r24	; 0x02
    1c5a:	93 83       	std	Z+3, r25	; 0x03
    1c5c:	a4 83       	std	Z+4, r26	; 0x04
    1c5e:	b5 83       	std	Z+5, r27	; 0x05
    1c60:	06 c0       	rjmp	.+12     	; 0x1c6e <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1c62:	df 01       	movw	r26, r30
    1c64:	ed 91       	ld	r30, X+
    1c66:	fc 91       	ld	r31, X
    1c68:	11 97       	sbiw	r26, 0x01	; 1
    1c6a:	30 97       	sbiw	r30, 0x00	; 0
    1c6c:	91 f6       	brne	.-92     	; 0x1c12 <SYS_TimerStop+0x18>
			break;
		}

		prev = t;
	}
}
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	08 95       	ret

00001c74 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1c74:	e0 91 84 0c 	lds	r30, 0x0C84	; 0x800c84 <timers>
    1c78:	f0 91 85 0c 	lds	r31, 0x0C85	; 0x800c85 <timers+0x1>
    1c7c:	30 97       	sbiw	r30, 0x00	; 0
    1c7e:	71 f0       	breq	.+28     	; 0x1c9c <SYS_TimerStarted+0x28>
		if (t == timer) {
    1c80:	e8 17       	cp	r30, r24
    1c82:	f9 07       	cpc	r31, r25
    1c84:	21 f4       	brne	.+8      	; 0x1c8e <SYS_TimerStarted+0x1a>
    1c86:	0c c0       	rjmp	.+24     	; 0x1ca0 <SYS_TimerStarted+0x2c>
    1c88:	8e 17       	cp	r24, r30
    1c8a:	9f 07       	cpc	r25, r31
    1c8c:	59 f0       	breq	.+22     	; 0x1ca4 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1c8e:	01 90       	ld	r0, Z+
    1c90:	f0 81       	ld	r31, Z
    1c92:	e0 2d       	mov	r30, r0
    1c94:	30 97       	sbiw	r30, 0x00	; 0
    1c96:	c1 f7       	brne	.-16     	; 0x1c88 <SYS_TimerStarted+0x14>
		if (t == timer) {
			return true;
		}
	}
	return false;
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	08 95       	ret
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	08 95       	ret
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return false;
}
    1ca6:	08 95       	ret

00001ca8 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	ec 01       	movw	r28, r24
	if (!SYS_TimerStarted(timer)) {
    1cae:	e2 df       	rcall	.-60     	; 0x1c74 <SYS_TimerStarted>
    1cb0:	81 11       	cpse	r24, r1
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <SYS_TimerStart+0x10>
		placeTimer(timer);
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	22 df       	rcall	.-444    	; 0x1afc <placeTimer>
	}
}
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	08 95       	ret

00001cbe <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1cbe:	cf 92       	push	r12
    1cc0:	df 92       	push	r13
    1cc2:	ef 92       	push	r14
    1cc4:	ff 92       	push	r15
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	1f 92       	push	r1
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    1cd4:	80 91 d2 0e 	lds	r24, 0x0ED2	; 0x800ed2 <SysTimerIrqCount>
    1cd8:	88 23       	and	r24, r24
    1cda:	09 f4       	brne	.+2      	; 0x1cde <SYS_TimerTaskHandler+0x20>
    1cdc:	53 c0       	rjmp	.+166    	; 0x1d84 <SYS_TimerTaskHandler+0xc6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1cde:	8f b7       	in	r24, 0x3f	; 63
    1ce0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1ce2:	f8 94       	cli
	return flags;
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    1ce6:	c0 90 d2 0e 	lds	r12, 0x0ED2	; 0x800ed2 <SysTimerIrqCount>
	SysTimerIrqCount = 0;
    1cea:	10 92 d2 0e 	sts	0x0ED2, r1	; 0x800ed2 <SysTimerIrqCount>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1cee:	8f bf       	out	0x3f, r24	; 63
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    1cf0:	d1 2c       	mov	r13, r1
    1cf2:	e1 2c       	mov	r14, r1
    1cf4:	f1 2c       	mov	r15, r1
    1cf6:	cc 0c       	add	r12, r12
    1cf8:	dd 1c       	adc	r13, r13
    1cfa:	ee 1c       	adc	r14, r14
    1cfc:	ff 1c       	adc	r15, r15
    1cfe:	d7 01       	movw	r26, r14
    1d00:	c6 01       	movw	r24, r12
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	aa 1f       	adc	r26, r26
    1d08:	bb 1f       	adc	r27, r27
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	aa 1f       	adc	r26, r26
    1d10:	bb 1f       	adc	r27, r27
    1d12:	c8 0e       	add	r12, r24
    1d14:	d9 1e       	adc	r13, r25
    1d16:	ea 1e       	adc	r14, r26
    1d18:	fb 1e       	adc	r15, r27

	while (timers && (timers->timeout <= elapsed)) {
    1d1a:	1b c0       	rjmp	.+54     	; 0x1d52 <SYS_TimerTaskHandler+0x94>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    1d1c:	c8 1a       	sub	r12, r24
    1d1e:	d9 0a       	sbc	r13, r25
    1d20:	ea 0a       	sbc	r14, r26
    1d22:	fb 0a       	sbc	r15, r27
		timers = timers->next;
    1d24:	d8 01       	movw	r26, r16
    1d26:	8d 91       	ld	r24, X+
    1d28:	9c 91       	ld	r25, X
    1d2a:	11 97       	sbiw	r26, 0x01	; 1
    1d2c:	90 93 85 0c 	sts	0x0C85, r25	; 0x800c85 <timers+0x1>
    1d30:	80 93 84 0c 	sts	0x0C84, r24	; 0x800c84 <timers>
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    1d34:	1a 96       	adiw	r26, 0x0a	; 10
    1d36:	8c 91       	ld	r24, X
    1d38:	81 30       	cpi	r24, 0x01	; 1
    1d3a:	11 f4       	brne	.+4      	; 0x1d40 <SYS_TimerTaskHandler+0x82>
			placeTimer(timer);
    1d3c:	c8 01       	movw	r24, r16
    1d3e:	de de       	rcall	.-580    	; 0x1afc <placeTimer>
		}

		if (timer->handler) {
    1d40:	d8 01       	movw	r26, r16
    1d42:	1b 96       	adiw	r26, 0x0b	; 11
    1d44:	ed 91       	ld	r30, X+
    1d46:	fc 91       	ld	r31, X
    1d48:	1c 97       	sbiw	r26, 0x0c	; 12
    1d4a:	30 97       	sbiw	r30, 0x00	; 0
    1d4c:	11 f0       	breq	.+4      	; 0x1d52 <SYS_TimerTaskHandler+0x94>
			timer->handler(timer);
    1d4e:	c8 01       	movw	r24, r16
    1d50:	19 95       	eicall
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    1d52:	00 91 84 0c 	lds	r16, 0x0C84	; 0x800c84 <timers>
    1d56:	10 91 85 0c 	lds	r17, 0x0C85	; 0x800c85 <timers+0x1>
    1d5a:	01 15       	cp	r16, r1
    1d5c:	11 05       	cpc	r17, r1
    1d5e:	91 f0       	breq	.+36     	; 0x1d84 <SYS_TimerTaskHandler+0xc6>
    1d60:	f8 01       	movw	r30, r16
    1d62:	82 81       	ldd	r24, Z+2	; 0x02
    1d64:	93 81       	ldd	r25, Z+3	; 0x03
    1d66:	a4 81       	ldd	r26, Z+4	; 0x04
    1d68:	b5 81       	ldd	r27, Z+5	; 0x05
    1d6a:	c8 16       	cp	r12, r24
    1d6c:	d9 06       	cpc	r13, r25
    1d6e:	ea 06       	cpc	r14, r26
    1d70:	fb 06       	cpc	r15, r27
    1d72:	a0 f6       	brcc	.-88     	; 0x1d1c <SYS_TimerTaskHandler+0x5e>
			timer->handler(timer);
		}
	}

	if (timers) {
		timers->timeout -= elapsed;
    1d74:	8c 19       	sub	r24, r12
    1d76:	9d 09       	sbc	r25, r13
    1d78:	ae 09       	sbc	r26, r14
    1d7a:	bf 09       	sbc	r27, r15
    1d7c:	82 83       	std	Z+2, r24	; 0x02
    1d7e:	93 83       	std	Z+3, r25	; 0x03
    1d80:	a4 83       	std	Z+4, r26	; 0x04
    1d82:	b5 83       	std	Z+5, r27	; 0x05
	}
}
    1d84:	0f 90       	pop	r0
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	08 95       	ret

00001d98 <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
    1d98:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <tmr_ovf_callback>
    1d9c:	08 95       	ret

00001d9e <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
    1d9e:	0c 94 b3 01 	jmp	0x366	; 0x366 <tmr_cca_callback>
    1da2:	08 95       	ret

00001da4 <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
    1da4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    1da8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
    1dac:	08 95       	ret

00001dae <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    1dae:	ef e6       	ldi	r30, 0x6F	; 111
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	8d 7f       	andi	r24, 0xFD	; 253
    1db6:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
    1db8:	b1 9a       	sbi	0x16, 1	; 22
    1dba:	08 95       	ret

00001dbc <tmr_enable_cc_interrupt>:
    1dbc:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
    1dbe:	ef e6       	ldi	r30, 0x6F	; 111
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	82 60       	ori	r24, 0x02	; 2
    1dc6:	80 83       	st	Z, r24
    1dc8:	08 95       	ret

00001dca <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    1dca:	ef e6       	ldi	r30, 0x6F	; 111
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	81 60       	ori	r24, 0x01	; 1
    1dd2:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
    1dd4:	b0 9a       	sbi	0x16, 0	; 22
    1dd6:	08 95       	ret

00001dd8 <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
    1dd8:	80 e8       	ldi	r24, 0x80	; 128
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	82 c3       	rjmp	.+1796   	; 0x24e2 <tc_disable>
    1dde:	08 95       	ret

00001de0 <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
    1de0:	e9 e8       	ldi	r30, 0x89	; 137
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	20 81       	ld	r18, Z
    1de6:	92 2b       	or	r25, r18
    1de8:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
    1dea:	e8 e8       	ldi	r30, 0x88	; 136
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	90 81       	ld	r25, Z
    1df0:	89 2b       	or	r24, r25
    1df2:	80 83       	st	Z, r24
    1df4:	08 95       	ret

00001df6 <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	1f 92       	push	r1
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1e00:	8f b7       	in	r24, 0x3f	; 63
    1e02:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1e04:	f8 94       	cli
	return flags;
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
    1e08:	0f 90       	pop	r0
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	08 95       	ret

00001e10 <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1e10:	8f bf       	out	0x3f, r24	; 63
    1e12:	08 95       	ret

00001e14 <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
    1e18:	80 e8       	ldi	r24, 0x80	; 128
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	eb d2       	rcall	.+1494   	; 0x23f4 <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
    1e1e:	6c ec       	ldi	r22, 0xCC	; 204
    1e20:	7e e0       	ldi	r23, 0x0E	; 14
    1e22:	80 e8       	ldi	r24, 0x80	; 128
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	d4 d3       	rcall	.+1960   	; 0x25d0 <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    1e28:	cf e6       	ldi	r28, 0x6F	; 111
    1e2a:	d0 e0       	ldi	r29, 0x00	; 0
    1e2c:	88 81       	ld	r24, Y
    1e2e:	81 60       	ori	r24, 0x01	; 1
    1e30:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
    1e32:	6f ec       	ldi	r22, 0xCF	; 207
    1e34:	7e e0       	ldi	r23, 0x0E	; 14
    1e36:	80 e8       	ldi	r24, 0x80	; 128
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	ea d3       	rcall	.+2004   	; 0x2610 <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    1e3c:	88 81       	ld	r24, Y
    1e3e:	8d 7f       	andi	r24, 0xFD	; 253
    1e40:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
    1e42:	e1 e8       	ldi	r30, 0x81	; 129
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	81 60       	ori	r24, 0x01	; 1
    1e4a:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	08 95       	ret

00001e54 <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
    1e54:	1f 92       	push	r1
    1e56:	0f 92       	push	r0
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	0f 92       	push	r0
    1e5c:	11 24       	eor	r1, r1
    1e5e:	0b b6       	in	r0, 0x3b	; 59
    1e60:	0f 92       	push	r0
    1e62:	2f 93       	push	r18
    1e64:	3f 93       	push	r19
    1e66:	4f 93       	push	r20
    1e68:	5f 93       	push	r21
    1e6a:	6f 93       	push	r22
    1e6c:	7f 93       	push	r23
    1e6e:	8f 93       	push	r24
    1e70:	9f 93       	push	r25
    1e72:	af 93       	push	r26
    1e74:	bf 93       	push	r27
    1e76:	ef 93       	push	r30
    1e78:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
    1e7a:	e0 91 a4 0c 	lds	r30, 0x0CA4	; 0x800ca4 <tc_tccr1_ovf_callback>
    1e7e:	f0 91 a5 0c 	lds	r31, 0x0CA5	; 0x800ca5 <tc_tccr1_ovf_callback+0x1>
    1e82:	30 97       	sbiw	r30, 0x00	; 0
    1e84:	09 f0       	breq	.+2      	; 0x1e88 <__vector_20+0x34>
		tc_tccr1_ovf_callback();
    1e86:	19 95       	eicall
	}
}
    1e88:	ff 91       	pop	r31
    1e8a:	ef 91       	pop	r30
    1e8c:	bf 91       	pop	r27
    1e8e:	af 91       	pop	r26
    1e90:	9f 91       	pop	r25
    1e92:	8f 91       	pop	r24
    1e94:	7f 91       	pop	r23
    1e96:	6f 91       	pop	r22
    1e98:	5f 91       	pop	r21
    1e9a:	4f 91       	pop	r20
    1e9c:	3f 91       	pop	r19
    1e9e:	2f 91       	pop	r18
    1ea0:	0f 90       	pop	r0
    1ea2:	0b be       	out	0x3b, r0	; 59
    1ea4:	0f 90       	pop	r0
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	0f 90       	pop	r0
    1eaa:	1f 90       	pop	r1
    1eac:	18 95       	reti

00001eae <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
    1eae:	1f 92       	push	r1
    1eb0:	0f 92       	push	r0
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	0f 92       	push	r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	0b b6       	in	r0, 0x3b	; 59
    1eba:	0f 92       	push	r0
    1ebc:	2f 93       	push	r18
    1ebe:	3f 93       	push	r19
    1ec0:	4f 93       	push	r20
    1ec2:	5f 93       	push	r21
    1ec4:	6f 93       	push	r22
    1ec6:	7f 93       	push	r23
    1ec8:	8f 93       	push	r24
    1eca:	9f 93       	push	r25
    1ecc:	af 93       	push	r26
    1ece:	bf 93       	push	r27
    1ed0:	ef 93       	push	r30
    1ed2:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
    1ed4:	e0 91 a2 0c 	lds	r30, 0x0CA2	; 0x800ca2 <tc_tccr1_compa_callback>
    1ed8:	f0 91 a3 0c 	lds	r31, 0x0CA3	; 0x800ca3 <tc_tccr1_compa_callback+0x1>
    1edc:	30 97       	sbiw	r30, 0x00	; 0
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <__vector_17+0x34>
		tc_tccr1_compa_callback();
    1ee0:	19 95       	eicall
	}
}
    1ee2:	ff 91       	pop	r31
    1ee4:	ef 91       	pop	r30
    1ee6:	bf 91       	pop	r27
    1ee8:	af 91       	pop	r26
    1eea:	9f 91       	pop	r25
    1eec:	8f 91       	pop	r24
    1eee:	7f 91       	pop	r23
    1ef0:	6f 91       	pop	r22
    1ef2:	5f 91       	pop	r21
    1ef4:	4f 91       	pop	r20
    1ef6:	3f 91       	pop	r19
    1ef8:	2f 91       	pop	r18
    1efa:	0f 90       	pop	r0
    1efc:	0b be       	out	0x3b, r0	; 59
    1efe:	0f 90       	pop	r0
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	0f 90       	pop	r0
    1f04:	1f 90       	pop	r1
    1f06:	18 95       	reti

00001f08 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
    1f08:	1f 92       	push	r1
    1f0a:	0f 92       	push	r0
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	0f 92       	push	r0
    1f10:	11 24       	eor	r1, r1
    1f12:	0b b6       	in	r0, 0x3b	; 59
    1f14:	0f 92       	push	r0
    1f16:	2f 93       	push	r18
    1f18:	3f 93       	push	r19
    1f1a:	4f 93       	push	r20
    1f1c:	5f 93       	push	r21
    1f1e:	6f 93       	push	r22
    1f20:	7f 93       	push	r23
    1f22:	8f 93       	push	r24
    1f24:	9f 93       	push	r25
    1f26:	af 93       	push	r26
    1f28:	bf 93       	push	r27
    1f2a:	ef 93       	push	r30
    1f2c:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
    1f2e:	e0 91 a0 0c 	lds	r30, 0x0CA0	; 0x800ca0 <tc_tccr1_compb_callback>
    1f32:	f0 91 a1 0c 	lds	r31, 0x0CA1	; 0x800ca1 <tc_tccr1_compb_callback+0x1>
    1f36:	30 97       	sbiw	r30, 0x00	; 0
    1f38:	09 f0       	breq	.+2      	; 0x1f3c <__vector_18+0x34>
		tc_tccr1_compb_callback();
    1f3a:	19 95       	eicall
	}
}
    1f3c:	ff 91       	pop	r31
    1f3e:	ef 91       	pop	r30
    1f40:	bf 91       	pop	r27
    1f42:	af 91       	pop	r26
    1f44:	9f 91       	pop	r25
    1f46:	8f 91       	pop	r24
    1f48:	7f 91       	pop	r23
    1f4a:	6f 91       	pop	r22
    1f4c:	5f 91       	pop	r21
    1f4e:	4f 91       	pop	r20
    1f50:	3f 91       	pop	r19
    1f52:	2f 91       	pop	r18
    1f54:	0f 90       	pop	r0
    1f56:	0b be       	out	0x3b, r0	; 59
    1f58:	0f 90       	pop	r0
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	0f 90       	pop	r0
    1f5e:	1f 90       	pop	r1
    1f60:	18 95       	reti

00001f62 <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
    1f62:	1f 92       	push	r1
    1f64:	0f 92       	push	r0
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	0f 92       	push	r0
    1f6a:	11 24       	eor	r1, r1
    1f6c:	0b b6       	in	r0, 0x3b	; 59
    1f6e:	0f 92       	push	r0
    1f70:	2f 93       	push	r18
    1f72:	3f 93       	push	r19
    1f74:	4f 93       	push	r20
    1f76:	5f 93       	push	r21
    1f78:	6f 93       	push	r22
    1f7a:	7f 93       	push	r23
    1f7c:	8f 93       	push	r24
    1f7e:	9f 93       	push	r25
    1f80:	af 93       	push	r26
    1f82:	bf 93       	push	r27
    1f84:	ef 93       	push	r30
    1f86:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
    1f88:	e0 91 9e 0c 	lds	r30, 0x0C9E	; 0x800c9e <tc_tccr1_compc_callback>
    1f8c:	f0 91 9f 0c 	lds	r31, 0x0C9F	; 0x800c9f <tc_tccr1_compc_callback+0x1>
    1f90:	30 97       	sbiw	r30, 0x00	; 0
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <__vector_19+0x34>
		tc_tccr1_compc_callback();
    1f94:	19 95       	eicall
	}
}
    1f96:	ff 91       	pop	r31
    1f98:	ef 91       	pop	r30
    1f9a:	bf 91       	pop	r27
    1f9c:	af 91       	pop	r26
    1f9e:	9f 91       	pop	r25
    1fa0:	8f 91       	pop	r24
    1fa2:	7f 91       	pop	r23
    1fa4:	6f 91       	pop	r22
    1fa6:	5f 91       	pop	r21
    1fa8:	4f 91       	pop	r20
    1faa:	3f 91       	pop	r19
    1fac:	2f 91       	pop	r18
    1fae:	0f 90       	pop	r0
    1fb0:	0b be       	out	0x3b, r0	; 59
    1fb2:	0f 90       	pop	r0
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	0f 90       	pop	r0
    1fb8:	1f 90       	pop	r1
    1fba:	18 95       	reti

00001fbc <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
    1fbc:	1f 92       	push	r1
    1fbe:	0f 92       	push	r0
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	0f 92       	push	r0
    1fc4:	11 24       	eor	r1, r1
    1fc6:	0b b6       	in	r0, 0x3b	; 59
    1fc8:	0f 92       	push	r0
    1fca:	2f 93       	push	r18
    1fcc:	3f 93       	push	r19
    1fce:	4f 93       	push	r20
    1fd0:	5f 93       	push	r21
    1fd2:	6f 93       	push	r22
    1fd4:	7f 93       	push	r23
    1fd6:	8f 93       	push	r24
    1fd8:	9f 93       	push	r25
    1fda:	af 93       	push	r26
    1fdc:	bf 93       	push	r27
    1fde:	ef 93       	push	r30
    1fe0:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
    1fe2:	e0 91 9c 0c 	lds	r30, 0x0C9C	; 0x800c9c <tc_tccr3_ovf_callback>
    1fe6:	f0 91 9d 0c 	lds	r31, 0x0C9D	; 0x800c9d <tc_tccr3_ovf_callback+0x1>
    1fea:	30 97       	sbiw	r30, 0x00	; 0
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <__vector_35+0x34>
		tc_tccr3_ovf_callback();
    1fee:	19 95       	eicall
	}
}
    1ff0:	ff 91       	pop	r31
    1ff2:	ef 91       	pop	r30
    1ff4:	bf 91       	pop	r27
    1ff6:	af 91       	pop	r26
    1ff8:	9f 91       	pop	r25
    1ffa:	8f 91       	pop	r24
    1ffc:	7f 91       	pop	r23
    1ffe:	6f 91       	pop	r22
    2000:	5f 91       	pop	r21
    2002:	4f 91       	pop	r20
    2004:	3f 91       	pop	r19
    2006:	2f 91       	pop	r18
    2008:	0f 90       	pop	r0
    200a:	0b be       	out	0x3b, r0	; 59
    200c:	0f 90       	pop	r0
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	0f 90       	pop	r0
    2012:	1f 90       	pop	r1
    2014:	18 95       	reti

00002016 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
    2016:	1f 92       	push	r1
    2018:	0f 92       	push	r0
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	0f 92       	push	r0
    201e:	11 24       	eor	r1, r1
    2020:	0b b6       	in	r0, 0x3b	; 59
    2022:	0f 92       	push	r0
    2024:	2f 93       	push	r18
    2026:	3f 93       	push	r19
    2028:	4f 93       	push	r20
    202a:	5f 93       	push	r21
    202c:	6f 93       	push	r22
    202e:	7f 93       	push	r23
    2030:	8f 93       	push	r24
    2032:	9f 93       	push	r25
    2034:	af 93       	push	r26
    2036:	bf 93       	push	r27
    2038:	ef 93       	push	r30
    203a:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
    203c:	e0 91 9a 0c 	lds	r30, 0x0C9A	; 0x800c9a <tc_tccr3_compa_callback>
    2040:	f0 91 9b 0c 	lds	r31, 0x0C9B	; 0x800c9b <tc_tccr3_compa_callback+0x1>
    2044:	30 97       	sbiw	r30, 0x00	; 0
    2046:	09 f0       	breq	.+2      	; 0x204a <__vector_32+0x34>
		tc_tccr3_compa_callback();
    2048:	19 95       	eicall
	}
}
    204a:	ff 91       	pop	r31
    204c:	ef 91       	pop	r30
    204e:	bf 91       	pop	r27
    2050:	af 91       	pop	r26
    2052:	9f 91       	pop	r25
    2054:	8f 91       	pop	r24
    2056:	7f 91       	pop	r23
    2058:	6f 91       	pop	r22
    205a:	5f 91       	pop	r21
    205c:	4f 91       	pop	r20
    205e:	3f 91       	pop	r19
    2060:	2f 91       	pop	r18
    2062:	0f 90       	pop	r0
    2064:	0b be       	out	0x3b, r0	; 59
    2066:	0f 90       	pop	r0
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	0f 90       	pop	r0
    206c:	1f 90       	pop	r1
    206e:	18 95       	reti

00002070 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    2070:	1f 92       	push	r1
    2072:	0f 92       	push	r0
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	0f 92       	push	r0
    2078:	11 24       	eor	r1, r1
    207a:	0b b6       	in	r0, 0x3b	; 59
    207c:	0f 92       	push	r0
    207e:	2f 93       	push	r18
    2080:	3f 93       	push	r19
    2082:	4f 93       	push	r20
    2084:	5f 93       	push	r21
    2086:	6f 93       	push	r22
    2088:	7f 93       	push	r23
    208a:	8f 93       	push	r24
    208c:	9f 93       	push	r25
    208e:	af 93       	push	r26
    2090:	bf 93       	push	r27
    2092:	ef 93       	push	r30
    2094:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
    2096:	e0 91 98 0c 	lds	r30, 0x0C98	; 0x800c98 <tc_tccr3_compb_callback>
    209a:	f0 91 99 0c 	lds	r31, 0x0C99	; 0x800c99 <tc_tccr3_compb_callback+0x1>
    209e:	30 97       	sbiw	r30, 0x00	; 0
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <__vector_33+0x34>
		tc_tccr3_compb_callback();
    20a2:	19 95       	eicall
	}
}
    20a4:	ff 91       	pop	r31
    20a6:	ef 91       	pop	r30
    20a8:	bf 91       	pop	r27
    20aa:	af 91       	pop	r26
    20ac:	9f 91       	pop	r25
    20ae:	8f 91       	pop	r24
    20b0:	7f 91       	pop	r23
    20b2:	6f 91       	pop	r22
    20b4:	5f 91       	pop	r21
    20b6:	4f 91       	pop	r20
    20b8:	3f 91       	pop	r19
    20ba:	2f 91       	pop	r18
    20bc:	0f 90       	pop	r0
    20be:	0b be       	out	0x3b, r0	; 59
    20c0:	0f 90       	pop	r0
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	0f 90       	pop	r0
    20c6:	1f 90       	pop	r1
    20c8:	18 95       	reti

000020ca <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
    20ca:	1f 92       	push	r1
    20cc:	0f 92       	push	r0
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	0f 92       	push	r0
    20d2:	11 24       	eor	r1, r1
    20d4:	0b b6       	in	r0, 0x3b	; 59
    20d6:	0f 92       	push	r0
    20d8:	2f 93       	push	r18
    20da:	3f 93       	push	r19
    20dc:	4f 93       	push	r20
    20de:	5f 93       	push	r21
    20e0:	6f 93       	push	r22
    20e2:	7f 93       	push	r23
    20e4:	8f 93       	push	r24
    20e6:	9f 93       	push	r25
    20e8:	af 93       	push	r26
    20ea:	bf 93       	push	r27
    20ec:	ef 93       	push	r30
    20ee:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
    20f0:	e0 91 96 0c 	lds	r30, 0x0C96	; 0x800c96 <tc_tccr3_compc_callback>
    20f4:	f0 91 97 0c 	lds	r31, 0x0C97	; 0x800c97 <tc_tccr3_compc_callback+0x1>
    20f8:	30 97       	sbiw	r30, 0x00	; 0
    20fa:	09 f0       	breq	.+2      	; 0x20fe <__vector_34+0x34>
		tc_tccr3_compc_callback();
    20fc:	19 95       	eicall
	}
}
    20fe:	ff 91       	pop	r31
    2100:	ef 91       	pop	r30
    2102:	bf 91       	pop	r27
    2104:	af 91       	pop	r26
    2106:	9f 91       	pop	r25
    2108:	8f 91       	pop	r24
    210a:	7f 91       	pop	r23
    210c:	6f 91       	pop	r22
    210e:	5f 91       	pop	r21
    2110:	4f 91       	pop	r20
    2112:	3f 91       	pop	r19
    2114:	2f 91       	pop	r18
    2116:	0f 90       	pop	r0
    2118:	0b be       	out	0x3b, r0	; 59
    211a:	0f 90       	pop	r0
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	0f 90       	pop	r0
    2120:	1f 90       	pop	r1
    2122:	18 95       	reti

00002124 <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
    2124:	1f 92       	push	r1
    2126:	0f 92       	push	r0
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	0f 92       	push	r0
    212c:	11 24       	eor	r1, r1
    212e:	0b b6       	in	r0, 0x3b	; 59
    2130:	0f 92       	push	r0
    2132:	2f 93       	push	r18
    2134:	3f 93       	push	r19
    2136:	4f 93       	push	r20
    2138:	5f 93       	push	r21
    213a:	6f 93       	push	r22
    213c:	7f 93       	push	r23
    213e:	8f 93       	push	r24
    2140:	9f 93       	push	r25
    2142:	af 93       	push	r26
    2144:	bf 93       	push	r27
    2146:	ef 93       	push	r30
    2148:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
    214a:	e0 91 94 0c 	lds	r30, 0x0C94	; 0x800c94 <tc_tccr4_ovf_callback>
    214e:	f0 91 95 0c 	lds	r31, 0x0C95	; 0x800c95 <tc_tccr4_ovf_callback+0x1>
    2152:	30 97       	sbiw	r30, 0x00	; 0
    2154:	09 f0       	breq	.+2      	; 0x2158 <__vector_45+0x34>
		tc_tccr4_ovf_callback();
    2156:	19 95       	eicall
	}
}
    2158:	ff 91       	pop	r31
    215a:	ef 91       	pop	r30
    215c:	bf 91       	pop	r27
    215e:	af 91       	pop	r26
    2160:	9f 91       	pop	r25
    2162:	8f 91       	pop	r24
    2164:	7f 91       	pop	r23
    2166:	6f 91       	pop	r22
    2168:	5f 91       	pop	r21
    216a:	4f 91       	pop	r20
    216c:	3f 91       	pop	r19
    216e:	2f 91       	pop	r18
    2170:	0f 90       	pop	r0
    2172:	0b be       	out	0x3b, r0	; 59
    2174:	0f 90       	pop	r0
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	0f 90       	pop	r0
    217a:	1f 90       	pop	r1
    217c:	18 95       	reti

0000217e <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    217e:	1f 92       	push	r1
    2180:	0f 92       	push	r0
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	0f 92       	push	r0
    2186:	11 24       	eor	r1, r1
    2188:	0b b6       	in	r0, 0x3b	; 59
    218a:	0f 92       	push	r0
    218c:	2f 93       	push	r18
    218e:	3f 93       	push	r19
    2190:	4f 93       	push	r20
    2192:	5f 93       	push	r21
    2194:	6f 93       	push	r22
    2196:	7f 93       	push	r23
    2198:	8f 93       	push	r24
    219a:	9f 93       	push	r25
    219c:	af 93       	push	r26
    219e:	bf 93       	push	r27
    21a0:	ef 93       	push	r30
    21a2:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
    21a4:	e0 91 92 0c 	lds	r30, 0x0C92	; 0x800c92 <tc_tccr4_compa_callback>
    21a8:	f0 91 93 0c 	lds	r31, 0x0C93	; 0x800c93 <tc_tccr4_compa_callback+0x1>
    21ac:	30 97       	sbiw	r30, 0x00	; 0
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <__vector_42+0x34>
		tc_tccr4_compa_callback();
    21b0:	19 95       	eicall
	}
}
    21b2:	ff 91       	pop	r31
    21b4:	ef 91       	pop	r30
    21b6:	bf 91       	pop	r27
    21b8:	af 91       	pop	r26
    21ba:	9f 91       	pop	r25
    21bc:	8f 91       	pop	r24
    21be:	7f 91       	pop	r23
    21c0:	6f 91       	pop	r22
    21c2:	5f 91       	pop	r21
    21c4:	4f 91       	pop	r20
    21c6:	3f 91       	pop	r19
    21c8:	2f 91       	pop	r18
    21ca:	0f 90       	pop	r0
    21cc:	0b be       	out	0x3b, r0	; 59
    21ce:	0f 90       	pop	r0
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	0f 90       	pop	r0
    21d4:	1f 90       	pop	r1
    21d6:	18 95       	reti

000021d8 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
    21d8:	1f 92       	push	r1
    21da:	0f 92       	push	r0
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	0f 92       	push	r0
    21e0:	11 24       	eor	r1, r1
    21e2:	0b b6       	in	r0, 0x3b	; 59
    21e4:	0f 92       	push	r0
    21e6:	2f 93       	push	r18
    21e8:	3f 93       	push	r19
    21ea:	4f 93       	push	r20
    21ec:	5f 93       	push	r21
    21ee:	6f 93       	push	r22
    21f0:	7f 93       	push	r23
    21f2:	8f 93       	push	r24
    21f4:	9f 93       	push	r25
    21f6:	af 93       	push	r26
    21f8:	bf 93       	push	r27
    21fa:	ef 93       	push	r30
    21fc:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
    21fe:	e0 91 90 0c 	lds	r30, 0x0C90	; 0x800c90 <tc_tccr4_compb_callback>
    2202:	f0 91 91 0c 	lds	r31, 0x0C91	; 0x800c91 <tc_tccr4_compb_callback+0x1>
    2206:	30 97       	sbiw	r30, 0x00	; 0
    2208:	09 f0       	breq	.+2      	; 0x220c <__vector_43+0x34>
		tc_tccr4_compb_callback();
    220a:	19 95       	eicall
	}
}
    220c:	ff 91       	pop	r31
    220e:	ef 91       	pop	r30
    2210:	bf 91       	pop	r27
    2212:	af 91       	pop	r26
    2214:	9f 91       	pop	r25
    2216:	8f 91       	pop	r24
    2218:	7f 91       	pop	r23
    221a:	6f 91       	pop	r22
    221c:	5f 91       	pop	r21
    221e:	4f 91       	pop	r20
    2220:	3f 91       	pop	r19
    2222:	2f 91       	pop	r18
    2224:	0f 90       	pop	r0
    2226:	0b be       	out	0x3b, r0	; 59
    2228:	0f 90       	pop	r0
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	0f 90       	pop	r0
    222e:	1f 90       	pop	r1
    2230:	18 95       	reti

00002232 <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
    2232:	1f 92       	push	r1
    2234:	0f 92       	push	r0
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	0f 92       	push	r0
    223a:	11 24       	eor	r1, r1
    223c:	0b b6       	in	r0, 0x3b	; 59
    223e:	0f 92       	push	r0
    2240:	2f 93       	push	r18
    2242:	3f 93       	push	r19
    2244:	4f 93       	push	r20
    2246:	5f 93       	push	r21
    2248:	6f 93       	push	r22
    224a:	7f 93       	push	r23
    224c:	8f 93       	push	r24
    224e:	9f 93       	push	r25
    2250:	af 93       	push	r26
    2252:	bf 93       	push	r27
    2254:	ef 93       	push	r30
    2256:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
    2258:	e0 91 8e 0c 	lds	r30, 0x0C8E	; 0x800c8e <tc_tccr4_compc_callback>
    225c:	f0 91 8f 0c 	lds	r31, 0x0C8F	; 0x800c8f <tc_tccr4_compc_callback+0x1>
    2260:	30 97       	sbiw	r30, 0x00	; 0
    2262:	09 f0       	breq	.+2      	; 0x2266 <__vector_44+0x34>
		tc_tccr4_compc_callback();
    2264:	19 95       	eicall
	}
}
    2266:	ff 91       	pop	r31
    2268:	ef 91       	pop	r30
    226a:	bf 91       	pop	r27
    226c:	af 91       	pop	r26
    226e:	9f 91       	pop	r25
    2270:	8f 91       	pop	r24
    2272:	7f 91       	pop	r23
    2274:	6f 91       	pop	r22
    2276:	5f 91       	pop	r21
    2278:	4f 91       	pop	r20
    227a:	3f 91       	pop	r19
    227c:	2f 91       	pop	r18
    227e:	0f 90       	pop	r0
    2280:	0b be       	out	0x3b, r0	; 59
    2282:	0f 90       	pop	r0
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	0f 90       	pop	r0
    2288:	1f 90       	pop	r1
    228a:	18 95       	reti

0000228c <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
    228c:	1f 92       	push	r1
    228e:	0f 92       	push	r0
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	0f 92       	push	r0
    2294:	11 24       	eor	r1, r1
    2296:	0b b6       	in	r0, 0x3b	; 59
    2298:	0f 92       	push	r0
    229a:	2f 93       	push	r18
    229c:	3f 93       	push	r19
    229e:	4f 93       	push	r20
    22a0:	5f 93       	push	r21
    22a2:	6f 93       	push	r22
    22a4:	7f 93       	push	r23
    22a6:	8f 93       	push	r24
    22a8:	9f 93       	push	r25
    22aa:	af 93       	push	r26
    22ac:	bf 93       	push	r27
    22ae:	ef 93       	push	r30
    22b0:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
    22b2:	e0 91 8c 0c 	lds	r30, 0x0C8C	; 0x800c8c <tc_tccr5_ovf_callback>
    22b6:	f0 91 8d 0c 	lds	r31, 0x0C8D	; 0x800c8d <tc_tccr5_ovf_callback+0x1>
    22ba:	30 97       	sbiw	r30, 0x00	; 0
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <__vector_50+0x34>
		tc_tccr5_ovf_callback();
    22be:	19 95       	eicall
	}
}
    22c0:	ff 91       	pop	r31
    22c2:	ef 91       	pop	r30
    22c4:	bf 91       	pop	r27
    22c6:	af 91       	pop	r26
    22c8:	9f 91       	pop	r25
    22ca:	8f 91       	pop	r24
    22cc:	7f 91       	pop	r23
    22ce:	6f 91       	pop	r22
    22d0:	5f 91       	pop	r21
    22d2:	4f 91       	pop	r20
    22d4:	3f 91       	pop	r19
    22d6:	2f 91       	pop	r18
    22d8:	0f 90       	pop	r0
    22da:	0b be       	out	0x3b, r0	; 59
    22dc:	0f 90       	pop	r0
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	0f 90       	pop	r0
    22e2:	1f 90       	pop	r1
    22e4:	18 95       	reti

000022e6 <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
    22e6:	1f 92       	push	r1
    22e8:	0f 92       	push	r0
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	0f 92       	push	r0
    22ee:	11 24       	eor	r1, r1
    22f0:	0b b6       	in	r0, 0x3b	; 59
    22f2:	0f 92       	push	r0
    22f4:	2f 93       	push	r18
    22f6:	3f 93       	push	r19
    22f8:	4f 93       	push	r20
    22fa:	5f 93       	push	r21
    22fc:	6f 93       	push	r22
    22fe:	7f 93       	push	r23
    2300:	8f 93       	push	r24
    2302:	9f 93       	push	r25
    2304:	af 93       	push	r26
    2306:	bf 93       	push	r27
    2308:	ef 93       	push	r30
    230a:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
    230c:	e0 91 8a 0c 	lds	r30, 0x0C8A	; 0x800c8a <tc_tccr5_compa_callback>
    2310:	f0 91 8b 0c 	lds	r31, 0x0C8B	; 0x800c8b <tc_tccr5_compa_callback+0x1>
    2314:	30 97       	sbiw	r30, 0x00	; 0
    2316:	09 f0       	breq	.+2      	; 0x231a <__vector_47+0x34>
		tc_tccr5_compa_callback();
    2318:	19 95       	eicall
	}
}
    231a:	ff 91       	pop	r31
    231c:	ef 91       	pop	r30
    231e:	bf 91       	pop	r27
    2320:	af 91       	pop	r26
    2322:	9f 91       	pop	r25
    2324:	8f 91       	pop	r24
    2326:	7f 91       	pop	r23
    2328:	6f 91       	pop	r22
    232a:	5f 91       	pop	r21
    232c:	4f 91       	pop	r20
    232e:	3f 91       	pop	r19
    2330:	2f 91       	pop	r18
    2332:	0f 90       	pop	r0
    2334:	0b be       	out	0x3b, r0	; 59
    2336:	0f 90       	pop	r0
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	0f 90       	pop	r0
    233c:	1f 90       	pop	r1
    233e:	18 95       	reti

00002340 <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
    2340:	1f 92       	push	r1
    2342:	0f 92       	push	r0
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	0f 92       	push	r0
    2348:	11 24       	eor	r1, r1
    234a:	0b b6       	in	r0, 0x3b	; 59
    234c:	0f 92       	push	r0
    234e:	2f 93       	push	r18
    2350:	3f 93       	push	r19
    2352:	4f 93       	push	r20
    2354:	5f 93       	push	r21
    2356:	6f 93       	push	r22
    2358:	7f 93       	push	r23
    235a:	8f 93       	push	r24
    235c:	9f 93       	push	r25
    235e:	af 93       	push	r26
    2360:	bf 93       	push	r27
    2362:	ef 93       	push	r30
    2364:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
    2366:	e0 91 88 0c 	lds	r30, 0x0C88	; 0x800c88 <tc_tccr5_compb_callback>
    236a:	f0 91 89 0c 	lds	r31, 0x0C89	; 0x800c89 <tc_tccr5_compb_callback+0x1>
    236e:	30 97       	sbiw	r30, 0x00	; 0
    2370:	09 f0       	breq	.+2      	; 0x2374 <__vector_48+0x34>
		tc_tccr5_compb_callback();
    2372:	19 95       	eicall
	}
}
    2374:	ff 91       	pop	r31
    2376:	ef 91       	pop	r30
    2378:	bf 91       	pop	r27
    237a:	af 91       	pop	r26
    237c:	9f 91       	pop	r25
    237e:	8f 91       	pop	r24
    2380:	7f 91       	pop	r23
    2382:	6f 91       	pop	r22
    2384:	5f 91       	pop	r21
    2386:	4f 91       	pop	r20
    2388:	3f 91       	pop	r19
    238a:	2f 91       	pop	r18
    238c:	0f 90       	pop	r0
    238e:	0b be       	out	0x3b, r0	; 59
    2390:	0f 90       	pop	r0
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	0f 90       	pop	r0
    2396:	1f 90       	pop	r1
    2398:	18 95       	reti

0000239a <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
    239a:	1f 92       	push	r1
    239c:	0f 92       	push	r0
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	0f 92       	push	r0
    23a2:	11 24       	eor	r1, r1
    23a4:	0b b6       	in	r0, 0x3b	; 59
    23a6:	0f 92       	push	r0
    23a8:	2f 93       	push	r18
    23aa:	3f 93       	push	r19
    23ac:	4f 93       	push	r20
    23ae:	5f 93       	push	r21
    23b0:	6f 93       	push	r22
    23b2:	7f 93       	push	r23
    23b4:	8f 93       	push	r24
    23b6:	9f 93       	push	r25
    23b8:	af 93       	push	r26
    23ba:	bf 93       	push	r27
    23bc:	ef 93       	push	r30
    23be:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
    23c0:	e0 91 86 0c 	lds	r30, 0x0C86	; 0x800c86 <tc_tccr5_compc_callback>
    23c4:	f0 91 87 0c 	lds	r31, 0x0C87	; 0x800c87 <tc_tccr5_compc_callback+0x1>
    23c8:	30 97       	sbiw	r30, 0x00	; 0
    23ca:	09 f0       	breq	.+2      	; 0x23ce <__vector_49+0x34>
		tc_tccr5_compc_callback();
    23cc:	19 95       	eicall
	}
}
    23ce:	ff 91       	pop	r31
    23d0:	ef 91       	pop	r30
    23d2:	bf 91       	pop	r27
    23d4:	af 91       	pop	r26
    23d6:	9f 91       	pop	r25
    23d8:	8f 91       	pop	r24
    23da:	7f 91       	pop	r23
    23dc:	6f 91       	pop	r22
    23de:	5f 91       	pop	r21
    23e0:	4f 91       	pop	r20
    23e2:	3f 91       	pop	r19
    23e4:	2f 91       	pop	r18
    23e6:	0f 90       	pop	r0
    23e8:	0b be       	out	0x3b, r0	; 59
    23ea:	0f 90       	pop	r0
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	0f 90       	pop	r0
    23f0:	1f 90       	pop	r1
    23f2:	18 95       	reti

000023f4 <tc_enable>:

void tc_enable(volatile void *tc)
{
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	1f 92       	push	r1
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2400:	2f b7       	in	r18, 0x3f	; 63
    2402:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2404:	f8 94       	cli
	return flags;
    2406:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	09 f4       	brne	.+2      	; 0x240e <tc_enable+0x1a>
    240c:	64 c0       	rjmp	.+200    	; 0x24d6 <tc_enable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    240e:	88 37       	cpi	r24, 0x78	; 120
    2410:	91 05       	cpc	r25, r1
    2412:	49 f4       	brne	.+18     	; 0x2426 <tc_enable+0x32>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    2414:	61 e0       	ldi	r22, 0x01	; 1
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    241c:	60 e1       	ldi	r22, 0x10	; 16
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
    2424:	58 c0       	rjmp	.+176    	; 0x24d6 <tc_enable+0xe2>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2426:	80 3c       	cpi	r24, 0xC0	; 192
    2428:	91 05       	cpc	r25, r1
    242a:	29 f4       	brne	.+10     	; 0x2436 <tc_enable+0x42>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    242c:	62 e0       	ldi	r22, 0x02	; 2
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
    2434:	50 c0       	rjmp	.+160    	; 0x24d6 <tc_enable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2436:	8c 34       	cpi	r24, 0x4C	; 76
    2438:	91 05       	cpc	r25, r1
    243a:	29 f4       	brne	.+10     	; 0x2446 <tc_enable+0x52>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    243c:	64 e0       	ldi	r22, 0x04	; 4
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
    2444:	48 c0       	rjmp	.+144    	; 0x24d6 <tc_enable+0xe2>
	}
#endif

	else if (module == &TCCR1A) {
    2446:	80 38       	cpi	r24, 0x80	; 128
    2448:	91 05       	cpc	r25, r1
    244a:	29 f4       	brne	.+10     	; 0x2456 <tc_enable+0x62>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    244c:	68 e0       	ldi	r22, 0x08	; 8
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
    2454:	40 c0       	rjmp	.+128    	; 0x24d6 <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    2456:	84 34       	cpi	r24, 0x44	; 68
    2458:	91 05       	cpc	r25, r1
    245a:	29 f4       	brne	.+10     	; 0x2466 <tc_enable+0x72>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    245c:	60 e2       	ldi	r22, 0x20	; 32
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
    2464:	38 c0       	rjmp	.+112    	; 0x24d6 <tc_enable+0xe2>
	} else if (module == &TCCR2A) {
    2466:	80 3b       	cpi	r24, 0xB0	; 176
    2468:	91 05       	cpc	r25, r1
    246a:	29 f4       	brne	.+10     	; 0x2476 <tc_enable+0x82>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    246c:	60 e4       	ldi	r22, 0x40	; 64
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
    2474:	30 c0       	rjmp	.+96     	; 0x24d6 <tc_enable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    2476:	88 3b       	cpi	r24, 0xB8	; 184
    2478:	91 05       	cpc	r25, r1
    247a:	29 f4       	brne	.+10     	; 0x2486 <tc_enable+0x92>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    247c:	60 e8       	ldi	r22, 0x80	; 128
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
    2484:	28 c0       	rjmp	.+80     	; 0x24d6 <tc_enable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    2486:	88 3c       	cpi	r24, 0xC8	; 200
    2488:	91 05       	cpc	r25, r1
    248a:	29 f4       	brne	.+10     	; 0x2496 <tc_enable+0xa2>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    248c:	61 e0       	ldi	r22, 0x01	; 1
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
    2494:	20 c0       	rjmp	.+64     	; 0x24d6 <tc_enable+0xe2>
	} else if (module == &TCCR3A) {
    2496:	80 39       	cpi	r24, 0x90	; 144
    2498:	91 05       	cpc	r25, r1
    249a:	29 f4       	brne	.+10     	; 0x24a6 <tc_enable+0xb2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    249c:	68 e0       	ldi	r22, 0x08	; 8
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
    24a4:	18 c0       	rjmp	.+48     	; 0x24d6 <tc_enable+0xe2>
	} else if (module == &TCCR4A) {
    24a6:	80 3a       	cpi	r24, 0xA0	; 160
    24a8:	91 05       	cpc	r25, r1
    24aa:	29 f4       	brne	.+10     	; 0x24b6 <tc_enable+0xc2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    24ac:	60 e1       	ldi	r22, 0x10	; 16
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
    24b4:	10 c0       	rjmp	.+32     	; 0x24d6 <tc_enable+0xe2>
	} else if (module == &TCCR5A) {
    24b6:	80 32       	cpi	r24, 0x20	; 32
    24b8:	21 e0       	ldi	r18, 0x01	; 1
    24ba:	92 07       	cpc	r25, r18
    24bc:	29 f4       	brne	.+10     	; 0x24c8 <tc_enable+0xd4>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    24be:	60 e2       	ldi	r22, 0x20	; 32
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
    24c6:	07 c0       	rjmp	.+14     	; 0x24d6 <tc_enable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    24c8:	83 34       	cpi	r24, 0x43	; 67
    24ca:	91 40       	sbci	r25, 0x01	; 1
    24cc:	21 f4       	brne	.+8      	; 0x24d6 <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    24ce:	60 e4       	ldi	r22, 0x40	; 64
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    24d6:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    24d8:	0f 90       	pop	r0
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	1f 91       	pop	r17
    24e0:	08 95       	ret

000024e2 <tc_disable>:

void tc_disable(volatile void *tc)
{
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	1f 92       	push	r1
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    24ee:	2f b7       	in	r18, 0x3f	; 63
    24f0:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    24f2:	f8 94       	cli
	return flags;
    24f4:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	09 f4       	brne	.+2      	; 0x24fc <tc_disable+0x1a>
    24fa:	64 c0       	rjmp	.+200    	; 0x25c4 <tc_disable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    24fc:	88 37       	cpi	r24, 0x78	; 120
    24fe:	91 05       	cpc	r25, r1
    2500:	49 f4       	brne	.+18     	; 0x2514 <tc_disable+0x32>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    2502:	61 e0       	ldi	r22, 0x01	; 1
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    250a:	60 e1       	ldi	r22, 0x10	; 16
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sysclk_disable_module>
    2512:	58 c0       	rjmp	.+176    	; 0x25c4 <tc_disable+0xe2>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2514:	80 3c       	cpi	r24, 0xC0	; 192
    2516:	91 05       	cpc	r25, r1
    2518:	29 f4       	brne	.+10     	; 0x2524 <tc_disable+0x42>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    251a:	62 e0       	ldi	r22, 0x02	; 2
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sysclk_disable_module>
    2522:	50 c0       	rjmp	.+160    	; 0x25c4 <tc_disable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2524:	8c 34       	cpi	r24, 0x4C	; 76
    2526:	91 05       	cpc	r25, r1
    2528:	29 f4       	brne	.+10     	; 0x2534 <tc_disable+0x52>
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    252a:	64 e0       	ldi	r22, 0x04	; 4
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sysclk_disable_module>
    2532:	48 c0       	rjmp	.+144    	; 0x25c4 <tc_disable+0xe2>
	}
#endif
	else if (module == &TCCR1A) {
    2534:	80 38       	cpi	r24, 0x80	; 128
    2536:	91 05       	cpc	r25, r1
    2538:	29 f4       	brne	.+10     	; 0x2544 <tc_disable+0x62>
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    253a:	68 e0       	ldi	r22, 0x08	; 8
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sysclk_disable_module>
    2542:	40 c0       	rjmp	.+128    	; 0x25c4 <tc_disable+0xe2>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    2544:	84 34       	cpi	r24, 0x44	; 68
    2546:	91 05       	cpc	r25, r1
    2548:	29 f4       	brne	.+10     	; 0x2554 <tc_disable+0x72>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    254a:	60 e2       	ldi	r22, 0x20	; 32
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sysclk_disable_module>
    2552:	38 c0       	rjmp	.+112    	; 0x25c4 <tc_disable+0xe2>
	} else if (module == &TCCR2A) {
    2554:	80 3b       	cpi	r24, 0xB0	; 176
    2556:	91 05       	cpc	r25, r1
    2558:	29 f4       	brne	.+10     	; 0x2564 <tc_disable+0x82>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    255a:	60 e4       	ldi	r22, 0x40	; 64
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sysclk_disable_module>
    2562:	30 c0       	rjmp	.+96     	; 0x25c4 <tc_disable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    2564:	88 3b       	cpi	r24, 0xB8	; 184
    2566:	91 05       	cpc	r25, r1
    2568:	29 f4       	brne	.+10     	; 0x2574 <tc_disable+0x92>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    256a:	60 e8       	ldi	r22, 0x80	; 128
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sysclk_disable_module>
    2572:	28 c0       	rjmp	.+80     	; 0x25c4 <tc_disable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    2574:	88 3c       	cpi	r24, 0xC8	; 200
    2576:	91 05       	cpc	r25, r1
    2578:	29 f4       	brne	.+10     	; 0x2584 <tc_disable+0xa2>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    257a:	61 e0       	ldi	r22, 0x01	; 1
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sysclk_disable_module>
    2582:	20 c0       	rjmp	.+64     	; 0x25c4 <tc_disable+0xe2>
	} else if (module == &TCCR3A) {
    2584:	80 39       	cpi	r24, 0x90	; 144
    2586:	91 05       	cpc	r25, r1
    2588:	29 f4       	brne	.+10     	; 0x2594 <tc_disable+0xb2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    258a:	68 e0       	ldi	r22, 0x08	; 8
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sysclk_disable_module>
    2592:	18 c0       	rjmp	.+48     	; 0x25c4 <tc_disable+0xe2>
	} else if (module == &TCCR4A) {
    2594:	80 3a       	cpi	r24, 0xA0	; 160
    2596:	91 05       	cpc	r25, r1
    2598:	29 f4       	brne	.+10     	; 0x25a4 <tc_disable+0xc2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    259a:	60 e1       	ldi	r22, 0x10	; 16
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sysclk_disable_module>
    25a2:	10 c0       	rjmp	.+32     	; 0x25c4 <tc_disable+0xe2>
	} else if (module == &TCCR5A) {
    25a4:	80 32       	cpi	r24, 0x20	; 32
    25a6:	21 e0       	ldi	r18, 0x01	; 1
    25a8:	92 07       	cpc	r25, r18
    25aa:	29 f4       	brne	.+10     	; 0x25b6 <tc_disable+0xd4>
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    25ac:	60 e2       	ldi	r22, 0x20	; 32
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sysclk_disable_module>
    25b4:	07 c0       	rjmp	.+14     	; 0x25c4 <tc_disable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    25b6:	83 34       	cpi	r24, 0x43	; 67
    25b8:	91 40       	sbci	r25, 0x01	; 1
    25ba:	21 f4       	brne	.+8      	; 0x25c4 <tc_disable+0xe2>
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    25bc:	60 e4       	ldi	r22, 0x40	; 64
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    25c4:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    25c6:	0f 90       	pop	r0
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	08 95       	ret

000025d0 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    25d0:	80 38       	cpi	r24, 0x80	; 128
    25d2:	91 05       	cpc	r25, r1
    25d4:	29 f4       	brne	.+10     	; 0x25e0 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
    25d6:	70 93 a5 0c 	sts	0x0CA5, r23	; 0x800ca5 <tc_tccr1_ovf_callback+0x1>
    25da:	60 93 a4 0c 	sts	0x0CA4, r22	; 0x800ca4 <tc_tccr1_ovf_callback>
    25de:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    25e0:	80 39       	cpi	r24, 0x90	; 144
    25e2:	91 05       	cpc	r25, r1
    25e4:	29 f4       	brne	.+10     	; 0x25f0 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
    25e6:	70 93 9d 0c 	sts	0x0C9D, r23	; 0x800c9d <tc_tccr3_ovf_callback+0x1>
    25ea:	60 93 9c 0c 	sts	0x0C9C, r22	; 0x800c9c <tc_tccr3_ovf_callback>
    25ee:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    25f0:	80 3a       	cpi	r24, 0xA0	; 160
    25f2:	91 05       	cpc	r25, r1
    25f4:	29 f4       	brne	.+10     	; 0x2600 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
    25f6:	70 93 95 0c 	sts	0x0C95, r23	; 0x800c95 <tc_tccr4_ovf_callback+0x1>
    25fa:	60 93 94 0c 	sts	0x0C94, r22	; 0x800c94 <tc_tccr4_ovf_callback>
    25fe:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    2600:	80 32       	cpi	r24, 0x20	; 32
    2602:	91 40       	sbci	r25, 0x01	; 1
    2604:	21 f4       	brne	.+8      	; 0x260e <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
    2606:	70 93 8d 0c 	sts	0x0C8D, r23	; 0x800c8d <tc_tccr5_ovf_callback+0x1>
    260a:	60 93 8c 0c 	sts	0x0C8C, r22	; 0x800c8c <tc_tccr5_ovf_callback>
    260e:	08 95       	ret

00002610 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    2610:	80 38       	cpi	r24, 0x80	; 128
    2612:	91 05       	cpc	r25, r1
    2614:	29 f4       	brne	.+10     	; 0x2620 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
    2616:	70 93 a3 0c 	sts	0x0CA3, r23	; 0x800ca3 <tc_tccr1_compa_callback+0x1>
    261a:	60 93 a2 0c 	sts	0x0CA2, r22	; 0x800ca2 <tc_tccr1_compa_callback>
    261e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    2620:	80 39       	cpi	r24, 0x90	; 144
    2622:	91 05       	cpc	r25, r1
    2624:	29 f4       	brne	.+10     	; 0x2630 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
    2626:	70 93 9b 0c 	sts	0x0C9B, r23	; 0x800c9b <tc_tccr3_compa_callback+0x1>
    262a:	60 93 9a 0c 	sts	0x0C9A, r22	; 0x800c9a <tc_tccr3_compa_callback>
    262e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    2630:	80 3a       	cpi	r24, 0xA0	; 160
    2632:	91 05       	cpc	r25, r1
    2634:	29 f4       	brne	.+10     	; 0x2640 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
    2636:	70 93 93 0c 	sts	0x0C93, r23	; 0x800c93 <tc_tccr4_compa_callback+0x1>
    263a:	60 93 92 0c 	sts	0x0C92, r22	; 0x800c92 <tc_tccr4_compa_callback>
    263e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    2640:	80 32       	cpi	r24, 0x20	; 32
    2642:	91 40       	sbci	r25, 0x01	; 1
    2644:	21 f4       	brne	.+8      	; 0x264e <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
    2646:	70 93 8b 0c 	sts	0x0C8B, r23	; 0x800c8b <tc_tccr5_compa_callback+0x1>
    264a:	60 93 8a 0c 	sts	0x0C8A, r22	; 0x800c8a <tc_tccr5_compa_callback>
    264e:	08 95       	ret

00002650 <sal_init>:

/**
 * @brief Cleans up the SAL/AES after STB has been finished
 */
void _sal_aes_clean_up(void)
{
    2650:	08 95       	ret

00002652 <sal_aes_exec>:
 * The function returns after the AES operation is finished.
 *
 * @param[in]  data  AES block to be en/decrypted
 */
void sal_aes_exec(uint8_t *data)
{
    2652:	fc 01       	movw	r30, r24
    2654:	9c 01       	movw	r18, r24
    2656:	20 5f       	subi	r18, 0xF0	; 240
    2658:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
		trx_reg_write(RG_AES_STATE, *data++);
    265a:	ae e3       	ldi	r26, 0x3E	; 62
    265c:	b1 e0       	ldi	r27, 0x01	; 1
    265e:	81 91       	ld	r24, Z+
    2660:	8c 93       	st	X, r24
 */
void sal_aes_exec(uint8_t *data)
{
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
    2662:	e2 17       	cp	r30, r18
    2664:	f3 07       	cpc	r31, r19
    2666:	d9 f7       	brne	.-10     	; 0x265e <sal_aes_exec+0xc>
		trx_reg_write(RG_AES_STATE, *data++);
	}

	trx_reg_write(RG_AES_CTRL,
    2668:	80 91 c6 0c 	lds	r24, 0x0CC6	; 0x800cc6 <mode_byte>
    266c:	80 68       	ori	r24, 0x80	; 128
    266e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__TEXT_REGION_LENGTH__+0x70013c>
			mode_byte | SR_MASK(SR_AES_REQUEST, AES_START));

	/* Wait for the operation to finish - poll RG_AES_RY. */
	while (!trx_bit_read(SR_AES_DONE)) {
    2672:	ed e3       	ldi	r30, 0x3D	; 61
    2674:	f1 e0       	ldi	r31, 0x01	; 1
    2676:	80 81       	ld	r24, Z
    2678:	80 ff       	sbrs	r24, 0
    267a:	fd cf       	rjmp	.-6      	; 0x2676 <sal_aes_exec+0x24>
	}
}
    267c:	08 95       	ret

0000267e <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	60 97       	sbiw	r28, 0x10	; 16
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	06 2f       	mov	r16, r22
    2698:	14 2f       	mov	r17, r20
	uint8_t i;

	if (key != NULL) {
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	c9 f0       	breq	.+50     	; 0x26d0 <sal_aes_setup+0x52>
		/* Setup key. */
		dec_initialized = false;
    269e:	10 92 c7 0c 	sts	0x0CC7, r1	; 0x800cc7 <dec_initialized>

		last_dir = AES_DIR_VOID;
    26a2:	22 e0       	ldi	r18, 0x02	; 2
    26a4:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <last_dir>

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    26a8:	20 e1       	ldi	r18, 0x10	; 16
    26aa:	fc 01       	movw	r30, r24
    26ac:	a6 eb       	ldi	r26, 0xB6	; 182
    26ae:	bc e0       	ldi	r27, 0x0C	; 12
    26b0:	01 90       	ld	r0, Z+
    26b2:	0d 92       	st	X+, r0
    26b4:	2a 95       	dec	r18
    26b6:	e1 f7       	brne	.-8      	; 0x26b0 <sal_aes_setup+0x32>
    26b8:	dc 01       	movw	r26, r24
    26ba:	ac 01       	movw	r20, r24
    26bc:	40 5f       	subi	r20, 0xF0	; 240
    26be:	5f 4f       	sbci	r21, 0xFF	; 255

		/* fill in key */
		for (i = 0; i < AES_BLOCKSIZE; ++i) {
			trx_reg_write(RG_AES_KEY, key[i]);
    26c0:	2f e3       	ldi	r18, 0x3F	; 63
    26c2:	31 e0       	ldi	r19, 0x01	; 1
    26c4:	9d 91       	ld	r25, X+
    26c6:	f9 01       	movw	r30, r18
    26c8:	90 83       	st	Z, r25

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);

		/* fill in key */
		for (i = 0; i < AES_BLOCKSIZE; ++i) {
    26ca:	4a 17       	cp	r20, r26
    26cc:	5b 07       	cpc	r21, r27
    26ce:	d1 f7       	brne	.-12     	; 0x26c4 <sal_aes_setup+0x46>
			trx_reg_write(RG_AES_KEY, key[i]);
		}
	}

	/* Set encryption direction. */
	switch (dir) {
    26d0:	11 23       	and	r17, r17
    26d2:	19 f0       	breq	.+6      	; 0x26da <sal_aes_setup+0x5c>
    26d4:	11 30       	cpi	r17, 0x01	; 1
    26d6:	89 f0       	breq	.+34     	; 0x26fa <sal_aes_setup+0x7c>
    26d8:	48 c0       	rjmp	.+144    	; 0x276a <sal_aes_setup+0xec>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    26da:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <last_dir>
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	79 f5       	brne	.+94     	; 0x2740 <sal_aes_setup+0xc2>
    26e2:	e6 eb       	ldi	r30, 0xB6	; 182
    26e4:	fc e0       	ldi	r31, 0x0C	; 12
    26e6:	26 ec       	ldi	r18, 0xC6	; 198
    26e8:	3c e0       	ldi	r19, 0x0C	; 12
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, enc_key[i]);
    26ea:	af e3       	ldi	r26, 0x3F	; 63
    26ec:	b1 e0       	ldi	r27, 0x01	; 1
    26ee:	81 91       	ld	r24, Z+
    26f0:	8c 93       	st	X, r24
		if (last_dir == AES_DIR_DECRYPT) {
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
    26f2:	2e 17       	cp	r18, r30
    26f4:	3f 07       	cpc	r19, r31
    26f6:	d9 f7       	brne	.-10     	; 0x26ee <sal_aes_setup+0x70>
    26f8:	23 c0       	rjmp	.+70     	; 0x2740 <sal_aes_setup+0xc2>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    26fa:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <last_dir>
    26fe:	81 30       	cpi	r24, 0x01	; 1
    2700:	b1 f1       	breq	.+108    	; 0x276e <sal_aes_setup+0xf0>
			if (!dec_initialized) {
    2702:	80 91 c7 0c 	lds	r24, 0x0CC7	; 0x800cc7 <dec_initialized>
    2706:	81 11       	cpse	r24, r1
    2708:	36 c0       	rjmp	.+108    	; 0x2776 <sal_aes_setup+0xf8>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				mode_byte = SR_MASK(SR_AES_MODE, AES_MODE_ECB) |
    270a:	10 92 c6 0c 	sts	0x0CC6, r1	; 0x800cc6 <mode_byte>
						SR_MASK(SR_AES_DIR,
						AES_DIR_ENCRYPT);
				trx_reg_write(RG_AES_CTRL, mode_byte);
    270e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__TEXT_REGION_LENGTH__+0x70013c>
				sal_aes_exec(dummy);
    2712:	ce 01       	movw	r24, r28
    2714:	01 96       	adiw	r24, 0x01	; 1
    2716:	9d df       	rcall	.-198    	; 0x2652 <sal_aes_exec>
    2718:	e6 ea       	ldi	r30, 0xA6	; 166
    271a:	fc e0       	ldi	r31, 0x0C	; 12
    271c:	26 eb       	ldi	r18, 0xB6	; 182
    271e:	3c e0       	ldi	r19, 0x0C	; 12

				/* Read last round key. */
				for (i = 0; i < AES_BLOCKSIZE; ++i) {
					dec_key[i]
						= trx_reg_read(RG_AES_KEY);
    2720:	af e3       	ldi	r26, 0x3F	; 63
    2722:	b1 e0       	ldi	r27, 0x01	; 1
    2724:	8c 91       	ld	r24, X
    2726:	81 93       	st	Z+, r24
						AES_DIR_ENCRYPT);
				trx_reg_write(RG_AES_CTRL, mode_byte);
				sal_aes_exec(dummy);

				/* Read last round key. */
				for (i = 0; i < AES_BLOCKSIZE; ++i) {
    2728:	2e 17       	cp	r18, r30
    272a:	3f 07       	cpc	r19, r31
    272c:	d9 f7       	brne	.-10     	; 0x2724 <sal_aes_setup+0xa6>
					dec_key[i]
						= trx_reg_read(RG_AES_KEY);
				}

				dec_initialized = true;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	80 93 c7 0c 	sts	0x0CC7, r24	; 0x800cc7 <dec_initialized>
    2734:	20 c0       	rjmp	.+64     	; 0x2776 <sal_aes_setup+0xf8>
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, dec_key[i]);
    2736:	81 91       	ld	r24, Z+
    2738:	8c 93       	st	X, r24

				dec_initialized = true;
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
    273a:	2e 17       	cp	r18, r30
    273c:	3f 07       	cpc	r19, r31
    273e:	d9 f7       	brne	.-10     	; 0x2736 <sal_aes_setup+0xb8>

	default:
		return false;
	}

	last_dir = dir;
    2740:	10 93 04 02 	sts	0x0204, r17	; 0x800204 <last_dir>

	/* Set encryption mode. */
	switch (enc_mode) {
    2744:	02 30       	cpi	r16, 0x02	; 2
    2746:	a8 f4       	brcc	.+42     	; 0x2772 <sal_aes_setup+0xf4>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
		mode_byte
			= SR_MASK(SR_AES_MODE, enc_mode) | SR_MASK(SR_AES_DIR,
    2748:	f0 e2       	ldi	r31, 0x20	; 32
    274a:	0f 9f       	mul	r16, r31
    274c:	c0 01       	movw	r24, r0
    274e:	11 24       	eor	r1, r1
    2750:	08 2f       	mov	r16, r24
    2752:	00 72       	andi	r16, 0x20	; 32
    2754:	11 0f       	add	r17, r17
    2756:	11 0f       	add	r17, r17
    2758:	11 0f       	add	r17, r17
    275a:	18 70       	andi	r17, 0x08	; 8
    275c:	10 2b       	or	r17, r16
    275e:	10 93 c6 0c 	sts	0x0CC6, r17	; 0x800cc6 <mode_byte>
		return (false);
	}

	/* set mode and direction */

	trx_reg_write(RG_AES_CTRL, mode_byte);
    2762:	10 93 3c 01 	sts	0x013C, r17	; 0x80013c <__TEXT_REGION_LENGTH__+0x70013c>

	return (true);
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	0d c0       	rjmp	.+26     	; 0x2784 <sal_aes_setup+0x106>

			break;
		}

	default:
		return false;
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	0b c0       	rjmp	.+22     	; 0x2784 <sal_aes_setup+0x106>
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	09 c0       	rjmp	.+18     	; 0x2784 <sal_aes_setup+0x106>
			= SR_MASK(SR_AES_MODE, enc_mode) | SR_MASK(SR_AES_DIR,
				dir);
		break;

	default:
		return (false);
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	07 c0       	rjmp	.+14     	; 0x2784 <sal_aes_setup+0x106>
    2776:	e6 ea       	ldi	r30, 0xA6	; 166
    2778:	fc e0       	ldi	r31, 0x0C	; 12
    277a:	26 eb       	ldi	r18, 0xB6	; 182
    277c:	3c e0       	ldi	r19, 0x0C	; 12
				dec_initialized = true;
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, dec_key[i]);
    277e:	af e3       	ldi	r26, 0x3F	; 63
    2780:	b1 e0       	ldi	r27, 0x01	; 1
    2782:	d9 cf       	rjmp	.-78     	; 0x2736 <sal_aes_setup+0xb8>
	/* set mode and direction */

	trx_reg_write(RG_AES_CTRL, mode_byte);

	return (true);
}
    2784:	60 96       	adiw	r28, 0x10	; 16
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	1f 91       	pop	r17
    2796:	0f 91       	pop	r16
    2798:	08 95       	ret

0000279a <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    279a:	fc 01       	movw	r30, r24
    279c:	9c 01       	movw	r18, r24
    279e:	20 5f       	subi	r18, 0xF0	; 240
    27a0:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
		*data++ = trx_reg_read(RG_AES_STATE);
    27a2:	ae e3       	ldi	r26, 0x3E	; 62
    27a4:	b1 e0       	ldi	r27, 0x01	; 1
    27a6:	8c 91       	ld	r24, X
    27a8:	81 93       	st	Z+, r24
 */
void sal_aes_read(uint8_t *data)
{
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
    27aa:	e2 17       	cp	r30, r18
    27ac:	f3 07       	cpc	r31, r19
    27ae:	d9 f7       	brne	.-10     	; 0x27a6 <sal_aes_read+0xc>
		*data++ = trx_reg_read(RG_AES_STATE);
	}
}
    27b0:	08 95       	ret

000027b2 <appDataConf>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
    27b2:	08 95       	ret

000027b4 <appSendData>:
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
    27b4:	80 e1       	ldi	r24, 0x10	; 16
    27b6:	83 b9       	out	0x03, r24	; 3
	/*if (appDataReqBusy || 0 == appUartBufferPtr) {
		return;
	}*/
	LED_Toggle(LED0);
	for(int i=0;i<sizeof(Yo);i++){
		appUartBuffer[i]=Yo[i];
    27b8:	e9 ea       	ldi	r30, 0xA9	; 169
    27ba:	fd e0       	ldi	r31, 0x0D	; 13
    27bc:	83 e5       	ldi	r24, 0x53	; 83
    27be:	80 83       	st	Z, r24
    27c0:	85 e6       	ldi	r24, 0x65	; 101
    27c2:	81 83       	std	Z+1, r24	; 0x01
    27c4:	92 e7       	ldi	r25, 0x72	; 114
    27c6:	92 83       	std	Z+2, r25	; 0x02
    27c8:	83 83       	std	Z+3, r24	; 0x03
    27ca:	14 82       	std	Z+4, r1	; 0x04
	}
	
	memcpy(appDataReqBuffer, appUartBuffer, sizeof(Yo));
    27cc:	85 e0       	ldi	r24, 0x05	; 5
    27ce:	a2 e1       	ldi	r26, 0x12	; 18
    27d0:	be e0       	ldi	r27, 0x0E	; 14
    27d2:	01 90       	ld	r0, Z+
    27d4:	0d 92       	st	X+, r0
    27d6:	8a 95       	dec	r24
    27d8:	e1 f7       	brne	.-8      	; 0x27d2 <appSendData+0x1e>

	appDataReq.dstAddr = 1 - APP_ADDR;
    27da:	eb e7       	ldi	r30, 0x7B	; 123
    27dc:	fe e0       	ldi	r31, 0x0E	; 14
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	96 83       	std	Z+6, r25	; 0x06
    27e4:	85 83       	std	Z+5, r24	; 0x05
	appDataReq.dstEndpoint = APP_ENDPOINT;
    27e6:	87 83       	std	Z+7, r24	; 0x07
	appDataReq.srcEndpoint = APP_ENDPOINT;
    27e8:	80 87       	std	Z+8, r24	; 0x08
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    27ea:	82 e0       	ldi	r24, 0x02	; 2
    27ec:	81 87       	std	Z+9, r24	; 0x09
	appDataReq.data = appDataReqBuffer;
    27ee:	82 e1       	ldi	r24, 0x12	; 18
    27f0:	9e e0       	ldi	r25, 0x0E	; 14
    27f2:	93 87       	std	Z+11, r25	; 0x0b
    27f4:	82 87       	std	Z+10, r24	; 0x0a
	appDataReq.size = sizeof(Yo);
    27f6:	85 e0       	ldi	r24, 0x05	; 5
    27f8:	84 87       	std	Z+12, r24	; 0x0c
	appDataReq.confirm = appDataConf;
    27fa:	89 ed       	ldi	r24, 0xD9	; 217
    27fc:	93 e1       	ldi	r25, 0x13	; 19
    27fe:	96 87       	std	Z+14, r25	; 0x0e
    2800:	85 87       	std	Z+13, r24	; 0x0d
	NWK_DataReq(&appDataReq);
    2802:	cf 01       	movw	r24, r30
    2804:	0e 94 25 03 	call	0x64a	; 0x64a <NWK_DataReq>

	appUartBufferPtr = 0;
    2808:	10 92 a8 0d 	sts	0x0DA8, r1	; 0x800da8 <appUartBufferPtr>
    280c:	08 95       	ret

0000280e <appTimerHandler>:
    280e:	80 e1       	ldi	r24, 0x10	; 16
    2810:	83 b9       	out	0x03, r24	; 3
/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
	LED_Toggle(LED0);
	appSendData();
    2812:	d0 cf       	rjmp	.-96     	; 0x27b4 <appSendData>
    2814:	08 95       	ret

00002816 <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    2816:	0f 93       	push	r16
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
	for (uint8_t i = 0; i < ind->size; i++) {
    281c:	dc 01       	movw	r26, r24
    281e:	19 96       	adiw	r26, 0x09	; 9
    2820:	2c 91       	ld	r18, X
    2822:	22 23       	and	r18, r18
    2824:	89 f0       	breq	.+34     	; 0x2848 <appDataInd+0x32>
    2826:	8c 01       	movw	r16, r24
    2828:	c0 e0       	ldi	r28, 0x00	; 0
		sio2host_putchar(ind->data[i]);
    282a:	d8 01       	movw	r26, r16
    282c:	17 96       	adiw	r26, 0x07	; 7
    282e:	ed 91       	ld	r30, X+
    2830:	fc 91       	ld	r31, X
    2832:	18 97       	sbiw	r26, 0x08	; 8
    2834:	ec 0f       	add	r30, r28
    2836:	f1 1d       	adc	r31, r1
    2838:	80 81       	ld	r24, Z
    283a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <sio2host_putchar>

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	for (uint8_t i = 0; i < ind->size; i++) {
    283e:	cf 5f       	subi	r28, 0xFF	; 255
    2840:	f8 01       	movw	r30, r16
    2842:	81 85       	ldd	r24, Z+9	; 0x09
    2844:	c8 17       	cp	r28, r24
    2846:	88 f3       	brcs	.-30     	; 0x282a <appDataInd+0x14>
		sio2host_putchar(ind->data[i]);
	}
	//LED_Toggle(LED0);
	return true;
}
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	cf 91       	pop	r28
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	08 95       	ret

00002852 <adc_rx>:
		count = 0;
	}
}

uint8_t adc_rx(uint8_t *data, uint8_t max_length)
{			
    2852:	dc 01       	movw	r26, r24

	uint8_t data_received = 0;
	if(adc_rx_buf_tail >= adc_rx_buf_head)
    2854:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <adc_rx_buf_tail>
    2858:	90 91 cb 0c 	lds	r25, 0x0CCB	; 0x800ccb <adc_rx_buf_head>
    285c:	89 17       	cp	r24, r25
    285e:	28 f0       	brcs	.+10     	; 0x286a <adc_rx+0x18>
	{
		adc_rx_count = adc_rx_buf_tail - adc_rx_buf_head;
    2860:	28 2f       	mov	r18, r24
    2862:	29 1b       	sub	r18, r25
    2864:	20 93 ca 0c 	sts	0x0CCA, r18	; 0x800cca <adc_rx_count>
    2868:	05 c0       	rjmp	.+10     	; 0x2874 <adc_rx+0x22>
	}
	else
	{
		adc_rx_count = adc_rx_buf_tail + (APP_RX_BUF_SIZE - adc_rx_buf_head);
    286a:	2d e6       	ldi	r18, 0x6D	; 109
    286c:	28 0f       	add	r18, r24
    286e:	29 1b       	sub	r18, r25
    2870:	20 93 ca 0c 	sts	0x0CCA, r18	; 0x800cca <adc_rx_count>
	}
	
	if (0 == adc_rx_count) {
    2874:	90 91 ca 0c 	lds	r25, 0x0CCA	; 0x800cca <adc_rx_count>
    2878:	99 23       	and	r25, r25
    287a:	31 f1       	breq	.+76     	; 0x28c8 <adc_rx+0x76>
		return 0;
	}

	if (APP_RX_BUF_SIZE <= adc_rx_count) {
    287c:	9d 36       	cpi	r25, 0x6D	; 109
    287e:	40 f0       	brcs	.+16     	; 0x2890 <adc_rx+0x3e>
		/*
		 * Bytes between head and tail are overwritten by new data.
		 * The oldest data in buffer is the one to which the tail is
		 * pointing. So reading operation should start from the tail.
		 */
		adc_rx_buf_head = adc_rx_buf_tail;
    2880:	80 93 cb 0c 	sts	0x0CCB, r24	; 0x800ccb <adc_rx_buf_head>
		/*
		 * This is a buffer overflow case. But still only the number of
		 * bytes equivalent to
		 * full buffer size are useful.
		 */
		adc_rx_count = APP_RX_BUF_SIZE;
    2884:	8d e6       	ldi	r24, 0x6D	; 109
    2886:	80 93 ca 0c 	sts	0x0CCA, r24	; 0x800cca <adc_rx_count>

		/* Bytes received is more than or equal to buffer. */
		if (APP_RX_BUF_SIZE <= max_length) {
    288a:	6d 36       	cpi	r22, 0x6D	; 109
    288c:	38 f4       	brcc	.+14     	; 0x289c <adc_rx+0x4a>
    288e:	03 c0       	rjmp	.+6      	; 0x2896 <adc_rx+0x44>
    2890:	96 17       	cp	r25, r22
    2892:	08 f4       	brcc	.+2      	; 0x2896 <adc_rx+0x44>
    2894:	69 2f       	mov	r22, r25
			max_length = adc_rx_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
    2896:	61 11       	cpse	r22, r1
    2898:	02 c0       	rjmp	.+4      	; 0x289e <adc_rx+0x4c>
    289a:	18 c0       	rjmp	.+48     	; 0x28cc <adc_rx+0x7a>
			 * Requested receive length (max_length) is more than
			 * the
			 * max size of receive buffer, but at max the full
			 * buffer can be read.
			 */
			max_length = APP_RX_BUF_SIZE;
    289c:	6d e6       	ldi	r22, 0x6D	; 109
    289e:	90 91 cb 0c 	lds	r25, 0x0CCB	; 0x800ccb <adc_rx_buf_head>
    28a2:	26 2f       	mov	r18, r22
	}

	data_received = max_length;
	while (max_length > 0) {
		/* Start to copy from head. */
		*data = adc_rx_buffer[adc_rx_buf_head];
    28a4:	e9 2f       	mov	r30, r25
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	e3 53       	subi	r30, 0x33	; 51
    28aa:	f3 4f       	sbci	r31, 0xF3	; 243
    28ac:	30 81       	ld	r19, Z
    28ae:	3d 93       	st	X+, r19
		data++;
		max_length--;
    28b0:	21 50       	subi	r18, 0x01	; 1
		if ((APP_RX_BUF_SIZE - 1) == adc_rx_buf_head) {
    28b2:	9c 36       	cpi	r25, 0x6C	; 108
    28b4:	11 f0       	breq	.+4      	; 0x28ba <adc_rx+0x68>
			adc_rx_buf_head = 0;
		}
		else
		{
			adc_rx_buf_head++;
    28b6:	9f 5f       	subi	r25, 0xFF	; 255
    28b8:	01 c0       	rjmp	.+2      	; 0x28bc <adc_rx+0x6a>
		/* Start to copy from head. */
		*data = adc_rx_buffer[adc_rx_buf_head];
		data++;
		max_length--;
		if ((APP_RX_BUF_SIZE - 1) == adc_rx_buf_head) {
			adc_rx_buf_head = 0;
    28ba:	90 e0       	ldi	r25, 0x00	; 0
			max_length = adc_rx_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
    28bc:	21 11       	cpse	r18, r1
    28be:	f2 cf       	rjmp	.-28     	; 0x28a4 <adc_rx+0x52>
    28c0:	90 93 cb 0c 	sts	0x0CCB, r25	; 0x800ccb <adc_rx_buf_head>
    28c4:	86 2f       	mov	r24, r22
    28c6:	08 95       	ret
	{
		adc_rx_count = adc_rx_buf_tail + (APP_RX_BUF_SIZE - adc_rx_buf_head);
	}
	
	if (0 == adc_rx_count) {
		return 0;
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	08 95       	ret
		else
		{
			adc_rx_buf_head++;
		}
	}
	return data_received;
    28cc:	80 e0       	ldi	r24, 0x00	; 0
}
    28ce:	08 95       	ret

000028d0 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
    28d0:	0e 94 c7 01 	call	0x38e	; 0x38e <sysclk_init>
	board_init();
    28d4:	0e 94 49 02 	call	0x492	; 0x492 <board_init>
	/*Initiates the wireless system*/
	SYS_Init();
    28d8:	03 d9       	rcall	.-3578   	; 0x1ae0 <SYS_Init>
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler, enum adc_voltage_reference vref, enum adc_mux_setting input, bool irq_e, bool adate )
{
	sysclk_enable_module( POWER_RED_REG0,  PRADC_bm );
    28da:	61 e0       	ldi	r22, 0x01	; 1
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	0e 94 e6 01 	call	0x3cc	; 0x3cc <sysclk_enable_module>
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    28e2:	ea e7       	ldi	r30, 0x7A	; 122
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	87 e8       	ldi	r24, 0x87	; 135
    28e8:	80 83       	st	Z, r24
	if(irq_e){
		ADCSRA |= (1 << ADIE); //Enable ADC interrupt
    28ea:	80 81       	ld	r24, Z
    28ec:	88 60       	ori	r24, 0x08	; 8
    28ee:	80 83       	st	Z, r24
}

/*  \brief Enable ADC Auto Trigger */
static inline void adc_enable_autotrigger(void)
{
	ADCSRA |= (1 << ADATE);
    28f0:	80 81       	ld	r24, Z
    28f2:	80 62       	ori	r24, 0x20	; 32
    28f4:	80 83       	st	Z, r24
 */
static inline void adc_set_voltage_reference(enum adc_voltage_reference vref)
{
	uint8_t temp;

	temp = (ADMUX & ~(ADC_VREF_MASK));
    28f6:	ec e7       	ldi	r30, 0x7C	; 124
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
	temp |= (uint8_t)vref;
    28fc:	80 6c       	ori	r24, 0xC0	; 192
	ADMUX = temp;
    28fe:	80 83       	st	Z, r24
 */
static inline void adc_set_mux(enum adc_mux_setting input)
{
	uint8_t temp;

	temp = (ADMUX & ~(ADC_MUX_MASK));
    2900:	80 81       	ld	r24, Z

#if defined(MUX5)
	/* if bit 6 (MUX5) is set: */
	if (input & (1 << 5)) {
		ADCSRB = (1 << MUX5);
    2902:	98 e0       	ldi	r25, 0x08	; 8
    2904:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	} else {
		ADCSRB &= ~(1 << MUX5);
	}

	/* mask out MUX5 for ADMUX. */
	temp |= ((uint8_t)input & ADC_MUX_MASK);
    2908:	80 7e       	andi	r24, 0xE0	; 224
    290a:	89 60       	ori	r24, 0x09	; 9
#else
	temp |= (uint8_t)input;
#endif
	ADMUX = temp;
    290c:	80 83       	st	Z, r24
	/*Initiates internal ADC, select temp sensor to test 
	ADC functionality. By default, cont conversions*/
	adc_init( ADC_PRESCALER_DIV128, ADC_VREF_1V6, ADC_MUX_TEMP_SENSOR, true, true );
	cpu_irq_enable();
    290e:	78 94       	sei
	
	PHY_SetRxState(true);

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    2910:	0f 2e       	mov	r0, r31
    2912:	fc e8       	ldi	r31, 0x8C	; 140
    2914:	cf 2e       	mov	r12, r31
    2916:	fe e0       	ldi	r31, 0x0E	; 14
    2918:	df 2e       	mov	r13, r31
    291a:	f0 2d       	mov	r31, r0
    291c:	0f 2e       	mov	r0, r31
    291e:	f4 e1       	ldi	r31, 0x14	; 20
    2920:	8f 2e       	mov	r8, r31
    2922:	91 2c       	mov	r9, r1
    2924:	a1 2c       	mov	r10, r1
    2926:	b1 2c       	mov	r11, r1
    2928:	f0 2d       	mov	r31, r0
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
	appTimer.handler = appTimerHandler;
    292a:	0f 2e       	mov	r0, r31
    292c:	f7 e0       	ldi	r31, 0x07	; 7
    292e:	6f 2e       	mov	r6, r31
    2930:	f4 e1       	ldi	r31, 0x14	; 20
    2932:	7f 2e       	mov	r7, r31
    2934:	f0 2d       	mov	r31, r0
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 0;

	// Check if button is high or low for the moment
	uint8_t current_state = (~PINE & (1<<PORTE4)) != 0;
    2936:	55 24       	eor	r5, r5
    2938:	53 94       	inc	r5
    293a:	41 2c       	mov	r4, r1
    293c:	8c b1       	in	r24, 0x0c	; 12
    293e:	95 2d       	mov	r25, r5
    2940:	28 2f       	mov	r18, r24
    2942:	20 71       	andi	r18, 0x10	; 16
    2944:	84 fd       	sbrc	r24, 4
    2946:	94 2d       	mov	r25, r4
	if(current_state != button_state) {
    2948:	80 91 c9 0c 	lds	r24, 0x0CC9	; 0x800cc9 <button_state.3468>
    294c:	98 17       	cp	r25, r24
    294e:	81 f0       	breq	.+32     	; 0x2970 <main+0xa0>
		// Button state is about to be changed, increase counter
		count++;
    2950:	80 91 c8 0c 	lds	r24, 0x0CC8	; 0x800cc8 <count.3467>
    2954:	8f 5f       	subi	r24, 0xFF	; 255
    2956:	80 93 c8 0c 	sts	0x0CC8, r24	; 0x800cc8 <count.3467>
		if(count >= 4) {
    295a:	84 30       	cpi	r24, 0x04	; 4
    295c:	58 f0       	brcs	.+22     	; 0x2974 <main+0xa4>
			// The button have not bounced for four checks, change state
			button_state = current_state;
    295e:	90 93 c9 0c 	sts	0x0CC9, r25	; 0x800cc9 <button_state.3468>
			// If the button was pressed (not released), tell main so
			if(current_state != 0) {
    2962:	21 11       	cpse	r18, r1
    2964:	02 c0       	rjmp	.+4      	; 0x296a <main+0x9a>
				button_down = 1;
    2966:	50 92 d3 0e 	sts	0x0ED3, r5	; 0x800ed3 <button_down>
			}
			count = 0;
    296a:	40 92 c8 0c 	sts	0x0CC8, r4	; 0x800cc8 <count.3467>
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <main+0xa4>
		}
	}
	else{
		// Reset counter
		count = 0;
    2970:	40 92 c8 0c 	sts	0x0CC8, r4	; 0x800cc8 <count.3467>
	cpu_irq_enable();

	while (1)
	{
		debounce();
		if ( button_down ){
    2974:	80 91 d3 0e 	lds	r24, 0x0ED3	; 0x800ed3 <button_down>
    2978:	88 23       	and	r24, r24
    297a:	19 f0       	breq	.+6      	; 0x2982 <main+0xb2>
			// Clear flag
			button_down = 0;
    297c:	40 92 d3 0e 	sts	0x0ED3, r4	; 0x800ed3 <button_down>
			//adc_start_conversion();
			appSendData();
		}
		SYS_TaskHandler();
    2980:	19 df       	rcall	.-462    	; 0x27b4 <appSendData>
    2982:	b4 d8       	rcall	.-3736   	; 0x1aec <SYS_TaskHandler>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{	
	switch (appState) {
    2984:	80 91 99 0e 	lds	r24, 0x0E99	; 0x800e99 <appState>
    2988:	81 11       	cpse	r24, r1
    298a:	23 c0       	rjmp	.+70     	; 0x29d2 <main+0x102>
}
/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
	NWK_SetAddr(APP_ADDR);
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
    2994:	87 e6       	ldi	r24, 0x67	; 103
    2996:	95 e4       	ldi	r25, 0x45	; 69
    2998:	0e 94 e7 02 	call	0x5ce	; 0x5ce <NWK_SetPanId>
	PHY_SetChannel(APP_CHANNEL);
    299c:	8f e0       	ldi	r24, 0x0F	; 15
    299e:	0e 94 92 0c 	call	0x1924	; 0x1924 <PHY_SetChannel>
	
	PHY_SetRxState(true);
    29a2:	85 2d       	mov	r24, r5
    29a4:	0e 94 8e 0c 	call	0x191c	; 0x191c <PHY_SetRxState>

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    29a8:	6b e0       	ldi	r22, 0x0B	; 11
    29aa:	74 e1       	ldi	r23, 0x14	; 20
    29ac:	85 2d       	mov	r24, r5
    29ae:	0e 94 ee 02 	call	0x5dc	; 0x5dc <NWK_OpenEndpoint>

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    29b2:	d6 01       	movw	r26, r12
    29b4:	16 96       	adiw	r26, 0x06	; 6
    29b6:	8d 92       	st	X+, r8
    29b8:	9d 92       	st	X+, r9
    29ba:	ad 92       	st	X+, r10
    29bc:	bc 92       	st	X, r11
    29be:	19 97       	sbiw	r26, 0x09	; 9
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
    29c0:	1a 96       	adiw	r26, 0x0a	; 10
    29c2:	1c 92       	st	X, r1
    29c4:	1a 97       	sbiw	r26, 0x0a	; 10
	appTimer.handler = appTimerHandler;
    29c6:	1c 96       	adiw	r26, 0x0c	; 12
    29c8:	7c 92       	st	X, r7
    29ca:	6e 92       	st	-X, r6
    29cc:	1b 97       	sbiw	r26, 0x0b	; 11
{	
	switch (appState) {
	case APP_STATE_INITIAL:
	{
		appInit();
		appState = APP_STATE_IDLE;
    29ce:	50 92 99 0e 	sts	0x0E99, r5	; 0x800e99 <appState>
	
	/* We can send a maximum of 109 bytes per packet. If each sample
	is 8 bits in length, we can send up to 109 samples per package
	thus we implement a buffer to store the 109 samples before
	transmitting the entire packet.*/
	adc_rx_length = adc_rx( adc_data, APP_RX_BUF_SIZE );
    29d2:	6d e6       	ldi	r22, 0x6D	; 109
    29d4:	8a e3       	ldi	r24, 0x3A	; 58
    29d6:	9d e0       	ldi	r25, 0x0D	; 13
    29d8:	3c df       	rcall	.-392    	; 0x2852 <adc_rx>
    29da:	80 93 a7 0d 	sts	0x0DA7, r24	; 0x800da7 <adc_rx_length>
	if (adc_rx_length) {
    29de:	88 23       	and	r24, r24
    29e0:	09 f4       	brne	.+2      	; 0x29e4 <main+0x114>
    29e2:	ac cf       	rjmp	.-168    	; 0x293c <main+0x6c>
    29e4:	ca e3       	ldi	r28, 0x3A	; 58
    29e6:	dd e0       	ldi	r29, 0x0D	; 13
    29e8:	00 e0       	ldi	r16, 0x00	; 0
    29ea:	10 e0       	ldi	r17, 0x00	; 0
    29ec:	7e 01       	movw	r14, r28

		for (uint16_t i = 0; i < adc_rx_length; i++) {
			sio2host_putchar(adc_data[i]);
    29ee:	88 81       	ld	r24, Y
    29f0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <sio2host_putchar>
			if (appUartBufferPtr == sizeof(appUartBuffer)) {
    29f4:	80 91 a8 0d 	lds	r24, 0x0DA8	; 0x800da8 <appUartBufferPtr>
    29f8:	89 36       	cpi	r24, 0x69	; 105
 
				appSendData();
    29fa:	09 f4       	brne	.+2      	; 0x29fe <main+0x12e>
    29fc:	db de       	rcall	.-586    	; 0x27b4 <appSendData>
			}

			if (appUartBufferPtr < sizeof(appUartBuffer)) {
    29fe:	e0 91 a8 0d 	lds	r30, 0x0DA8	; 0x800da8 <appUartBufferPtr>
    2a02:	e9 36       	cpi	r30, 0x69	; 105
    2a04:	50 f4       	brcc	.+20     	; 0x2a1a <main+0x14a>
				appUartBuffer[appUartBufferPtr++] = adc_data[i];
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	8e 0f       	add	r24, r30
    2a0a:	80 93 a8 0d 	sts	0x0DA8, r24	; 0x800da8 <appUartBufferPtr>
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	e7 55       	subi	r30, 0x57	; 87
    2a12:	f2 4f       	sbci	r31, 0xF2	; 242
    2a14:	d7 01       	movw	r26, r14
    2a16:	8c 91       	ld	r24, X
    2a18:	80 83       	st	Z, r24
	thus we implement a buffer to store the 109 samples before
	transmitting the entire packet.*/
	adc_rx_length = adc_rx( adc_data, APP_RX_BUF_SIZE );
	if (adc_rx_length) {

		for (uint16_t i = 0; i < adc_rx_length; i++) {
    2a1a:	0f 5f       	subi	r16, 0xFF	; 255
    2a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1e:	21 96       	adiw	r28, 0x01	; 1
    2a20:	80 91 a7 0d 	lds	r24, 0x0DA7	; 0x800da7 <adc_rx_length>
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	08 17       	cp	r16, r24
			if (appUartBufferPtr < sizeof(appUartBuffer)) {
				appUartBuffer[appUartBufferPtr++] = adc_data[i];
			}
		}

		SYS_TimerStop(&appTimer);
    2a28:	19 07       	cpc	r17, r25
    2a2a:	00 f3       	brcs	.-64     	; 0x29ec <main+0x11c>
    2a2c:	c6 01       	movw	r24, r12
		SYS_TimerStart(&appTimer);
    2a2e:	e5 d8       	rcall	.-3638   	; 0x1bfa <SYS_TimerStop>
    2a30:	c6 01       	movw	r24, r12
    2a32:	3a d9       	rcall	.-3468   	; 0x1ca8 <SYS_TimerStart>
    2a34:	83 cf       	rjmp	.-250    	; 0x293c <main+0x6c>

00002a36 <__vector_29>:
		APP_TaskHandler();
	}

}
/* Receive the continuous conversion ADC samples, store them into buffer*/
ISR( ADC_vect ){
    2a36:	1f 92       	push	r1
    2a38:	0f 92       	push	r0
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	0f 92       	push	r0
    2a3e:	11 24       	eor	r1, r1
    2a40:	0b b6       	in	r0, 0x3b	; 59
    2a42:	0f 92       	push	r0
    2a44:	8f 93       	push	r24
    2a46:	9f 93       	push	r25
    2a48:	ef 93       	push	r30
    2a4a:	ff 93       	push	r31

	uint8_t temp;
	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    2a4c:	f8 94       	cli
	temp = ADCH;
    2a4e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	adc_rx_buffer[adc_rx_buf_tail] = temp;
    2a52:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <adc_rx_buf_tail>
    2a56:	e8 2f       	mov	r30, r24
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	e3 53       	subi	r30, 0x33	; 51
    2a5c:	f3 4f       	sbci	r31, 0xF3	; 243
    2a5e:	90 83       	st	Z, r25

	if ((APP_RX_BUF_SIZE - 1) == adc_rx_buf_tail) {
    2a60:	8c 36       	cpi	r24, 0x6C	; 108
    2a62:	19 f4       	brne	.+6      	; 0x2a6a <__vector_29+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		adc_rx_buf_tail = 0x00;
    2a64:	10 92 cc 0c 	sts	0x0CCC, r1	; 0x800ccc <adc_rx_buf_tail>
    2a68:	03 c0       	rjmp	.+6      	; 0x2a70 <__vector_29+0x3a>
	} else {
		adc_rx_buf_tail++;
    2a6a:	8f 5f       	subi	r24, 0xFF	; 255
    2a6c:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <adc_rx_buf_tail>
	}

	cpu_irq_enable();
    2a70:	78 94       	sei

}
    2a72:	ff 91       	pop	r31
    2a74:	ef 91       	pop	r30
    2a76:	9f 91       	pop	r25
    2a78:	8f 91       	pop	r24
    2a7a:	0f 90       	pop	r0
    2a7c:	0b be       	out	0x3b, r0	; 59
    2a7e:	0f 90       	pop	r0
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	0f 90       	pop	r0
    2a84:	1f 90       	pop	r1
    2a86:	18 95       	reti

00002a88 <__mulsi3>:
    2a88:	db 01       	movw	r26, r22
    2a8a:	8f 93       	push	r24
    2a8c:	9f 93       	push	r25
    2a8e:	41 d0       	rcall	.+130    	; 0x2b12 <__muluhisi3>
    2a90:	bf 91       	pop	r27
    2a92:	af 91       	pop	r26
    2a94:	a2 9f       	mul	r26, r18
    2a96:	80 0d       	add	r24, r0
    2a98:	91 1d       	adc	r25, r1
    2a9a:	a3 9f       	mul	r26, r19
    2a9c:	90 0d       	add	r25, r0
    2a9e:	b2 9f       	mul	r27, r18
    2aa0:	90 0d       	add	r25, r0
    2aa2:	11 24       	eor	r1, r1
    2aa4:	08 95       	ret

00002aa6 <__udivmodhi4>:
    2aa6:	aa 1b       	sub	r26, r26
    2aa8:	bb 1b       	sub	r27, r27
    2aaa:	51 e1       	ldi	r21, 0x11	; 17
    2aac:	07 c0       	rjmp	.+14     	; 0x2abc <__udivmodhi4_ep>

00002aae <__udivmodhi4_loop>:
    2aae:	aa 1f       	adc	r26, r26
    2ab0:	bb 1f       	adc	r27, r27
    2ab2:	a6 17       	cp	r26, r22
    2ab4:	b7 07       	cpc	r27, r23
    2ab6:	10 f0       	brcs	.+4      	; 0x2abc <__udivmodhi4_ep>
    2ab8:	a6 1b       	sub	r26, r22
    2aba:	b7 0b       	sbc	r27, r23

00002abc <__udivmodhi4_ep>:
    2abc:	88 1f       	adc	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	5a 95       	dec	r21
    2ac2:	a9 f7       	brne	.-22     	; 0x2aae <__udivmodhi4_loop>
    2ac4:	80 95       	com	r24
    2ac6:	90 95       	com	r25
    2ac8:	bc 01       	movw	r22, r24
    2aca:	cd 01       	movw	r24, r26
    2acc:	08 95       	ret

00002ace <__udivmodsi4>:
    2ace:	a1 e2       	ldi	r26, 0x21	; 33
    2ad0:	1a 2e       	mov	r1, r26
    2ad2:	aa 1b       	sub	r26, r26
    2ad4:	bb 1b       	sub	r27, r27
    2ad6:	fd 01       	movw	r30, r26
    2ad8:	0d c0       	rjmp	.+26     	; 0x2af4 <__udivmodsi4_ep>

00002ada <__udivmodsi4_loop>:
    2ada:	aa 1f       	adc	r26, r26
    2adc:	bb 1f       	adc	r27, r27
    2ade:	ee 1f       	adc	r30, r30
    2ae0:	ff 1f       	adc	r31, r31
    2ae2:	a2 17       	cp	r26, r18
    2ae4:	b3 07       	cpc	r27, r19
    2ae6:	e4 07       	cpc	r30, r20
    2ae8:	f5 07       	cpc	r31, r21
    2aea:	20 f0       	brcs	.+8      	; 0x2af4 <__udivmodsi4_ep>
    2aec:	a2 1b       	sub	r26, r18
    2aee:	b3 0b       	sbc	r27, r19
    2af0:	e4 0b       	sbc	r30, r20
    2af2:	f5 0b       	sbc	r31, r21

00002af4 <__udivmodsi4_ep>:
    2af4:	66 1f       	adc	r22, r22
    2af6:	77 1f       	adc	r23, r23
    2af8:	88 1f       	adc	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	1a 94       	dec	r1
    2afe:	69 f7       	brne	.-38     	; 0x2ada <__udivmodsi4_loop>
    2b00:	60 95       	com	r22
    2b02:	70 95       	com	r23
    2b04:	80 95       	com	r24
    2b06:	90 95       	com	r25
    2b08:	9b 01       	movw	r18, r22
    2b0a:	ac 01       	movw	r20, r24
    2b0c:	bd 01       	movw	r22, r26
    2b0e:	cf 01       	movw	r24, r30
    2b10:	08 95       	ret

00002b12 <__muluhisi3>:
    2b12:	09 d0       	rcall	.+18     	; 0x2b26 <__umulhisi3>
    2b14:	a5 9f       	mul	r26, r21
    2b16:	90 0d       	add	r25, r0
    2b18:	b4 9f       	mul	r27, r20
    2b1a:	90 0d       	add	r25, r0
    2b1c:	a4 9f       	mul	r26, r20
    2b1e:	80 0d       	add	r24, r0
    2b20:	91 1d       	adc	r25, r1
    2b22:	11 24       	eor	r1, r1
    2b24:	08 95       	ret

00002b26 <__umulhisi3>:
    2b26:	a2 9f       	mul	r26, r18
    2b28:	b0 01       	movw	r22, r0
    2b2a:	b3 9f       	mul	r27, r19
    2b2c:	c0 01       	movw	r24, r0
    2b2e:	a3 9f       	mul	r26, r19
    2b30:	70 0d       	add	r23, r0
    2b32:	81 1d       	adc	r24, r1
    2b34:	11 24       	eor	r1, r1
    2b36:	91 1d       	adc	r25, r1
    2b38:	b2 9f       	mul	r27, r18
    2b3a:	70 0d       	add	r23, r0
    2b3c:	81 1d       	adc	r24, r1
    2b3e:	11 24       	eor	r1, r1
    2b40:	91 1d       	adc	r25, r1
    2b42:	08 95       	ret

00002b44 <do_rand>:
    2b44:	8f 92       	push	r8
    2b46:	9f 92       	push	r9
    2b48:	af 92       	push	r10
    2b4a:	bf 92       	push	r11
    2b4c:	cf 92       	push	r12
    2b4e:	df 92       	push	r13
    2b50:	ef 92       	push	r14
    2b52:	ff 92       	push	r15
    2b54:	cf 93       	push	r28
    2b56:	df 93       	push	r29
    2b58:	ec 01       	movw	r28, r24
    2b5a:	68 81       	ld	r22, Y
    2b5c:	79 81       	ldd	r23, Y+1	; 0x01
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	9b 81       	ldd	r25, Y+3	; 0x03
    2b62:	61 15       	cp	r22, r1
    2b64:	71 05       	cpc	r23, r1
    2b66:	81 05       	cpc	r24, r1
    2b68:	91 05       	cpc	r25, r1
    2b6a:	21 f4       	brne	.+8      	; 0x2b74 <do_rand+0x30>
    2b6c:	64 e2       	ldi	r22, 0x24	; 36
    2b6e:	79 ed       	ldi	r23, 0xD9	; 217
    2b70:	8b e5       	ldi	r24, 0x5B	; 91
    2b72:	97 e0       	ldi	r25, 0x07	; 7
    2b74:	2d e1       	ldi	r18, 0x1D	; 29
    2b76:	33 ef       	ldi	r19, 0xF3	; 243
    2b78:	41 e0       	ldi	r20, 0x01	; 1
    2b7a:	50 e0       	ldi	r21, 0x00	; 0
    2b7c:	41 d0       	rcall	.+130    	; 0x2c00 <__divmodsi4>
    2b7e:	49 01       	movw	r8, r18
    2b80:	5a 01       	movw	r10, r20
    2b82:	9b 01       	movw	r18, r22
    2b84:	ac 01       	movw	r20, r24
    2b86:	a7 ea       	ldi	r26, 0xA7	; 167
    2b88:	b1 e4       	ldi	r27, 0x41	; 65
    2b8a:	c3 df       	rcall	.-122    	; 0x2b12 <__muluhisi3>
    2b8c:	6b 01       	movw	r12, r22
    2b8e:	7c 01       	movw	r14, r24
    2b90:	ac ee       	ldi	r26, 0xEC	; 236
    2b92:	b4 ef       	ldi	r27, 0xF4	; 244
    2b94:	a5 01       	movw	r20, r10
    2b96:	94 01       	movw	r18, r8
    2b98:	51 d0       	rcall	.+162    	; 0x2c3c <__mulohisi3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	8c 0d       	add	r24, r12
    2ba0:	9d 1d       	adc	r25, r13
    2ba2:	ae 1d       	adc	r26, r14
    2ba4:	bf 1d       	adc	r27, r15
    2ba6:	b7 ff       	sbrs	r27, 7
    2ba8:	03 c0       	rjmp	.+6      	; 0x2bb0 <do_rand+0x6c>
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	a1 09       	sbc	r26, r1
    2bae:	b0 48       	sbci	r27, 0x80	; 128
    2bb0:	88 83       	st	Y, r24
    2bb2:	99 83       	std	Y+1, r25	; 0x01
    2bb4:	aa 83       	std	Y+2, r26	; 0x02
    2bb6:	bb 83       	std	Y+3, r27	; 0x03
    2bb8:	9f 77       	andi	r25, 0x7F	; 127
    2bba:	df 91       	pop	r29
    2bbc:	cf 91       	pop	r28
    2bbe:	ff 90       	pop	r15
    2bc0:	ef 90       	pop	r14
    2bc2:	df 90       	pop	r13
    2bc4:	cf 90       	pop	r12
    2bc6:	bf 90       	pop	r11
    2bc8:	af 90       	pop	r10
    2bca:	9f 90       	pop	r9
    2bcc:	8f 90       	pop	r8
    2bce:	08 95       	ret

00002bd0 <rand_r>:
    2bd0:	b9 cf       	rjmp	.-142    	; 0x2b44 <do_rand>

00002bd2 <rand>:
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	92 e0       	ldi	r25, 0x02	; 2
    2bd6:	b6 cf       	rjmp	.-148    	; 0x2b44 <do_rand>

00002bd8 <srand>:
    2bd8:	a0 e0       	ldi	r26, 0x00	; 0
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    2be0:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    2be4:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    2be8:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    2bec:	08 95       	ret

00002bee <memcpy>:
    2bee:	fb 01       	movw	r30, r22
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <memcpy+0xa>
    2bf4:	01 90       	ld	r0, Z+
    2bf6:	0d 92       	st	X+, r0
    2bf8:	41 50       	subi	r20, 0x01	; 1
    2bfa:	50 40       	sbci	r21, 0x00	; 0
    2bfc:	d8 f7       	brcc	.-10     	; 0x2bf4 <memcpy+0x6>
    2bfe:	08 95       	ret

00002c00 <__divmodsi4>:
    2c00:	05 2e       	mov	r0, r21
    2c02:	97 fb       	bst	r25, 7
    2c04:	16 f4       	brtc	.+4      	; 0x2c0a <__divmodsi4+0xa>
    2c06:	00 94       	com	r0
    2c08:	0f d0       	rcall	.+30     	; 0x2c28 <__negsi2>
    2c0a:	57 fd       	sbrc	r21, 7
    2c0c:	05 d0       	rcall	.+10     	; 0x2c18 <__divmodsi4_neg2>
    2c0e:	5f df       	rcall	.-322    	; 0x2ace <__udivmodsi4>
    2c10:	07 fc       	sbrc	r0, 7
    2c12:	02 d0       	rcall	.+4      	; 0x2c18 <__divmodsi4_neg2>
    2c14:	46 f4       	brtc	.+16     	; 0x2c26 <__divmodsi4_exit>
    2c16:	08 c0       	rjmp	.+16     	; 0x2c28 <__negsi2>

00002c18 <__divmodsi4_neg2>:
    2c18:	50 95       	com	r21
    2c1a:	40 95       	com	r20
    2c1c:	30 95       	com	r19
    2c1e:	21 95       	neg	r18
    2c20:	3f 4f       	sbci	r19, 0xFF	; 255
    2c22:	4f 4f       	sbci	r20, 0xFF	; 255
    2c24:	5f 4f       	sbci	r21, 0xFF	; 255

00002c26 <__divmodsi4_exit>:
    2c26:	08 95       	ret

00002c28 <__negsi2>:
    2c28:	90 95       	com	r25
    2c2a:	80 95       	com	r24
    2c2c:	70 95       	com	r23
    2c2e:	61 95       	neg	r22
    2c30:	7f 4f       	sbci	r23, 0xFF	; 255
    2c32:	8f 4f       	sbci	r24, 0xFF	; 255
    2c34:	9f 4f       	sbci	r25, 0xFF	; 255
    2c36:	08 95       	ret

00002c38 <__mulshisi3>:
    2c38:	b7 ff       	sbrs	r27, 7
    2c3a:	6b cf       	rjmp	.-298    	; 0x2b12 <__muluhisi3>

00002c3c <__mulohisi3>:
    2c3c:	6a df       	rcall	.-300    	; 0x2b12 <__muluhisi3>
    2c3e:	82 1b       	sub	r24, r18
    2c40:	93 0b       	sbc	r25, r19
    2c42:	08 95       	ret

00002c44 <_exit>:
    2c44:	f8 94       	cli

00002c46 <__stop_program>:
    2c46:	ff cf       	rjmp	.-2      	; 0x2c46 <__stop_program>
